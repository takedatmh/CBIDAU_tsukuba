public class java.nio.charset.CoderResult extends java.lang.Object
{
    private static final int CR_UNDERFLOW;
    private static final int CR_OVERFLOW;
    private static final int CR_ERROR_MIN;
    private static final int CR_MALFORMED;
    private static final int CR_UNMAPPABLE;
    private static final java.lang.String[] names;
    private final int type;
    private final int length;
    public static final java.nio.charset.CoderResult UNDERFLOW;
    public static final java.nio.charset.CoderResult OVERFLOW;
    private static java.nio.charset.CoderResult$Cache malformedCache;
    private static java.nio.charset.CoderResult$Cache unmappableCache;
    static final boolean $assertionsDisabled;

    private void <init>(int, int)
    {
        java.nio.charset.CoderResult r0;
        int i0, i1;

        r0 := @this: java.nio.charset.CoderResult;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.nio.charset.CoderResult: int type> = i0;
        r0.<java.nio.charset.CoderResult: int length> = i1;
        return;
    }

    public java.lang.String toString()
    {
        java.nio.charset.CoderResult r0;
        java.lang.String[] $r1;
        java.lang.String r2, $r8;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.nio.charset.CoderResult;
        $r1 = <java.nio.charset.CoderResult: java.lang.String[] names>;
        $i0 = r0.<java.nio.charset.CoderResult: int type>;
        r2 = $r1[$i0];
        $z0 = virtualinvoke r0.<java.nio.charset.CoderResult: boolean isError()>();
        if $z0 == 0 goto label0;

        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $i1 = r0.<java.nio.charset.CoderResult: int length>;
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label1;

     label0:
        $r8 = r2;

     label1:
        return $r8;
    }

    public boolean isUnderflow()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;
        $i0 = r0.<java.nio.charset.CoderResult: int type>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isOverflow()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;
        $i0 = r0.<java.nio.charset.CoderResult: int type>;
        if $i0 != 1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isError()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;
        $i0 = r0.<java.nio.charset.CoderResult: int type>;
        if $i0 < 2 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isMalformed()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;
        $i0 = r0.<java.nio.charset.CoderResult: int type>;
        if $i0 != 2 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isUnmappable()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;
        $i0 = r0.<java.nio.charset.CoderResult: int type>;
        if $i0 != 3 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int length()
    {
        java.nio.charset.CoderResult r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;
        int $i0;

        r0 := @this: java.nio.charset.CoderResult;
        $z0 = virtualinvoke r0.<java.nio.charset.CoderResult: boolean isError()>();
        if $z0 != 0 goto label0;

        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;

     label0:
        $i0 = r0.<java.nio.charset.CoderResult: int length>;
        return $i0;
    }

    public static java.nio.charset.CoderResult malformedForLength(int)
    {
        int i0;
        java.nio.charset.CoderResult$Cache $r0;
        java.nio.charset.CoderResult $r1;

        i0 := @parameter0: int;
        $r0 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult$Cache malformedCache>;
        $r1 = staticinvoke <java.nio.charset.CoderResult$Cache: java.nio.charset.CoderResult access$200(java.nio.charset.CoderResult$Cache,int)>($r0, i0);
        return $r1;
    }

    public static java.nio.charset.CoderResult unmappableForLength(int)
    {
        int i0;
        java.nio.charset.CoderResult$Cache $r0;
        java.nio.charset.CoderResult $r1;

        i0 := @parameter0: int;
        $r0 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult$Cache unmappableCache>;
        $r1 = staticinvoke <java.nio.charset.CoderResult$Cache: java.nio.charset.CoderResult access$200(java.nio.charset.CoderResult$Cache,int)>($r0, i0);
        return $r1;
    }

    public void throwException() throws java.nio.charset.CharacterCodingException
    {
        java.nio.charset.CoderResult r0;
        int $i0, $i1, $i2;
        java.nio.BufferUnderflowException $r1;
        java.nio.BufferOverflowException $r2;
        java.nio.charset.MalformedInputException $r3;
        java.nio.charset.UnmappableCharacterException $r4;
        boolean $z0;
        java.lang.AssertionError $r5;

        r0 := @this: java.nio.charset.CoderResult;
        $i0 = r0.<java.nio.charset.CoderResult: int type>;
        tableswitch($i0)
        {
            case 0: goto label0;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label0:
        $r1 = new java.nio.BufferUnderflowException;
        specialinvoke $r1.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r1;

     label1:
        $r2 = new java.nio.BufferOverflowException;
        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();
        throw $r2;

     label2:
        $r3 = new java.nio.charset.MalformedInputException;
        $i1 = r0.<java.nio.charset.CoderResult: int length>;
        specialinvoke $r3.<java.nio.charset.MalformedInputException: void <init>(int)>($i1);
        throw $r3;

     label3:
        $r4 = new java.nio.charset.UnmappableCharacterException;
        $i2 = r0.<java.nio.charset.CoderResult: int length>;
        specialinvoke $r4.<java.nio.charset.UnmappableCharacterException: void <init>(int)>($i2);
        throw $r4;

     label4:
        $z0 = <java.nio.charset.CoderResult: boolean $assertionsDisabled>;
        if $z0 != 0 goto label5;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label5:
        return;
    }

    void <init>(int, int, java.nio.charset.CoderResult$1)
    {
        java.nio.charset.CoderResult r0;
        int i0, i1;
        java.nio.charset.CoderResult$1 r1;

        r0 := @this: java.nio.charset.CoderResult;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.nio.charset.CoderResult$1;
        specialinvoke r0.<java.nio.charset.CoderResult: void <init>(int,int)>(i0, i1);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.String[] $r1;
        java.nio.charset.CoderResult $r2, $r3;
        java.nio.charset.CoderResult$1 $r4;
        java.nio.charset.CoderResult$2 $r5;

        $r0 = class "java/nio/charset/CoderResult";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.charset.CoderResult: boolean $assertionsDisabled> = $z1;
        $r1 = newarray (java.lang.String)[4];
        $r1[0] = "UNDERFLOW";
        $r1[1] = "OVERFLOW";
        $r1[2] = "MALFORMED";
        $r1[3] = "UNMAPPABLE";
        <java.nio.charset.CoderResult: java.lang.String[] names> = $r1;
        $r2 = new java.nio.charset.CoderResult;
        specialinvoke $r2.<java.nio.charset.CoderResult: void <init>(int,int)>(0, 0);
        <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW> = $r2;
        $r3 = new java.nio.charset.CoderResult;
        specialinvoke $r3.<java.nio.charset.CoderResult: void <init>(int,int)>(1, 0);
        <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW> = $r3;
        $r4 = new java.nio.charset.CoderResult$1;
        specialinvoke $r4.<java.nio.charset.CoderResult$1: void <init>()>();
        <java.nio.charset.CoderResult: java.nio.charset.CoderResult$Cache malformedCache> = $r4;
        $r5 = new java.nio.charset.CoderResult$2;
        specialinvoke $r5.<java.nio.charset.CoderResult$2: void <init>()>();
        <java.nio.charset.CoderResult: java.nio.charset.CoderResult$Cache unmappableCache> = $r5;
        return;
    }
}
