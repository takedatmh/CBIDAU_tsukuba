abstract class sun.security.provider.DigestBase extends java.security.MessageDigestSpi implements java.lang.Cloneable
{
    private byte[] oneByte;
    private final java.lang.String algorithm;
    private final int digestLength;
    private final int blockSize;
    final byte[] buffer;
    private int bufOfs;
    long bytesProcessed;
    static final byte[] padding;

    void <init>(java.lang.String, int, int)
    {
        sun.security.provider.DigestBase r0;
        java.lang.String r1;
        int i0, i1;
        byte[] $r2;

        r0 := @this: sun.security.provider.DigestBase;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.security.MessageDigestSpi: void <init>()>();
        r0.<sun.security.provider.DigestBase: java.lang.String algorithm> = r1;
        r0.<sun.security.provider.DigestBase: int digestLength> = i0;
        r0.<sun.security.provider.DigestBase: int blockSize> = i1;
        $r2 = newarray (byte)[i1];
        r0.<sun.security.provider.DigestBase: byte[] buffer> = $r2;
        return;
    }

    void <init>(sun.security.provider.DigestBase)
    {
        sun.security.provider.DigestBase r0, r1;
        java.lang.String $r2;
        int $i0, $i1, $i2;
        byte[] $r3, $r5;
        java.lang.Object $r4;
        long $l3;

        r0 := @this: sun.security.provider.DigestBase;
        r1 := @parameter0: sun.security.provider.DigestBase;
        specialinvoke r0.<java.security.MessageDigestSpi: void <init>()>();
        $r2 = r1.<sun.security.provider.DigestBase: java.lang.String algorithm>;
        r0.<sun.security.provider.DigestBase: java.lang.String algorithm> = $r2;
        $i0 = r1.<sun.security.provider.DigestBase: int digestLength>;
        r0.<sun.security.provider.DigestBase: int digestLength> = $i0;
        $i1 = r1.<sun.security.provider.DigestBase: int blockSize>;
        r0.<sun.security.provider.DigestBase: int blockSize> = $i1;
        $r3 = r1.<sun.security.provider.DigestBase: byte[] buffer>;
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();
        $r5 = (byte[]) $r4;
        r0.<sun.security.provider.DigestBase: byte[] buffer> = $r5;
        $i2 = r1.<sun.security.provider.DigestBase: int bufOfs>;
        r0.<sun.security.provider.DigestBase: int bufOfs> = $i2;
        $l3 = r1.<sun.security.provider.DigestBase: long bytesProcessed>;
        r0.<sun.security.provider.DigestBase: long bytesProcessed> = $l3;
        return;
    }

    protected final int engineGetDigestLength()
    {
        sun.security.provider.DigestBase r0;
        int $i0;

        r0 := @this: sun.security.provider.DigestBase;
        $i0 = r0.<sun.security.provider.DigestBase: int digestLength>;
        return $i0;
    }

    protected final void engineUpdate(byte)
    {
        sun.security.provider.DigestBase r0;
        byte b0;
        byte[] $r1, $r2, $r3, $r4;

        r0 := @this: sun.security.provider.DigestBase;
        b0 := @parameter0: byte;
        $r1 = r0.<sun.security.provider.DigestBase: byte[] oneByte>;
        if $r1 != null goto label0;

        $r2 = newarray (byte)[1];
        r0.<sun.security.provider.DigestBase: byte[] oneByte> = $r2;

     label0:
        $r3 = r0.<sun.security.provider.DigestBase: byte[] oneByte>;
        $r3[0] = b0;
        $r4 = r0.<sun.security.provider.DigestBase: byte[] oneByte>;
        virtualinvoke r0.<sun.security.provider.DigestBase: void engineUpdate(byte[],int,int)>($r4, 0, 1);
        return;
    }

    protected final void engineUpdate(byte[], int, int)
    {
        sun.security.provider.DigestBase r0;
        byte[] r1, $r4, $r6, $r7;
        int i0, i1, i2, $i3, $i4, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        long $l5, $l7, $l8, $l9;
        byte $b6;

        r0 := @this: sun.security.provider.DigestBase;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i1 != 0 goto label0;

        return;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = lengthof r1;
        $i4 = $i3 - i1;
        if i0 <= $i4 goto label2;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label2:
        $l5 = r0.<sun.security.provider.DigestBase: long bytesProcessed>;
        $b6 = $l5 cmp 0L;
        if $b6 >= 0 goto label3;

        virtualinvoke r0.<sun.security.provider.DigestBase: void engineReset()>();

     label3:
        $l7 = r0.<sun.security.provider.DigestBase: long bytesProcessed>;
        $l8 = (long) i1;
        $l9 = $l7 + $l8;
        r0.<sun.security.provider.DigestBase: long bytesProcessed> = $l9;
        $i10 = r0.<sun.security.provider.DigestBase: int bufOfs>;
        if $i10 == 0 goto label4;

        $i11 = r0.<sun.security.provider.DigestBase: int blockSize>;
        $i12 = r0.<sun.security.provider.DigestBase: int bufOfs>;
        $i13 = $i11 - $i12;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i13);
        $r4 = r0.<sun.security.provider.DigestBase: byte[] buffer>;
        $i14 = r0.<sun.security.provider.DigestBase: int bufOfs>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, $i14, i2);
        $i15 = r0.<sun.security.provider.DigestBase: int bufOfs>;
        $i16 = $i15 + i2;
        r0.<sun.security.provider.DigestBase: int bufOfs> = $i16;
        i0 = i0 + i2;
        i1 = i1 - i2;
        $i17 = r0.<sun.security.provider.DigestBase: int bufOfs>;
        $i18 = r0.<sun.security.provider.DigestBase: int blockSize>;
        if $i17 < $i18 goto label4;

        $r6 = r0.<sun.security.provider.DigestBase: byte[] buffer>;
        virtualinvoke r0.<sun.security.provider.DigestBase: void implCompress(byte[],int)>($r6, 0);
        r0.<sun.security.provider.DigestBase: int bufOfs> = 0;

     label4:
        $i19 = r0.<sun.security.provider.DigestBase: int blockSize>;
        if i1 < $i19 goto label5;

        virtualinvoke r0.<sun.security.provider.DigestBase: void implCompress(byte[],int)>(r1, i0);
        $i20 = r0.<sun.security.provider.DigestBase: int blockSize>;
        i1 = i1 - $i20;
        $i21 = r0.<sun.security.provider.DigestBase: int blockSize>;
        i0 = i0 + $i21;
        goto label4;

     label5:
        if i1 <= 0 goto label6;

        $r7 = r0.<sun.security.provider.DigestBase: byte[] buffer>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r7, 0, i1);
        r0.<sun.security.provider.DigestBase: int bufOfs> = i1;

     label6:
        return;
    }

    protected final void engineReset()
    {
        sun.security.provider.DigestBase r0;
        long $l0;
        byte $b1;

        r0 := @this: sun.security.provider.DigestBase;
        $l0 = r0.<sun.security.provider.DigestBase: long bytesProcessed>;
        $b1 = $l0 cmp 0L;
        if $b1 != 0 goto label0;

        return;

     label0:
        virtualinvoke r0.<sun.security.provider.DigestBase: void implReset()>();
        r0.<sun.security.provider.DigestBase: int bufOfs> = 0;
        r0.<sun.security.provider.DigestBase: long bytesProcessed> = 0L;
        return;
    }

    protected final byte[] engineDigest()
    {
        sun.security.provider.DigestBase r0;
        byte[] r1;
        java.security.DigestException r2, $r3;
        int $i0, $i1;
        java.security.ProviderException $r4, $r6;
        java.lang.Throwable $r5;

        r0 := @this: sun.security.provider.DigestBase;
        $i0 = r0.<sun.security.provider.DigestBase: int digestLength>;
        r1 = newarray (byte)[$i0];

     label0:
        $i1 = lengthof r1;
        virtualinvoke r0.<sun.security.provider.DigestBase: int engineDigest(byte[],int,int)>(r1, 0, $i1);

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $r4 = new java.security.ProviderException;
        specialinvoke $r4.<java.security.ProviderException: void <init>(java.lang.String)>("Internal error");
        $r5 = virtualinvoke $r4.<java.security.ProviderException: java.lang.Throwable initCause(java.lang.Throwable)>(r2);
        $r6 = (java.security.ProviderException) $r5;
        throw $r6;

     label3:
        return r1;

        catch java.security.DigestException from label0 to label1 with label2;
    }

    protected final int engineDigest(byte[], int, int) throws java.security.DigestException
    {
        sun.security.provider.DigestBase r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i8;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r8, $r9;
        java.security.DigestException $r3, $r11;
        java.lang.String $r7, $r10;
        long $l6;
        byte $b7;

        r0 := @this: sun.security.provider.DigestBase;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = r0.<sun.security.provider.DigestBase: int digestLength>;
        if i1 >= $i2 goto label0;

        $r3 = new java.security.DigestException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Length must be at least ");
        $i3 = r0.<sun.security.provider.DigestBase: int digestLength>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");
        $r7 = r0.<sun.security.provider.DigestBase: java.lang.String algorithm>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("digests");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.security.DigestException: void <init>(java.lang.String)>($r10);
        throw $r3;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i4 = lengthof r1;
        $i5 = $i4 - i1;
        if i0 <= $i5 goto label2;

     label1:
        $r11 = new java.security.DigestException;
        specialinvoke $r11.<java.security.DigestException: void <init>(java.lang.String)>("Buffer too short to store digest");
        throw $r11;

     label2:
        $l6 = r0.<sun.security.provider.DigestBase: long bytesProcessed>;
        $b7 = $l6 cmp 0L;
        if $b7 >= 0 goto label3;

        virtualinvoke r0.<sun.security.provider.DigestBase: void engineReset()>();

     label3:
        virtualinvoke r0.<sun.security.provider.DigestBase: void implDigest(byte[],int)>(r1, i0);
        r0.<sun.security.provider.DigestBase: long bytesProcessed> = -1L;
        $i8 = r0.<sun.security.provider.DigestBase: int digestLength>;
        return $i8;
    }

    abstract void implCompress(byte[], int);

    abstract void implDigest(byte[], int);

    abstract void implReset();

    public abstract java.lang.Object clone();

    static void <clinit>()
    {
        byte[] $r0, $r1;

        $r0 = newarray (byte)[136];
        <sun.security.provider.DigestBase: byte[] padding> = $r0;
        $r1 = <sun.security.provider.DigestBase: byte[] padding>;
        $r1[0] = -128;
        return;
    }
}
