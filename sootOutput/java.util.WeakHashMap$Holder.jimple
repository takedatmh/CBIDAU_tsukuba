class java.util.WeakHashMap$Holder extends java.lang.Object
{
    static final int ALTERNATIVE_HASHING_THRESHOLD;

    private void <init>()
    {
        java.util.WeakHashMap$Holder r0;

        r0 := @this: java.util.WeakHashMap$Holder;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static void <clinit>()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.IllegalArgumentException r2, $r4, $r5;
        java.lang.Object $r3;
        java.lang.Error $r6;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("jdk.map.althashing.threshold");
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        r1 = (java.lang.String) $r3;

     label0:
        if null == r1 goto label1;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);
        goto label2;

     label1:
        $i1 = 2147483647;

     label2:
        i0 = $i1;
        if i0 != -1 goto label3;

        i0 = 2147483647;

     label3:
        if i0 >= 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("value must be positive integer.");
        throw $r4;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = new java.lang.Error;
        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Illegal value for \'jdk.map.althashing.threshold\'", r2);
        throw $r6;

     label6:
        <java.util.WeakHashMap$Holder: int ALTERNATIVE_HASHING_THRESHOLD> = i0;
        return;

        catch java.lang.IllegalArgumentException from label0 to label4 with label5;
    }
}
