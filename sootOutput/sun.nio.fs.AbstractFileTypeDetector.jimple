public abstract class sun.nio.fs.AbstractFileTypeDetector extends java.nio.file.spi.FileTypeDetector
{
    private static final java.lang.String TSPECIALS;

    protected void <init>()
    {
        sun.nio.fs.AbstractFileTypeDetector r0;

        r0 := @this: sun.nio.fs.AbstractFileTypeDetector;
        specialinvoke r0.<java.nio.file.spi.FileTypeDetector: void <init>()>();
        return;
    }

    public final java.lang.String probeContentType(java.nio.file.Path) throws java.io.IOException
    {
        sun.nio.fs.AbstractFileTypeDetector r0;
        java.nio.file.Path r1;
        java.lang.String r2, $r4;
        java.lang.NullPointerException $r3;

        r0 := @this: sun.nio.fs.AbstractFileTypeDetector;
        r1 := @parameter0: java.nio.file.Path;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'file\' is null");
        throw $r3;

     label0:
        r2 = virtualinvoke r0.<sun.nio.fs.AbstractFileTypeDetector: java.lang.String implProbeContentType(java.nio.file.Path)>(r1);
        if r2 != null goto label1;

        $r4 = null;
        goto label2;

     label1:
        $r4 = staticinvoke <sun.nio.fs.AbstractFileTypeDetector: java.lang.String parse(java.lang.String)>(r2);

     label2:
        return $r4;
    }

    protected abstract java.lang.String implProbeContentType(java.nio.file.Path) throws java.io.IOException;

    private static java.lang.String parse(java.lang.String)
    {
        java.lang.String r0, r1, r2, $r4, $r5, $r7, $r8, r10, $r15;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder r3, $r11;
        java.util.Locale $r6, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(47);
        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(59);
        if i0 >= 0 goto label0;

        return null;

     label0:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();
        $r6 = <java.util.Locale: java.util.Locale ENGLISH>;
        r1 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);
        $z0 = staticinvoke <sun.nio.fs.AbstractFileTypeDetector: boolean isValidToken(java.lang.String)>(r1);
        if $z0 != 0 goto label1;

        return null;

     label1:
        if i1 >= 0 goto label2;

        $i2 = i0 + 1;
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);
        goto label3;

     label2:
        $i3 = i0 + 1;
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, i1);

     label3:
        r2 = $r7;
        $r8 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();
        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;
        r10 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);
        $z1 = staticinvoke <sun.nio.fs.AbstractFileTypeDetector: boolean isValidToken(java.lang.String)>(r10);
        if $z1 != 0 goto label4;

        return null;

     label4:
        $r11 = new java.lang.StringBuilder;
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        $i5 = virtualinvoke r10.<java.lang.String: int length()>();
        $i6 = $i4 + $i5;
        $i7 = $i6 + 1;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i7);
        r3 = $r11;
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);
        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r15;
    }

    private static boolean isTokenChar(char)
    {
        char c0;
        java.lang.String $r0;
        int $i1;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 <= 32 goto label0;

        if c0 >= 127 goto label0;

        $r0 = "()<>@,;:/[]?=\\\"";
        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c0);
        if $i1 >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static boolean isValidToken(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 != 0 goto label0;

        return 0;

     label0:
        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <sun.nio.fs.AbstractFileTypeDetector: boolean isTokenChar(char)>($c2);
        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;
        goto label1;

     label3:
        return 1;
    }
}
