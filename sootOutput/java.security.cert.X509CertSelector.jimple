public class java.security.cert.X509CertSelector extends java.lang.Object implements java.security.cert.CertSelector
{
    private static final sun.security.util.Debug debug;
    private static final sun.security.util.ObjectIdentifier ANY_EXTENDED_KEY_USAGE;
    private java.math.BigInteger serialNumber;
    private javax.security.auth.x500.X500Principal issuer;
    private javax.security.auth.x500.X500Principal subject;
    private byte[] subjectKeyID;
    private byte[] authorityKeyID;
    private java.util.Date certificateValid;
    private java.util.Date privateKeyValid;
    private sun.security.util.ObjectIdentifier subjectPublicKeyAlgID;
    private java.security.PublicKey subjectPublicKey;
    private byte[] subjectPublicKeyBytes;
    private boolean[] keyUsage;
    private java.util.Set keyPurposeSet;
    private java.util.Set keyPurposeOIDSet;
    private java.util.Set subjectAlternativeNames;
    private java.util.Set subjectAlternativeGeneralNames;
    private sun.security.x509.CertificatePolicySet policy;
    private java.util.Set policySet;
    private java.util.Set pathToNames;
    private java.util.Set pathToGeneralNames;
    private sun.security.x509.NameConstraintsExtension nc;
    private byte[] ncBytes;
    private int basicConstraints;
    private java.security.cert.X509Certificate x509Cert;
    private boolean matchAllSubjectAltNames;
    private static final java.lang.Boolean FALSE;
    private static final int PRIVATE_KEY_USAGE_ID;
    private static final int SUBJECT_ALT_NAME_ID;
    private static final int NAME_CONSTRAINTS_ID;
    private static final int CERT_POLICIES_ID;
    private static final int EXTENDED_KEY_USAGE_ID;
    private static final int NUM_OF_EXTENSIONS;
    private static final java.lang.String[] EXTENSION_OIDS;
    static final int NAME_ANY;
    static final int NAME_RFC822;
    static final int NAME_DNS;
    static final int NAME_X400;
    static final int NAME_DIRECTORY;
    static final int NAME_EDI;
    static final int NAME_URI;
    static final int NAME_IP;
    static final int NAME_OID;

    public void <init>()
    {
        java.security.cert.X509CertSelector r0;

        r0 := @this: java.security.cert.X509CertSelector;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.security.cert.X509CertSelector: int basicConstraints> = -1;
        r0.<java.security.cert.X509CertSelector: boolean matchAllSubjectAltNames> = 1;
        return;
    }

    public void setCertificate(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        r0.<java.security.cert.X509CertSelector: java.security.cert.X509Certificate x509Cert> = r1;
        return;
    }

    public void setSerialNumber(java.math.BigInteger)
    {
        java.security.cert.X509CertSelector r0;
        java.math.BigInteger r1;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.math.BigInteger;
        r0.<java.security.cert.X509CertSelector: java.math.BigInteger serialNumber> = r1;
        return;
    }

    public void setIssuer(javax.security.auth.x500.X500Principal)
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal r1;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: javax.security.auth.x500.X500Principal;
        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer> = r1;
        return;
    }

    public void setIssuer(java.lang.String) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        java.lang.String r1;
        sun.security.x509.X500Name $r2;
        javax.security.auth.x500.X500Principal $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer> = null;
        goto label1;

     label0:
        $r2 = new sun.security.x509.X500Name;
        specialinvoke $r2.<sun.security.x509.X500Name: void <init>(java.lang.String)>(r1);
        $r3 = virtualinvoke $r2.<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>();
        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer> = $r3;

     label1:
        return;
    }

    public void setIssuer(byte[]) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        byte[] r1;
        java.lang.IllegalArgumentException r3, $r5;
        javax.security.auth.x500.X500Principal $r4;
        java.io.IOException $r6, $r8;
        java.lang.Throwable $r7;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: byte[];

     label0:
        if r1 != null goto label1;

        $r4 = null;
        goto label2;

     label1:
        $r4 = new javax.security.auth.x500.X500Principal;
        specialinvoke $r4.<javax.security.auth.x500.X500Principal: void <init>(byte[])>(r1);

     label2:
        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer> = $r4;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Invalid name");
        $r7 = virtualinvoke $r6.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r3);
        $r8 = (java.io.IOException) $r7;
        throw $r8;

     label5:
        return;

        catch java.lang.IllegalArgumentException from label0 to label3 with label4;
    }

    public void setSubject(javax.security.auth.x500.X500Principal)
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal r1;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: javax.security.auth.x500.X500Principal;
        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject> = r1;
        return;
    }

    public void setSubject(java.lang.String) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        java.lang.String r1;
        sun.security.x509.X500Name $r2;
        javax.security.auth.x500.X500Principal $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject> = null;
        goto label1;

     label0:
        $r2 = new sun.security.x509.X500Name;
        specialinvoke $r2.<sun.security.x509.X500Name: void <init>(java.lang.String)>(r1);
        $r3 = virtualinvoke $r2.<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>();
        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject> = $r3;

     label1:
        return;
    }

    public void setSubject(byte[]) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        byte[] r1;
        java.lang.IllegalArgumentException r3, $r5;
        javax.security.auth.x500.X500Principal $r4;
        java.io.IOException $r6, $r8;
        java.lang.Throwable $r7;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: byte[];

     label0:
        if r1 != null goto label1;

        $r4 = null;
        goto label2;

     label1:
        $r4 = new javax.security.auth.x500.X500Principal;
        specialinvoke $r4.<javax.security.auth.x500.X500Principal: void <init>(byte[])>(r1);

     label2:
        r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject> = $r4;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Invalid name");
        $r7 = virtualinvoke $r6.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r3);
        $r8 = (java.io.IOException) $r7;
        throw $r8;

     label5:
        return;

        catch java.lang.IllegalArgumentException from label0 to label3 with label4;
    }

    public void setSubjectKeyIdentifier(byte[])
    {
        java.security.cert.X509CertSelector r0;
        byte[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: byte[];
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID> = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID> = $r3;

     label1:
        return;
    }

    public void setAuthorityKeyIdentifier(byte[])
    {
        java.security.cert.X509CertSelector r0;
        byte[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: byte[];
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID> = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID> = $r3;

     label1:
        return;
    }

    public void setCertificateValid(java.util.Date)
    {
        java.security.cert.X509CertSelector r0;
        java.util.Date r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.util.Date;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid> = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r1.<java.util.Date: java.lang.Object clone()>();
        $r3 = (java.util.Date) $r2;
        r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid> = $r3;

     label1:
        return;
    }

    public void setPrivateKeyValid(java.util.Date)
    {
        java.security.cert.X509CertSelector r0;
        java.util.Date r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.util.Date;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid> = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r1.<java.util.Date: java.lang.Object clone()>();
        $r3 = (java.util.Date) $r2;
        r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid> = $r3;

     label1:
        return;
    }

    public void setSubjectPublicKeyAlgID(java.lang.String) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        java.lang.String r1;
        sun.security.util.ObjectIdentifier $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID> = null;
        goto label1;

     label0:
        $r2 = new sun.security.util.ObjectIdentifier;
        specialinvoke $r2.<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>(r1);
        r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID> = $r2;

     label1:
        return;
    }

    public void setSubjectPublicKey(java.security.PublicKey)
    {
        java.security.cert.X509CertSelector r0;
        java.security.PublicKey r1;
        byte[] $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.PublicKey;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: java.security.PublicKey subjectPublicKey> = null;
        r0.<java.security.cert.X509CertSelector: byte[] subjectPublicKeyBytes> = null;
        goto label1;

     label0:
        r0.<java.security.cert.X509CertSelector: java.security.PublicKey subjectPublicKey> = r1;
        $r2 = interfaceinvoke r1.<java.security.PublicKey: byte[] getEncoded()>();
        r0.<java.security.cert.X509CertSelector: byte[] subjectPublicKeyBytes> = $r2;

     label1:
        return;
    }

    public void setSubjectPublicKey(byte[]) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        byte[] r1, $r3, $r5;
        java.lang.Object $r2;
        sun.security.util.DerValue $r4;
        java.security.PublicKey $r6;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: byte[];
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: java.security.PublicKey subjectPublicKey> = null;
        r0.<java.security.cert.X509CertSelector: byte[] subjectPublicKeyBytes> = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        r0.<java.security.cert.X509CertSelector: byte[] subjectPublicKeyBytes> = $r3;
        $r4 = new sun.security.util.DerValue;
        $r5 = r0.<java.security.cert.X509CertSelector: byte[] subjectPublicKeyBytes>;
        specialinvoke $r4.<sun.security.util.DerValue: void <init>(byte[])>($r5);
        $r6 = staticinvoke <sun.security.x509.X509Key: java.security.PublicKey parse(sun.security.util.DerValue)>($r4);
        r0.<java.security.cert.X509CertSelector: java.security.PublicKey subjectPublicKey> = $r6;

     label1:
        return;
    }

    public void setKeyUsage(boolean[])
    {
        java.security.cert.X509CertSelector r0;
        boolean[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: boolean[];
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: boolean[] keyUsage> = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (boolean[]) $r2;
        r0.<java.security.cert.X509CertSelector: boolean[] keyUsage> = $r3;

     label1:
        return;
    }

    public void setExtendedKeyUsage(java.util.Set) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        java.util.Set r1, $r5, $r7, $r9;
        java.util.Iterator r2;
        java.lang.String r3;
        boolean $z0, $z1;
        java.util.HashSet $r4, $r6;
        java.lang.Object $r8;
        sun.security.util.ObjectIdentifier $r10;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.util.Set;
        if r1 == null goto label0;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();
        if $z0 == 0 goto label1;

     label0:
        r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet> = null;
        r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeOIDSet> = null;
        goto label3;

     label1:
        $r4 = new java.util.HashSet;
        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>(r1);
        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);
        r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet> = $r5;
        $r6 = new java.util.HashSet;
        specialinvoke $r6.<java.util.HashSet: void <init>()>();
        r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeOIDSet> = $r6;
        $r7 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet>;
        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.lang.String) $r8;
        $r9 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeOIDSet>;
        $r10 = new sun.security.util.ObjectIdentifier;
        specialinvoke $r10.<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>(r3);
        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10);
        goto label2;

     label3:
        return;
    }

    public void setMatchAllSubjectAltNames(boolean)
    {
        java.security.cert.X509CertSelector r0;
        boolean z0;

        r0 := @this: java.security.cert.X509CertSelector;
        z0 := @parameter0: boolean;
        r0.<java.security.cert.X509CertSelector: boolean matchAllSubjectAltNames> = z0;
        return;
    }

    public void setSubjectAlternativeNames(java.util.Collection) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        java.util.Collection r1;
        java.util.Set r2, $r3;
        boolean $z0;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.util.Collection;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames> = null;
        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames> = null;
        goto label2;

     label0:
        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();
        if $z0 == 0 goto label1;

        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames> = null;
        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames> = null;
        return;

     label1:
        r2 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneAndCheckNames(java.util.Collection)>(r1);
        $r3 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set parseNames(java.util.Collection)>(r2);
        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames> = $r3;
        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames> = r2;

     label2:
        return;
    }

    public void addSubjectAlternativeName(int, java.lang.String) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        int i0;
        java.lang.String r1;

        r0 := @this: java.security.cert.X509CertSelector;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        specialinvoke r0.<java.security.cert.X509CertSelector: void addSubjectAlternativeNameInternal(int,java.lang.Object)>(i0, r1);
        return;
    }

    public void addSubjectAlternativeName(int, byte[]) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        int i0;
        byte[] r1;
        java.lang.Object $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        specialinvoke r0.<java.security.cert.X509CertSelector: void addSubjectAlternativeNameInternal(int,java.lang.Object)>(i0, $r2);
        return;
    }

    private void addSubjectAlternativeNameInternal(int, java.lang.Object) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        int i0;
        java.lang.Object r1;
        sun.security.x509.GeneralNameInterface r2;
        java.util.ArrayList r3, $r8;
        java.util.Set $r4, $r6, $r10, $r11;
        java.util.HashSet $r5, $r7;
        java.lang.Integer $r9;

        r0 := @this: java.security.cert.X509CertSelector;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 = staticinvoke <java.security.cert.X509CertSelector: sun.security.x509.GeneralNameInterface makeGeneralNameInterface(int,java.lang.Object)>(i0, r1);
        $r4 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        if $r4 != null goto label0;

        $r5 = new java.util.HashSet;
        specialinvoke $r5.<java.util.HashSet: void <init>()>();
        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames> = $r5;

     label0:
        $r6 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames>;
        if $r6 != null goto label1;

        $r7 = new java.util.HashSet;
        specialinvoke $r7.<java.util.HashSet: void <init>()>();
        r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames> = $r7;

     label1:
        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(2);
        r3 = $r8;
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);
        $r10 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r3);
        $r11 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames>;
        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r2);
        return;
    }

    private static java.util.Set parseNames(java.util.Collection) throws java.io.IOException
    {
        java.util.Collection r0;
        java.util.HashSet $r1, r2;
        java.util.Iterator r3;
        java.util.List r4;
        java.lang.Object r5, $r6, r10;
        int i0, $i1;
        boolean $z0, $z1;
        java.io.IOException $r7, $r8;
        java.lang.Integer $r9;
        sun.security.x509.GeneralNameInterface $r11;

        r0 := @parameter0: java.util.Collection;
        $r1 = new java.util.HashSet;
        specialinvoke $r1.<java.util.HashSet: void <init>()>();
        r2 = $r1;
        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.List) $r6;
        $i1 = interfaceinvoke r4.<java.util.List: int size()>();
        if $i1 == 2 goto label1;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("name list size not 2");
        throw $r7;

     label1:
        r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);
        $z1 = r5 instanceof java.lang.Integer;
        if $z1 != 0 goto label2;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("expected an Integer");
        throw $r8;

     label2:
        $r9 = (java.lang.Integer) r5;
        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();
        r10 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(1);
        $r11 = staticinvoke <java.security.cert.X509CertSelector: sun.security.x509.GeneralNameInterface makeGeneralNameInterface(int,java.lang.Object)>(i0, r10);
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r11);
        goto label0;

     label3:
        return r2;
    }

    static boolean equalNames(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.util.Collection;
        if r0 == null goto label0;

        if r1 != null goto label3;

     label0:
        if r0 != r1 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $z1 = interfaceinvoke r0.<java.util.Collection: boolean equals(java.lang.Object)>(r1);
        return $z1;
    }

    static sun.security.x509.GeneralNameInterface makeGeneralNameInterface(int, java.lang.Object) throws java.io.IOException
    {
        int i0;
        java.lang.Object r0;
        sun.security.util.Debug $r1, $r5, $r10, $r11, $r33, $r34, $r43, $r44, $r59, $r60, $r66, $r67;
        java.lang.StringBuilder $r2, $r6, $r7, $r8, $r12, $r13, $r14, $r29, $r30, $r31, $r35, $r36, $r38, $r55, $r56, $r57, $r61, $r62, $r64;
        sun.security.x509.GeneralNameInterface r3;
        sun.security.util.DerValue r4, $r40;
        java.lang.String $r9, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r32, $r37, $r39, $r58, $r63, $r65;
        boolean $z0, $z1;
        sun.security.x509.RFC822Name $r16, $r46;
        sun.security.x509.DNSName $r18, $r47;
        sun.security.x509.X500Name $r20, $r49;
        sun.security.x509.URIName $r22, $r51;
        sun.security.x509.IPAddressName $r24, $r52;
        sun.security.x509.OIDName $r26, $r53;
        java.io.IOException $r28, $r54, $r68;
        byte[] $r41, $r42;
        sun.security.x509.OtherName $r45;
        sun.security.x509.X400Address $r48;
        sun.security.x509.EDIPartyName $r50;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.Object;
        $r1 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r1 == null goto label0;

        $r5 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.makeGeneralNameInterface(");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r5.<sun.security.util.Debug: void println(java.lang.String)>($r9);

     label0:
        $z0 = r0 instanceof java.lang.String;
        if $z0 == 0 goto label10;

        $r10 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r10 == null goto label1;

        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.makeGeneralNameInterface() name is String: ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r11.<sun.security.util.Debug: void println(java.lang.String)>($r15);

     label1:
        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label8;
            case 4: goto label4;
            case 5: goto label8;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label7;
            default: goto label8;
        };

     label2:
        $r16 = new sun.security.x509.RFC822Name;
        $r17 = (java.lang.String) r0;
        specialinvoke $r16.<sun.security.x509.RFC822Name: void <init>(java.lang.String)>($r17);
        r3 = $r16;
        goto label9;

     label3:
        $r18 = new sun.security.x509.DNSName;
        $r19 = (java.lang.String) r0;
        specialinvoke $r18.<sun.security.x509.DNSName: void <init>(java.lang.String)>($r19);
        r3 = $r18;
        goto label9;

     label4:
        $r20 = new sun.security.x509.X500Name;
        $r21 = (java.lang.String) r0;
        specialinvoke $r20.<sun.security.x509.X500Name: void <init>(java.lang.String)>($r21);
        r3 = $r20;
        goto label9;

     label5:
        $r22 = new sun.security.x509.URIName;
        $r23 = (java.lang.String) r0;
        specialinvoke $r22.<sun.security.x509.URIName: void <init>(java.lang.String)>($r23);
        r3 = $r22;
        goto label9;

     label6:
        $r24 = new sun.security.x509.IPAddressName;
        $r25 = (java.lang.String) r0;
        specialinvoke $r24.<sun.security.x509.IPAddressName: void <init>(java.lang.String)>($r25);
        r3 = $r24;
        goto label9;

     label7:
        $r26 = new sun.security.x509.OIDName;
        $r27 = (java.lang.String) r0;
        specialinvoke $r26.<sun.security.x509.OIDName: void <init>(java.lang.String)>($r27);
        r3 = $r26;
        goto label9;

     label8:
        $r28 = new java.io.IOException;
        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to parse String names of type ");
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r32);
        throw $r28;

     label9:
        $r33 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r33 == null goto label26;

        $r34 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r35 = new java.lang.StringBuilder;
        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.makeGeneralNameInterface() result: ");
        $r37 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();
        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r34.<sun.security.util.Debug: void println(java.lang.String)>($r39);
        goto label26;

     label10:
        $z1 = r0 instanceof byte[];
        if $z1 == 0 goto label24;

        $r40 = new sun.security.util.DerValue;
        $r41 = (byte[]) r0;
        $r42 = (byte[]) $r41;
        specialinvoke $r40.<sun.security.util.DerValue: void <init>(byte[])>($r42);
        r4 = $r40;
        $r43 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r43 == null goto label11;

        $r44 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r44.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.makeGeneralNameInterface() is byte[]");

     label11:
        tableswitch(i0)
        {
            case 0: goto label12;
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label15;
            case 4: goto label16;
            case 5: goto label17;
            case 6: goto label18;
            case 7: goto label19;
            case 8: goto label20;
            default: goto label21;
        };

     label12:
        $r45 = new sun.security.x509.OtherName;
        specialinvoke $r45.<sun.security.x509.OtherName: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r45;
        goto label22;

     label13:
        $r46 = new sun.security.x509.RFC822Name;
        specialinvoke $r46.<sun.security.x509.RFC822Name: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r46;
        goto label22;

     label14:
        $r47 = new sun.security.x509.DNSName;
        specialinvoke $r47.<sun.security.x509.DNSName: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r47;
        goto label22;

     label15:
        $r48 = new sun.security.x509.X400Address;
        specialinvoke $r48.<sun.security.x509.X400Address: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r48;
        goto label22;

     label16:
        $r49 = new sun.security.x509.X500Name;
        specialinvoke $r49.<sun.security.x509.X500Name: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r49;
        goto label22;

     label17:
        $r50 = new sun.security.x509.EDIPartyName;
        specialinvoke $r50.<sun.security.x509.EDIPartyName: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r50;
        goto label22;

     label18:
        $r51 = new sun.security.x509.URIName;
        specialinvoke $r51.<sun.security.x509.URIName: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r51;
        goto label22;

     label19:
        $r52 = new sun.security.x509.IPAddressName;
        specialinvoke $r52.<sun.security.x509.IPAddressName: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r52;
        goto label22;

     label20:
        $r53 = new sun.security.x509.OIDName;
        specialinvoke $r53.<sun.security.x509.OIDName: void <init>(sun.security.util.DerValue)>(r4);
        r3 = $r53;
        goto label22;

     label21:
        $r54 = new java.io.IOException;
        $r55 = new java.lang.StringBuilder;
        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();
        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to parse byte array names of type ");
        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r54.<java.io.IOException: void <init>(java.lang.String)>($r58);
        throw $r54;

     label22:
        $r59 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r59 == null goto label23;

        $r60 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r61 = new java.lang.StringBuilder;
        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();
        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.makeGeneralNameInterface() result: ");
        $r63 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();
        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);
        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r60.<sun.security.util.Debug: void println(java.lang.String)>($r65);

     label23:
        goto label26;

     label24:
        $r66 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r66 == null goto label25;

        $r67 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r67.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.makeGeneralName() input name not String or byte array");

     label25:
        $r68 = new java.io.IOException;
        specialinvoke $r68.<java.io.IOException: void <init>(java.lang.String)>("name not String or byte array");
        throw $r68;

     label26:
        return r3;
    }

    public void setNameConstraints(byte[]) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        byte[] r1, $r4;
        java.lang.Boolean $r2;
        java.lang.Object $r3;
        sun.security.x509.NameConstraintsExtension $r5;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: byte[];
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: byte[] ncBytes> = null;
        r0.<java.security.cert.X509CertSelector: sun.security.x509.NameConstraintsExtension nc> = null;
        goto label1;

     label0:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        r0.<java.security.cert.X509CertSelector: byte[] ncBytes> = $r4;
        $r5 = new sun.security.x509.NameConstraintsExtension;
        $r2 = <java.security.cert.X509CertSelector: java.lang.Boolean FALSE>;
        specialinvoke $r5.<sun.security.x509.NameConstraintsExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r2, r1);
        r0.<java.security.cert.X509CertSelector: sun.security.x509.NameConstraintsExtension nc> = $r5;

     label1:
        return;
    }

    public void setBasicConstraints(int)
    {
        java.security.cert.X509CertSelector r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        i0 := @parameter0: int;
        if i0 >= -2 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("basic constraints less than -2");
        throw $r1;

     label0:
        r0.<java.security.cert.X509CertSelector: int basicConstraints> = i0;
        return;
    }

    public void setPolicy(java.util.Set) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        java.util.Set r1, r2;
        java.util.Iterator r3;
        java.util.Vector r4, $r8;
        java.lang.Object r5;
        sun.security.util.ObjectIdentifier $r6;
        java.util.HashSet $r7;
        boolean $z0, $z1;
        java.io.IOException $r9;
        sun.security.x509.CertificatePolicyId $r10;
        java.lang.String $r11;
        sun.security.x509.CertificatePolicySet $r12;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.util.Set;
        if r1 != null goto label0;

        r0.<java.security.cert.X509CertSelector: java.util.Set policySet> = null;
        r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy> = null;
        goto label4;

     label0:
        $r7 = new java.util.HashSet;
        specialinvoke $r7.<java.util.HashSet: void <init>(java.util.Collection)>(r1);
        r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r7);
        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();
        $r8 = new java.util.Vector;
        specialinvoke $r8.<java.util.Vector: void <init>()>();
        r4 = $r8;

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $z1 = r5 instanceof java.lang.String;
        if $z1 != 0 goto label2;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("non String in certPolicySet");
        throw $r9;

     label2:
        $r10 = new sun.security.x509.CertificatePolicyId;
        $r6 = new sun.security.util.ObjectIdentifier;
        $r11 = (java.lang.String) r5;
        specialinvoke $r6.<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>($r11);
        specialinvoke $r10.<sun.security.x509.CertificatePolicyId: void <init>(sun.security.util.ObjectIdentifier)>($r6);
        virtualinvoke r4.<java.util.Vector: boolean add(java.lang.Object)>($r10);
        goto label1;

     label3:
        r0.<java.security.cert.X509CertSelector: java.util.Set policySet> = r2;
        $r12 = new sun.security.x509.CertificatePolicySet;
        specialinvoke $r12.<sun.security.x509.CertificatePolicySet: void <init>(java.util.Vector)>(r4);
        r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy> = $r12;

     label4:
        return;
    }

    public void setPathToNames(java.util.Collection) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        java.util.Collection r1;
        java.util.Set r2, $r3;
        boolean $z0;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.util.Collection;
        if r1 == null goto label0;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();
        if $z0 == 0 goto label1;

     label0:
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames> = null;
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames> = null;
        goto label2;

     label1:
        r2 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneAndCheckNames(java.util.Collection)>(r1);
        $r3 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set parseNames(java.util.Collection)>(r2);
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames> = $r3;
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames> = r2;

     label2:
        return;
    }

    void setPathToNamesInternal(java.util.Set)
    {
        java.security.cert.X509CertSelector r0;
        java.util.Set r1, $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.util.Set;
        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames> = $r2;
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames> = r1;
        return;
    }

    public void addPathToName(int, java.lang.String) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        int i0;
        java.lang.String r1;

        r0 := @this: java.security.cert.X509CertSelector;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        specialinvoke r0.<java.security.cert.X509CertSelector: void addPathToNameInternal(int,java.lang.Object)>(i0, r1);
        return;
    }

    public void addPathToName(int, byte[]) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        int i0;
        byte[] r1;
        java.lang.Object $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        specialinvoke r0.<java.security.cert.X509CertSelector: void addPathToNameInternal(int,java.lang.Object)>(i0, $r2);
        return;
    }

    private void addPathToNameInternal(int, java.lang.Object) throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        int i0;
        java.lang.Object r1;
        sun.security.x509.GeneralNameInterface r2;
        java.util.ArrayList r3, $r7;
        java.util.Set $r4, $r9, $r10;
        java.util.HashSet $r5, $r6;
        java.lang.Integer $r8;

        r0 := @this: java.security.cert.X509CertSelector;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 = staticinvoke <java.security.cert.X509CertSelector: sun.security.x509.GeneralNameInterface makeGeneralNameInterface(int,java.lang.Object)>(i0, r1);
        $r4 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        if $r4 != null goto label0;

        $r5 = new java.util.HashSet;
        specialinvoke $r5.<java.util.HashSet: void <init>()>();
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames> = $r5;
        $r6 = new java.util.HashSet;
        specialinvoke $r6.<java.util.HashSet: void <init>()>();
        r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames> = $r6;

     label0:
        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(2);
        r3 = $r7;
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);
        $r9 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames>;
        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r3);
        $r10 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r2);
        return;
    }

    public java.security.cert.X509Certificate getCertificate()
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.security.cert.X509Certificate x509Cert>;
        return $r1;
    }

    public java.math.BigInteger getSerialNumber()
    {
        java.security.cert.X509CertSelector r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.math.BigInteger serialNumber>;
        return $r1;
    }

    public javax.security.auth.x500.X500Principal getIssuer()
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        return $r1;
    }

    public java.lang.String getIssuerAsString()
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal $r1, $r3;
        java.lang.String $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        if $r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        $r2 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: java.lang.String getName()>();

     label1:
        return $r2;
    }

    public byte[] getIssuerAsBytes() throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal $r1, $r3;
        byte[] $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        if $r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        $r2 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

     label1:
        return $r2;
    }

    public javax.security.auth.x500.X500Principal getSubject()
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        return $r1;
    }

    public java.lang.String getSubjectAsString()
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal $r1, $r3;
        java.lang.String $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        if $r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        $r2 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: java.lang.String getName()>();

     label1:
        return $r2;
    }

    public byte[] getSubjectAsBytes() throws java.io.IOException
    {
        java.security.cert.X509CertSelector r0;
        javax.security.auth.x500.X500Principal $r1, $r3;
        byte[] $r2;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        if $r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        $r2 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

     label1:
        return $r2;
    }

    public byte[] getSubjectKeyIdentifier()
    {
        java.security.cert.X509CertSelector r0;
        byte[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public byte[] getAuthorityKeyIdentifier()
    {
        java.security.cert.X509CertSelector r0;
        byte[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public java.util.Date getCertificateValid()
    {
        java.security.cert.X509CertSelector r0;
        java.util.Date $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid>;
        $r3 = virtualinvoke $r2.<java.util.Date: java.lang.Object clone()>();
        $r4 = (java.util.Date) $r3;
        return $r4;
    }

    public java.util.Date getPrivateKeyValid()
    {
        java.security.cert.X509CertSelector r0;
        java.util.Date $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid>;
        $r3 = virtualinvoke $r2.<java.util.Date: java.lang.Object clone()>();
        $r4 = (java.util.Date) $r3;
        return $r4;
    }

    public java.lang.String getSubjectPublicKeyAlgID()
    {
        java.security.cert.X509CertSelector r0;
        sun.security.util.ObjectIdentifier $r1, $r2;
        java.lang.String $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID>;
        $r3 = virtualinvoke $r2.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        return $r3;
    }

    public java.security.PublicKey getSubjectPublicKey()
    {
        java.security.cert.X509CertSelector r0;
        java.security.PublicKey $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.security.PublicKey subjectPublicKey>;
        return $r1;
    }

    public boolean[] getKeyUsage()
    {
        java.security.cert.X509CertSelector r0;
        boolean[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: boolean[] keyUsage>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: boolean[] keyUsage>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (boolean[]) $r3;
        return $r4;
    }

    public java.util.Set getExtendedKeyUsage()
    {
        java.security.cert.X509CertSelector r0;
        java.util.Set $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet>;
        return $r1;
    }

    public boolean getMatchAllSubjectAltNames()
    {
        java.security.cert.X509CertSelector r0;
        boolean $z0;

        r0 := @this: java.security.cert.X509CertSelector;
        $z0 = r0.<java.security.cert.X509CertSelector: boolean matchAllSubjectAltNames>;
        return $z0;
    }

    public java.util.Collection getSubjectAlternativeNames()
    {
        java.security.cert.X509CertSelector r0;
        java.util.Set $r1, $r2, $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        $r3 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneNames(java.util.Collection)>($r2);
        return $r3;
    }

    private static java.util.Set cloneNames(java.util.Collection)
    {
        java.util.Collection r0;
        java.io.IOException r1, $r4;
        java.lang.StringBuilder $r2, $r6, $r8;
        java.util.Set $r3;
        java.lang.RuntimeException $r5;
        java.lang.String $r7, $r9;

        r0 := @parameter0: java.util.Collection;

     label0:
        $r3 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneAndCheckNames(java.util.Collection)>(r0);

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.RuntimeException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cloneNames encountered IOException: ");
        $r7 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);
        throw $r5;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private static java.util.Set cloneAndCheckNames(java.util.Collection) throws java.io.IOException
    {
        java.util.Collection r0;
        java.util.HashSet $r1, r2;
        java.util.Iterator r3, r10;
        java.lang.Object r4, r5, r6, $r11, $r22;
        int i0, $i1;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7;
        java.io.IOException $r7, $r13, $r14, $r16, $r19;
        java.util.ArrayList $r8;
        java.util.List $r9, r12;
        java.lang.Integer $r15;
        sun.security.util.Debug $r17, $r18;
        byte[] $r20, $r21;

        r0 := @parameter0: java.util.Collection;
        $r1 = new java.util.HashSet;
        specialinvoke $r1.<java.util.HashSet: void <init>()>();
        r2 = $r1;
        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $z1 = r4 instanceof java.util.List;
        if $z1 != 0 goto label1;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("expected a List");
        throw $r7;

     label1:
        $r8 = new java.util.ArrayList;
        $r9 = (java.util.List) r4;
        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r8);
        goto label0;

     label2:
        r10 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label11;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();
        r12 = (java.util.List) $r11;
        $i1 = interfaceinvoke r12.<java.util.List: int size()>();
        if $i1 == 2 goto label4;

        $r13 = new java.io.IOException;
        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("name list size not 2");
        throw $r13;

     label4:
        r5 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0);
        $z4 = r5 instanceof java.lang.Integer;
        if $z4 != 0 goto label5;

        $r14 = new java.io.IOException;
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("expected an Integer");
        throw $r14;

     label5:
        $r15 = (java.lang.Integer) r5;
        i0 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();
        if i0 < 0 goto label6;

        if i0 <= 8 goto label7;

     label6:
        $r16 = new java.io.IOException;
        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("name type not 0-8");
        throw $r16;

     label7:
        r6 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(1);
        $z5 = r6 instanceof byte[];
        if $z5 != 0 goto label9;

        $z6 = r6 instanceof java.lang.String;
        if $z6 != 0 goto label9;

        $r17 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r17 == null goto label8;

        $r18 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r18.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.cloneAndCheckNames() name not byte array");

     label8:
        $r19 = new java.io.IOException;
        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("name not byte array or String");
        throw $r19;

     label9:
        $z7 = r6 instanceof byte[];
        if $z7 == 0 goto label10;

        $r20 = (byte[]) r6;
        $r21 = (byte[]) $r20;
        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.Object clone()>();
        interfaceinvoke r12.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, $r22);

     label10:
        goto label3;

     label11:
        return r2;
    }

    public byte[] getNameConstraints()
    {
        java.security.cert.X509CertSelector r0;
        byte[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: byte[] ncBytes>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: byte[] ncBytes>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public int getBasicConstraints()
    {
        java.security.cert.X509CertSelector r0;
        int $i0;

        r0 := @this: java.security.cert.X509CertSelector;
        $i0 = r0.<java.security.cert.X509CertSelector: int basicConstraints>;
        return $i0;
    }

    public java.util.Set getPolicy()
    {
        java.security.cert.X509CertSelector r0;
        java.util.Set $r1;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.util.Set policySet>;
        return $r1;
    }

    public java.util.Collection getPathToNames()
    {
        java.security.cert.X509CertSelector r0;
        java.util.Set $r1, $r2, $r3;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames>;
        $r3 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneNames(java.util.Collection)>($r2);
        return $r3;
    }

    public java.lang.String toString()
    {
        java.security.cert.X509CertSelector r0;
        java.lang.StringBuffer $r1, r2;
        java.util.Iterator r3, r149;
        java.util.List r4;
        java.security.cert.X509Certificate $r6, $r9;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r16, $r17, $r20, $r21, $r25, $r26, $r28, $r29, $r33, $r34, $r36, $r37, $r40, $r41, $r43, $r44, $r51, $r52, $r54, $r55, $r57, $r58, $r64, $r65, $r68, $r69, $r75, $r76, $r79, $r80, $r84, $r85, $r88, $r89, $r93, $r94, $r97, $r98, $r102, $r103, $r106, $r107, $r111, $r112, $r115, $r116, $r120, $r121, $r124, $r125, $r129, $r130, $r133, $r134, $r138, $r139, $r142, $r143, $r150, $r151, $r153, $r154;
        java.lang.String $r10, $r13, $r19, $r22, $r27, $r30, $r35, $r38, $r42, $r45, $r59, $r67, $r70, $r78, $r81, $r87, $r90, $r96, $r99, $r105, $r108, $r114, $r117, $r123, $r126, $r132, $r135, $r141, $r144, $r155, $r158;
        java.math.BigInteger $r15, $r18;
        javax.security.auth.x500.X500Principal $r24, $r32;
        boolean $z0, $z1, $z2;
        java.util.Set $r47, $r49, $r128, $r131, $r146, $r148;
        java.lang.Object $r50, $r53, $r56, $r152;
        byte[] $r61, $r66, $r72, $r77;
        sun.misc.HexDumpEncoder $r62, r63, $r73, r74;
        java.util.Date $r83, $r86, $r92, $r95;
        sun.security.util.ObjectIdentifier $r101, $r104;
        java.security.PublicKey $r110, $r113;
        boolean[] $r119, $r122;
        sun.security.x509.CertificatePolicySet $r137, $r140;

        r0 := @this: java.security.cert.X509CertSelector;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("X509CertSelector: [\n");
        $r6 = r0.<java.security.cert.X509CertSelector: java.security.cert.X509Certificate x509Cert>;
        if $r6 == null goto label0;

        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Certificate: ");
        $r9 = r0.<java.security.cert.X509CertSelector: java.security.cert.X509Certificate x509Cert>;
        $r10 = virtualinvoke $r9.<java.security.cert.X509Certificate: java.lang.String toString()>();
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

     label0:
        $r15 = r0.<java.security.cert.X509CertSelector: java.math.BigInteger serialNumber>;
        if $r15 == null goto label1;

        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Serial Number: ");
        $r18 = r0.<java.security.cert.X509CertSelector: java.math.BigInteger serialNumber>;
        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.lang.String toString()>();
        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

     label1:
        $r24 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        if $r24 == null goto label2;

        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Issuer: ");
        $r27 = virtualinvoke r0.<java.security.cert.X509CertSelector: java.lang.String getIssuerAsString()>();
        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

     label2:
        $r32 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        if $r32 == null goto label3;

        $r33 = new java.lang.StringBuilder;
        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Subject: ");
        $r35 = virtualinvoke r0.<java.security.cert.X509CertSelector: java.lang.String getSubjectAsString()>();
        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

     label3:
        $r40 = new java.lang.StringBuilder;
        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  matchAllSubjectAltNames flag: ");
        $z0 = r0.<java.security.cert.X509CertSelector: boolean matchAllSubjectAltNames>;
        $r42 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);
        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);
        $r47 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        if $r47 == null goto label5;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  SubjectAlternativeNames:\n");
        $r49 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        r3 = interfaceinvoke $r49.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label5;

        $r50 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.List) $r50;
        $r51 = new java.lang.StringBuilder;
        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();
        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    type ");
        $r53 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);
        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r53);
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", name ");
        $r56 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(1);
        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);
        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r59);
        goto label4;

     label5:
        $r61 = r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID>;
        if $r61 == null goto label6;

        $r62 = new sun.misc.HexDumpEncoder;
        specialinvoke $r62.<sun.misc.HexDumpEncoder: void <init>()>();
        r63 = $r62;
        $r64 = new java.lang.StringBuilder;
        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();
        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Subject Key Identifier: ");
        $r66 = r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID>;
        $r67 = virtualinvoke r63.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>($r66);
        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);
        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r70);

     label6:
        $r72 = r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID>;
        if $r72 == null goto label7;

        $r73 = new sun.misc.HexDumpEncoder;
        specialinvoke $r73.<sun.misc.HexDumpEncoder: void <init>()>();
        r74 = $r73;
        $r75 = new java.lang.StringBuilder;
        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();
        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Authority Key Identifier: ");
        $r77 = r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID>;
        $r78 = virtualinvoke r74.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>($r77);
        $r79 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);
        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r81);

     label7:
        $r83 = r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid>;
        if $r83 == null goto label8;

        $r84 = new java.lang.StringBuilder;
        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();
        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Certificate Valid: ");
        $r86 = r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid>;
        $r87 = virtualinvoke $r86.<java.util.Date: java.lang.String toString()>();
        $r88 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);
        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r90);

     label8:
        $r92 = r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid>;
        if $r92 == null goto label9;

        $r93 = new java.lang.StringBuilder;
        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();
        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Private Key Valid: ");
        $r95 = r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid>;
        $r96 = virtualinvoke $r95.<java.util.Date: java.lang.String toString()>();
        $r97 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r96);
        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r99);

     label9:
        $r101 = r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID>;
        if $r101 == null goto label10;

        $r102 = new java.lang.StringBuilder;
        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();
        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Subject Public Key AlgID: ");
        $r104 = r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID>;
        $r105 = virtualinvoke $r104.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        $r106 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r105);
        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r108);

     label10:
        $r110 = r0.<java.security.cert.X509CertSelector: java.security.PublicKey subjectPublicKey>;
        if $r110 == null goto label11;

        $r111 = new java.lang.StringBuilder;
        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();
        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Subject Public Key: ");
        $r113 = r0.<java.security.cert.X509CertSelector: java.security.PublicKey subjectPublicKey>;
        $r114 = virtualinvoke $r113.<java.lang.Object: java.lang.String toString()>();
        $r115 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r114);
        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r117);

     label11:
        $r119 = r0.<java.security.cert.X509CertSelector: boolean[] keyUsage>;
        if $r119 == null goto label12;

        $r120 = new java.lang.StringBuilder;
        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();
        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Key Usage: ");
        $r122 = r0.<java.security.cert.X509CertSelector: boolean[] keyUsage>;
        $r123 = staticinvoke <java.security.cert.X509CertSelector: java.lang.String keyUsageToString(boolean[])>($r122);
        $r124 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r123);
        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r126);

     label12:
        $r128 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet>;
        if $r128 == null goto label13;

        $r129 = new java.lang.StringBuilder;
        specialinvoke $r129.<java.lang.StringBuilder: void <init>()>();
        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Extended Key Usage: ");
        $r131 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet>;
        $r132 = virtualinvoke $r131.<java.lang.Object: java.lang.String toString()>();
        $r133 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r132);
        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r135);

     label13:
        $r137 = r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy>;
        if $r137 == null goto label14;

        $r138 = new java.lang.StringBuilder;
        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();
        $r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Policy: ");
        $r140 = r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy>;
        $r141 = virtualinvoke $r140.<sun.security.x509.CertificatePolicySet: java.lang.String toString()>();
        $r142 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r141);
        $r143 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r144 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r144);

     label14:
        $r146 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        if $r146 == null goto label16;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Path to names:\n");
        $r148 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        r149 = interfaceinvoke $r148.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z2 = interfaceinvoke r149.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label16;

        $r150 = new java.lang.StringBuilder;
        specialinvoke $r150.<java.lang.StringBuilder: void <init>()>();
        $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r152 = interfaceinvoke r149.<java.util.Iterator: java.lang.Object next()>();
        $r153 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r152);
        $r154 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r155);
        goto label15;

     label16:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");
        $r158 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r158;
    }

    private static java.lang.String keyUsageToString(boolean[])
    {
        boolean[] r0;
        java.lang.String r1, r34;
        java.lang.ArrayIndexOutOfBoundsException r2, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r33;

        r0 := @parameter0: boolean[];
        r1 = "KeyUsage [\n";

     label0:
        $z0 = r0[0];
        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  DigitalSignature\n");
        r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $z1 = r0[1];
        if $z1 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Non_repudiation\n");
        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $z2 = r0[2];
        if $z2 == 0 goto label3;

        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Key_Encipherment\n");
        r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $z3 = r0[3];
        if $z3 == 0 goto label4;

        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Data_Encipherment\n");
        r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $z4 = r0[4];
        if $z4 == 0 goto label5;

        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Key_Agreement\n");
        r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $z5 = r0[5];
        if $z5 == 0 goto label6;

        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Key_CertSign\n");
        r1 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $z6 = r0[6];
        if $z6 == 0 goto label7;

        $r21 = new java.lang.StringBuilder;
        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Crl_Sign\n");
        r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        $z7 = r0[7];
        if $z7 == 0 goto label8;

        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Encipher_Only\n");
        r1 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        $z8 = r0[8];
        if $z8 == 0 goto label9;

        $r27 = new java.lang.StringBuilder;
        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Decipher_Only\n");
        r1 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label9:
        goto label11;

     label10:
        $r30 := @caughtexception;
        r2 = $r30;

     label11:
        $r31 = new java.lang.StringBuilder;
        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");
        r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        return r34;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label9 with label10;
    }

    private static java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate, int) throws java.io.IOException
    {
        java.security.cert.X509Certificate r0;
        int i0;
        sun.security.x509.X509CertImpl r1;
        java.lang.String[] $r2;
        sun.security.util.DerInputStream r3, $r13;
        byte[] r4, r12;
        java.security.cert.CertificateException r5, $r16;
        boolean $z0;
        sun.security.x509.PrivateKeyUsageExtension $r6, $r14;
        sun.security.x509.SubjectAlternativeNameExtension $r7, $r19;
        sun.security.x509.NameConstraintsExtension $r8, $r21;
        sun.security.x509.CertificatePoliciesExtension $r9, $r23;
        sun.security.x509.ExtendedKeyUsageExtension $r10, $r25;
        java.lang.String $r11, $r18;
        java.lang.Boolean $r15, $r20, $r22, $r24, $r26;
        java.io.IOException $r17;

        r0 := @parameter0: java.security.cert.X509Certificate;
        i0 := @parameter1: int;
        $z0 = r0 instanceof sun.security.x509.X509CertImpl;
        if $z0 == 0 goto label6;

        r1 = (sun.security.x509.X509CertImpl) r0;
        tableswitch(i0)
        {
            case 0: goto label0;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label0:
        $r6 = virtualinvoke r1.<sun.security.x509.X509CertImpl: sun.security.x509.PrivateKeyUsageExtension getPrivateKeyUsageExtension()>();
        return $r6;

     label1:
        $r7 = virtualinvoke r1.<sun.security.x509.X509CertImpl: sun.security.x509.SubjectAlternativeNameExtension getSubjectAlternativeNameExtension()>();
        return $r7;

     label2:
        $r8 = virtualinvoke r1.<sun.security.x509.X509CertImpl: sun.security.x509.NameConstraintsExtension getNameConstraintsExtension()>();
        return $r8;

     label3:
        $r9 = virtualinvoke r1.<sun.security.x509.X509CertImpl: sun.security.x509.CertificatePoliciesExtension getCertificatePoliciesExtension()>();
        return $r9;

     label4:
        $r10 = virtualinvoke r1.<sun.security.x509.X509CertImpl: sun.security.x509.ExtendedKeyUsageExtension getExtendedKeyUsageExtension()>();
        return $r10;

     label5:
        return null;

     label6:
        $r2 = <java.security.cert.X509CertSelector: java.lang.String[] EXTENSION_OIDS>;
        $r11 = $r2[i0];
        r12 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>($r11);
        if r12 != null goto label7;

        return null;

     label7:
        $r13 = new sun.security.util.DerInputStream;
        specialinvoke $r13.<sun.security.util.DerInputStream: void <init>(byte[])>(r12);
        r3 = $r13;
        r4 = virtualinvoke r3.<sun.security.util.DerInputStream: byte[] getOctetString()>();
        tableswitch(i0)
        {
            case 0: goto label8;
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label14;
            default: goto label15;
        };

     label8:
        $r14 = new sun.security.x509.PrivateKeyUsageExtension;
        $r15 = <java.security.cert.X509CertSelector: java.lang.Boolean FALSE>;
        specialinvoke $r14.<sun.security.x509.PrivateKeyUsageExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r15, r4);

     label9:
        return $r14;

     label10:
        $r16 := @caughtexception;
        r5 = $r16;
        $r17 = new java.io.IOException;
        $r18 = virtualinvoke r5.<java.security.cert.CertificateException: java.lang.String getMessage()>();
        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r18);
        throw $r17;

     label11:
        $r19 = new sun.security.x509.SubjectAlternativeNameExtension;
        $r20 = <java.security.cert.X509CertSelector: java.lang.Boolean FALSE>;
        specialinvoke $r19.<sun.security.x509.SubjectAlternativeNameExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r20, r4);
        return $r19;

     label12:
        $r21 = new sun.security.x509.NameConstraintsExtension;
        $r22 = <java.security.cert.X509CertSelector: java.lang.Boolean FALSE>;
        specialinvoke $r21.<sun.security.x509.NameConstraintsExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r22, r4);
        return $r21;

     label13:
        $r23 = new sun.security.x509.CertificatePoliciesExtension;
        $r24 = <java.security.cert.X509CertSelector: java.lang.Boolean FALSE>;
        specialinvoke $r23.<sun.security.x509.CertificatePoliciesExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r24, r4);
        return $r23;

     label14:
        $r25 = new sun.security.x509.ExtendedKeyUsageExtension;
        $r26 = <java.security.cert.X509CertSelector: java.lang.Boolean FALSE>;
        specialinvoke $r25.<sun.security.x509.ExtendedKeyUsageExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r26, r4);
        return $r25;

     label15:
        return null;

        catch java.security.cert.CertificateException from label8 to label9 with label10;
    }

    public boolean match(java.security.cert.Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.Certificate r1;
        java.security.cert.X509Certificate r2, $r19, $r20;
        java.lang.StringBuilder $r3, $r7, $r10, $r11, $r13, $r14, $r16, $r17;
        java.security.cert.CertificateException r4, $r40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18;
        sun.security.util.Debug $r5, $r6, $r21, $r22, $r26, $r27, $r31, $r32, $r36, $r37, $r41, $r42, $r47, $r48, $r49, $r50;
        java.math.BigInteger $r8, $r23, $r24, $r25;
        java.lang.String $r9, $r18;
        java.security.Principal $r12, $r15;
        javax.security.auth.x500.X500Principal $r28, $r29, $r30, $r33, $r34, $r35;
        java.util.Date $r38, $r39;
        byte[] $r43, r45, $r46;
        java.security.PublicKey $r44;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.Certificate;
        $z0 = r1 instanceof java.security.cert.X509Certificate;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.security.cert.X509Certificate) r1;
        $r5 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r5 == null goto label1;

        $r6 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match(SN: ");
        $r8 = virtualinvoke r2.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();
        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  Issuer: ");
        $r12 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  Subject: ");
        $r15 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r6.<sun.security.util.Debug: void println(java.lang.String)>($r18);

     label1:
        $r19 = r0.<java.security.cert.X509CertSelector: java.security.cert.X509Certificate x509Cert>;
        if $r19 == null goto label3;

        $r20 = r0.<java.security.cert.X509CertSelector: java.security.cert.X509Certificate x509Cert>;
        $z1 = virtualinvoke $r20.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>(r2);
        if $z1 != 0 goto label3;

        $r21 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r21 == null goto label2;

        $r22 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r22.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: certs don\'t match");

     label2:
        return 0;

     label3:
        $r23 = r0.<java.security.cert.X509CertSelector: java.math.BigInteger serialNumber>;
        if $r23 == null goto label5;

        $r24 = r0.<java.security.cert.X509CertSelector: java.math.BigInteger serialNumber>;
        $r25 = virtualinvoke r2.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();
        $z2 = virtualinvoke $r24.<java.math.BigInteger: boolean equals(java.lang.Object)>($r25);
        if $z2 != 0 goto label5;

        $r26 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r26 == null goto label4;

        $r27 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r27.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: serial numbers don\'t match");

     label4:
        return 0;

     label5:
        $r28 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        if $r28 == null goto label7;

        $r29 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal issuer>;
        $r30 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        $z3 = virtualinvoke $r29.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r30);
        if $z3 != 0 goto label7;

        $r31 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r31 == null goto label6;

        $r32 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r32.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: issuer DNs don\'t match");

     label6:
        return 0;

     label7:
        $r33 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        if $r33 == null goto label9;

        $r34 = r0.<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal subject>;
        $r35 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        $z4 = virtualinvoke $r34.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r35);
        if $z4 != 0 goto label9;

        $r36 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r36 == null goto label8;

        $r37 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r37.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: subject DNs don\'t match");

     label8:
        return 0;

     label9:
        $r38 = r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid>;
        if $r38 == null goto label14;

     label10:
        $r39 = r0.<java.security.cert.X509CertSelector: java.util.Date certificateValid>;
        virtualinvoke r2.<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>($r39);

     label11:
        goto label14;

     label12:
        $r40 := @caughtexception;
        r4 = $r40;
        $r41 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r41 == null goto label13;

        $r42 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r42.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: certificate not within validity period");

     label13:
        return 0;

     label14:
        $r43 = r0.<java.security.cert.X509CertSelector: byte[] subjectPublicKeyBytes>;
        if $r43 == null goto label16;

        $r44 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        r45 = interfaceinvoke $r44.<java.security.PublicKey: byte[] getEncoded()>();
        $r46 = r0.<java.security.cert.X509CertSelector: byte[] subjectPublicKeyBytes>;
        $z5 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r46, r45);
        if $z5 != 0 goto label16;

        $r47 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r47 == null goto label15;

        $r48 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r48.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: subject public keys don\'t match");

     label15:
        return 0;

     label16:
        $z6 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchBasicConstraints(java.security.cert.X509Certificate)>(r2);
        if $z6 == 0 goto label17;

        $z7 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchKeyUsage(java.security.cert.X509Certificate)>(r2);
        if $z7 == 0 goto label17;

        $z8 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchExtendedKeyUsage(java.security.cert.X509Certificate)>(r2);
        if $z8 == 0 goto label17;

        $z9 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchSubjectKeyID(java.security.cert.X509Certificate)>(r2);
        if $z9 == 0 goto label17;

        $z10 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchAuthorityKeyID(java.security.cert.X509Certificate)>(r2);
        if $z10 == 0 goto label17;

        $z11 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchPrivateKeyValid(java.security.cert.X509Certificate)>(r2);
        if $z11 == 0 goto label17;

        $z12 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchSubjectPublicKeyAlgID(java.security.cert.X509Certificate)>(r2);
        if $z12 == 0 goto label17;

        $z13 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchPolicy(java.security.cert.X509Certificate)>(r2);
        if $z13 == 0 goto label17;

        $z14 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchSubjectAlternativeNames(java.security.cert.X509Certificate)>(r2);
        if $z14 == 0 goto label17;

        $z15 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchPathToNames(java.security.cert.X509Certificate)>(r2);
        if $z15 == 0 goto label17;

        $z16 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchNameConstraints(java.security.cert.X509Certificate)>(r2);
        if $z16 == 0 goto label17;

        $z17 = 1;
        goto label18;

     label17:
        $z17 = 0;

     label18:
        z18 = $z17;
        if z18 == 0 goto label19;

        $r49 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r49 == null goto label19;

        $r50 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r50.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match returning: true");

     label19:
        return z18;

        catch java.security.cert.CertificateException from label10 to label11 with label12;
    }

    private boolean matchSubjectKeyID(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        byte[] r2, r4, $r5, $r9;
        sun.security.util.DerInputStream r3, $r8;
        sun.security.util.Debug $r6, $r7, $r10, $r11, $r14, $r15;
        boolean $z0, $z1, $z2;
        java.io.IOException $r12, r13;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r5 = r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID>;
        if $r5 != null goto label0;

        return 1;

     label0:
        r2 = virtualinvoke r1.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>("2.5.29.14");
        if r2 != null goto label3;

        $r6 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r6 == null goto label1;

        $r7 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r7.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: no subject key ID extension");

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r8 = new sun.security.util.DerInputStream;
        specialinvoke $r8.<sun.security.util.DerInputStream: void <init>(byte[])>(r2);
        r3 = $r8;
        r4 = virtualinvoke r3.<sun.security.util.DerInputStream: byte[] getOctetString()>();
        if r4 == null goto label4;

        $r9 = r0.<java.security.cert.X509CertSelector: byte[] subjectKeyID>;
        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, r4);
        if $z1 != 0 goto label7;

     label4:
        $r10 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r10 == null goto label5;

        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r11.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: subject key IDs don\'t match");

     label5:
        $z2 = 0;

     label6:
        return $z2;

     label7:
        goto label10;

     label8:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r14 == null goto label9;

        $r15 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r15.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: exception in subject key ID check");

     label9:
        return 0;

     label10:
        return 1;

        catch java.io.IOException from label0 to label2 with label8;
        catch java.io.IOException from label3 to label6 with label8;
    }

    private boolean matchAuthorityKeyID(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        byte[] r2, r4, $r5, $r9;
        sun.security.util.DerInputStream r3, $r8;
        sun.security.util.Debug $r6, $r7, $r10, $r11, $r14, $r15;
        boolean $z0, $z1, $z2;
        java.io.IOException $r12, r13;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r5 = r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID>;
        if $r5 != null goto label0;

        return 1;

     label0:
        r2 = virtualinvoke r1.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>("2.5.29.35");
        if r2 != null goto label3;

        $r6 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r6 == null goto label1;

        $r7 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r7.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: no authority key ID extension");

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r8 = new sun.security.util.DerInputStream;
        specialinvoke $r8.<sun.security.util.DerInputStream: void <init>(byte[])>(r2);
        r3 = $r8;
        r4 = virtualinvoke r3.<sun.security.util.DerInputStream: byte[] getOctetString()>();
        if r4 == null goto label4;

        $r9 = r0.<java.security.cert.X509CertSelector: byte[] authorityKeyID>;
        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, r4);
        if $z1 != 0 goto label7;

     label4:
        $r10 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r10 == null goto label5;

        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r11.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: authority key IDs don\'t match");

     label5:
        $z2 = 0;

     label6:
        return $z2;

     label7:
        goto label10;

     label8:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r14 == null goto label9;

        $r15 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r15.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: exception in authority key ID check");

     label9:
        return 0;

     label10:
        return 1;

        catch java.io.IOException from label0 to label2 with label8;
        catch java.io.IOException from label3 to label6 with label8;
    }

    private boolean matchPrivateKeyValid(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        sun.security.x509.PrivateKeyUsageExtension r2;
        java.security.cert.CertificateExpiredException r3, $r9;
        java.lang.String r4, $r19, $r21, r25, $r35, $r37, $r44, $r46, $r53, $r55;
        java.util.Date r5, $r6, $r8, r27;
        java.security.cert.Extension $r7;
        sun.security.util.Debug $r10, $r14, $r24, $r30, $r40, $r41, $r49, $r50;
        java.lang.Object $r11, $r26;
        java.security.cert.CertificateException $r12, r13, $r28, r29, $r38, r39;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r20, $r31, $r32, $r33, $r34, $r36, $r42, $r43, $r45, $r51, $r52, $r54;
        java.security.cert.CertificateNotYetValidException $r22, r23;
        java.io.IOException $r47, r48;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r6 = r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid>;
        if $r6 != null goto label0;

        return 1;

     label0:
        r2 = null;

     label1:
        $r7 = staticinvoke <java.security.cert.X509CertSelector: java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate,int)>(r1, 0);
        r2 = (sun.security.x509.PrivateKeyUsageExtension) $r7;
        if r2 == null goto label2;

        $r8 = r0.<java.security.cert.X509CertSelector: java.util.Date privateKeyValid>;
        virtualinvoke r2.<sun.security.x509.PrivateKeyUsageExtension: void valid(java.util.Date)>($r8);

     label2:
        goto label19;

     label3:
        $r9 := @caughtexception;
        r3 = $r9;
        $r10 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r10 == null goto label8;

        r4 = "n/a";

     label4:
        $r11 = virtualinvoke r2.<sun.security.x509.PrivateKeyUsageExtension: java.lang.Object get(java.lang.String)>("not_after");
        r5 = (java.util.Date) $r11;
        r4 = virtualinvoke r5.<java.util.Date: java.lang.String toString()>();

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;
        r13 = $r12;

     label7:
        $r14 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: private key usage not within validity date; ext.NOT_After: ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; X509CertSelector: ");
        $r19 = virtualinvoke r0.<java.security.cert.X509CertSelector: java.lang.String toString()>();
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r14.<sun.security.util.Debug: void println(java.lang.String)>($r21);
        virtualinvoke r3.<java.security.cert.CertificateExpiredException: void printStackTrace()>();

     label8:
        return 0;

     label9:
        $r22 := @caughtexception;
        r23 = $r22;
        $r24 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r24 == null goto label14;

        r25 = "n/a";

     label10:
        $r26 = virtualinvoke r2.<sun.security.x509.PrivateKeyUsageExtension: java.lang.Object get(java.lang.String)>("not_before");
        r27 = (java.util.Date) $r26;
        r25 = virtualinvoke r27.<java.util.Date: java.lang.String toString()>();

     label11:
        goto label13;

     label12:
        $r28 := @caughtexception;
        r29 = $r28;

     label13:
        $r30 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r31 = new java.lang.StringBuilder;
        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: private key usage not within validity date; ext.NOT_BEFORE: ");
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; X509CertSelector: ");
        $r35 = virtualinvoke r0.<java.security.cert.X509CertSelector: java.lang.String toString()>();
        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r30.<sun.security.util.Debug: void println(java.lang.String)>($r37);
        virtualinvoke r23.<java.security.cert.CertificateNotYetValidException: void printStackTrace()>();

     label14:
        return 0;

     label15:
        $r38 := @caughtexception;
        r39 = $r38;
        $r40 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r40 == null goto label16;

        $r41 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r42 = new java.lang.StringBuilder;
        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: CertificateException in private key usage check; X509CertSelector: ");
        $r44 = virtualinvoke r0.<java.security.cert.X509CertSelector: java.lang.String toString()>();
        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);
        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r41.<sun.security.util.Debug: void println(java.lang.String)>($r46);
        virtualinvoke r39.<java.security.cert.CertificateException: void printStackTrace()>();

     label16:
        return 0;

     label17:
        $r47 := @caughtexception;
        r48 = $r47;
        $r49 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r49 == null goto label18;

        $r50 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r51 = new java.lang.StringBuilder;
        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();
        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: IOException in private key usage check; X509CertSelector: ");
        $r53 = virtualinvoke r0.<java.security.cert.X509CertSelector: java.lang.String toString()>();
        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r50.<sun.security.util.Debug: void println(java.lang.String)>($r55);
        virtualinvoke r48.<java.io.IOException: void printStackTrace()>();

     label18:
        return 0;

     label19:
        return 1;

        catch java.security.cert.CertificateExpiredException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label4 to label5 with label6;
        catch java.security.cert.CertificateNotYetValidException from label1 to label2 with label9;
        catch java.security.cert.CertificateException from label10 to label11 with label12;
        catch java.security.cert.CertificateException from label1 to label2 with label15;
        catch java.io.IOException from label1 to label2 with label17;
    }

    private boolean matchSubjectPublicKeyAlgID(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        byte[] r2;
        sun.security.util.DerValue r3, $r7, $r10;
        sun.security.x509.AlgorithmId r4;
        sun.security.util.ObjectIdentifier $r5, $r15, $r18, $r21, $r22;
        java.security.PublicKey $r6;
        byte $b0;
        java.io.IOException $r8, $r25, r26;
        sun.security.util.DerInputStream $r9;
        sun.security.util.Debug $r11, $r12, $r23, $r24, $r27, $r28;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r19;
        java.lang.String $r20;
        boolean $z0, $z1;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r5 = r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID>;
        if $r5 != null goto label0;

        return 1;

     label0:
        $r6 = virtualinvoke r1.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        r2 = interfaceinvoke $r6.<java.security.PublicKey: byte[] getEncoded()>();
        $r7 = new sun.security.util.DerValue;
        specialinvoke $r7.<sun.security.util.DerValue: void <init>(byte[])>(r2);
        r3 = $r7;
        $b0 = r3.<sun.security.util.DerValue: byte tag>;
        if $b0 == 48 goto label1;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("invalid key format");
        throw $r8;

     label1:
        $r9 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r10 = virtualinvoke $r9.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r4 = staticinvoke <sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId parse(sun.security.util.DerValue)>($r10);
        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r11 == null goto label2;

        $r12 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: subjectPublicKeyAlgID = ");
        $r15 = r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID>;
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", xcert subjectPublicKeyAlgID = ");
        $r18 = virtualinvoke r4.<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier getOID()>();
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r12.<sun.security.util.Debug: void println(java.lang.String)>($r20);

     label2:
        $r21 = r0.<java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier subjectPublicKeyAlgID>;
        $r22 = virtualinvoke r4.<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier getOID()>();
        $z0 = virtualinvoke $r21.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>($r22);
        if $z0 != 0 goto label5;

        $r23 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r23 == null goto label3;

        $r24 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r24.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: subject public key alg IDs don\'t match");

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        goto label8;

     label6:
        $r25 := @caughtexception;
        r26 = $r25;
        $r27 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r27 == null goto label7;

        $r28 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r28.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: IOException in subject public key algorithm OID check");

     label7:
        return 0;

     label8:
        return 1;

        catch java.io.IOException from label0 to label4 with label6;
    }

    private boolean matchKeyUsage(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        boolean[] r2, $r3, $r4, $r5;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        sun.security.util.Debug $r6, $r7;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r3 = r0.<java.security.cert.X509CertSelector: boolean[] keyUsage>;
        if $r3 != null goto label0;

        return 1;

     label0:
        r2 = virtualinvoke r1.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();
        if r2 == null goto label5;

        i0 = 0;

     label1:
        $r4 = r0.<java.security.cert.X509CertSelector: boolean[] keyUsage>;
        $i1 = lengthof $r4;
        if i0 >= $i1 goto label5;

        $r5 = r0.<java.security.cert.X509CertSelector: boolean[] keyUsage>;
        $z0 = $r5[i0];
        if $z0 == 0 goto label4;

        $i2 = lengthof r2;
        if i0 >= $i2 goto label2;

        $z1 = r2[i0];
        if $z1 != 0 goto label4;

     label2:
        $r6 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r6 == null goto label3;

        $r7 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r7.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: key usage bits don\'t match");

     label3:
        return 0;

     label4:
        i0 = i0 + 1;
        goto label1;

     label5:
        return 1;
    }

    private boolean matchExtendedKeyUsage(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        sun.security.x509.ExtendedKeyUsageExtension r2;
        java.util.Vector r3;
        java.util.Set $r4, $r5, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.security.cert.Extension $r6;
        java.lang.Object $r7;
        sun.security.util.ObjectIdentifier $r8;
        sun.security.util.Debug $r10, $r11, $r14, $r15;
        java.io.IOException $r12, r13;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r4 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet>;
        if $r4 == null goto label0;

        $r5 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeSet>;
        $z0 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>();
        if $z0 == 0 goto label1;

     label0:
        return 1;

     label1:
        $r6 = staticinvoke <java.security.cert.X509CertSelector: java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate,int)>(r1, 4);
        r2 = (sun.security.x509.ExtendedKeyUsageExtension) $r6;
        if r2 == null goto label4;

        $r7 = virtualinvoke r2.<sun.security.x509.ExtendedKeyUsageExtension: java.lang.Object get(java.lang.String)>("usages");
        r3 = (java.util.Vector) $r7;
        $r8 = <java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier ANY_EXTENDED_KEY_USAGE>;
        $z1 = virtualinvoke r3.<java.util.Vector: boolean contains(java.lang.Object)>($r8);
        if $z1 != 0 goto label4;

        $r9 = r0.<java.security.cert.X509CertSelector: java.util.Set keyPurposeOIDSet>;
        $z2 = virtualinvoke r3.<java.util.Vector: boolean containsAll(java.util.Collection)>($r9);
        if $z2 != 0 goto label4;

        $r10 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r10 == null goto label2;

        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r11.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: cert failed extendedKeyUsage criterion");

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r14 == null goto label6;

        $r15 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r15.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: IOException in extended key usage check");

     label6:
        return 0;

     label7:
        return 1;

        catch java.io.IOException from label1 to label3 with label5;
    }

    private boolean matchSubjectAlternativeNames(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        sun.security.x509.SubjectAlternativeNameExtension r2;
        sun.security.x509.GeneralNames r3;
        java.util.Iterator r4, r6;
        sun.security.x509.GeneralNameInterface r5, r7;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r8, $r9, $r14;
        java.security.cert.Extension $r10;
        sun.security.util.Debug $r11, $r12, $r18, $r19, $r27, $r28;
        java.lang.Object $r13, $r15, $r16;
        sun.security.x509.GeneralName $r17;
        java.lang.StringBuilder $r20, $r21, $r22, $r23;
        java.lang.String $r24;
        java.io.IOException $r25, r26;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r8 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        if $r8 == null goto label0;

        $r9 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        $z1 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>();
        if $z1 == 0 goto label1;

     label0:
        return 1;

     label1:
        $r10 = staticinvoke <java.security.cert.X509CertSelector: java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate,int)>(r1, 1);
        r2 = (sun.security.x509.SubjectAlternativeNameExtension) $r10;
        if r2 != null goto label4;

        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r11 == null goto label2;

        $r12 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r12.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: no subject alternative name extension");

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r13 = virtualinvoke r2.<sun.security.x509.SubjectAlternativeNameExtension: java.lang.Object get(java.lang.String)>("subject_name");
        r3 = (sun.security.x509.GeneralNames) $r13;
        $r14 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames>;
        r4 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label13;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (sun.security.x509.GeneralNameInterface) $r15;
        z0 = 0;
        r6 = virtualinvoke r3.<sun.security.x509.GeneralNames: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z4 == 0 goto label7;

        if z0 != 0 goto label7;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        $r17 = (sun.security.x509.GeneralName) $r16;
        r7 = virtualinvoke $r17.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        z0 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        goto label6;

     label7:
        if z0 != 0 goto label11;

        $z5 = r0.<java.security.cert.X509CertSelector: boolean matchAllSubjectAltNames>;
        if $z5 != 0 goto label8;

        $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z6 != 0 goto label11;

     label8:
        $r18 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r18 == null goto label9;

        $r19 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r20 = new java.lang.StringBuilder;
        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: subject alternative name ");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r19.<sun.security.util.Debug: void println(java.lang.String)>($r24);

     label9:
        $z7 = 0;

     label10:
        return $z7;

     label11:
        if z0 == 0 goto label12;

        $z8 = r0.<java.security.cert.X509CertSelector: boolean matchAllSubjectAltNames>;
        if $z8 != 0 goto label12;

        goto label13;

     label12:
        goto label5;

     label13:
        goto label16;

     label14:
        $r25 := @caughtexception;
        r26 = $r25;
        $r27 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r27 == null goto label15;

        $r28 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r28.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: IOException in subject alternative name check");

     label15:
        return 0;

     label16:
        return 1;

        catch java.io.IOException from label1 to label3 with label14;
        catch java.io.IOException from label4 to label10 with label14;
        catch java.io.IOException from label11 to label13 with label14;
    }

    private boolean matchNameConstraints(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        java.io.IOException r2, $r7;
        sun.security.x509.NameConstraintsExtension $r3, $r4;
        boolean $z0, $z1;
        sun.security.util.Debug $r5, $r6, $r8, $r9;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r3 = r0.<java.security.cert.X509CertSelector: sun.security.x509.NameConstraintsExtension nc>;
        if $r3 != null goto label0;

        return 1;

     label0:
        $r4 = r0.<java.security.cert.X509CertSelector: sun.security.x509.NameConstraintsExtension nc>;
        $z0 = virtualinvoke $r4.<sun.security.x509.NameConstraintsExtension: boolean verify(java.security.cert.X509Certificate)>(r1);
        if $z0 != 0 goto label3;

        $r5 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r5 == null goto label1;

        $r6 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r6.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: name constraints not satisfied");

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;
        r2 = $r7;
        $r8 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r8 == null goto label5;

        $r9 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r9.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: IOException in name constraints check");

     label5:
        return 0;

     label6:
        return 1;

        catch java.io.IOException from label0 to label2 with label4;
    }

    private boolean matchPolicy(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        sun.security.x509.CertificatePoliciesExtension r2;
        java.util.List r3, $r18, $r22;
        java.util.ArrayList r4, $r13;
        java.util.Iterator r5, r23;
        sun.security.x509.PolicyInformation r6;
        sun.security.x509.CertificatePolicyId r7, $r15;
        sun.security.x509.CertificatePolicySet $r8, $r16, $r17, $r21;
        java.security.cert.Extension $r9;
        sun.security.util.Debug $r10, $r11, $r19, $r20, $r25, $r26, $r29, $r30;
        boolean $z0, $z1, z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object $r12, $r14, $r24;
        int $i0;
        java.io.IOException $r27, r28;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r8 = r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy>;
        if $r8 != null goto label0;

        return 1;

     label0:
        $r9 = staticinvoke <java.security.cert.X509CertSelector: java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate,int)>(r1, 3);
        r2 = (sun.security.x509.CertificatePoliciesExtension) $r9;
        if r2 != null goto label3;

        $r10 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r10 == null goto label1;

        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r11.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: no certificate policy extension");

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r12 = virtualinvoke r2.<sun.security.x509.CertificatePoliciesExtension: java.lang.Object get(java.lang.String)>("policies");
        r3 = (java.util.List) $r12;
        $r13 = new java.util.ArrayList;
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();
        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i0);
        r4 = $r13;
        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label5;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (sun.security.x509.PolicyInformation) $r14;
        $r15 = virtualinvoke r6.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId getPolicyIdentifier()>();
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r15);
        goto label4;

     label5:
        $r16 = r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy>;
        if $r16 == null goto label14;

        z3 = 0;
        $r17 = r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy>;
        $r18 = virtualinvoke $r17.<sun.security.x509.CertificatePolicySet: java.util.List getCertPolicyIds()>();
        $z4 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>();
        if $z4 == 0 goto label8;

        $z5 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();
        if $z5 == 0 goto label14;

        $r19 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r19 == null goto label6;

        $r20 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r20.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: cert failed policyAny criterion");

     label6:
        $z6 = 0;

     label7:
        return $z6;

     label8:
        $r21 = r0.<java.security.cert.X509CertSelector: sun.security.x509.CertificatePolicySet policy>;
        $r22 = virtualinvoke $r21.<sun.security.x509.CertificatePolicySet: java.util.List getCertPolicyIds()>();
        r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label9:
        $z7 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();
        if $z7 == 0 goto label11;

        $r24 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();
        r7 = (sun.security.x509.CertificatePolicyId) $r24;
        $z8 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>(r7);
        if $z8 == 0 goto label10;

        z3 = 1;
        goto label11;

     label10:
        goto label9;

     label11:
        if z3 != 0 goto label14;

        $r25 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r25 == null goto label12;

        $r26 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r26.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: cert failed policyAny criterion");

     label12:
        $z9 = 0;

     label13:
        return $z9;

     label14:
        goto label17;

     label15:
        $r27 := @caughtexception;
        r28 = $r27;
        $r29 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r29 == null goto label16;

        $r30 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r30.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: IOException in certificate policy ID check");

     label16:
        return 0;

     label17:
        return 1;

        catch java.io.IOException from label0 to label2 with label15;
        catch java.io.IOException from label3 to label7 with label15;
        catch java.io.IOException from label8 to label13 with label15;
    }

    private boolean matchPathToNames(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        sun.security.x509.NameConstraintsExtension r2;
        java.util.Iterator r3;
        sun.security.x509.GeneralSubtrees r4, r19;
        java.util.Set $r5, $r10;
        java.security.cert.Extension $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        sun.security.util.Debug $r7, $r8, $r9, $r11, $r23, $r24;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;
        java.lang.Object $r14, $r18, $r20;
        java.lang.String $r17;
        java.io.IOException $r21, r22;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r5 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        if $r5 != null goto label0;

        return 1;

     label0:
        $r6 = staticinvoke <java.security.cert.X509CertSelector: java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate,int)>(r1, 2);
        r2 = (sun.security.x509.NameConstraintsExtension) $r6;
        if r2 != null goto label2;

        $z0 = 1;

     label1:
        return $z0;

     label2:
        $r7 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r7 == null goto label4;

        $r8 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $z1 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("certpath");
        if $z1 == 0 goto label4;

        $r9 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r9.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match pathToNames:\n");
        $r10 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label4;

        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");
        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r11.<sun.security.util.Debug: void println(java.lang.String)>($r17);
        goto label3;

     label4:
        $r18 = virtualinvoke r2.<sun.security.x509.NameConstraintsExtension: java.lang.Object get(java.lang.String)>("permitted_subtrees");
        r19 = (sun.security.x509.GeneralSubtrees) $r18;
        $r20 = virtualinvoke r2.<sun.security.x509.NameConstraintsExtension: java.lang.Object get(java.lang.String)>("excluded_subtrees");
        r4 = (sun.security.x509.GeneralSubtrees) $r20;
        if r4 == null goto label6;

        $z3 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchExcluded(sun.security.x509.GeneralSubtrees)>(r4);
        if $z3 != 0 goto label6;

        $z4 = 0;

     label5:
        return $z4;

     label6:
        if r19 == null goto label8;

        $z5 = specialinvoke r0.<java.security.cert.X509CertSelector: boolean matchPermitted(sun.security.x509.GeneralSubtrees)>(r19);
        if $z5 != 0 goto label8;

        $z6 = 0;

     label7:
        return $z6;

     label8:
        goto label11;

     label9:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r23 == null goto label10;

        $r24 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r24.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: IOException in name constraints check");

     label10:
        return 0;

     label11:
        return 1;

        catch java.io.IOException from label0 to label1 with label9;
        catch java.io.IOException from label2 to label5 with label9;
        catch java.io.IOException from label6 to label7 with label9;
    }

    private boolean matchExcluded(sun.security.x509.GeneralSubtrees)
    {
        java.security.cert.X509CertSelector r0;
        sun.security.x509.GeneralSubtrees r1;
        java.util.Iterator r2, r5;
        sun.security.x509.GeneralSubtree r3;
        sun.security.x509.GeneralNameInterface r4, r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r10;
        sun.security.x509.GeneralName $r8;
        java.util.Set $r9;
        int $i0, $i1, $i2;
        sun.security.util.Debug $r11, $r12, $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: sun.security.x509.GeneralSubtrees;
        r2 = virtualinvoke r1.<sun.security.x509.GeneralSubtrees: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.security.x509.GeneralSubtree) $r7;
        $r8 = virtualinvoke r3.<sun.security.x509.GeneralSubtree: sun.security.x509.GeneralName getName()>();
        r4 = virtualinvoke $r8.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        $r9 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        r5 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (sun.security.x509.GeneralNameInterface) $r10;
        $i0 = interfaceinvoke r4.<sun.security.x509.GeneralNameInterface: int getType()>();
        $i1 = interfaceinvoke r6.<sun.security.x509.GeneralNameInterface: int getType()>();
        if $i0 != $i1 goto label4;

        $i2 = interfaceinvoke r6.<sun.security.x509.GeneralNameInterface: int constrains(sun.security.x509.GeneralNameInterface)>(r4);
        lookupswitch($i2)
        {
            case 0: goto label2;
            case 2: goto label2;
            default: goto label4;
        };

     label2:
        $r11 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r11 == null goto label3;

        $r12 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r12.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: name constraints inhibit path to specified name");
        $r13 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: excluded name: ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r13.<sun.security.util.Debug: void println(java.lang.String)>($r17);

     label3:
        return 0;

     label4:
        goto label1;

     label5:
        goto label0;

     label6:
        return 1;
    }

    private boolean matchPermitted(sun.security.x509.GeneralSubtrees)
    {
        java.security.cert.X509CertSelector r0;
        sun.security.x509.GeneralSubtrees r1;
        java.util.Iterator r2, r4;
        sun.security.x509.GeneralNameInterface r3, r7;
        boolean z0, z1, $z2, $z3;
        java.lang.String r5, $r23;
        sun.security.x509.GeneralSubtree r6;
        java.util.Set $r8;
        java.lang.Object $r9, $r10;
        sun.security.x509.GeneralName $r11;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r22;
        sun.security.util.Debug $r16, $r17;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: sun.security.x509.GeneralSubtrees;
        $r8 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.security.x509.GeneralNameInterface) $r9;
        r4 = virtualinvoke r1.<sun.security.x509.GeneralSubtrees: java.util.Iterator iterator()>();
        z0 = 0;
        z1 = 0;
        r5 = "";

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label4;

        if z0 != 0 goto label4;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r6 = (sun.security.x509.GeneralSubtree) $r10;
        $r11 = virtualinvoke r6.<sun.security.x509.GeneralSubtree: sun.security.x509.GeneralName getName()>();
        r7 = virtualinvoke $r11.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        $i0 = interfaceinvoke r7.<sun.security.x509.GeneralNameInterface: int getType()>();
        $i1 = interfaceinvoke r3.<sun.security.x509.GeneralNameInterface: int getType()>();
        if $i0 != $i1 goto label3;

        z1 = 1;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
        r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        $i2 = interfaceinvoke r3.<sun.security.x509.GeneralNameInterface: int constrains(sun.security.x509.GeneralNameInterface)>(r7);
        lookupswitch($i2)
        {
            case 0: goto label2;
            case 2: goto label2;
            default: goto label3;
        };

     label2:
        z0 = 1;
        goto label3;

     label3:
        goto label1;

     label4:
        if z0 != 0 goto label6;

        if z1 == 0 goto label6;

        $r16 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r16 == null goto label5;

        $r17 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: name constraints inhibit path to specified name; permitted names of type ");
        $i3 = interfaceinvoke r3.<sun.security.x509.GeneralNameInterface: int getType()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r17.<sun.security.util.Debug: void println(java.lang.String)>($r23);

     label5:
        return 0;

     label6:
        goto label0;

     label7:
        return 1;
    }

    private boolean matchBasicConstraints(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CertSelector r0;
        java.security.cert.X509Certificate r1;
        int i0, $i1, $i2, $i3, $i4;
        sun.security.util.Debug $r2, $r3, $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: java.security.cert.X509CertSelector;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $i1 = r0.<java.security.cert.X509CertSelector: int basicConstraints>;
        if $i1 != -1 goto label0;

        return 1;

     label0:
        i0 = virtualinvoke r1.<java.security.cert.X509Certificate: int getBasicConstraints()>();
        $i2 = r0.<java.security.cert.X509CertSelector: int basicConstraints>;
        if $i2 != -2 goto label2;

        if i0 == -1 goto label4;

        $r2 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r2 == null goto label1;

        $r3 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        virtualinvoke $r3.<sun.security.util.Debug: void println(java.lang.String)>("X509CertSelector.match: not an EE cert");

     label1:
        return 0;

     label2:
        $i3 = r0.<java.security.cert.X509CertSelector: int basicConstraints>;
        if i0 >= $i3 goto label4;

        $r4 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        if $r4 == null goto label3;

        $r5 = <java.security.cert.X509CertSelector: sun.security.util.Debug debug>;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X509CertSelector.match: maxPathLen too small (");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");
        $i4 = r0.<java.security.cert.X509CertSelector: int basicConstraints>;
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r5.<sun.security.util.Debug: void println(java.lang.String)>($r12);

     label3:
        return 0;

     label4:
        return 1;
    }

    private static java.util.Set cloneSet(java.util.Set)
    {
        java.util.Set r0, $r3;
        java.lang.Object r1;
        boolean $z0;
        java.util.HashSet $r2, $r4;

        r0 := @parameter0: java.util.Set;
        $z0 = r0 instanceof java.util.HashSet;
        if $z0 == 0 goto label0;

        $r2 = (java.util.HashSet) r0;
        r1 = virtualinvoke $r2.<java.util.HashSet: java.lang.Object clone()>();
        $r3 = (java.util.Set) r1;
        return $r3;

     label0:
        $r4 = new java.util.HashSet;
        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>(r0);
        return $r4;
    }

    public java.lang.Object clone()
    {
        java.security.cert.X509CertSelector r0, r1;
        java.lang.Object $r2;
        java.util.Set $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.CloneNotSupportedException $r14, r15;
        java.lang.InternalError $r16;
        java.lang.String $r17;

        r0 := @this: java.security.cert.X509CertSelector;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.security.cert.X509CertSelector) $r2;
        $r3 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        if $r3 == null goto label1;

        $r4 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames>;
        $r5 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneSet(java.util.Set)>($r4);
        r1.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeNames> = $r5;
        $r6 = r0.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames>;
        $r7 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneSet(java.util.Set)>($r6);
        r1.<java.security.cert.X509CertSelector: java.util.Set subjectAlternativeGeneralNames> = $r7;

     label1:
        $r8 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        if $r8 == null goto label2;

        $r9 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToNames>;
        $r10 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneSet(java.util.Set)>($r9);
        r1.<java.security.cert.X509CertSelector: java.util.Set pathToNames> = $r10;
        $r11 = r0.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames>;
        $r12 = staticinvoke <java.security.cert.X509CertSelector: java.util.Set cloneSet(java.util.Set)>($r11);
        r1.<java.security.cert.X509CertSelector: java.util.Set pathToGeneralNames> = $r12;

     label2:
        return r1;

     label3:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.lang.InternalError;
        $r17 = virtualinvoke r15.<java.lang.CloneNotSupportedException: java.lang.String toString()>();
        specialinvoke $r16.<java.lang.InternalError: void <init>(java.lang.String)>($r17);
        throw $r16;

        catch java.lang.CloneNotSupportedException from label0 to label2 with label3;
    }

    static void <clinit>()
    {
        sun.security.util.Debug $r0;
        int[] $r1;
        sun.security.util.ObjectIdentifier $r2;
        java.lang.Boolean $r3;
        java.lang.String[] $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("certpath");
        <java.security.cert.X509CertSelector: sun.security.util.Debug debug> = $r0;
        $r1 = newarray (int)[5];
        $r1[0] = 2;
        $r1[1] = 5;
        $r1[2] = 29;
        $r1[3] = 37;
        $r1[4] = 0;
        $r2 = staticinvoke <sun.security.util.ObjectIdentifier: sun.security.util.ObjectIdentifier newInternal(int[])>($r1);
        <java.security.cert.X509CertSelector: sun.security.util.ObjectIdentifier ANY_EXTENDED_KEY_USAGE> = $r2;
        staticinvoke <java.security.cert.CertPathHelperImpl: void initialize()>();
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        <java.security.cert.X509CertSelector: java.lang.Boolean FALSE> = $r3;
        $r4 = newarray (java.lang.String)[5];
        <java.security.cert.X509CertSelector: java.lang.String[] EXTENSION_OIDS> = $r4;
        $r5 = <java.security.cert.X509CertSelector: java.lang.String[] EXTENSION_OIDS>;
        $r5[0] = "2.5.29.16";
        $r6 = <java.security.cert.X509CertSelector: java.lang.String[] EXTENSION_OIDS>;
        $r6[1] = "2.5.29.17";
        $r7 = <java.security.cert.X509CertSelector: java.lang.String[] EXTENSION_OIDS>;
        $r7[2] = "2.5.29.30";
        $r8 = <java.security.cert.X509CertSelector: java.lang.String[] EXTENSION_OIDS>;
        $r8[3] = "2.5.29.32";
        $r9 = <java.security.cert.X509CertSelector: java.lang.String[] EXTENSION_OIDS>;
        $r9[4] = "2.5.29.37";
        return;
    }
}
