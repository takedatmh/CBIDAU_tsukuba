public class org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream extends org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream
{
    private org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream memoryOutputStream;
    private java.io.OutputStream currentOutputStream;
    private java.io.File outputFile;
    private final java.lang.String prefix;
    private final java.lang.String suffix;
    private final java.io.File directory;

    public void <init>(int, java.io.File)
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;
        int i0;
        java.io.File r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.File;
        specialinvoke r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File,int)>(i0, r1, null, null, null, 1024);
        return;
    }

    private void <init>(int, java.io.File, java.lang.String, java.lang.String, java.io.File, int)
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;
        int i0, i1;
        java.io.File r1, r4;
        java.lang.String r2, r3;
        org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream $r5, $r6;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.File;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: java.io.File;
        i1 := @parameter5: int;
        specialinvoke r0.<org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream: void <init>(int)>(i0);
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File outputFile> = r1;
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.lang.String prefix> = r2;
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.lang.String suffix> = r3;
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File directory> = r4;
        $r5 = new org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream;
        specialinvoke $r5.<org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream: void <init>(int)>(i1);
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream memoryOutputStream> = $r5;
        $r6 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream memoryOutputStream>;
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = $r6;
        return;
    }

    protected java.io.OutputStream getStream() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.OutputStream currentOutputStream>;
        return $r1;
    }

    protected void thresholdReached() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;
        java.io.FileOutputStream r1, $r9;
        java.io.IOException r2, $r12;
        java.lang.String $r3, $r4, $r5;
        java.io.File $r6, $r7, $r8, $r10;
        org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream $r11;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        $r3 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.lang.String prefix>;
        if $r3 == null goto label0;

        $r4 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.lang.String prefix>;
        $r5 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.lang.String suffix>;
        $r6 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File directory>;
        $r7 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r4, $r5, $r6);
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File outputFile> = $r7;

     label0:
        $r8 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File outputFile>;
        staticinvoke <org.apache.tomcat.util.http.fileupload.FileUtils: void forceMkdirParent(java.io.File)>($r8);
        $r9 = new java.io.FileOutputStream;
        $r10 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File outputFile>;
        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);
        r1 = $r9;

     label1:
        $r11 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream memoryOutputStream>;
        virtualinvoke $r11.<org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r1);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;
        r2 = $r12;
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();
        throw r2;

     label4:
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = r1;
        r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream memoryOutputStream> = null;
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isInMemory()
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: boolean isThresholdExceeded()>();
        if $z0 == 0 goto label0;

        $z1 = 0;
        goto label1;

     label0:
        $z1 = 1;

     label1:
        return $z1;
    }

    public byte[] getData()
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;
        org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream $r1, $r2;
        byte[] $r3;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream memoryOutputStream>;
        if $r1 == null goto label0;

        $r2 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream memoryOutputStream>;
        $r3 = virtualinvoke $r2.<org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream: byte[] toByteArray()>();
        return $r3;

     label0:
        return null;
    }

    public java.io.File getFile()
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;
        java.io.File $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File outputFile>;
        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream r0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        specialinvoke r0.<org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream: void close()>();
        return;
    }
}
