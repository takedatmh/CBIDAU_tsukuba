public final class org.apache.tomcat.util.IntrospectionUtils extends java.lang.Object
{
    private static final org.apache.juli.logging.Log log;
    public static final java.lang.String PATH_SEPARATOR;
    static java.util.Hashtable objectMethods;
    private static final java.lang.Object[] emptyArray;

    static void <clinit>()
    {
        org.apache.juli.logging.Log $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.lang.Object[] $r3;

        $r0 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/tomcat/util/IntrospectionUtils");
        <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log> = $r0;
        $r1 = <java.io.File: java.lang.String pathSeparator>;
        <org.apache.tomcat.util.IntrospectionUtils: java.lang.String PATH_SEPARATOR> = $r1;
        $r2 = new java.util.Hashtable;
        specialinvoke $r2.<java.util.Hashtable: void <init>()>();
        <org.apache.tomcat.util.IntrospectionUtils: java.util.Hashtable objectMethods> = $r2;
        $r3 = newarray (java.lang.Object)[0];
        <org.apache.tomcat.util.IntrospectionUtils: java.lang.Object[] emptyArray> = $r3;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.IntrospectionUtils r0;

        r0 := @this: org.apache.tomcat.util.IntrospectionUtils;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void execute(java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        java.lang.Object r0;
        java.lang.String r1, $r9;
        null_type n0;
        java.lang.Class r2, $r7;
        java.lang.Class[] r3;
        java.lang.reflect.Method r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r8;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        n0 = null;
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r3 = newarray (java.lang.Class)[0];
        r4 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r2, r1, r3);
        if r4 != null goto label0;

        $r5 = new java.lang.RuntimeException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("No execute in ");
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);
        throw $r5;

     label0:
        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, null);
        return;
    }

    public static void setAttribute(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r0, r2;
        java.lang.String r1, $r12, $r21;
        null_type n0;
        java.lang.Class r3, $r10;
        java.lang.Class[] r4;
        boolean $z0, $z1, $z2;
        org.apache.tomcat.util.IntrospectionUtils$AttributeHolder $r5;
        java.lang.reflect.Method r6;
        org.apache.juli.logging.Log $r7, $r8, $r13, $r14;
        java.lang.StringBuilder $r9, $r11, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.Object[] $r22;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Object;
        $z0 = r0 instanceof org.apache.tomcat.util.IntrospectionUtils$AttributeHolder;
        if $z0 == 0 goto label0;

        $r5 = (org.apache.tomcat.util.IntrospectionUtils$AttributeHolder) r0;
        interfaceinvoke $r5.<org.apache.tomcat.util.IntrospectionUtils$AttributeHolder: void setAttribute(java.lang.String,java.lang.Object)>(r1, r2);
        return;

     label0:
        n0 = null;
        r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r4 = newarray (java.lang.Class)[2];
        r4[0] = class "java/lang/String";
        r4[1] = class "java/lang/Object";
        r6 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r3, "setAttribute", r4);
        if r6 != null goto label2;

        $r7 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r7.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label1;

        $r8 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("No setAttribute in ");
        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r8.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r12);

     label1:
        return;

     label2:
        $r13 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z2 = interfaceinvoke $r13.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z2 == 0 goto label3;

        $r14 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Setting ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  in ");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r14.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r21);

     label3:
        $r22 = newarray (java.lang.Object)[2];
        $r22[0] = r1;
        $r22[1] = r2;
        virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r22);
        return;
    }

    public static java.lang.Object getAttribute(java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        java.lang.Object r0, $r12;
        java.lang.String r1, $r10;
        null_type n0;
        java.lang.Class r2, $r8;
        java.lang.Class[] r3;
        java.lang.reflect.Method r4;
        org.apache.juli.logging.Log $r5, $r6;
        boolean $z0;
        java.lang.StringBuilder $r7, $r9;
        java.lang.Object[] $r11;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        n0 = null;
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r3 = newarray (java.lang.Class)[1];
        r3[0] = class "java/lang/String";
        r4 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r2, "getAttribute", r3);
        if r4 != null goto label1;

        $r5 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r5.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r6 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("No getAttribute in ");
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r6.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r10);

     label0:
        return null;

     label1:
        $r11 = newarray (java.lang.Object)[1];
        $r11[0] = r1;
        $r12 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r11);
        return $r12;
    }

    public static java.lang.ClassLoader getURLClassLoader(java.net.URL[], java.lang.ClassLoader)
    {
        java.net.URL[] r0;
        java.lang.ClassLoader r1, r5;
        java.lang.Class r2, $r6;
        java.lang.Class[] r3;
        java.lang.reflect.Method r4;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        java.lang.ClassNotFoundException $r10, r11;
        java.lang.Exception $r12, r13;

        r0 := @parameter0: java.net.URL[];
        r1 := @parameter1: java.lang.ClassLoader;

     label0:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.net.URLClassLoader");
        r3 = newarray (java.lang.Class)[2];
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r3[0] = $r6;
        r3[1] = class "java/lang/ClassLoader";
        r4 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r2, "newInstance", r3);
        if r4 != null goto label2;

     label1:
        return null;

     label2:
        $r7 = newarray (java.lang.Object)[2];
        $r7[0] = r0;
        $r7[1] = r1;
        $r8 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r7);
        r5 = (java.lang.ClassLoader) $r8;

     label3:
        return r5;

     label4:
        $r10 := @caughtexception;
        r11 = $r10;
        return null;

     label5:
        $r12 := @caughtexception;
        r13 = $r12;
        virtualinvoke r13.<java.lang.Exception: void printStackTrace()>();
        return null;

        catch java.lang.ClassNotFoundException from label0 to label1 with label4;
        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.Exception from label0 to label1 with label5;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    public static java.lang.String guessInstall(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        $r3 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.String guessInstall(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2, null);
        return $r3;
    }

    public static java.lang.String guessInstall(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3, r4, r5, r6, r7, r9, r11, $r17, $r19, r22, $r31, $r32, r35, r39, r41;
        java.util.StringTokenizer r8, $r16;
        java.io.File r10, r12, r13, $r18, $r20, $r21, $r36, $r37, r38, $r40;
        java.util.Properties $r14, $r23, $r25, $r42, $r44, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Exception $r28, r29, $r47, r48;
        java.lang.StringBuilder $r30, $r33, $r34;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        r4 = null;
        r5 = null;
        if r0 == null goto label0;

        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

     label0:
        if r1 == null goto label1;

        r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r1);

     label1:
        if r4 == null goto label3;

        if r5 != null goto label2;

        $r14 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();
        virtualinvoke $r14.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label2:
        return r4;

     label3:
        r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");
        r7 = <java.io.File: java.lang.String pathSeparator>;
        $r16 = new java.util.StringTokenizer;
        specialinvoke $r16.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r6, r7);
        r8 = $r16;
        goto label20;

     label4:
        r9 = virtualinvoke r8.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(r2);
        if $z0 == 0 goto label12;

        $i0 = virtualinvoke r9.<java.lang.String: int length()>();
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();
        $i2 = $i0 - $i1;
        r5 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label5:
        $r17 = "";
        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r5);
        if $z1 == 0 goto label6;

        $r18 = new java.io.File;
        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("./");
        r5 = virtualinvoke $r18.<java.io.File: java.lang.String getCanonicalPath()>();
        goto label7;

     label6:
        $r19 = <java.io.File: java.lang.String separator>;
        $z2 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>($r19);
        if $z2 == 0 goto label7;

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();
        $i4 = $i3 - 1;
        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label7:
        $r20 = new java.io.File;
        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>(r5);
        r10 = $r20;
        r11 = virtualinvoke r10.<java.io.File: java.lang.String getParent()>();
        if r11 != null goto label8;

        r11 = r5;

     label8:
        $r21 = new java.io.File;
        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r11);
        r12 = $r21;
        r22 = virtualinvoke r12.<java.io.File: java.lang.String getCanonicalPath()>();
        if r0 == null goto label9;

        $r23 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();
        virtualinvoke $r23.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r22);

     label9:
        if r1 == null goto label10;

        $r25 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();
        virtualinvoke $r25.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r22);

     label10:
        return r22;

     label11:
        $r28 := @caughtexception;
        r29 = $r28;
        virtualinvoke r29.<java.lang.Exception: void printStackTrace()>();
        goto label20;

     label12:
        $r30 = new java.lang.StringBuilder;
        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r9);
        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>($r31);
        $z3 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>("/");
        if $z3 == 0 goto label13;

        $r32 = "";
        goto label14;

     label13:
        $r32 = "/";

     label14:
        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();
        $r36 = new java.io.File;
        specialinvoke $r36.<java.io.File: void <init>(java.lang.String)>(r35);
        $z4 = virtualinvoke $r36.<java.io.File: boolean exists()>();
        if $z4 == 0 goto label20;

     label15:
        $r37 = new java.io.File;
        specialinvoke $r37.<java.io.File: void <init>(java.lang.String)>(r9);
        r38 = $r37;
        r39 = virtualinvoke r38.<java.io.File: java.lang.String getParent()>();
        if r39 != null goto label16;

        r39 = r9;

     label16:
        $r40 = new java.io.File;
        specialinvoke $r40.<java.io.File: void <init>(java.lang.String)>(r39);
        r13 = $r40;
        r41 = virtualinvoke r13.<java.io.File: java.lang.String getCanonicalPath()>();
        if r0 == null goto label17;

        $r42 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();
        virtualinvoke $r42.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r41);

     label17:
        if r5 != null goto label18;

        if r1 == null goto label18;

        $r44 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();
        virtualinvoke $r44.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41);

     label18:
        return r41;

     label19:
        $r47 := @caughtexception;
        r48 = $r47;
        virtualinvoke r48.<java.lang.Exception: void printStackTrace()>();

     label20:
        $z5 = virtualinvoke r8.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z5 != 0 goto label4;

        if r5 == null goto label21;

        $r49 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();
        virtualinvoke $r49.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r5);
        return r5;

     label21:
        return null;

        catch java.lang.Exception from label5 to label10 with label11;
        catch java.lang.Exception from label15 to label18 with label19;
    }

    public static void displayClassPath(java.lang.String, java.net.URL[])
    {
        java.lang.String r0, $r6;
        java.net.URL[] r1;
        org.apache.juli.logging.Log $r2, $r3, $r4;
        int i0, $i1;
        boolean $z0;
        java.net.URL $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.net.URL[];
        $r2 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label2;

        $r3 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        interfaceinvoke $r3.<org.apache.juli.logging.Log: void debug(java.lang.Object)>(r0);
        i0 = 0;
        goto label1;

     label0:
        $r4 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r5 = r1[i0];
        $r6 = virtualinvoke $r5.<java.net.URL: java.lang.String getFile()>();
        interfaceinvoke $r4.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r6);
        i0 = i0 + 1;

     label1:
        $i1 = lengthof r1;
        if i0 < $i1 goto label0;

     label2:
        return;
    }

    public static java.lang.String classPathAdd(java.net.URL[], java.lang.String)
    {
        java.net.URL[] r0;
        java.lang.String r1, $r3, $r4, $r7;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r5, $r8;
        java.net.URL $r6, $r9;

        r0 := @parameter0: java.net.URL[];
        r1 := @parameter1: java.lang.String;
        if r0 != null goto label0;

        return r1;

     label0:
        i0 = 0;
        goto label4;

     label1:
        if r1 == null goto label2;

        $r2 = new java.lang.StringBuilder;
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);
        $r4 = <org.apache.tomcat.util.IntrospectionUtils: java.lang.String PATH_SEPARATOR>;
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = r0[i0];
        $r7 = virtualinvoke $r6.<java.net.URL: java.lang.String getFile()>();
        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label3;

     label2:
        $r9 = r0[i0];
        r1 = virtualinvoke $r9.<java.net.URL: java.lang.String getFile()>();

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = lengthof r0;
        if i0 < $i1 goto label1;

        return r1;
    }

    public static boolean setProperty(java.lang.Object, java.lang.String, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        $z0 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: boolean setProperty(java.lang.Object,java.lang.String,java.lang.String,boolean)>(r0, r1, r2, 1);
        return $z0;
    }

    public static boolean setProperty(java.lang.Object, java.lang.String, java.lang.String, boolean)
    {
        java.lang.Object r0, $r84;
        java.lang.String r1, r2, r5, $r21, $r23, $r28, $r29, $r31, $r36, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r50, $r54, $r55, $r56, $r57, $r59, $r60, $r68, $r72, $r74, $r77, $r79, $r99, $r111, $r123, $r136;
        boolean z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        org.apache.juli.logging.Log $r3, $r13, $r64, $r65, $r69, $r70, $r92, $r102, $r114, $r127;
        java.lang.StringBuilder $r4, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r24, $r66, $r67, $r71, $r73, $r93, $r94, $r95, $r96, $r97, $r98, $r103, $r105, $r106, $r107, $r108, $r109, $r110, $r115, $r117, $r118, $r119, $r120, $r121, $r122, $r128, $r130, $r131, $r132, $r133, $r134, $r135;
        java.lang.reflect.Method[] r6;
        java.lang.reflect.Method r7, r8, $r26, $r27, $r32, $r35, $r37, $r39, $r75, $r78, $r80;
        int i0, $i1, $i2, i3, $i4, $i5;
        java.lang.Class[] r9, $r38, $r40;
        java.lang.Class r10, $r14, $r25, $r30, $r81, $r82, $r104, $r116, $r129;
        java.lang.Object[] r11, $r33, r83;
        java.lang.NumberFormatException r12, $r46, $r52, r53;
        java.lang.Integer $r45;
        java.lang.Long $r51;
        java.lang.Boolean $r58, $r85;
        java.net.InetAddress $r61;
        java.net.UnknownHostException $r62, r63;
        java.lang.IllegalArgumentException $r86, r87, $r90, r91;
        java.lang.SecurityException $r100, r101;
        java.lang.IllegalAccessException $r112, r113;
        java.lang.reflect.InvocationTargetException $r124, r125;
        java.lang.Throwable $r126;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        z0 := @parameter3: boolean;
        $r3 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r3.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label0;

        $r13 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: setProperty(");
        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r21);

     label0:
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("set");
        $r23 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.String capitalize(java.lang.String)>(r1);
        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);
        r5 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r25 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r6 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method[] findMethods(java.lang.Class)>($r25);
        r7 = null;
        r8 = null;
        i0 = 0;
        goto label5;

     label2:
        $r26 = r6[i0];
        r9 = virtualinvoke $r26.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $r27 = r6[i0];
        $r28 = virtualinvoke $r27.<java.lang.reflect.Method: java.lang.String getName()>();
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r28);
        if $z2 == 0 goto label4;

        $i1 = lengthof r9;
        if $i1 != 1 goto label4;

        $r29 = "java.lang.String";
        $r30 = r9[0];
        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();
        $z3 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r31);
        if $z3 == 0 goto label4;

        $r32 = r6[i0];
        $r33 = newarray (java.lang.Object)[1];
        $r33[0] = r2;
        virtualinvoke $r32.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r33);

     label3:
        return 1;

     label4:
        i0 = i0 + 1;

     label5:
        $i2 = lengthof r6;
        if i0 < $i2 goto label2;

        i3 = 0;
        goto label27;

     label6:
        z4 = 1;
        $r35 = r6[i3];
        $r36 = virtualinvoke $r35.<java.lang.reflect.Method: java.lang.String getName()>();
        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r36);
        if $z5 == 0 goto label24;

        $r37 = r6[i3];
        $r38 = virtualinvoke $r37.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $i4 = lengthof $r38;
        if $i4 != 1 goto label24;

        $r39 = r6[i3];
        $r40 = virtualinvoke $r39.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        r10 = $r40[0];
        r11 = newarray (java.lang.Object)[1];
        $r41 = "java.lang.Integer";
        $r42 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $z6 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r42);
        if $z6 != 0 goto label7;

        $r43 = "int";
        $r44 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $z7 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r44);
        if $z7 == 0 goto label10;

     label7:
        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r2);
        r11[0] = $r45;

     label8:
        goto label22;

     label9:
        $r46 := @caughtexception;
        r12 = $r46;
        z4 = 0;
        goto label22;

     label10:
        $r47 = "java.lang.Long";
        $r48 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $z8 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>($r48);
        if $z8 != 0 goto label11;

        $r49 = "long";
        $r50 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $z9 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>($r50);
        if $z9 == 0 goto label14;

     label11:
        $r51 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r2);
        r11[0] = $r51;

     label12:
        goto label22;

     label13:
        $r52 := @caughtexception;
        r53 = $r52;
        z4 = 0;
        goto label22;

     label14:
        $r54 = "java.lang.Boolean";
        $r55 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $z10 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>($r55);
        if $z10 != 0 goto label15;

        $r56 = "boolean";
        $r57 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $z11 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>($r57);
        if $z11 == 0 goto label16;

     label15:
        $r58 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);
        r11[0] = $r58;
        goto label22;

     label16:
        $r59 = "java.net.InetAddress";
        $r60 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $z12 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>($r60);
        if $z12 == 0 goto label21;

     label17:
        $r61 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r2);
        r11[0] = $r61;

     label18:
        goto label22;

     label19:
        $r62 := @caughtexception;
        r63 = $r62;
        $r64 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z13 = interfaceinvoke $r64.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z13 == 0 goto label20;

        $r65 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r66 = new java.lang.StringBuilder;
        specialinvoke $r66.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Unable to resolve host name:");
        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r65.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r68);

     label20:
        z4 = 0;
        goto label22;

     label21:
        $r69 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z14 = interfaceinvoke $r69.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z14 == 0 goto label22;

        $r70 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r71 = new java.lang.StringBuilder;
        specialinvoke $r71.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Unknown type ");
        $r72 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();
        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);
        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r70.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r74);

     label22:
        if z4 == 0 goto label24;

        $r75 = r6[i3];
        virtualinvoke $r75.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r11);

     label23:
        return 1;

     label24:
        $r77 = "setProperty";
        $r78 = r6[i3];
        $r79 = virtualinvoke $r78.<java.lang.reflect.Method: java.lang.String getName()>();
        $z15 = virtualinvoke $r77.<java.lang.String: boolean equals(java.lang.Object)>($r79);
        if $z15 == 0 goto label26;

        $r80 = r6[i3];
        $r81 = virtualinvoke $r80.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $r82 = <java.lang.Boolean: java.lang.Class TYPE>;
        if $r81 != $r82 goto label25;

        r8 = r6[i3];
        goto label26;

     label25:
        r7 = r6[i3];

     label26:
        i3 = i3 + 1;

     label27:
        $i5 = lengthof r6;
        if i3 < $i5 goto label6;

        if z0 == 0 goto label41;

        if r8 != null goto label28;

        if r7 == null goto label41;

     label28:
        r83 = newarray (java.lang.Object)[2];
        r83[0] = r1;
        r83[1] = r2;
        if r8 == null goto label35;

     label29:
        $r84 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r83);
        $r85 = (java.lang.Boolean) $r84;
        $z16 = virtualinvoke $r85.<java.lang.Boolean: boolean booleanValue()>();

     label30:
        return $z16;

     label31:
        $r86 := @caughtexception;

     label32:
        r87 = $r86;
        if r7 == null goto label34;

        virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r83);

     label33:
        return 1;

     label34:
        throw r87;

     label35:
        virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r83);

     label36:
        return 1;

     label37:
        $r90 := @caughtexception;
        r91 = $r90;
        $r92 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r93 = new java.lang.StringBuilder;
        specialinvoke $r93.<java.lang.StringBuilder: void <init>(java.lang.String)>("IAE ");
        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r92.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r99, r91);
        goto label41;

     label38:
        $r100 := @caughtexception;
        r101 = $r100;
        $r102 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r103 = new java.lang.StringBuilder;
        specialinvoke $r103.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: SecurityException for ");
        $r104 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r105 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r104);
        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");
        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r102.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r111, r101);
        goto label41;

     label39:
        $r112 := @caughtexception;
        r113 = $r112;
        $r114 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r115 = new java.lang.StringBuilder;
        specialinvoke $r115.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: IllegalAccessException for ");
        $r116 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r117 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r116);
        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");
        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r114.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r123, r113);
        goto label41;

     label40:
        $r124 := @caughtexception;
        r125 = $r124;
        $r126 = virtualinvoke r125.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>($r126);
        $r127 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r128 = new java.lang.StringBuilder;
        specialinvoke $r128.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: InvocationTargetException for ");
        $r129 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r130 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r129);
        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");
        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r136 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r127.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r136, r125);

     label41:
        return 0;

        catch java.lang.NumberFormatException from label7 to label8 with label9;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
        catch java.net.UnknownHostException from label17 to label18 with label19;
        catch java.lang.IllegalArgumentException from label29 to label30 with label31;
        catch java.lang.IllegalArgumentException from label1 to label3 with label37;
        catch java.lang.IllegalArgumentException from label4 to label23 with label37;
        catch java.lang.IllegalArgumentException from label24 to label30 with label37;
        catch java.lang.IllegalArgumentException from label32 to label33 with label37;
        catch java.lang.IllegalArgumentException from label34 to label36 with label37;
        catch java.lang.SecurityException from label1 to label3 with label38;
        catch java.lang.SecurityException from label4 to label23 with label38;
        catch java.lang.SecurityException from label24 to label30 with label38;
        catch java.lang.SecurityException from label32 to label33 with label38;
        catch java.lang.SecurityException from label34 to label36 with label38;
        catch java.lang.IllegalAccessException from label1 to label3 with label39;
        catch java.lang.IllegalAccessException from label4 to label23 with label39;
        catch java.lang.IllegalAccessException from label24 to label30 with label39;
        catch java.lang.IllegalAccessException from label32 to label33 with label39;
        catch java.lang.IllegalAccessException from label34 to label36 with label39;
        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label40;
        catch java.lang.reflect.InvocationTargetException from label4 to label23 with label40;
        catch java.lang.reflect.InvocationTargetException from label24 to label30 with label40;
        catch java.lang.reflect.InvocationTargetException from label32 to label33 with label40;
        catch java.lang.reflect.InvocationTargetException from label34 to label36 with label40;
    }

    public static java.lang.Object getProperty(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0, $r18, $r22, $r27;
        java.lang.String r1, r3, r4, $r8, $r11, $r16, $r20, $r23, $r25, $r35, $r45, $r55, $r66;
        java.lang.StringBuilder $r2, $r9, $r10, $r12, $r31, $r32, $r33, $r34, $r39, $r41, $r42, $r43, $r44, $r49, $r51, $r52, $r53, $r54, $r60, $r62, $r63, $r64, $r65;
        java.lang.reflect.Method[] r5;
        java.lang.reflect.Method r6, $r14, $r15, $r17, $r19, $r21, $r24;
        int i0, $i1, $i2, $i3;
        java.lang.Class[] r7;
        java.lang.Class $r13, $r40, $r50, $r61;
        boolean $z0, $z1, $z2;
        java.lang.Object[] r26;
        java.lang.IllegalArgumentException $r28, r29;
        org.apache.juli.logging.Log $r30, $r38, $r48, $r59;
        java.lang.SecurityException $r36, r37;
        java.lang.IllegalAccessException $r46, r47;
        java.lang.reflect.InvocationTargetException $r56, r57;
        java.lang.Throwable $r58;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("get");
        $r8 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.String capitalize(java.lang.String)>(r1);
        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("is");
        $r11 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.String capitalize(java.lang.String)>(r1);
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label0:
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r5 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method[] findMethods(java.lang.Class)>($r13);
        r6 = null;
        i0 = 0;
        goto label7;

     label1:
        $r14 = r5[i0];
        r7 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $r15 = r5[i0];
        $r16 = virtualinvoke $r15.<java.lang.reflect.Method: java.lang.String getName()>();
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r16);
        if $z0 == 0 goto label3;

        $i1 = lengthof r7;
        if $i1 != 0 goto label3;

        $r17 = r5[i0];
        $r18 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, null);

     label2:
        return $r18;

     label3:
        $r19 = r5[i0];
        $r20 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.String getName()>();
        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r20);
        if $z1 == 0 goto label5;

        $i2 = lengthof r7;
        if $i2 != 0 goto label5;

        $r21 = r5[i0];
        $r22 = virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, null);

     label4:
        return $r22;

     label5:
        $r23 = "getProperty";
        $r24 = r5[i0];
        $r25 = virtualinvoke $r24.<java.lang.reflect.Method: java.lang.String getName()>();
        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r25);
        if $z2 == 0 goto label6;

        r6 = r5[i0];

     label6:
        i0 = i0 + 1;

     label7:
        $i3 = lengthof r5;
        if i0 < $i3 goto label1;

        if r6 == null goto label13;

        r26 = newarray (java.lang.Object)[1];
        r26[0] = r1;
        $r27 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r26);

     label8:
        return $r27;

     label9:
        $r28 := @caughtexception;
        r29 = $r28;
        $r30 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r31 = new java.lang.StringBuilder;
        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("IAE ");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r30.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r35, r29);
        goto label13;

     label10:
        $r36 := @caughtexception;
        r37 = $r36;
        $r38 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r39 = new java.lang.StringBuilder;
        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: SecurityException for ");
        $r40 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r38.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r45, r37);
        goto label13;

     label11:
        $r46 := @caughtexception;
        r47 = $r46;
        $r48 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r49 = new java.lang.StringBuilder;
        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: IllegalAccessException for ");
        $r50 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);
        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r48.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r55, r47);
        goto label13;

     label12:
        $r56 := @caughtexception;
        r57 = $r56;
        $r58 = virtualinvoke r57.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>($r58);
        $r59 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r60 = new java.lang.StringBuilder;
        specialinvoke $r60.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: InvocationTargetException for ");
        $r61 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r61);
        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r59.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r66, r57);

     label13:
        return null;

        catch java.lang.IllegalArgumentException from label0 to label2 with label9;
        catch java.lang.IllegalArgumentException from label3 to label4 with label9;
        catch java.lang.IllegalArgumentException from label5 to label8 with label9;
        catch java.lang.SecurityException from label0 to label2 with label10;
        catch java.lang.SecurityException from label3 to label4 with label10;
        catch java.lang.SecurityException from label5 to label8 with label10;
        catch java.lang.IllegalAccessException from label0 to label2 with label11;
        catch java.lang.IllegalAccessException from label3 to label4 with label11;
        catch java.lang.IllegalAccessException from label5 to label8 with label11;
        catch java.lang.reflect.InvocationTargetException from label0 to label2 with label12;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label12;
        catch java.lang.reflect.InvocationTargetException from label5 to label8 with label12;
    }

    public static void setProperty(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, r3, $r6, $r11, $r24;
        java.lang.StringBuilder $r2, $r7, $r19, $r21, $r22, $r23;
        java.lang.reflect.Method[] r4;
        int i0, $i1, $i2;
        java.lang.Class[] r5;
        java.lang.Class $r8, $r20;
        java.lang.reflect.Method $r9, $r10, $r12;
        boolean $z0, $z1;
        java.lang.Object[] $r13;
        java.lang.Exception $r15, r16;
        org.apache.juli.logging.Log $r17, $r18;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("set");
        $r6 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.String capitalize(java.lang.String)>(r1);
        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label0:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r4 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method[] findMethods(java.lang.Class)>($r8);
        i0 = 0;
        goto label4;

     label1:
        $r9 = r4[i0];
        r5 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $r10 = r4[i0];
        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.String getName()>();
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r11);
        if $z0 == 0 goto label3;

        $i1 = lengthof r5;
        if $i1 != 0 goto label3;

        $r12 = r4[i0];
        $r13 = newarray (java.lang.Object)[0];
        virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r13);

     label2:
        return;

     label3:
        i0 = i0 + 1;

     label4:
        $i2 = lengthof r4;
        if i0 < $i2 goto label1;

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r17.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label7;

        $r18 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Exception for ");
        $r20 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r18.<org.apache.juli.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r24, r16);

     label7:
        return;

        catch java.lang.Exception from label0 to label2 with label6;
        catch java.lang.Exception from label3 to label5 with label6;
    }

    public static java.lang.String replaceProperties(java.lang.String, java.util.Hashtable, org.apache.tomcat.util.IntrospectionUtils$PropertySource[])
    {
        java.lang.String r0, r4, r5, $r7, $r11, $r19, $r21;
        java.util.Hashtable r1;
        org.apache.tomcat.util.IntrospectionUtils$PropertySource[] r2;
        java.lang.StringBuilder r3, $r6, $r15, $r16, $r17;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12;
        char $c8;
        java.lang.Object $r13;
        org.apache.tomcat.util.IntrospectionUtils$PropertySource $r14;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Hashtable;
        r2 := @parameter2: org.apache.tomcat.util.IntrospectionUtils$PropertySource[];
        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(36);
        if $i4 >= 0 goto label0;

        return r0;

     label0:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        r3 = $r6;
        i0 = 0;
        goto label12;

     label1:
        if i1 <= 0 goto label2;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label2:
        $i5 = virtualinvoke r0.<java.lang.String: int length()>();
        $i6 = $i5 - 1;
        if i1 != $i6 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(36);
        i0 = i1 + 1;
        goto label12;

     label3:
        $i7 = i1 + 1;
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);
        if $c8 == 123 goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(36);
        i0 = i1 + 1;
        goto label12;

     label4:
        i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(125, i1);
        if i2 >= 0 goto label5;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        goto label12;

     label5:
        $i9 = i1 + 2;
        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i9, i2);
        r5 = null;
        if r1 == null goto label6;

        $r13 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);
        r5 = (java.lang.String) $r13;

     label6:
        if r5 != null goto label10;

        if r2 == null goto label10;

        i3 = 0;
        goto label9;

     label7:
        $r14 = r2[i3];
        r5 = interfaceinvoke $r14.<org.apache.tomcat.util.IntrospectionUtils$PropertySource: java.lang.String getProperty(java.lang.String)>(r4);
        if r5 == null goto label8;

        goto label10;

     label8:
        i3 = i3 + 1;

     label9:
        $i10 = lengthof r2;
        if i3 < $i10 goto label7;

     label10:
        if r5 != null goto label11;

        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("${");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");
        r5 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        i0 = i2 + 1;

     label12:
        $i11 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(36, i0);
        i1 = $i11;
        if $i11 >= 0 goto label1;

        $i12 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 >= $i12 goto label13;

        $r19 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i0);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label13:
        $r21 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r21;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        java.lang.String r0, $r2;
        char[] r1;
        int $i0;
        char $c1, $c2;

        r0 := @parameter0: java.lang.String;
        if r0 == null goto label0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return r0;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $c1 = r1[0];
        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);
        r1[0] = $c2;
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);
        return $r2;
    }

    public static java.lang.String unCapitalize(java.lang.String)
    {
        java.lang.String r0, $r2;
        char[] r1;
        int $i0;
        char $c1, $c2;

        r0 := @parameter0: java.lang.String;
        if r0 == null goto label0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return r0;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $c1 = r1[0];
        $c2 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);
        r1[0] = $c2;
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);
        return $r2;
    }

    public static void addToClassPath(java.util.Vector, java.lang.String)
    {
        java.util.Vector r0;
        java.lang.String r1, $r4;
        java.lang.String[] r2;
        int i0, i1;
        java.net.URL r3;
        java.lang.Exception $r5, r6;

        r0 := @parameter0: java.util.Vector;
        r1 := @parameter1: java.lang.String;

     label0:
        r2 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.String[] getFilesByExt(java.lang.String,java.lang.String)>(r1, ".jar");
        if r2 == null goto label6;

        i0 = lengthof r2;
        i1 = 0;
        goto label3;

     label1:
        $r4 = r2[i1];
        r3 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.net.URL getURL(java.lang.String,java.lang.String)>(r1, $r4);
        if r3 == null goto label2;

        virtualinvoke r0.<java.util.Vector: void addElement(java.lang.Object)>(r3);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;
        r6 = $r5;
        virtualinvoke r6.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label0 to label4 with label5;
    }

    public static void addToolsJar(java.util.Vector)
    {
        java.util.Vector r0;
        java.io.File $r1, r3, $r9;
        java.lang.StringBuilder $r2, $r7, $r10, $r13, $r17, $r19, $r20;
        java.net.URL r4, $r22;
        java.lang.String $r5, $r6, $r8, $r11, $r12, $r14, $r18, $r21, $r23;
        boolean $z0, $z1, $z2;
        org.apache.juli.logging.Log $r15, $r16;
        java.net.MalformedURLException $r24, r25;

        r0 := @parameter0: java.util.Vector;

     label0:
        $r1 = new java.io.File;
        $r2 = new java.lang.StringBuilder;
        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);
        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/../lib/tools.jar");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r8);
        r3 = $r1;
        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();
        if $z0 != 0 goto label1;

        $r9 = new java.io.File;
        $r10 = new java.lang.StringBuilder;
        $r11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);
        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/lib/tools.jar");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r14);
        r3 = $r9;
        $z1 = virtualinvoke r3.<java.io.File: boolean exists()>();
        if $z1 == 0 goto label1;

        $r15 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z2 = interfaceinvoke $r15.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z2 == 0 goto label1;

        $r16 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Detected strange java.home value ");
        $r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", it should point to jre");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r16.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r21);

     label1:
        $r22 = new java.net.URL;
        $r23 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();
        specialinvoke $r22.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", "", $r23);
        r4 = $r22;
        virtualinvoke r0.<java.util.Vector: void addElement(java.lang.Object)>(r4);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;
        r25 = $r24;
        virtualinvoke r25.<java.net.MalformedURLException: void printStackTrace()>();

     label4:
        return;

        catch java.net.MalformedURLException from label0 to label2 with label3;
    }

    public static java.lang.String[] getFilesByExt(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r5;
        java.io.File $r2, r3;
        java.lang.String[] r4;
        boolean $z0;
        org.apache.tomcat.util.IntrospectionUtils$1 $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $r2 = new java.io.File;
        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);
        r3 = $r2;
        r4 = null;
        r5 = r1;
        $z0 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();
        if $z0 == 0 goto label0;

        $r6 = new org.apache.tomcat.util.IntrospectionUtils$1;
        specialinvoke $r6.<org.apache.tomcat.util.IntrospectionUtils$1: void <init>(java.lang.String)>(r5);
        r4 = virtualinvoke r3.<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>($r6);

     label0:
        return r4;
    }

    public static java.net.URL getURL(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r5, $r8;
        java.io.File $r2, r3, r4, $r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r9;
        java.net.URL $r10;
        java.lang.Exception $r11, r12;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;

     label0:
        $r2 = new java.io.File;
        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);
        r3 = $r2;
        $r6 = new java.io.File;
        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, r1);
        r4 = $r6;
        r5 = virtualinvoke r4.<java.io.File: java.lang.String getCanonicalPath()>();
        $z0 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();
        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();
        if $z1 != 0 goto label3;

     label2:
        return null;

     label3:
        $r10 = new java.net.URL;
        specialinvoke $r10.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", "", r5);

     label4:
        return $r10;

     label5:
        $r11 := @caughtexception;
        r12 = $r11;
        virtualinvoke r12.<java.lang.Exception: void printStackTrace()>();
        return null;

        catch java.lang.Exception from label0 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static void addJarsFromClassPath(java.util.Vector, java.lang.String) throws java.io.IOException, java.net.MalformedURLException
    {
        java.util.Vector r0;
        java.lang.String r1, r2, r5, $r9, $r11;
        java.util.StringTokenizer r3, $r7;
        java.io.File r4, $r8;
        java.net.URL r6, $r13;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r10, $r12;

        r0 := @parameter0: java.util.Vector;
        r1 := @parameter1: java.lang.String;
        r2 = <java.io.File: java.lang.String pathSeparator>;
        if r1 == null goto label3;

        $r7 = new java.util.StringTokenizer;
        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r2);
        r3 = $r7;
        goto label2;

     label0:
        $r8 = new java.io.File;
        $r9 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9);
        r4 = $r8;
        r5 = virtualinvoke r4.<java.io.File: java.lang.String getCanonicalPath()>();
        $z0 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();
        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;
        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r13 = new java.net.URL;
        specialinvoke $r13.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", "", r5);
        r6 = $r13;
        $z1 = virtualinvoke r0.<java.util.Vector: boolean contains(java.lang.Object)>(r6);
        if $z1 != 0 goto label2;

        virtualinvoke r0.<java.util.Vector: void addElement(java.lang.Object)>(r6);

     label2:
        $z2 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z2 != 0 goto label0;

     label3:
        return;
    }

    public static java.net.URL[] getClassPath(java.util.Vector)
    {
        java.util.Vector r0;
        java.net.URL[] r1;
        int i0, $i1, $i2;
        java.lang.Object $r2;
        java.net.URL $r3;

        r0 := @parameter0: java.util.Vector;
        $i1 = virtualinvoke r0.<java.util.Vector: int size()>();
        r1 = newarray (java.net.URL)[$i1];
        i0 = 0;
        goto label1;

     label0:
        $r2 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i0);
        $r3 = (java.net.URL) $r2;
        r1[i0] = $r3;
        i0 = i0 + 1;

     label1:
        $i2 = virtualinvoke r0.<java.util.Vector: int size()>();
        if i0 < $i2 goto label0;

        return r1;
    }

    public static java.net.URL[] getClassPath(java.lang.String, java.lang.String, java.lang.String, boolean) throws java.io.IOException, java.net.MalformedURLException
    {
        java.lang.String r0, r1, r2, r6;
        boolean z0;
        java.util.Vector $r3, r4;
        java.net.URL r5;
        java.net.URL[] $r7;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        z0 := @parameter3: boolean;
        $r3 = new java.util.Vector;
        specialinvoke $r3.<java.util.Vector: void <init>()>();
        r4 = $r3;
        if r0 == null goto label1;

        r5 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.net.URL getURL(java.lang.String,java.lang.String)>(r0, "classes");
        if r5 == null goto label0;

        virtualinvoke r4.<java.util.Vector: void addElement(java.lang.Object)>(r5);

     label0:
        staticinvoke <org.apache.tomcat.util.IntrospectionUtils: void addToClassPath(java.util.Vector,java.lang.String)>(r4, r0);

     label1:
        if r1 == null goto label2;

        staticinvoke <org.apache.tomcat.util.IntrospectionUtils: void addJarsFromClassPath(java.util.Vector,java.lang.String)>(r4, r1);

     label2:
        if r2 == null goto label3;

        r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2);
        staticinvoke <org.apache.tomcat.util.IntrospectionUtils: void addJarsFromClassPath(java.util.Vector,java.lang.String)>(r4, r6);

     label3:
        if z0 == 0 goto label4;

        staticinvoke <org.apache.tomcat.util.IntrospectionUtils: void addToolsJar(java.util.Vector)>(r4);

     label4:
        $r7 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.net.URL[] getClassPath(java.util.Vector)>(r4);
        return $r7;
    }

    public static void clear()
    {
        java.util.Hashtable $r0;

        $r0 = <org.apache.tomcat.util.IntrospectionUtils: java.util.Hashtable objectMethods>;
        virtualinvoke $r0.<java.util.Hashtable: void clear()>();
        return;
    }

    public static java.lang.reflect.Method[] findMethods(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Hashtable $r1, $r5;
        java.lang.reflect.Method[] r2, r4;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;
        $r1 = <org.apache.tomcat.util.IntrospectionUtils: java.util.Hashtable objectMethods>;
        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (java.lang.reflect.Method[]) $r3;
        if r2 == null goto label0;

        return r2;

     label0:
        r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();
        $r5 = <org.apache.tomcat.util.IntrospectionUtils: java.util.Hashtable objectMethods>;
        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r4);
        return r4;
    }

    public static java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0, $r10, $r11;
        java.lang.String r1, $r6;
        java.lang.Class[] r2, r4;
        java.lang.reflect.Method[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1;
        java.lang.reflect.Method $r5, $r7, $r8, $r9, $r12;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Class[];
        r3 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method[] findMethods(java.lang.Class)>(r0);
        if r3 != null goto label0;

        return null;

     label0:
        i0 = 0;
        goto label12;

     label1:
        $r5 = r3[i0];
        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z1 == 0 goto label11;

        $r7 = r3[i0];
        r4 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        if r4 != null goto label3;

        if r2 == null goto label2;

        $i2 = lengthof r2;
        if $i2 != 0 goto label3;

     label2:
        $r8 = r3[i0];
        return $r8;

     label3:
        if r2 != null goto label5;

        if r4 == null goto label4;

        $i3 = lengthof r4;
        if $i3 != 0 goto label5;

     label4:
        $r9 = r3[i0];
        return $r9;

     label5:
        $i4 = lengthof r2;
        $i5 = lengthof r4;
        if $i4 == $i5 goto label6;

        goto label11;

     label6:
        z0 = 1;
        i1 = 0;
        goto label9;

     label7:
        $r10 = r2[i1];
        $r11 = r4[i1];
        if $r10 == $r11 goto label8;

        z0 = 0;
        goto label10;

     label8:
        i1 = i1 + 1;

     label9:
        $i6 = lengthof r2;
        if i1 < $i6 goto label7;

     label10:
        if z0 == 0 goto label11;

        $r12 = r3[i0];
        return $r12;

     label11:
        i0 = i0 + 1;

     label12:
        $i7 = lengthof r3;
        if i0 < $i7 goto label1;

        return null;
    }

    public static boolean hasHook(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r7, $r9, $r10;
        java.lang.reflect.Method[] r2;
        int i0, $i1;
        java.lang.Class r3, r4, $r5;
        java.lang.reflect.Method $r6, $r8;
        boolean $z0, $z1;
        java.lang.Exception $r11, r12;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;

     label0:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r2 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method[] findMethods(java.lang.Class)>($r5);
        i0 = 0;
        goto label4;

     label1:
        $r6 = r2[i0];
        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        if $z0 == 0 goto label3;

        $r8 = r2[i0];
        r3 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();
        $r9 = "java.lang.Object";
        $r10 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();
        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);
        if $z1 != 0 goto label3;

     label2:
        return 1;

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = lengthof r2;
        if i0 < $i1 goto label1;

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;
        r12 = $r11;
        virtualinvoke r12.<java.lang.Exception: void printStackTrace()>();

     label7:
        return 0;

        catch java.lang.Exception from label0 to label2 with label6;
        catch java.lang.Exception from label3 to label5 with label6;
    }

    public static void callMain(java.lang.Class, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Class r0, $r4;
        java.lang.String[] r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method r3;
        java.lang.Object[] $r5;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.String[];
        r2 = newarray (java.lang.Class)[1];
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        r2[0] = $r4;
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("main", r2);
        $r5 = newarray (java.lang.Object)[1];
        $r5[0] = r1;
        virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);
        return;
    }

    public static java.lang.Object callMethod1(java.lang.Object, java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassLoader) throws java.lang.Exception
    {
        java.lang.Object r0, r2, $r39;
        java.lang.String r1, r3, $r13, $r18, $r22, $r26, $r33, $r34, $r37;
        java.lang.ClassLoader r4;
        java.lang.StringBuilder $r5, $r10, $r11, $r12, $r16, $r19, $r20, $r23, $r24, $r25, $r31, $r35, $r36;
        java.lang.Class[] r6;
        java.lang.reflect.Method r7;
        java.lang.reflect.InvocationTargetException r8, $r40;
        java.lang.IllegalArgumentException $r9;
        org.apache.juli.logging.Log $r14, $r15;
        boolean $z0;
        java.lang.Class $r17, $r21, $r27, $r28, $r29, $r32;
        java.lang.NoSuchMethodException $r30;
        java.lang.Object[] $r38;
        java.lang.Throwable $r41;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: java.lang.ClassLoader;
        if r0 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r9 = new java.lang.IllegalArgumentException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Assert: Illegal params ");
        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);
        throw $r9;

     label1:
        $r14 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r14.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label2;

        $r15 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: callMethod1 ");
        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();
        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r21 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();
        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r15.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r26);

     label2:
        r6 = newarray (java.lang.Class)[1];
        if r3 != null goto label3;

        $r27 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        r6[0] = $r27;
        goto label4;

     label3:
        $r28 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);
        r6[0] = $r28;

     label4:
        $r29 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r7 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r29, r1, r6);
        if r7 != null goto label5;

        $r30 = new java.lang.NoSuchMethodException;
        $r31 = new java.lang.StringBuilder;
        $r32 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();
        $r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r33);
        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>($r34);
        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r30.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r37);
        throw $r30;

     label5:
        $r38 = newarray (java.lang.Object)[1];
        $r38[0] = r2;
        $r39 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r38);

     label6:
        return $r39;

     label7:
        $r40 := @caughtexception;
        r8 = $r40;
        $r41 = virtualinvoke r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>($r41);
        throw r8;

        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
    }

    public static java.lang.Object callMethod0(java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        java.lang.Object r0, $r29;
        java.lang.String r1, $r9, $r14, $r18, $r23, $r24, $r27;
        java.lang.StringBuilder $r2, $r8, $r12, $r15, $r16, $r17, $r21, $r25, $r26;
        java.lang.Class[] r3;
        java.lang.reflect.Method r4;
        java.lang.reflect.InvocationTargetException r5, $r30;
        org.apache.juli.logging.Log $r6, $r7, $r10, $r11;
        boolean $z0, $z1;
        java.lang.Class $r13, $r19, $r22;
        java.lang.NoSuchMethodException $r20;
        java.lang.Object[] $r28;
        java.lang.Throwable $r31;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        if r0 != null goto label1;

        $r6 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r6.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r7 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Assert: Illegal params ");
        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r9);

     label0:
        return null;

     label1:
        $r10 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r10.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label2;

        $r11 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: callMethod0 ");
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();
        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r11.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r18);

     label2:
        r3 = newarray (java.lang.Class)[0];
        $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r4 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r19, r1, r3);
        if r4 != null goto label3;

        $r20 = new java.lang.NoSuchMethodException;
        $r21 = new java.lang.StringBuilder;
        $r22 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();
        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23);
        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24);
        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r20.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r27);
        throw $r20;

     label3:
        $r28 = <org.apache.tomcat.util.IntrospectionUtils: java.lang.Object[] emptyArray>;
        $r29 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r28);

     label4:
        return $r29;

     label5:
        $r30 := @caughtexception;
        r5 = $r30;
        $r31 = virtualinvoke r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>($r31);
        throw r5;

        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
    }

    public static java.lang.Object callMethodN(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.Exception
    {
        java.lang.Object r0, r4, $r27;
        java.lang.String r1, $r17, $r21, $r32, $r34;
        java.lang.Object[] r2;
        java.lang.Class[] r3;
        null_type n0;
        java.lang.StringBuilder r5, $r10, $r11, $r12, $r13, $r14, $r16, $r19, $r22, $r23, $r24, $r31, $r33;
        int i0, $i1;
        java.lang.Class $r6, $r15, $r20;
        java.lang.reflect.Method r7;
        org.apache.juli.logging.Log $r8, $r9, $r18, $r30;
        boolean $z0, $z1;
        java.lang.reflect.InvocationTargetException $r36, r37;
        java.lang.Throwable $r38;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Object[];
        r3 := @parameter3: java.lang.Class[];
        n0 = null;
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r7 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r6, r1, r3);
        if r7 != null goto label1;

        $r8 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r8.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r9 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Can\'t find method ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" CLASS ");
        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r9.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r17);

     label0:
        return null;

     label1:
        r4 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r2);
        $r18 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r18.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label5;

        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        r5 = $r19;
        $r20 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();
        $r22 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ");
        i0 = 0;
        goto label4;

     label2:
        if i0 <= 0 goto label3;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $r27 = r2[i0];
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);
        i0 = i0 + 1;

     label4:
        $i1 = lengthof r2;
        if i0 < $i1 goto label2;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r30 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r31 = new java.lang.StringBuilder;
        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils:");
        $r32 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();
        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r30.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r34);

     label5:
        return r4;

     label6:
        $r36 := @caughtexception;
        r37 = $r36;
        $r38 = virtualinvoke r37.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>($r38);
        throw r37;

        catch java.lang.reflect.InvocationTargetException from label1 to label5 with label6;
    }

    public static java.lang.Object convert(java.lang.String, java.lang.Class)
    {
        java.lang.String r0, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r23, $r27, $r29, $r33;
        java.lang.Class r1;
        java.io.Serializable r2;
        java.lang.NumberFormatException r3, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.net.UnknownHostException $r17, r18;
        org.apache.juli.logging.Log $r19, $r20, $r24, $r25;
        java.lang.StringBuilder $r21, $r22, $r26, $r28, $r31, $r32;
        java.lang.IllegalArgumentException $r30;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Class;
        r2 = null;
        $r4 = "java.lang.String";
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label0;

        r2 = r0;
        goto label11;

     label0:
        $r6 = "java.lang.Integer";
        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        if $z1 != 0 goto label1;

        $r8 = "int";
        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);
        if $z2 == 0 goto label4;

     label1:
        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r0);

     label2:
        goto label11;

     label3:
        $r10 := @caughtexception;
        r3 = $r10;
        goto label11;

     label4:
        $r11 = "java.lang.Boolean";
        $r12 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);
        if $z3 != 0 goto label5;

        $r13 = "boolean";
        $r14 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);
        if $z4 == 0 goto label6;

     label5:
        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r0);
        goto label11;

     label6:
        $r15 = "java.net.InetAddress";
        $r16 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);
        if $z5 == 0 goto label10;

     label7:
        r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r0);

     label8:
        goto label11;

     label9:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z6 = interfaceinvoke $r19.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z6 == 0 goto label11;

        $r20 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r21 = new java.lang.StringBuilder;
        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Unable to resolve host name:");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r20.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r23);
        goto label11;

     label10:
        $r24 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $z7 = interfaceinvoke $r24.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z7 == 0 goto label11;

        $r25 = <org.apache.tomcat.util.IntrospectionUtils: org.apache.juli.logging.Log log>;
        $r26 = new java.lang.StringBuilder;
        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("IntrospectionUtils: Unknown type ");
        $r27 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r25.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r29);

     label11:
        if r2 != null goto label12;

        $r30 = new java.lang.IllegalArgumentException;
        $r31 = new java.lang.StringBuilder;
        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Can\'t convert argument: ");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);
        throw $r30;

     label12:
        return r2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
        catch java.net.UnknownHostException from label7 to label8 with label9;
    }
}
