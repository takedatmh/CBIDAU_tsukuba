public class sun.security.krb5.internal.crypto.DesCbcCrcEType extends sun.security.krb5.internal.crypto.DesCbcEType
{

    public void <init>()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: void <init>()>();
        return;
    }

    public int eType()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        return 1;
    }

    public int minimumPadSize()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        return 4;
    }

    public int confounderSize()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        return 8;
    }

    public int checksumType()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        return 1;
    }

    public int checksumSize()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        return 4;
    }

    public byte[] encrypt(byte[], byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        byte[] r1, r2, $r3;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        $r3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcCrcEType: byte[] encrypt(byte[],byte[],byte[],int)>(r1, r2, r2, i0);
        return $r3;
    }

    public byte[] decrypt(byte[], byte[], int) throws sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        byte[] r1, r2, $r3;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        $r3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcCrcEType: byte[] decrypt(byte[],byte[],byte[],int)>(r1, r2, r2, i0);
        return $r3;
    }

    protected byte[] calculateChecksum(byte[], int)
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        byte[] r1, $r2;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        $r2 = staticinvoke <sun.security.krb5.internal.crypto.crc32: byte[] byte2crc32sum_bytes(byte[],int)>(r1, i0);
        return $r2;
    }

    public volatile byte[] decrypt(byte[], byte[], byte[], int) throws sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        byte[] r1, r2, r3, $r4;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        r3 := @parameter2: byte[];
        i0 := @parameter3: int;
        $r4 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] decrypt(byte[],byte[],byte[],int)>(r1, r2, r3, i0);
        return $r4;
    }

    public volatile byte[] encrypt(byte[], byte[], byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        byte[] r1, r2, r3, $r4;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        r3 := @parameter2: byte[];
        i0 := @parameter3: int;
        $r4 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] encrypt(byte[],byte[],byte[],int)>(r1, r2, r3, i0);
        return $r4;
    }

    public volatile int keySize()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        int $i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        $i0 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int keySize()>();
        return $i0;
    }

    public volatile int keyType()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        int $i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        $i0 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int keyType()>();
        return $i0;
    }

    public volatile int blockSize()
    {
        sun.security.krb5.internal.crypto.DesCbcCrcEType r0;
        int $i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcCrcEType;
        $i0 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int blockSize()>();
        return $i0;
    }
}
