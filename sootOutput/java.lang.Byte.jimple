public final class java.lang.Byte extends java.lang.Number implements java.lang.Comparable
{
    public static final byte MIN_VALUE;
    public static final byte MAX_VALUE;
    public static final java.lang.Class TYPE;
    private final byte value;
    public static final int SIZE;
    private static final long serialVersionUID;

    public static java.lang.String toString(byte)
    {
        byte b0;
        java.lang.String $r0;

        b0 := @parameter0: byte;
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(b0, 10);
        return $r0;
    }

    public static java.lang.Byte valueOf(byte)
    {
        byte b0;
        java.lang.Byte[] $r0;
        int $i1;
        java.lang.Byte $r1;

        b0 := @parameter0: byte;
        $r0 = <java.lang.Byte$ByteCache: java.lang.Byte[] cache>;
        $i1 = b0 + 128;
        $r1 = $r0[$i1];
        return $r1;
    }

    public static byte parseByte(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r7;
        int i0, i1;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6;
        java.lang.NumberFormatException $r2;
        byte $b2;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, i0);
        if i1 < -128 goto label0;

        if i1 <= 127 goto label1;

     label0:
        $r2 = new java.lang.NumberFormatException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value out of range. Value:\"");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" Radix:");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);
        throw $r2;

     label1:
        $b2 = (byte) i1;
        return $b2;
    }

    public static byte parseByte(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        byte $b0;

        r0 := @parameter0: java.lang.String;
        $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>(r0, 10);
        return $b0;
    }

    public static java.lang.Byte valueOf(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0;
        byte $b1;
        java.lang.Byte $r1;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $b1 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>(r0, i0);
        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);
        return $r1;
    }

    public static java.lang.Byte valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        java.lang.Byte $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>(r0, 10);
        return $r1;
    }

    public static java.lang.Byte decode(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r8;
        int i0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7;
        java.lang.Integer $r2;
        java.lang.NumberFormatException $r3;
        byte $b1;
        java.lang.Byte $r9;

        r0 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r0);
        i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();
        if i0 < -128 goto label0;

        if i0 <= 127 goto label1;

     label0:
        $r3 = new java.lang.NumberFormatException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range from input ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r8);
        throw $r3;

     label1:
        $b1 = (byte) i0;
        $r9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);
        return $r9;
    }

    public void <init>(byte)
    {
        java.lang.Byte r0;
        byte b0;

        r0 := @this: java.lang.Byte;
        b0 := @parameter0: byte;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        r0.<java.lang.Byte: byte value> = b0;
        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Byte r0;
        java.lang.String r1;
        byte $b0;

        r0 := @this: java.lang.Byte;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>(r1, 10);
        r0.<java.lang.Byte: byte value> = $b0;
        return;
    }

    public byte byteValue()
    {
        java.lang.Byte r0;
        byte $b0;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        return $b0;
    }

    public short shortValue()
    {
        java.lang.Byte r0;
        byte $b0;
        short $s1;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        $s1 = (short) $b0;
        return $s1;
    }

    public int intValue()
    {
        java.lang.Byte r0;
        byte $b0;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        return $b0;
    }

    public long longValue()
    {
        java.lang.Byte r0;
        byte $b0;
        long $l1;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        $l1 = (long) $b0;
        return $l1;
    }

    public float floatValue()
    {
        java.lang.Byte r0;
        byte $b0;
        float $f0;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        $f0 = (float) $b0;
        return $f0;
    }

    public double doubleValue()
    {
        java.lang.Byte r0;
        byte $b0;
        double $d0;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        $d0 = (double) $b0;
        return $d0;
    }

    public java.lang.String toString()
    {
        java.lang.Byte r0;
        byte $b0;
        java.lang.String $r1;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($b0);
        return $r1;
    }

    public int hashCode()
    {
        java.lang.Byte r0;
        byte $b0;

        r0 := @this: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        return $b0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Byte r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte $b0, $b1;

        r0 := @this: java.lang.Byte;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.Byte;
        if $z0 == 0 goto label2;

        $b0 = r0.<java.lang.Byte: byte value>;
        $r2 = (java.lang.Byte) r1;
        $b1 = virtualinvoke $r2.<java.lang.Byte: byte byteValue()>();
        if $b0 != $b1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;

     label2:
        return 0;
    }

    public int compareTo(java.lang.Byte)
    {
        java.lang.Byte r0, r1;
        byte $b0, $b1;
        int $i2;

        r0 := @this: java.lang.Byte;
        r1 := @parameter0: java.lang.Byte;
        $b0 = r0.<java.lang.Byte: byte value>;
        $b1 = r1.<java.lang.Byte: byte value>;
        $i2 = staticinvoke <java.lang.Byte: int compare(byte,byte)>($b0, $b1);
        return $i2;
    }

    public static int compare(byte, byte)
    {
        byte b0, b1;
        int $i2;

        b0 := @parameter0: byte;
        b1 := @parameter1: byte;
        $i2 = b0 - b1;
        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Byte r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Byte;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Byte) r1;
        $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("byte");
        <java.lang.Byte: java.lang.Class TYPE> = $r0;
        return;
    }
}
