public abstract class sun.util.calendar.CalendarDate extends java.lang.Object implements java.lang.Cloneable
{
    public static final int FIELD_UNDEFINED;
    public static final long TIME_UNDEFINED;
    private sun.util.calendar.Era era;
    private int year;
    private int month;
    private int dayOfMonth;
    private int dayOfWeek;
    private boolean leapYear;
    private int hours;
    private int minutes;
    private int seconds;
    private int millis;
    private long fraction;
    private boolean normalized;
    private java.util.TimeZone zoneinfo;
    private int zoneOffset;
    private int daylightSaving;
    private boolean forceStandardTime;
    private java.util.Locale locale;

    protected void <init>()
    {
        sun.util.calendar.CalendarDate r0;
        java.util.TimeZone $r1;

        r0 := @this: sun.util.calendar.CalendarDate;
        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();
        specialinvoke r0.<sun.util.calendar.CalendarDate: void <init>(java.util.TimeZone)>($r1);
        return;
    }

    protected void <init>(java.util.TimeZone)
    {
        sun.util.calendar.CalendarDate r0;
        java.util.TimeZone r1;

        r0 := @this: sun.util.calendar.CalendarDate;
        r1 := @parameter0: java.util.TimeZone;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.util.calendar.CalendarDate: int dayOfWeek> = -2147483648;
        r0.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo> = r1;
        return;
    }

    public sun.util.calendar.Era getEra()
    {
        sun.util.calendar.CalendarDate r0;
        sun.util.calendar.Era $r1;

        r0 := @this: sun.util.calendar.CalendarDate;
        $r1 = r0.<sun.util.calendar.CalendarDate: sun.util.calendar.Era era>;
        return $r1;
    }

    public sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)
    {
        sun.util.calendar.CalendarDate r0;
        sun.util.calendar.Era r1, $r2;

        r0 := @this: sun.util.calendar.CalendarDate;
        r1 := @parameter0: sun.util.calendar.Era;
        $r2 = r0.<sun.util.calendar.CalendarDate: sun.util.calendar.Era era>;
        if $r2 != r1 goto label0;

        return r0;

     label0:
        r0.<sun.util.calendar.CalendarDate: sun.util.calendar.Era era> = r1;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;
        return r0;
    }

    public int getYear()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int year>;
        return $i0;
    }

    public sun.util.calendar.CalendarDate setYear(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.CalendarDate: int year>;
        if $i1 == i0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int year> = i0;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public sun.util.calendar.CalendarDate addYear(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1, $i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        $i1 = r0.<sun.util.calendar.CalendarDate: int year>;
        $i2 = $i1 + i0;
        r0.<sun.util.calendar.CalendarDate: int year> = $i2;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public boolean isLeapYear()
    {
        sun.util.calendar.CalendarDate r0;
        boolean $z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $z0 = r0.<sun.util.calendar.CalendarDate: boolean leapYear>;
        return $z0;
    }

    void setLeapYear(boolean)
    {
        sun.util.calendar.CalendarDate r0;
        boolean z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        z0 := @parameter0: boolean;
        r0.<sun.util.calendar.CalendarDate: boolean leapYear> = z0;
        return;
    }

    public int getMonth()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int month>;
        return $i0;
    }

    public sun.util.calendar.CalendarDate setMonth(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.CalendarDate: int month>;
        if $i1 == i0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int month> = i0;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public sun.util.calendar.CalendarDate addMonth(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1, $i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        $i1 = r0.<sun.util.calendar.CalendarDate: int month>;
        $i2 = $i1 + i0;
        r0.<sun.util.calendar.CalendarDate: int month> = $i2;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public int getDayOfMonth()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int dayOfMonth>;
        return $i0;
    }

    public sun.util.calendar.CalendarDate setDayOfMonth(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.CalendarDate: int dayOfMonth>;
        if $i1 == i0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int dayOfMonth> = i0;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public sun.util.calendar.CalendarDate addDayOfMonth(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1, $i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        $i1 = r0.<sun.util.calendar.CalendarDate: int dayOfMonth>;
        $i2 = $i1 + i0;
        r0.<sun.util.calendar.CalendarDate: int dayOfMonth> = $i2;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public int getDayOfWeek()
    {
        sun.util.calendar.CalendarDate r0;
        boolean $z0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $z0 = virtualinvoke r0.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z0 != 0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int dayOfWeek> = -2147483648;

     label0:
        $i0 = r0.<sun.util.calendar.CalendarDate: int dayOfWeek>;
        return $i0;
    }

    public int getHours()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int hours>;
        return $i0;
    }

    public sun.util.calendar.CalendarDate setHours(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.CalendarDate: int hours>;
        if $i1 == i0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int hours> = i0;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public sun.util.calendar.CalendarDate addHours(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1, $i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        $i1 = r0.<sun.util.calendar.CalendarDate: int hours>;
        $i2 = $i1 + i0;
        r0.<sun.util.calendar.CalendarDate: int hours> = $i2;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public int getMinutes()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int minutes>;
        return $i0;
    }

    public sun.util.calendar.CalendarDate setMinutes(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.CalendarDate: int minutes>;
        if $i1 == i0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int minutes> = i0;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public sun.util.calendar.CalendarDate addMinutes(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1, $i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        $i1 = r0.<sun.util.calendar.CalendarDate: int minutes>;
        $i2 = $i1 + i0;
        r0.<sun.util.calendar.CalendarDate: int minutes> = $i2;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public int getSeconds()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int seconds>;
        return $i0;
    }

    public sun.util.calendar.CalendarDate setSeconds(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.CalendarDate: int seconds>;
        if $i1 == i0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int seconds> = i0;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public sun.util.calendar.CalendarDate addSeconds(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1, $i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        $i1 = r0.<sun.util.calendar.CalendarDate: int seconds>;
        $i2 = $i1 + i0;
        r0.<sun.util.calendar.CalendarDate: int seconds> = $i2;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public int getMillis()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int millis>;
        return $i0;
    }

    public sun.util.calendar.CalendarDate setMillis(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.CalendarDate: int millis>;
        if $i1 == i0 goto label0;

        r0.<sun.util.calendar.CalendarDate: int millis> = i0;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public sun.util.calendar.CalendarDate addMillis(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, $i1, $i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        $i1 = r0.<sun.util.calendar.CalendarDate: int millis>;
        $i2 = $i1 + i0;
        r0.<sun.util.calendar.CalendarDate: int millis> = $i2;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = 0;

     label0:
        return r0;
    }

    public long getTimeOfDay()
    {
        sun.util.calendar.CalendarDate r0;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $z0 = virtualinvoke r0.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z0 != 0 goto label0;

        $l0 = -9223372036854775808L;
        r0.<sun.util.calendar.CalendarDate: long fraction> = $l0;
        return $l0;

     label0:
        $l1 = r0.<sun.util.calendar.CalendarDate: long fraction>;
        return $l1;
    }

    public sun.util.calendar.CalendarDate setDate(int, int, int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, i1, i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setYear(int)>(i0);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMonth(int)>(i1);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDayOfMonth(int)>(i2);
        return r0;
    }

    public sun.util.calendar.CalendarDate addDate(int, int, int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, i1, i2;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addYear(int)>(i0);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addMonth(int)>(i1);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addDayOfMonth(int)>(i2);
        return r0;
    }

    public sun.util.calendar.CalendarDate setTimeOfDay(int, int, int, int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, i1, i2, i3;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>(i0);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>(i1);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>(i2);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>(i3);
        return r0;
    }

    public sun.util.calendar.CalendarDate addTimeOfDay(int, int, int, int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0, i1, i2, i3;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addHours(int)>(i0);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addMinutes(int)>(i1);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addSeconds(int)>(i2);
        virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addMillis(int)>(i3);
        return r0;
    }

    protected void setTimeOfDay(long)
    {
        sun.util.calendar.CalendarDate r0;
        long l0;

        r0 := @this: sun.util.calendar.CalendarDate;
        l0 := @parameter0: long;
        r0.<sun.util.calendar.CalendarDate: long fraction> = l0;
        return;
    }

    public boolean isNormalized()
    {
        sun.util.calendar.CalendarDate r0;
        boolean $z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $z0 = r0.<sun.util.calendar.CalendarDate: boolean normalized>;
        return $z0;
    }

    public boolean isStandardTime()
    {
        sun.util.calendar.CalendarDate r0;
        boolean $z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $z0 = r0.<sun.util.calendar.CalendarDate: boolean forceStandardTime>;
        return $z0;
    }

    public void setStandardTime(boolean)
    {
        sun.util.calendar.CalendarDate r0;
        boolean z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        z0 := @parameter0: boolean;
        r0.<sun.util.calendar.CalendarDate: boolean forceStandardTime> = z0;
        return;
    }

    public boolean isDaylightTime()
    {
        sun.util.calendar.CalendarDate r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $z0 = virtualinvoke r0.<sun.util.calendar.CalendarDate: boolean isStandardTime()>();
        if $z0 == 0 goto label0;

        return 0;

     label0:
        $i0 = r0.<sun.util.calendar.CalendarDate: int daylightSaving>;
        if $i0 == 0 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void setLocale(java.util.Locale)
    {
        sun.util.calendar.CalendarDate r0;
        java.util.Locale r1;

        r0 := @this: sun.util.calendar.CalendarDate;
        r1 := @parameter0: java.util.Locale;
        r0.<sun.util.calendar.CalendarDate: java.util.Locale locale> = r1;
        return;
    }

    public java.util.TimeZone getZone()
    {
        sun.util.calendar.CalendarDate r0;
        java.util.TimeZone $r1;

        r0 := @this: sun.util.calendar.CalendarDate;
        $r1 = r0.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo>;
        return $r1;
    }

    public sun.util.calendar.CalendarDate setZone(java.util.TimeZone)
    {
        sun.util.calendar.CalendarDate r0;
        java.util.TimeZone r1;

        r0 := @this: sun.util.calendar.CalendarDate;
        r1 := @parameter0: java.util.TimeZone;
        r0.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo> = r1;
        return r0;
    }

    public boolean isSameDate(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.CalendarDate r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        sun.util.calendar.Era $r2, $r3;
        boolean $z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $i0 = virtualinvoke r0.<sun.util.calendar.CalendarDate: int getDayOfWeek()>();
        $i1 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getDayOfWeek()>();
        if $i0 != $i1 goto label0;

        $i2 = virtualinvoke r0.<sun.util.calendar.CalendarDate: int getMonth()>();
        $i3 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getMonth()>();
        if $i2 != $i3 goto label0;

        $i4 = virtualinvoke r0.<sun.util.calendar.CalendarDate: int getYear()>();
        $i5 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getYear()>();
        if $i4 != $i5 goto label0;

        $r2 = virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>();
        $r3 = virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>();
        if $r2 != $r3 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        sun.util.calendar.CalendarDate r0, r2;
        java.lang.Object r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.TimeZone $r3, $r4, $r5, $r6;
        sun.util.calendar.Era $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @this: sun.util.calendar.CalendarDate;
        r1 := @parameter0: java.lang.Object;
        $z2 = r1 instanceof sun.util.calendar.CalendarDate;
        if $z2 != 0 goto label0;

        return 0;

     label0:
        r2 = (sun.util.calendar.CalendarDate) r1;
        $z3 = virtualinvoke r0.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        $z4 = virtualinvoke r2.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z3 == $z4 goto label1;

        return 0;

     label1:
        $r3 = r0.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo>;
        if $r3 == null goto label2;

        $z5 = 1;
        goto label3;

     label2:
        $z5 = 0;

     label3:
        z0 = $z5;
        $r4 = r2.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo>;
        if $r4 == null goto label4;

        $z6 = 1;
        goto label5;

     label4:
        $z6 = 0;

     label5:
        z1 = $z6;
        if z0 == z1 goto label6;

        return 0;

     label6:
        if z0 == 0 goto label7;

        $r5 = r0.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo>;
        $r6 = r2.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo>;
        $z7 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);
        if $z7 != 0 goto label7;

        return 0;

     label7:
        $r7 = virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>();
        $r8 = virtualinvoke r2.<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>();
        if $r7 != $r8 goto label8;

        $i0 = r0.<sun.util.calendar.CalendarDate: int year>;
        $i1 = r2.<sun.util.calendar.CalendarDate: int year>;
        if $i0 != $i1 goto label8;

        $i2 = r0.<sun.util.calendar.CalendarDate: int month>;
        $i3 = r2.<sun.util.calendar.CalendarDate: int month>;
        if $i2 != $i3 goto label8;

        $i4 = r0.<sun.util.calendar.CalendarDate: int dayOfMonth>;
        $i5 = r2.<sun.util.calendar.CalendarDate: int dayOfMonth>;
        if $i4 != $i5 goto label8;

        $i6 = r0.<sun.util.calendar.CalendarDate: int hours>;
        $i7 = r2.<sun.util.calendar.CalendarDate: int hours>;
        if $i6 != $i7 goto label8;

        $i8 = r0.<sun.util.calendar.CalendarDate: int minutes>;
        $i9 = r2.<sun.util.calendar.CalendarDate: int minutes>;
        if $i8 != $i9 goto label8;

        $i10 = r0.<sun.util.calendar.CalendarDate: int seconds>;
        $i11 = r2.<sun.util.calendar.CalendarDate: int seconds>;
        if $i10 != $i11 goto label8;

        $i12 = r0.<sun.util.calendar.CalendarDate: int millis>;
        $i13 = r2.<sun.util.calendar.CalendarDate: int millis>;
        if $i12 != $i13 goto label8;

        $i14 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        $i15 = r2.<sun.util.calendar.CalendarDate: int zoneOffset>;
        if $i14 != $i15 goto label8;

        $z8 = 1;
        goto label9;

     label8:
        $z8 = 0;

     label9:
        return $z8;
    }

    public int hashCode()
    {
        sun.util.calendar.CalendarDate r0;
        long l0, $l5, $l6, $l7, $l10, $l11, $l12, $l14, $l15, $l17, $l18, $l19, $l21, $l22, $l23, $l25, $l26, $l27, $l29, l30, $l32, l33, $l37;
        byte b1, $b34;
        int i2, i3, $i4, $i8, $i9, $i13, $i16, $i20, $i24, $i28, $i31, $i35, $i36, $i38, $i39, $i40, $i41, $i42;
        sun.util.calendar.Era r1;
        boolean $z0;
        java.util.TimeZone $r2, $r3;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i4 = r0.<sun.util.calendar.CalendarDate: int year>;
        $l5 = (long) $i4;
        $l6 = $l5 - 1970L;
        $l7 = $l6 * 12L;
        $i8 = r0.<sun.util.calendar.CalendarDate: int month>;
        $i9 = $i8 - 1;
        $l10 = (long) $i9;
        $l11 = $l7 + $l10;
        $l12 = $l11 * 30L;
        $i13 = r0.<sun.util.calendar.CalendarDate: int dayOfMonth>;
        $l14 = (long) $i13;
        $l15 = $l12 + $l14;
        l0 = $l15 * 24L;
        $i16 = r0.<sun.util.calendar.CalendarDate: int hours>;
        $l17 = (long) $i16;
        $l18 = l0 + $l17;
        $l19 = $l18 * 60L;
        $i20 = r0.<sun.util.calendar.CalendarDate: int minutes>;
        $l21 = (long) $i20;
        $l22 = $l19 + $l21;
        $l23 = $l22 * 60L;
        $i24 = r0.<sun.util.calendar.CalendarDate: int seconds>;
        $l25 = (long) $i24;
        $l26 = $l23 + $l25;
        $l27 = $l26 * 1000L;
        $i28 = r0.<sun.util.calendar.CalendarDate: int millis>;
        $l29 = (long) $i28;
        l30 = $l27 + $l29;
        $i31 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        $l32 = (long) $i31;
        l33 = l30 - $l32;
        $z0 = virtualinvoke r0.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z0 == 0 goto label0;

        $b34 = 1;
        goto label1;

     label0:
        $b34 = 0;

     label1:
        b1 = $b34;
        i2 = 0;
        r1 = virtualinvoke r0.<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>();
        if r1 == null goto label2;

        i2 = virtualinvoke r1.<sun.util.calendar.Era: int hashCode()>();

     label2:
        $r2 = r0.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo>;
        if $r2 == null goto label3;

        $r3 = r0.<sun.util.calendar.CalendarDate: java.util.TimeZone zoneinfo>;
        $i35 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();
        goto label4;

     label3:
        $i35 = 0;

     label4:
        i3 = $i35;
        $i36 = (int) l33;
        $l37 = l33 >> 32;
        $i38 = (int) $l37;
        $i39 = $i36 * $i38;
        $i40 = $i39 ^ i2;
        $i41 = $i40 ^ b1;
        $i42 = $i41 ^ i3;
        return $i42;
    }

    public java.lang.Object clone()
    {
        sun.util.calendar.CalendarDate r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object $r2;
        java.lang.InternalError $r4;

        r0 := @this: sun.util.calendar.CalendarDate;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.InternalError;
        specialinvoke $r4.<java.lang.InternalError: void <init>()>();
        throw $r4;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public java.lang.String toString()
    {
        sun.util.calendar.CalendarDate r0;
        java.lang.StringBuilder $r1, r2, $r3, $r5, $r7, $r9, $r11, $r13;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15;
        char c1;
        java.lang.String $r21;

        r0 := @this: sun.util.calendar.CalendarDate;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        $i2 = r0.<sun.util.calendar.CalendarDate: int year>;
        $r3 = staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i2, 4);
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
        $i3 = r0.<sun.util.calendar.CalendarDate: int month>;
        $r5 = staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i3, 2);
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
        $i4 = r0.<sun.util.calendar.CalendarDate: int dayOfMonth>;
        $r7 = staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i4, 2);
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(84);
        $i5 = r0.<sun.util.calendar.CalendarDate: int hours>;
        $r9 = staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i5, 2);
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
        $i6 = r0.<sun.util.calendar.CalendarDate: int minutes>;
        $r11 = staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i6, 2);
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
        $i7 = r0.<sun.util.calendar.CalendarDate: int seconds>;
        $r13 = staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i7, 2);
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
        $i8 = r0.<sun.util.calendar.CalendarDate: int millis>;
        staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i8, 3);
        $i9 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        if $i9 != 0 goto label0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);
        goto label4;

     label0:
        $i10 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        if $i10 == -2147483648 goto label3;

        $i11 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        if $i11 <= 0 goto label1;

        i0 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        c1 = 43;
        goto label2;

     label1:
        $i12 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        i0 = neg $i12;
        c1 = 45;

     label2:
        i13 = i0 / 60000;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);
        $i14 = i13 / 60;
        staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i14, 2);
        $i15 = i13 % 60;
        staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuilder sprintf0d(java.lang.StringBuilder,int,int)>(r2, $i15, 2);
        goto label4;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" local time");

     label4:
        $r21 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r21;
    }

    protected void setDayOfWeek(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        r0.<sun.util.calendar.CalendarDate: int dayOfWeek> = i0;
        return;
    }

    protected void setNormalized(boolean)
    {
        sun.util.calendar.CalendarDate r0;
        boolean z0;

        r0 := @this: sun.util.calendar.CalendarDate;
        z0 := @parameter0: boolean;
        r0.<sun.util.calendar.CalendarDate: boolean normalized> = z0;
        return;
    }

    public int getZoneOffset()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int zoneOffset>;
        return $i0;
    }

    protected void setZoneOffset(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        r0.<sun.util.calendar.CalendarDate: int zoneOffset> = i0;
        return;
    }

    public int getDaylightSaving()
    {
        sun.util.calendar.CalendarDate r0;
        int $i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        $i0 = r0.<sun.util.calendar.CalendarDate: int daylightSaving>;
        return $i0;
    }

    protected void setDaylightSaving(int)
    {
        sun.util.calendar.CalendarDate r0;
        int i0;

        r0 := @this: sun.util.calendar.CalendarDate;
        i0 := @parameter0: int;
        r0.<sun.util.calendar.CalendarDate: int daylightSaving> = i0;
        return;
    }
}
