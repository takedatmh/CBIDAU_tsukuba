final class sun.util.logging.PlatformLogger$DefaultLoggerProxy extends sun.util.logging.PlatformLogger$LoggerProxy
{
    volatile sun.util.logging.PlatformLogger$Level effectiveLevel;
    volatile sun.util.logging.PlatformLogger$Level level;
    private static final java.lang.String formatString;
    private java.util.Date date;

    private static java.io.PrintStream outputStream()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;
        return $r0;
    }

    void <init>(java.lang.String)
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        java.lang.String r1;
        java.util.Date $r2;
        sun.util.logging.PlatformLogger$Level $r3;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<sun.util.logging.PlatformLogger$LoggerProxy: void <init>(java.lang.String)>(r1);
        $r2 = new java.util.Date;
        specialinvoke $r2.<java.util.Date: void <init>()>();
        r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.util.Date date> = $r2;
        $r3 = specialinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level deriveEffectiveLevel(sun.util.logging.PlatformLogger$Level)>(null);
        r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level effectiveLevel> = $r3;
        r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level level> = null;
        return;
    }

    boolean isEnabled()
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level $r1, $r2;
        boolean $z0;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        $r2 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level effectiveLevel>;
        $r1 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level OFF>;
        if $r2 == $r1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    sun.util.logging.PlatformLogger$Level getLevel()
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level $r1;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        $r1 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level level>;
        return $r1;
    }

    void setLevel(sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1, r2, $r3;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level level>;
        if r2 == r1 goto label0;

        r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level level> = r1;
        $r3 = specialinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level deriveEffectiveLevel(sun.util.logging.PlatformLogger$Level)>(r1);
        r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level effectiveLevel> = $r3;

     label0:
        return;
    }

    void doLog(sun.util.logging.PlatformLogger$Level, java.lang.String)
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, $r4;
        boolean $z0;
        java.io.PrintStream $r3;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 := @parameter1: java.lang.String;
        $z0 = virtualinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>(r1);
        if $z0 == 0 goto label0;

        $r3 = staticinvoke <sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.io.PrintStream outputStream()>();
        $r4 = specialinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>(r1, r2, null);
        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r4);

     label0:
        return;
    }

    void doLog(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, $r5;
        java.lang.Throwable r3;
        boolean $z0;
        java.io.PrintStream $r4;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Throwable;
        $z0 = virtualinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>(r1);
        if $z0 == 0 goto label0;

        $r4 = staticinvoke <sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.io.PrintStream outputStream()>();
        $r5 = specialinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>(r1, r2, r3);
        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>($r5);

     label0:
        return;
    }

    transient void doLog(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r4, $r6;
        java.lang.Object[] r3;
        boolean $z0;
        java.io.PrintStream $r5;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object[];
        $z0 = virtualinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>(r1);
        if $z0 == 0 goto label0;

        r4 = specialinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r2, r3);
        $r5 = staticinvoke <sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.io.PrintStream outputStream()>();
        $r6 = specialinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String format(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>(r1, r4, null);
        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r6);

     label0:
        return;
    }

    boolean isLoggable(sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1, r2, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level effectiveLevel>;
        $i0 = virtualinvoke r1.<sun.util.logging.PlatformLogger$Level: int intValue()>();
        $i1 = virtualinvoke r2.<sun.util.logging.PlatformLogger$Level: int intValue()>();
        if $i0 < $i1 goto label0;

        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level OFF>;
        if r2 == $r3 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private sun.util.logging.PlatformLogger$Level deriveEffectiveLevel(sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1, $r2;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        if r1 != null goto label0;

        $r2 = staticinvoke <sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$Level access$000()>();
        goto label1;

     label0:
        $r2 = r1;

     label1:
        return $r2;
    }

    private transient java.lang.String formatMessage(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        java.lang.Exception r3, $r7;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];

     label0:
        if r2 == null goto label1;

        $i0 = lengthof r2;
        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("{0");
        if $i1 >= 0 goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("{1");
        if $i2 >= 0 goto label3;

        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("{2");
        if $i3 >= 0 goto label3;

        $i4 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("{3");
        if $i4 < 0 goto label5;

     label3:
        $r5 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

     label4:
        return $r5;

     label5:
        return r1;

     label6:
        $r7 := @caughtexception;
        r3 = $r7;
        return r1;

        catch java.lang.Exception from label0 to label1 with label6;
        catch java.lang.Exception from label2 to label4 with label6;
    }

    private synchronized java.lang.String format(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r4, $r10, $r13, $r14, $r15, $r16;
        java.lang.Throwable r3;
        long $l0;
        java.io.StringWriter r5, $r8;
        java.io.PrintWriter r6, $r9;
        java.util.Date $r7, $r12;
        java.lang.Object[] $r11;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Throwable;
        $r7 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.util.Date date>;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        virtualinvoke $r7.<java.util.Date: void setTime(long)>($l0);
        r4 = "";
        if r3 == null goto label0;

        $r8 = new java.io.StringWriter;
        specialinvoke $r8.<java.io.StringWriter: void <init>()>();
        r5 = $r8;
        $r9 = new java.io.PrintWriter;
        specialinvoke $r9.<java.io.PrintWriter: void <init>(java.io.Writer)>(r5);
        r6 = $r9;
        virtualinvoke r6.<java.io.PrintWriter: void println()>();
        virtualinvoke r3.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r6);
        virtualinvoke r6.<java.io.PrintWriter: void close()>();
        r4 = virtualinvoke r5.<java.io.StringWriter: java.lang.String toString()>();

     label0:
        $r10 = <sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String formatString>;
        $r11 = newarray (java.lang.Object)[6];
        $r12 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.util.Date date>;
        $r11[0] = $r12;
        $r13 = specialinvoke r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String getCallerInfo()>();
        $r11[1] = $r13;
        $r14 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String name>;
        $r11[2] = $r14;
        $r15 = virtualinvoke r1.<sun.util.logging.PlatformLogger$Level: java.lang.String name()>();
        $r11[3] = $r15;
        $r11[4] = r2;
        $r11[5] = r4;
        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r10, $r11);
        return $r16;
    }

    private java.lang.String getCallerInfo()
    {
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r0;
        java.lang.String r1, r2, r5, r7, $r13, $r14;
        sun.misc.JavaLangAccess r3;
        java.lang.Throwable r4, $r8;
        int i0, i1;
        boolean z0, $z1, $z2;
        java.lang.StackTraceElement r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        r1 = null;
        r2 = null;
        r3 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        $r8 = new java.lang.Throwable;
        specialinvoke $r8.<java.lang.Throwable: void <init>()>();
        r4 = $r8;
        i0 = interfaceinvoke r3.<sun.misc.JavaLangAccess: int getStackTraceDepth(java.lang.Throwable)>(r4);
        r5 = "sun.util.logging.PlatformLogger";
        z0 = 1;
        i1 = 0;

     label0:
        if i1 >= i0 goto label3;

        r6 = interfaceinvoke r3.<sun.misc.JavaLangAccess: java.lang.StackTraceElement getStackTraceElement(java.lang.Throwable,int)>(r4, i1);
        r7 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String getClassName()>();
        if z0 == 0 goto label1;

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r5);
        if $z1 == 0 goto label2;

        z0 = 0;
        goto label2;

     label1:
        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r5);
        if $z2 != 0 goto label2;

        r1 = r7;
        r2 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String getMethodName()>();
        goto label3;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        if r1 == null goto label4;

        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r13;

     label4:
        $r14 = r0.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String name>;
        return $r14;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <sun.util.logging.LoggingSupport: java.lang.String getSimpleFormat(boolean)>(0);
        <sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String formatString> = $r0;
        return;
    }
}
