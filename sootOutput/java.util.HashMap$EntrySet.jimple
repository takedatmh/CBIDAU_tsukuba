final class java.util.HashMap$EntrySet extends java.util.AbstractSet
{
    final java.util.HashMap this$0;

    private void <init>(java.util.HashMap)
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap r1;

        r0 := @this: java.util.HashMap$EntrySet;
        r1 := @parameter0: java.util.HashMap;
        r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.HashMap$EntrySet;
        $r1 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;
        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Iterator newEntryIterator()>();
        return $r2;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.HashMap$EntrySet r0;
        java.lang.Object r1, $r5;
        java.util.Map$Entry r2;
        java.util.HashMap$Entry r3;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r4;

        r0 := @this: java.util.HashMap$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        $r4 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;
        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        r3 = virtualinvoke $r4.<java.util.HashMap: java.util.HashMap$Entry getEntry(java.lang.Object)>($r5);
        if r3 == null goto label1;

        $z1 = virtualinvoke r3.<java.util.HashMap$Entry: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.HashMap$EntrySet r0;
        java.lang.Object r1;
        java.util.HashMap $r2;
        java.util.HashMap$Entry $r3;
        boolean $z0;

        r0 := @this: java.util.HashMap$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;
        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.HashMap$Entry removeMapping(java.lang.Object)>(r1);
        if $r3 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int size()
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: java.util.HashMap$EntrySet;
        $r1 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;
        $i0 = $r1.<java.util.HashMap: int size>;
        return $i0;
    }

    public void clear()
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashMap$EntrySet;
        $r1 = r0.<java.util.HashMap$EntrySet: java.util.HashMap this$0>;
        virtualinvoke $r1.<java.util.HashMap: void clear()>();
        return;
    }

    void <init>(java.util.HashMap, java.util.HashMap$1)
    {
        java.util.HashMap$EntrySet r0;
        java.util.HashMap r1;
        java.util.HashMap$1 r2;

        r0 := @this: java.util.HashMap$EntrySet;
        r1 := @parameter0: java.util.HashMap;
        r2 := @parameter1: java.util.HashMap$1;
        specialinvoke r0.<java.util.HashMap$EntrySet: void <init>(java.util.HashMap)>(r1);
        return;
    }
}
