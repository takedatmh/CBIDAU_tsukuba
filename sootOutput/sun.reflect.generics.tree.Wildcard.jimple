public class sun.reflect.generics.tree.Wildcard extends java.lang.Object implements sun.reflect.generics.tree.TypeArgument
{
    private sun.reflect.generics.tree.FieldTypeSignature[] upperBounds;
    private sun.reflect.generics.tree.FieldTypeSignature[] lowerBounds;
    private static final sun.reflect.generics.tree.FieldTypeSignature[] emptyBounds;

    private void <init>(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[])
    {
        sun.reflect.generics.tree.Wildcard r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1, r2;

        r0 := @this: sun.reflect.generics.tree.Wildcard;
        r1 := @parameter0: sun.reflect.generics.tree.FieldTypeSignature[];
        r2 := @parameter1: sun.reflect.generics.tree.FieldTypeSignature[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] upperBounds> = r1;
        r0.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] lowerBounds> = r2;
        return;
    }

    public static sun.reflect.generics.tree.Wildcard make(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[])
    {
        sun.reflect.generics.tree.FieldTypeSignature[] r0, r1;
        sun.reflect.generics.tree.Wildcard $r2;

        r0 := @parameter0: sun.reflect.generics.tree.FieldTypeSignature[];
        r1 := @parameter1: sun.reflect.generics.tree.FieldTypeSignature[];
        $r2 = new sun.reflect.generics.tree.Wildcard;
        specialinvoke $r2.<sun.reflect.generics.tree.Wildcard: void <init>(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])>(r0, r1);
        return $r2;
    }

    public sun.reflect.generics.tree.FieldTypeSignature[] getUpperBounds()
    {
        sun.reflect.generics.tree.Wildcard r0;
        sun.reflect.generics.tree.FieldTypeSignature[] $r1;

        r0 := @this: sun.reflect.generics.tree.Wildcard;
        $r1 = r0.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] upperBounds>;
        return $r1;
    }

    public sun.reflect.generics.tree.FieldTypeSignature[] getLowerBounds()
    {
        sun.reflect.generics.tree.Wildcard r0;
        sun.reflect.generics.tree.FieldTypeSignature[] $r1, $r2, $r5, $r6;
        int $i0;
        sun.reflect.generics.tree.FieldTypeSignature $r3;
        sun.reflect.generics.tree.BottomSignature $r4;

        r0 := @this: sun.reflect.generics.tree.Wildcard;
        $r1 = r0.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] lowerBounds>;
        $i0 = lengthof $r1;
        if $i0 != 1 goto label0;

        $r2 = r0.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] lowerBounds>;
        $r3 = $r2[0];
        $r4 = staticinvoke <sun.reflect.generics.tree.BottomSignature: sun.reflect.generics.tree.BottomSignature make()>();
        if $r3 != $r4 goto label0;

        $r5 = <sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] emptyBounds>;
        return $r5;

     label0:
        $r6 = r0.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] lowerBounds>;
        return $r6;
    }

    public void accept(sun.reflect.generics.visitor.TypeTreeVisitor)
    {
        sun.reflect.generics.tree.Wildcard r0;
        sun.reflect.generics.visitor.TypeTreeVisitor r1;

        r0 := @this: sun.reflect.generics.tree.Wildcard;
        r1 := @parameter0: sun.reflect.generics.visitor.TypeTreeVisitor;
        interfaceinvoke r1.<sun.reflect.generics.visitor.TypeTreeVisitor: void visitWildcard(sun.reflect.generics.tree.Wildcard)>(r0);
        return;
    }

    static void <clinit>()
    {
        sun.reflect.generics.tree.FieldTypeSignature[] $r0;

        $r0 = newarray (sun.reflect.generics.tree.FieldTypeSignature)[0];
        <sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] emptyBounds> = $r0;
        return;
    }
}
