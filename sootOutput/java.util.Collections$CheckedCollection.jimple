class java.util.Collections$CheckedCollection extends java.lang.Object implements java.util.Collection, java.io.Serializable
{
    private static final long serialVersionUID;
    final java.util.Collection c;
    final java.lang.Class type;
    private java.lang.Object[] zeroLengthElementArray;

    void typeCheck(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0;
        java.lang.ClassCastException $r3;
        java.lang.String $r4;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $r2 = r0.<java.util.Collections$CheckedCollection: java.lang.Class type>;
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r3 = new java.lang.ClassCastException;
        $r4 = specialinvoke r0.<java.util.Collections$CheckedCollection: java.lang.String badElementMsg(java.lang.Object)>(r1);
        specialinvoke $r3.<java.lang.ClassCastException: void <init>(java.lang.String)>($r4);
        throw $r3;

     label0:
        return;
    }

    private java.lang.String badElementMsg(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.Class $r4, $r7;
        java.lang.String $r9;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to insert ");
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" element into collection with element type ");
        $r7 = r0.<java.util.Collections$CheckedCollection: java.lang.Class type>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    void <init>(java.util.Collection, java.lang.Class)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1;
        java.lang.Class r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.util.Collection;
        r2 := @parameter1: java.lang.Class;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Collections$CheckedCollection: java.lang.Object[] zeroLengthElementArray> = null;
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label1:
        r0.<java.util.Collections$CheckedCollection: java.util.Collection c> = r1;
        r0.<java.util.Collections$CheckedCollection: java.lang.Class type> = r2;
        return;
    }

    public int size()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedCollection;
        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);
        return $z0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.Collections$CheckedCollection;
        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();
        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object[] r1, $r3;
        java.util.Collection $r2;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.lang.Object[];
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $r3 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r1);
        return $r3;
    }

    public java.lang.String toString()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Collections$CheckedCollection;
        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);
        return $z0;
    }

    public void clear()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection $r1;

        r0 := @this: java.util.Collections$CheckedCollection;
        $r1 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        interfaceinvoke $r1.<java.util.Collection: void clear()>();
        return;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.util.Collection;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean containsAll(java.util.Collection)>(r1);
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.util.Collection;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean removeAll(java.util.Collection)>(r1);
        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.util.Collection;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1);
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Iterator r1;
        java.util.Collection $r2;
        java.util.Collections$CheckedCollection$1 $r3;

        r0 := @this: java.util.Collections$CheckedCollection;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();
        $r3 = new java.util.Collections$CheckedCollection$1;
        specialinvoke $r3.<java.util.Collections$CheckedCollection$1: void <init>(java.util.Collections$CheckedCollection,java.util.Iterator)>(r0, r1);
        return $r3;
    }

    public boolean add(java.lang.Object)
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.Collections$CheckedCollection: void typeCheck(java.lang.Object)>(r1);
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r1);
        return $z0;
    }

    private java.lang.Object[] zeroLengthElementArray()
    {
        java.util.Collections$CheckedCollection r0;
        java.lang.Object[] $r1, $r2, $r3;
        java.lang.Class $r4;

        r0 := @this: java.util.Collections$CheckedCollection;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.lang.Object[] zeroLengthElementArray>;
        if $r2 == null goto label0;

        $r3 = r0.<java.util.Collections$CheckedCollection: java.lang.Object[] zeroLengthElementArray>;
        goto label1;

     label0:
        $r4 = r0.<java.util.Collections$CheckedCollection: java.lang.Class type>;
        $r1 = staticinvoke <java.util.Collections: java.lang.Object[] zeroLengthArray(java.lang.Class)>($r4);
        $r3 = $r1;
        r0.<java.util.Collections$CheckedCollection: java.lang.Object[] zeroLengthElementArray> = $r1;

     label1:
        return $r3;
    }

    java.util.Collection checkedCopyOf(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1;
        null_type n0;
        java.lang.Object[] r2, r3, r5, $r11;
        int i0, i1, $i2;
        java.lang.Object r4, $r12;
        java.lang.Class $r6, $r7, $r8;
        java.lang.ArrayStoreException $r9, r10;
        java.util.List $r13;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.util.Collection;
        n0 = null;

     label0:
        r2 = specialinvoke r0.<java.util.Collections$CheckedCollection: java.lang.Object[] zeroLengthElementArray()>();
        r5 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r2);
        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();
        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        if $r6 == $r7 goto label1;

        $i2 = lengthof r5;
        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r5, $i2, $r8);

     label1:
        goto label4;

     label2:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Object clone()>();
        r5 = (java.lang.Object[]) $r12;
        r3 = r5;
        i0 = lengthof r3;
        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r4 = r3[i1];
        virtualinvoke r0.<java.util.Collections$CheckedCollection: void typeCheck(java.lang.Object)>(r4);
        i1 = i1 + 1;
        goto label3;

     label4:
        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);
        return $r13;

        catch java.lang.ArrayStoreException from label0 to label1 with label2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collections$CheckedCollection r0;
        java.util.Collection r1, $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedCollection;
        r1 := @parameter0: java.util.Collection;
        $r2 = r0.<java.util.Collections$CheckedCollection: java.util.Collection c>;
        $r3 = virtualinvoke r0.<java.util.Collections$CheckedCollection: java.util.Collection checkedCopyOf(java.util.Collection)>(r1);
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);
        return $z0;
    }
}
