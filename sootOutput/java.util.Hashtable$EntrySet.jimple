class java.util.Hashtable$EntrySet extends java.util.AbstractSet
{
    final java.util.Hashtable this$0;

    private void <init>(java.util.Hashtable)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable r1;

        r0 := @this: java.util.Hashtable$EntrySet;
        r1 := @parameter0: java.util.Hashtable;
        r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.Hashtable$EntrySet;
        $r1 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        $r2 = staticinvoke <java.util.Hashtable: java.util.Iterator access$100(java.util.Hashtable,int)>($r1, 2);
        return $r2;
    }

    public boolean add(java.util.Map$Entry)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Map$Entry r1;
        boolean $z0;

        r0 := @this: java.util.Hashtable$EntrySet;
        r1 := @parameter0: java.util.Map$Entry;
        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean add(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Hashtable$EntrySet r0;
        java.lang.Object r1, r3;
        java.util.Map$Entry r2;
        java.util.Hashtable$Entry[] r4;
        int i0, i1, $i2, $i3, $i4;
        java.util.Hashtable$Entry r5;
        boolean $z0, $z1;
        java.util.Hashtable $r6, $r7;

        r0 := @this: java.util.Hashtable$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r6 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        r4 = staticinvoke <java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>($r6);
        $r7 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        i0 = staticinvoke <java.util.Hashtable: int access$500(java.util.Hashtable,java.lang.Object)>($r7, r3);
        $i2 = i0 & 2147483647;
        $i3 = lengthof r4;
        i1 = $i2 % $i3;
        r5 = r4[i1];

     label1:
        if r5 == null goto label3;

        $i4 = r5.<java.util.Hashtable$Entry: int hash>;
        if $i4 != i0 goto label2;

        $z1 = virtualinvoke r5.<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label2;

        return 1;

     label2:
        r5 = r5.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label1;

     label3:
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Hashtable$EntrySet r0;
        java.lang.Object r1, r3;
        java.util.Map$Entry r2;
        java.util.Hashtable$Entry[] r4;
        int i0, i1, $i2, $i3, $i4;
        java.util.Hashtable$Entry r5, r6, $r10, $r11;
        boolean $z0, $z1;
        java.util.Hashtable $r7, $r8, $r9, $r12;

        r0 := @this: java.util.Hashtable$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r7 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        r4 = staticinvoke <java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>($r7);
        $r8 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        i0 = staticinvoke <java.util.Hashtable: int access$500(java.util.Hashtable,java.lang.Object)>($r8, r3);
        $i2 = i0 & 2147483647;
        $i3 = lengthof r4;
        i1 = $i2 % $i3;
        r5 = r4[i1];
        r6 = null;

     label1:
        if r5 == null goto label5;

        $i4 = r5.<java.util.Hashtable$Entry: int hash>;
        if $i4 != i0 goto label4;

        $z1 = virtualinvoke r5.<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label4;

        $r9 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        staticinvoke <java.util.Hashtable: int access$608(java.util.Hashtable)>($r9);
        if r6 == null goto label2;

        $r10 = r5.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        r6.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next> = $r10;
        goto label3;

     label2:
        $r11 = r5.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        r4[i1] = $r11;

     label3:
        $r12 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        staticinvoke <java.util.Hashtable: int access$210(java.util.Hashtable)>($r12);
        r5.<java.util.Hashtable$Entry: java.lang.Object value> = null;
        return 1;

     label4:
        r6 = r5;
        r5 = r5.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label1;

     label5:
        return 0;
    }

    public int size()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable $r1;
        int $i0;

        r0 := @this: java.util.Hashtable$EntrySet;
        $r1 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        $i0 = staticinvoke <java.util.Hashtable: int access$200(java.util.Hashtable)>($r1);
        return $i0;
    }

    public void clear()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable $r1;

        r0 := @this: java.util.Hashtable$EntrySet;
        $r1 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;
        virtualinvoke $r1.<java.util.Hashtable: void clear()>();
        return;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.Hashtable$EntrySet r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;
        boolean $z0;

        r0 := @this: java.util.Hashtable$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.util.Map$Entry) r1;
        $z0 = virtualinvoke r0.<java.util.Hashtable$EntrySet: boolean add(java.util.Map$Entry)>($r2);
        return $z0;
    }

    void <init>(java.util.Hashtable, java.util.Hashtable$1)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable r1;
        java.util.Hashtable$1 r2;

        r0 := @this: java.util.Hashtable$EntrySet;
        r1 := @parameter0: java.util.Hashtable;
        r2 := @parameter1: java.util.Hashtable$1;
        specialinvoke r0.<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable)>(r1);
        return;
    }
}
