public abstract class java.lang.ClassLoader extends java.lang.Object
{
    private final java.lang.ClassLoader parent;
    private final java.util.concurrent.ConcurrentHashMap parallelLockMap;
    private final java.util.Map package2certs;
    private static final java.security.cert.Certificate[] nocerts;
    private final java.util.Vector classes;
    private final java.security.ProtectionDomain defaultDomain;
    private final java.util.Set domains;
    private final java.util.HashMap packages;
    private static java.lang.ClassLoader scl;
    private static boolean sclSet;
    private static java.util.Vector loadedLibraryNames;
    private static java.util.Vector systemNativeLibraries;
    private java.util.Vector nativeLibraries;
    private static java.util.Stack nativeLibraryContext;
    private static java.lang.String[] usr_paths;
    private static java.lang.String[] sys_paths;
    final java.lang.Object assertionLock;
    private boolean defaultAssertionStatus;
    private java.util.Map packageAssertionStatus;
    java.util.Map classAssertionStatus;

    private static native void registerNatives();

    void addClass(java.lang.Class)
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1;
        java.util.Vector $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.Class;
        $r2 = r0.<java.lang.ClassLoader: java.util.Vector classes>;
        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);
        return;
    }

    private static java.lang.Void checkCreateClassLoader()
    {
        java.lang.SecurityManager r0;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        virtualinvoke r0.<java.lang.SecurityManager: void checkCreateClassLoader()>();

     label0:
        return null;
    }

    private void <init>(java.lang.Void, java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r2;
        java.lang.Void r1;
        java.util.Vector $r3, $r8;
        java.security.CodeSource $r4;
        java.security.ProtectionDomain $r5;
        java.security.cert.Certificate[] $r6;
        java.util.HashMap $r7;
        java.lang.Class $r9;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r10, $r11;
        java.util.HashSet $r12, $r16;
        java.util.Set $r13;
        java.lang.Object $r14;
        java.util.Hashtable $r15;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.Void;
        r2 := @parameter1: java.lang.ClassLoader;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.util.Vector;
        specialinvoke $r3.<java.util.Vector: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Vector classes> = $r3;
        $r5 = new java.security.ProtectionDomain;
        $r4 = new java.security.CodeSource;
        $r6 = (java.security.cert.Certificate[]) null;
        specialinvoke $r4.<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>(null, $r6);
        specialinvoke $r5.<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>($r4, null, r0, null);
        r0.<java.lang.ClassLoader: java.security.ProtectionDomain defaultDomain> = $r5;
        $r7 = new java.util.HashMap;
        specialinvoke $r7.<java.util.HashMap: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.HashMap packages> = $r7;
        $r8 = new java.util.Vector;
        specialinvoke $r8.<java.util.Vector: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Vector nativeLibraries> = $r8;
        r0.<java.lang.ClassLoader: boolean defaultAssertionStatus> = 0;
        r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus> = null;
        r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus> = null;
        r0.<java.lang.ClassLoader: java.lang.ClassLoader parent> = r2;
        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = staticinvoke <java.lang.ClassLoader$ParallelLoaders: boolean isRegistered(java.lang.Class)>($r9);
        if $z0 == 0 goto label0;

        $r10 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.concurrent.ConcurrentHashMap parallelLockMap> = $r10;
        $r11 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Map package2certs> = $r11;
        $r12 = new java.util.HashSet;
        specialinvoke $r12.<java.util.HashSet: void <init>()>();
        $r13 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r12);
        r0.<java.lang.ClassLoader: java.util.Set domains> = $r13;
        $r14 = new java.lang.Object;
        specialinvoke $r14.<java.lang.Object: void <init>()>();
        r0.<java.lang.ClassLoader: java.lang.Object assertionLock> = $r14;
        goto label1;

     label0:
        r0.<java.lang.ClassLoader: java.util.concurrent.ConcurrentHashMap parallelLockMap> = null;
        $r15 = new java.util.Hashtable;
        specialinvoke $r15.<java.util.Hashtable: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Map package2certs> = $r15;
        $r16 = new java.util.HashSet;
        specialinvoke $r16.<java.util.HashSet: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Set domains> = $r16;
        r0.<java.lang.ClassLoader: java.lang.Object assertionLock> = r0;

     label1:
        return;
    }

    protected void <init>(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r1;
        java.lang.Void $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.ClassLoader;
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.Void checkCreateClassLoader()>();
        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.Void,java.lang.ClassLoader)>($r2, r1);
        return;
    }

    protected void <init>()
    {
        java.lang.ClassLoader r0, $r2;
        java.lang.Void $r1;

        r0 := @this: java.lang.ClassLoader;
        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.Void checkCreateClassLoader()>();
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.Void,java.lang.ClassLoader)>($r1, $r2);
        return;
    }

    public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, 0);
        return $r2;
    }

    protected java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0, $r7, $r8;
        java.lang.String r1;
        boolean z0;
        java.lang.Object r2, $r6;
        java.lang.Class r3;
        long l0, l1, $l2;
        java.lang.ClassNotFoundException r4, $r9;
        java.lang.Throwable r5, $r14;
        sun.misc.PerfCounter $r10, $r11, $r12;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r6 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Object getClassLoadingLock(java.lang.String)>(r1);
        r2 = $r6;
        entermonitor $r6;

     label0:
        r3 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);
        if r3 != null goto label6;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label1:
        $r7 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        if $r7 == null goto label2;

        $r8 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        r3 = virtualinvoke $r8.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, 0);
        goto label3;

     label2:
        r3 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class findBootstrapClassOrNull(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;
        r4 = $r9;

     label5:
        if r3 != null goto label6;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();
        r3 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>(r1);
        $r10 = staticinvoke <sun.misc.PerfCounter: sun.misc.PerfCounter getParentDelegationTime()>();
        $l2 = l1 - l0;
        virtualinvoke $r10.<sun.misc.PerfCounter: void addTime(long)>($l2);
        $r11 = staticinvoke <sun.misc.PerfCounter: sun.misc.PerfCounter getFindClassTime()>();
        virtualinvoke $r11.<sun.misc.PerfCounter: void addElapsedTimeFrom(long)>(l1);
        $r12 = staticinvoke <sun.misc.PerfCounter: sun.misc.PerfCounter getFindClasses()>();
        virtualinvoke $r12.<sun.misc.PerfCounter: void increment()>();

     label6:
        if z0 == 0 goto label7;

        virtualinvoke r0.<java.lang.ClassLoader: void resolveClass(java.lang.Class)>(r3);

     label7:
        exitmonitor r2;

     label8:
        return r3;

     label9:
        $r14 := @caughtexception;

     label10:
        r5 = $r14;
        exitmonitor r2;

     label11:
        throw r5;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
        catch java.lang.Throwable from label0 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    protected java.lang.Object getClassLoadingLock(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.Object r2, r3, $r5;
        java.util.concurrent.ConcurrentHashMap $r4, $r6;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 = r0;
        $r4 = r0.<java.lang.ClassLoader: java.util.concurrent.ConcurrentHashMap parallelLockMap>;
        if $r4 == null goto label0;

        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r3 = $r5;
        $r6 = r0.<java.lang.ClassLoader: java.util.concurrent.ConcurrentHashMap parallelLockMap>;
        r2 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r3);
        if r2 != null goto label0;

        r2 = r3;

     label0:
        return r2;
    }

    private java.lang.Class loadClassInternal(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0, r2;
        java.lang.String r1;
        java.lang.Throwable r3, $r7;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.Class $r6, $r8;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $r4 = r0.<java.lang.ClassLoader: java.util.concurrent.ConcurrentHashMap parallelLockMap>;
        if $r4 != null goto label5;

        r2 = r0;
        entermonitor r0;

     label0:
        $r6 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        exitmonitor r2;

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r8 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        return $r8;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void checkPackageAccess(java.lang.Class, java.security.ProtectionDomain)
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1, r5;
        java.security.ProtectionDomain r2;
        java.lang.SecurityManager r3;
        java.lang.Class[] r4;
        int i0, i1, i2;
        boolean $z0;
        java.lang.String r6;
        java.lang.ClassLoader$1 $r7;
        java.security.AccessControlContext $r8;
        java.security.ProtectionDomain[] $r9;
        java.util.Set $r11;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.security.ProtectionDomain;
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label3;

        $z0 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(r1);
        if $z0 == 0 goto label2;

        r4 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = lengthof r4;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r5 = r4[i1];
        specialinvoke r0.<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>(r5, r2);
        i1 = i1 + 1;
        goto label0;

     label1:
        return;

     label2:
        r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        i2 = virtualinvoke r6.<java.lang.String: int lastIndexOf(int)>(46);
        if i2 == -1 goto label3;

        $r7 = new java.lang.ClassLoader$1;
        specialinvoke $r7.<java.lang.ClassLoader$1: void <init>(java.lang.ClassLoader,java.lang.SecurityManager,java.lang.String,int)>(r0, r3, r6, i2);
        $r8 = new java.security.AccessControlContext;
        $r9 = newarray (java.security.ProtectionDomain)[1];
        $r9[0] = r2;
        specialinvoke $r8.<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>($r9);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r7, $r8);

     label3:
        $r11 = r0.<java.lang.ClassLoader: java.util.Set domains>;
        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r2);
        return;
    }

    protected java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.ClassNotFoundException $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.lang.ClassNotFoundException;
        specialinvoke $r2.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);
        throw $r2;
    }

    protected final java.lang.Class defineClass(byte[], int, int) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        byte[] r1;
        int i0, i1;
        java.lang.Class $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(null, r1, i0, i1, null);
        return $r2;
    }

    protected final java.lang.Class defineClass(java.lang.String, byte[], int, int) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1;
        java.lang.Class $r3;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r3 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r2, i0, i1, null);
        return $r3;
    }

    private java.security.ProtectionDomain preDefineClass(java.lang.String, java.security.ProtectionDomain)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, $r7, $r11, $r13;
        java.security.ProtectionDomain r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r10, $r12;
        boolean $z0, $z1;
        java.lang.NoClassDefFoundError $r4;
        java.lang.SecurityException $r8;
        int $i0;
        java.security.CodeSource $r14;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.security.ProtectionDomain;
        $z0 = specialinvoke r0.<java.lang.ClassLoader: boolean checkName(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        $r4 = new java.lang.NoClassDefFoundError;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalName: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r7);
        throw $r4;

     label0:
        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");
        if $z1 == 0 goto label1;

        $r8 = new java.lang.SecurityException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prohibited package name: ");
        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);
        throw $r8;

     label1:
        if r2 != null goto label2;

        r2 = r0.<java.lang.ClassLoader: java.security.ProtectionDomain defaultDomain>;

     label2:
        if r1 == null goto label3;

        $r14 = virtualinvoke r2.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();
        specialinvoke r0.<java.lang.ClassLoader: void checkCerts(java.lang.String,java.security.CodeSource)>(r1, $r14);

     label3:
        return r2;
    }

    private java.lang.String defineClassSourceLocation(java.security.ProtectionDomain)
    {
        java.lang.ClassLoader r0;
        java.security.ProtectionDomain r1;
        java.security.CodeSource r2;
        java.lang.String r3;
        java.net.URL $r4, $r5;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.security.ProtectionDomain;
        r2 = virtualinvoke r1.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();
        r3 = null;
        if r2 == null goto label0;

        $r4 = virtualinvoke r2.<java.security.CodeSource: java.net.URL getLocation()>();
        if $r4 == null goto label0;

        $r5 = virtualinvoke r2.<java.security.CodeSource: java.net.URL getLocation()>();
        r3 = virtualinvoke $r5.<java.net.URL: java.lang.String toString()>();

     label0:
        return r3;
    }

    private java.lang.Class defineTransformedClass(java.lang.String, byte[], int, int, java.security.ProtectionDomain, java.lang.ClassFormatError, java.lang.String) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, r5;
        byte[] r2, r10;
        int i0, i1, i2, i3, $i4;
        java.security.ProtectionDomain r3;
        java.lang.ClassFormatError r4, $r11, r12;
        sun.misc.ClassFileTransformer[] r6, r8;
        java.lang.Class r7;
        sun.misc.ClassFileTransformer r9;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r3 := @parameter4: java.security.ProtectionDomain;
        r4 := @parameter5: java.lang.ClassFormatError;
        r5 := @parameter6: java.lang.String;
        r6 = staticinvoke <sun.misc.ClassFileTransformer: sun.misc.ClassFileTransformer[] getTransformers()>();
        r7 = null;
        if r6 == null goto label4;

        r8 = r6;
        i2 = lengthof r8;
        i3 = 0;

     label0:
        if i3 >= i2 goto label4;

        r9 = r8[i3];

     label1:
        r10 = virtualinvoke r9.<sun.misc.ClassFileTransformer: byte[] transform(byte[],int,int)>(r2, i0, i1);
        $i4 = lengthof r10;
        r7 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass1(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.String)>(r1, r10, 0, $i4, r3, r5);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;
        r12 = $r11;
        i3 = i3 + 1;
        goto label0;

     label4:
        if r7 != null goto label5;

        throw r4;

     label5:
        return r7;

        catch java.lang.ClassFormatError from label1 to label2 with label3;
    }

    private void postDefineClass(java.lang.Class, java.security.ProtectionDomain)
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1;
        java.security.ProtectionDomain r2;
        java.security.cert.Certificate[] r3;
        java.security.CodeSource $r4, $r5;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.security.ProtectionDomain;
        $r4 = virtualinvoke r2.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();
        if $r4 == null goto label0;

        $r5 = virtualinvoke r2.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();
        r3 = virtualinvoke $r5.<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>();
        if r3 == null goto label0;

        virtualinvoke r0.<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>(r1, r3);

     label0:
        return;
    }

    protected final java.lang.Class defineClass(java.lang.String, byte[], int, int, java.security.ProtectionDomain) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, r4;
        byte[] r2;
        int i0, i1;
        java.security.ProtectionDomain r3, r6;
        null_type n0;
        java.lang.ClassFormatError r5, $r8;
        java.lang.Class r7;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r3 := @parameter4: java.security.ProtectionDomain;
        r6 = specialinvoke r0.<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>(r1, r3);
        n0 = null;
        r4 = specialinvoke r0.<java.lang.ClassLoader: java.lang.String defineClassSourceLocation(java.security.ProtectionDomain)>(r6);

     label0:
        r7 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass1(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.String)>(r1, r2, i0, i1, r6, r4);

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r5 = $r8;
        r7 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class defineTransformedClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.ClassFormatError,java.lang.String)>(r1, r2, i0, i1, r6, r5, r4);

     label3:
        specialinvoke r0.<java.lang.ClassLoader: void postDefineClass(java.lang.Class,java.security.ProtectionDomain)>(r7, r6);
        return r7;

        catch java.lang.ClassFormatError from label0 to label1 with label2;
    }

    protected final java.lang.Class defineClass(java.lang.String, java.nio.ByteBuffer, java.security.ProtectionDomain) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, r5;
        java.nio.ByteBuffer r2;
        java.security.ProtectionDomain r3, r12;
        int i0, $i1, $i2, $i3, $i4;
        byte[] r4, r7, $r8;
        java.lang.ClassFormatError r6, $r14;
        boolean $z0, $z1;
        java.lang.Class $r9, $r11, r13;
        null_type n0;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.nio.ByteBuffer;
        r3 := @parameter2: java.security.ProtectionDomain;
        i0 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();
        $z0 = virtualinvoke r2.<java.nio.ByteBuffer: boolean isDirect()>();
        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasArray()>();
        if $z1 == 0 goto label0;

        $r8 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();
        $i1 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        $i2 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i3 = $i1 + $i2;
        $r9 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, $r8, $i3, i0, r3);
        return $r9;

     label0:
        r4 = newarray (byte)[i0];
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r4);
        $r11 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r4, 0, i0, r3);
        return $r11;

     label1:
        r12 = specialinvoke r0.<java.lang.ClassLoader: java.security.ProtectionDomain preDefineClass(java.lang.String,java.security.ProtectionDomain)>(r1, r3);
        n0 = null;
        r5 = specialinvoke r0.<java.lang.ClassLoader: java.lang.String defineClassSourceLocation(java.security.ProtectionDomain)>(r12);

     label2:
        $i4 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        r13 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass2(java.lang.String,java.nio.ByteBuffer,int,int,java.security.ProtectionDomain,java.lang.String)>(r1, r2, $i4, i0, r12, r5);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;
        r6 = $r14;
        r7 = newarray (byte)[i0];
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r7);
        r13 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class defineTransformedClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.ClassFormatError,java.lang.String)>(r1, r7, 0, i0, r12, r6, r5);

     label5:
        specialinvoke r0.<java.lang.ClassLoader: void postDefineClass(java.lang.Class,java.security.ProtectionDomain)>(r13, r12);
        return r13;

        catch java.lang.ClassFormatError from label2 to label3 with label4;
    }

    private native java.lang.Class defineClass0(java.lang.String, byte[], int, int, java.security.ProtectionDomain);

    private native java.lang.Class defineClass1(java.lang.String, byte[], int, int, java.security.ProtectionDomain, java.lang.String);

    private native java.lang.Class defineClass2(java.lang.String, java.nio.ByteBuffer, int, int, java.security.ProtectionDomain, java.lang.String);

    private boolean checkName(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        int $i0, $i1;
        boolean $z0;
        char $c2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return 1;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47);
        if $i1 != -1 goto label2;

        $z0 = staticinvoke <sun.misc.VM: boolean allowArraySyntax()>();
        if $z0 != 0 goto label3;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        if $c2 != 91 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    private void checkCerts(java.lang.String, java.security.CodeSource)
    {
        java.lang.ClassLoader r0, r5;
        java.lang.String r1, r3, $r7, $r28;
        java.security.CodeSource r2;
        int i0;
        java.security.cert.Certificate[] r4, r12, $r15, $r21;
        null_type n0;
        java.lang.Throwable r6, $r17;
        java.util.concurrent.ConcurrentHashMap $r8, $r19;
        java.util.Map $r10, $r13, $r18;
        java.lang.Object $r11, $r22;
        boolean $z0;
        java.lang.SecurityException $r23;
        java.lang.StringBuilder $r24, $r25, $r26, $r27;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.security.CodeSource;
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 != -1 goto label0;

        $r7 = "";
        goto label1;

     label0:
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        r3 = $r7;
        r4 = null;
        if r2 == null goto label2;

        r4 = virtualinvoke r2.<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>();

     label2:
        n0 = null;
        $r8 = r0.<java.lang.ClassLoader: java.util.concurrent.ConcurrentHashMap parallelLockMap>;
        if $r8 != null goto label12;

        r5 = r0;
        entermonitor r0;

     label3:
        $r10 = r0.<java.lang.ClassLoader: java.util.Map package2certs>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        r12 = (java.security.cert.Certificate[]) $r11;
        if r12 != null goto label6;

        $r13 = r0.<java.lang.ClassLoader: java.util.Map package2certs>;
        if r4 != null goto label4;

        $r15 = <java.lang.ClassLoader: java.security.cert.Certificate[] nocerts>;
        goto label5;

     label4:
        $r15 = r4;

     label5:
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r15);

     label6:
        exitmonitor r5;

     label7:
        goto label11;

     label8:
        $r17 := @caughtexception;

     label9:
        r6 = $r17;
        exitmonitor r5;

     label10:
        throw r6;

     label11:
        goto label15;

     label12:
        $r18 = r0.<java.lang.ClassLoader: java.util.Map package2certs>;
        $r19 = (java.util.concurrent.ConcurrentHashMap) $r18;
        if r4 != null goto label13;

        $r21 = <java.lang.ClassLoader: java.security.cert.Certificate[] nocerts>;
        goto label14;

     label13:
        $r21 = r4;

     label14:
        $r22 = virtualinvoke $r19.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, $r21);
        r12 = (java.security.cert.Certificate[]) $r22;

     label15:
        if r12 == null goto label16;

        $z0 = specialinvoke r0.<java.lang.ClassLoader: boolean compareCerts(java.security.cert.Certificate[],java.security.cert.Certificate[])>(r12, r4);
        if $z0 != 0 goto label16;

        $r23 = new java.lang.SecurityException;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("class \"");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\'s signer information does not match signer information of other classes in the same package");
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r23.<java.lang.SecurityException: void <init>(java.lang.String)>($r28);
        throw $r23;

     label16:
        return;

        catch java.lang.Throwable from label3 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    private boolean compareCerts(java.security.cert.Certificate[], java.security.cert.Certificate[])
    {
        java.lang.ClassLoader r0;
        java.security.cert.Certificate[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, $i11;
        boolean z0, $z1, $z2, z3, $z4;
        java.security.cert.Certificate $r3, $r4, $r5, $r6;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.security.cert.Certificate[];
        r2 := @parameter1: java.security.cert.Certificate[];
        if r2 == null goto label0;

        $i2 = lengthof r2;
        if $i2 != 0 goto label3;

     label0:
        $i3 = lengthof r1;
        if $i3 != 0 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $i4 = lengthof r2;
        $i5 = lengthof r1;
        if $i4 == $i5 goto label4;

        return 0;

     label4:
        i0 = 0;

     label5:
        $i6 = lengthof r2;
        if i0 >= $i6 goto label10;

        z0 = 0;
        i1 = 0;

     label6:
        $i7 = lengthof r1;
        if i1 >= $i7 goto label8;

        $r3 = r2[i0];
        $r4 = r1[i1];
        $z2 = virtualinvoke $r3.<java.security.cert.Certificate: boolean equals(java.lang.Object)>($r4);
        if $z2 == 0 goto label7;

        z0 = 1;
        goto label8;

     label7:
        i1 = i1 + 1;
        goto label6;

     label8:
        if z0 != 0 goto label9;

        return 0;

     label9:
        i0 = i0 + 1;
        goto label5;

     label10:
        i8 = 0;

     label11:
        $i9 = lengthof r1;
        if i8 >= $i9 goto label16;

        z3 = 0;
        i10 = 0;

     label12:
        $i11 = lengthof r2;
        if i10 >= $i11 goto label14;

        $r5 = r1[i8];
        $r6 = r2[i10];
        $z4 = virtualinvoke $r5.<java.security.cert.Certificate: boolean equals(java.lang.Object)>($r6);
        if $z4 == 0 goto label13;

        z3 = 1;
        goto label14;

     label13:
        i10 = i10 + 1;
        goto label12;

     label14:
        if z3 != 0 goto label15;

        return 0;

     label15:
        i8 = i8 + 1;
        goto label11;

     label16:
        return 1;
    }

    protected final void resolveClass(java.lang.Class)
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.Class;
        specialinvoke r0.<java.lang.ClassLoader: void resolveClass0(java.lang.Class)>(r1);
        return;
    }

    private native void resolveClass0(java.lang.Class);

    protected final java.lang.Class findSystemClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0, r2;
        java.lang.String r1;
        java.lang.Class r3, $r6;
        boolean $z0;
        java.lang.ClassNotFoundException $r4, $r5;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        if r2 != null goto label2;

        $z0 = specialinvoke r0.<java.lang.ClassLoader: boolean checkName(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        $r4 = new java.lang.ClassNotFoundException;
        specialinvoke $r4.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);
        throw $r4;

     label0:
        r3 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class findBootstrapClass(java.lang.String)>(r1);
        if r3 != null goto label1;

        $r5 = new java.lang.ClassNotFoundException;
        specialinvoke $r5.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);
        throw $r5;

     label1:
        return r3;

     label2:
        $r6 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        return $r6;
    }

    private java.lang.Class findBootstrapClassOrNull(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.Class $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $z0 = specialinvoke r0.<java.lang.ClassLoader: boolean checkName(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r2 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class findBootstrapClass(java.lang.String)>(r1);
        return $r2;
    }

    private native java.lang.Class findBootstrapClass(java.lang.String);

    protected final java.lang.Class findLoadedClass(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.Class $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $z0 = specialinvoke r0.<java.lang.ClassLoader: boolean checkName(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r2 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class findLoadedClass0(java.lang.String)>(r1);
        return $r2;
    }

    private final native java.lang.Class findLoadedClass0(java.lang.String);

    protected final void setSigners(java.lang.Class, java.lang.Object[])
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1;
        java.lang.Object[] r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Object[];
        virtualinvoke r1.<java.lang.Class: void setSigners(java.lang.Object[])>(r2);
        return;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.lang.ClassLoader r0, $r3, $r4;
        java.lang.String r1;
        java.net.URL r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        if $r3 == null goto label0;

        $r4 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        r2 = virtualinvoke $r4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);
        goto label1;

     label0:
        r2 = staticinvoke <java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>(r1);

     label1:
        if r2 != null goto label2;

        r2 = virtualinvoke r0.<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>(r1);

     label2:
        return r2;
    }

    public java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0, $r3, $r4;
        java.lang.String r1;
        java.util.Enumeration[] r2;
        java.util.Enumeration $r5, $r6, $r7;
        sun.misc.CompoundEnumeration $r8;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 = newarray (java.util.Enumeration)[2];
        $r3 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        if $r3 == null goto label0;

        $r4 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);
        r2[0] = $r5;
        goto label1;

     label0:
        $r6 = staticinvoke <java.lang.ClassLoader: java.util.Enumeration getBootstrapResources(java.lang.String)>(r1);
        r2[0] = $r6;

     label1:
        $r7 = virtualinvoke r0.<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>(r1);
        r2[1] = $r7;
        $r8 = new sun.misc.CompoundEnumeration;
        specialinvoke $r8.<sun.misc.CompoundEnumeration: void <init>(java.util.Enumeration[])>(r2);
        return $r8;
    }

    protected java.net.URL findResource(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        return null;
    }

    protected java.util.Enumeration findResources(java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.util.Enumeration $r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.util.Collections: java.util.Enumeration emptyEnumeration()>();
        return $r2;
    }

    protected static boolean registerAsParallelCapable()
    {
        java.lang.Class $r0, r1;
        boolean $z0;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "java/lang/ClassLoader");
        $z0 = staticinvoke <java.lang.ClassLoader$ParallelLoaders: boolean register(java.lang.Class)>(r1);
        return $z0;
    }

    public static java.net.URL getSystemResource(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        java.net.URL $r2, $r3;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        if r1 != null goto label0;

        $r2 = staticinvoke <java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>(r0);
        return $r2;

     label0:
        $r3 = virtualinvoke r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r0);
        return $r3;
    }

    public static java.util.Enumeration getSystemResources(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        java.util.Enumeration $r2, $r3;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        if r1 != null goto label0;

        $r2 = staticinvoke <java.lang.ClassLoader: java.util.Enumeration getBootstrapResources(java.lang.String)>(r0);
        return $r2;

     label0:
        $r3 = virtualinvoke r1.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r0);
        return $r3;
    }

    private static java.net.URL getBootstrapResource(java.lang.String)
    {
        java.lang.String r0;
        sun.misc.URLClassPath r1;
        sun.misc.Resource r2;
        java.net.URL $r3;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.ClassLoader: sun.misc.URLClassPath getBootstrapClassPath()>();
        r2 = virtualinvoke r1.<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String)>(r0);
        if r2 == null goto label0;

        $r3 = virtualinvoke r2.<sun.misc.Resource: java.net.URL getURL()>();
        goto label1;

     label0:
        $r3 = null;

     label1:
        return $r3;
    }

    private static java.util.Enumeration getBootstrapResources(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        sun.misc.URLClassPath $r1;
        java.util.Enumeration r2;
        java.lang.ClassLoader$2 $r3;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.ClassLoader: sun.misc.URLClassPath getBootstrapClassPath()>();
        r2 = virtualinvoke $r1.<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String)>(r0);
        $r3 = new java.lang.ClassLoader$2;
        specialinvoke $r3.<java.lang.ClassLoader$2: void <init>(java.util.Enumeration)>(r2);
        return $r3;
    }

    static sun.misc.URLClassPath getBootstrapClassPath()
    {
        sun.misc.URLClassPath $r0;

        $r0 = staticinvoke <sun.misc.Launcher: sun.misc.URLClassPath getBootstrapClassPath()>();
        return $r0;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.net.URL r2;
        java.io.IOException r3, $r5;
        java.io.InputStream $r4;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 = virtualinvoke r0.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

     label0:
        if r2 == null goto label1;

        $r4 = virtualinvoke r2.<java.net.URL: java.io.InputStream openStream()>();
        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;
        r3 = $r5;
        return null;

        catch java.io.IOException from label0 to label2 with label3;
    }

    public static java.io.InputStream getSystemResourceAsStream(java.lang.String)
    {
        java.lang.String r0;
        java.net.URL r1;
        java.io.IOException r2, $r4;
        java.io.InputStream $r3;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r0);

     label0:
        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.net.URL: java.io.InputStream openStream()>();
        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;
        r2 = $r4;
        return null;

        catch java.io.IOException from label0 to label2 with label3;
    }

    public final java.lang.ClassLoader getParent()
    {
        java.lang.ClassLoader r0, $r3, $r4, $r5;
        java.lang.SecurityManager r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.ClassLoader;
        $r3 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        if $r3 != null goto label0;

        return null;

     label0:
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        $r4 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>($r4, $r2);

     label1:
        $r5 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        return $r5;
    }

    public static java.lang.ClassLoader getSystemClassLoader()
    {
        java.lang.ClassLoader $r0, $r3, $r4;
        java.lang.SecurityManager r1;
        java.lang.Class $r2;

        staticinvoke <java.lang.ClassLoader: void initSystemClassLoader()>();
        $r0 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;
        if $r0 != null goto label0;

        return null;

     label0:
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        $r3 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>($r3, $r2);

     label1:
        $r4 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;
        return $r4;
    }

    private static synchronized void initSystemClassLoader()
    {
        boolean $z0, $z1, $z2;
        sun.misc.Launcher r0;
        java.lang.Throwable r1;
        java.security.PrivilegedActionException r2, $r10;
        java.lang.ClassLoader $r3, $r5, $r7, $r9;
        java.lang.IllegalStateException $r4;
        java.lang.SystemClassLoaderAction $r6;
        java.lang.Object $r8;
        java.lang.Error $r11, $r12;

        $z0 = <java.lang.ClassLoader: boolean sclSet>;
        if $z0 != 0 goto label7;

        $r3 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;
        if $r3 == null goto label0;

        $r4 = new java.lang.IllegalStateException;
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("recursive invocation");
        throw $r4;

     label0:
        r0 = staticinvoke <sun.misc.Launcher: sun.misc.Launcher getLauncher()>();
        if r0 == null goto label6;

        r1 = null;
        $r5 = virtualinvoke r0.<sun.misc.Launcher: java.lang.ClassLoader getClassLoader()>();
        <java.lang.ClassLoader: java.lang.ClassLoader scl> = $r5;

     label1:
        $r6 = new java.lang.SystemClassLoaderAction;
        $r7 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;
        specialinvoke $r6.<java.lang.SystemClassLoaderAction: void <init>(java.lang.ClassLoader)>($r7);
        $r8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r6);
        $r9 = (java.lang.ClassLoader) $r8;
        <java.lang.ClassLoader: java.lang.ClassLoader scl> = $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;
        r2 = $r10;
        r1 = virtualinvoke r2.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();
        $z1 = r1 instanceof java.lang.reflect.InvocationTargetException;
        if $z1 == 0 goto label4;

        r1 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label4:
        if r1 == null goto label6;

        $z2 = r1 instanceof java.lang.Error;
        if $z2 == 0 goto label5;

        $r11 = (java.lang.Error) r1;
        throw $r11;

     label5:
        $r12 = new java.lang.Error;
        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);
        throw $r12;

     label6:
        <java.lang.ClassLoader: boolean sclSet> = 1;

     label7:
        return;

        catch java.security.PrivilegedActionException from label1 to label2 with label3;
    }

    boolean isAncestor(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r1, r2;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.ClassLoader;
        r2 = r0;

     label0:
        r2 = r2.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        if r1 != r2 goto label1;

        return 1;

     label1:
        if r2 != null goto label0;

        return 0;
    }

    private static boolean needsClassLoaderPermissionCheck(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.ClassLoader;
        if r0 != r1 goto label0;

        return 0;

     label0:
        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<java.lang.ClassLoader: boolean isAncestor(java.lang.ClassLoader)>(r0);
        if $z0 != 0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.lang.Class;
        if r0 != null goto label0;

        return null;

     label0:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        return $r1;
    }

    static void checkClassLoaderPermission(java.lang.ClassLoader, java.lang.Class)
    {
        java.lang.ClassLoader r0, r3;
        java.lang.Class r1;
        java.lang.SecurityManager r2;
        boolean $z0;
        java.lang.RuntimePermission $r4;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.Class;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1);
        $z0 = staticinvoke <java.lang.ClassLoader: boolean needsClassLoaderPermissionCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(r3, r0);
        if $z0 == 0 goto label0;

        $r4 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_CLASSLOADER_PERMISSION>;
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r4);

     label0:
        return;
    }

    protected java.lang.Package definePackage(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.net.URL) throws java.lang.IllegalArgumentException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7;
        java.net.URL r8;
        java.util.HashMap r9, $r12, $r16;
        java.lang.Package r10, $r14, r15;
        java.lang.Throwable r11, $r19;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        r6 := @parameter5: java.lang.String;
        r7 := @parameter6: java.lang.String;
        r8 := @parameter7: java.net.URL;
        $r12 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        r9 = $r12;
        entermonitor $r12;

     label0:
        r10 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>(r1);
        if r10 == null goto label1;

        $r13 = new java.lang.IllegalArgumentException;
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);
        throw $r13;

     label1:
        $r14 = new java.lang.Package;
        specialinvoke $r14.<java.lang.Package: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.lang.ClassLoader)>(r1, r2, r3, r4, r5, r6, r7, r8, r0);
        r15 = $r14;
        $r16 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r15);
        exitmonitor r9;

     label2:
        return r15;

     label3:
        $r19 := @caughtexception;

     label4:
        r11 = $r19;
        exitmonitor r9;

     label5:
        throw r11;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected java.lang.Package getPackage(java.lang.String)
    {
        java.lang.ClassLoader r0, $r10, $r11;
        java.lang.String r1;
        java.util.HashMap r2, $r6, $r7, $r12, r13, $r14, $r17;
        java.lang.Package r3, r16;
        java.lang.Throwable r4, r5, $r9, $r19;
        java.lang.Object $r8, $r15;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $r6 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        r2 = $r6;
        entermonitor $r6;

     label0:
        $r7 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (java.lang.Package) $r8;
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r9 := @caughtexception;

     label3:
        r4 = $r9;
        exitmonitor r2;

     label4:
        throw r4;

     label5:
        if r3 != null goto label15;

        $r10 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        if $r10 == null goto label6;

        $r11 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        r3 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>(r1);
        goto label7;

     label6:
        r3 = staticinvoke <java.lang.Package: java.lang.Package getSystemPackage(java.lang.String)>(r1);

     label7:
        if r3 == null goto label15;

        $r12 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        r13 = $r12;
        entermonitor $r12;

     label8:
        $r14 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        $r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        r16 = (java.lang.Package) $r15;
        if r16 != null goto label9;

        $r17 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);
        goto label10;

     label9:
        r3 = r16;

     label10:
        exitmonitor r13;

     label11:
        goto label15;

     label12:
        $r19 := @caughtexception;

     label13:
        r5 = $r19;
        exitmonitor r13;

     label14:
        throw r5;

     label15:
        return r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label8 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    protected java.lang.Package[] getPackages()
    {
        java.lang.ClassLoader r0, $r9, $r10;
        java.util.HashMap r1, r2, $r5, $r6, $r7;
        java.lang.Throwable r3, $r8;
        java.lang.String r4;
        java.lang.Package[] r11, $r17, $r19;
        int i0, $i1, $i2;
        java.lang.Package $r12, $r14;
        java.lang.Object $r13;
        java.util.Collection $r16;
        java.lang.Object[] $r18;

        r0 := @this: java.lang.ClassLoader;
        $r5 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        r1 = $r5;
        entermonitor $r5;

     label0:
        $r6 = new java.util.HashMap;
        $r7 = r0.<java.lang.ClassLoader: java.util.HashMap packages>;
        specialinvoke $r6.<java.util.HashMap: void <init>(java.util.Map)>($r7);
        r2 = $r6;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r8 := @caughtexception;

     label3:
        r3 = $r8;
        exitmonitor r1;

     label4:
        throw r3;

     label5:
        $r9 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        if $r9 == null goto label6;

        $r10 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;
        r11 = virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Package[] getPackages()>();
        goto label7;

     label6:
        r11 = staticinvoke <java.lang.Package: java.lang.Package[] getSystemPackages()>();

     label7:
        if r11 == null goto label10;

        i0 = 0;

     label8:
        $i1 = lengthof r11;
        if i0 >= $i1 goto label10;

        $r12 = r11[i0];
        r4 = virtualinvoke $r12.<java.lang.Package: java.lang.String getName()>();
        $r13 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        if $r13 != null goto label9;

        $r14 = r11[i0];
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r14);

     label9:
        i0 = i0 + 1;
        goto label8;

     label10:
        $r16 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>();
        $i2 = interfaceinvoke r2.<java.util.Map: int size()>();
        $r17 = newarray (java.lang.Package)[$i2];
        $r18 = interfaceinvoke $r16.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r17);
        $r19 = (java.lang.Package[]) $r18;
        return $r19;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    protected java.lang.String findLibrary(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        return null;
    }

    private static java.lang.String[] initializePath(java.lang.String)
    {
        java.lang.String r0, r1, r2, $r4, $r5;
        int i0, i1, i2, i3, $i4, $i5, i7, i8, $i9, $i10, $i11, $i12;
        java.lang.String[] r3;
        byte $b6;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(r0, "");
        r2 = <java.io.File: java.lang.String pathSeparator>;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r2);
        i2 = 0;

     label0:
        if i1 < 0 goto label1;

        i2 = i2 + 1;
        $i4 = i1 + 1;
        i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>(r2, $i4);
        goto label0;

     label1:
        $i5 = i2 + 1;
        r3 = newarray (java.lang.String)[$i5];
        $b6 = 0;
        i7 = $b6;
        i8 = $b6;
        i3 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r2);

     label2:
        if i3 < 0 goto label5;

        $i9 = i3 - i7;
        if $i9 <= 0 goto label3;

        $i10 = i8;
        i8 = i8 + 1;
        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, i3);
        r3[$i10] = $r4;
        goto label4;

     label3:
        $i11 = i3 - i7;
        if $i11 != 0 goto label4;

        $i12 = i8;
        i8 = i8 + 1;
        r3[$i12] = ".";

     label4:
        i7 = i3 + 1;
        i3 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>(r2, i7);
        goto label2;

     label5:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, i0);
        r3[i8] = $r5;
        return r3;
    }

    static void loadLibrary(java.lang.Class, java.lang.String, boolean)
    {
        java.lang.Class r0;
        java.lang.String r1, r4, $r14, $r20, $r25, $r29, $r30, $r35, $r36, $r43;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.ClassLoader r2, $r6;
        java.io.File $r3, r5, $r15, $r27, r31, $r33, r37;
        java.lang.String[] $r7, $r8, $r9, $r26, $r28, $r32, $r34;
        java.lang.UnsatisfiedLinkError $r10, $r16, $r21, $r38;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19, $r22, $r23, $r24, $r39, $r40, $r41, $r42;
        int i0, $i1, i2, $i3;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        if r0 != null goto label0;

        $r6 = null;
        goto label1;

     label0:
        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        r2 = $r6;
        $r7 = <java.lang.ClassLoader: java.lang.String[] sys_paths>;
        if $r7 != null goto label2;

        $r8 = staticinvoke <java.lang.ClassLoader: java.lang.String[] initializePath(java.lang.String)>("java.library.path");
        <java.lang.ClassLoader: java.lang.String[] usr_paths> = $r8;
        $r9 = staticinvoke <java.lang.ClassLoader: java.lang.String[] initializePath(java.lang.String)>("sun.boot.library.path");
        <java.lang.ClassLoader: java.lang.String[] sys_paths> = $r9;

     label2:
        if z0 == 0 goto label4;

        $r3 = new java.io.File;
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);
        $z1 = staticinvoke <java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>(r0, $r3);
        if $z1 == 0 goto label3;

        return;

     label3:
        $r10 = new java.lang.UnsatisfiedLinkError;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load library: ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r14);
        throw $r10;

     label4:
        if r2 == null goto label7;

        r4 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>(r1);
        if r4 == null goto label7;

        $r15 = new java.io.File;
        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r4);
        r5 = $r15;
        $z2 = virtualinvoke r5.<java.io.File: boolean isAbsolute()>();
        if $z2 != 0 goto label5;

        $r16 = new java.lang.UnsatisfiedLinkError;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassLoader.findLibrary failed to return an absolute path: ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r16.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r20);
        throw $r16;

     label5:
        $z3 = staticinvoke <java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>(r0, r5);
        if $z3 == 0 goto label6;

        return;

     label6:
        $r21 = new java.lang.UnsatisfiedLinkError;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load ");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r21.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r25);
        throw $r21;

     label7:
        i0 = 0;

     label8:
        $r26 = <java.lang.ClassLoader: java.lang.String[] sys_paths>;
        $i1 = lengthof $r26;
        if i0 >= $i1 goto label10;

        $r27 = new java.io.File;
        $r28 = <java.lang.ClassLoader: java.lang.String[] sys_paths>;
        $r29 = $r28[i0];
        $r30 = staticinvoke <java.lang.System: java.lang.String mapLibraryName(java.lang.String)>(r1);
        specialinvoke $r27.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r29, $r30);
        r31 = $r27;
        $z4 = staticinvoke <java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>(r0, r31);
        if $z4 == 0 goto label9;

        return;

     label9:
        i0 = i0 + 1;
        goto label8;

     label10:
        if r2 == null goto label13;

        i2 = 0;

     label11:
        $r32 = <java.lang.ClassLoader: java.lang.String[] usr_paths>;
        $i3 = lengthof $r32;
        if i2 >= $i3 goto label13;

        $r33 = new java.io.File;
        $r34 = <java.lang.ClassLoader: java.lang.String[] usr_paths>;
        $r35 = $r34[i2];
        $r36 = staticinvoke <java.lang.System: java.lang.String mapLibraryName(java.lang.String)>(r1);
        specialinvoke $r33.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r35, $r36);
        r37 = $r33;
        $z5 = staticinvoke <java.lang.ClassLoader: boolean loadLibrary0(java.lang.Class,java.io.File)>(r0, r37);
        if $z5 == 0 goto label12;

        return;

     label12:
        i2 = i2 + 1;
        goto label11;

     label13:
        $r38 = new java.lang.UnsatisfiedLinkError;
        $r39 = new java.lang.StringBuilder;
        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no ");
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in java.library.path");
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r38.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r43);
        throw $r38;
    }

    private static boolean loadLibrary0(java.lang.Class, java.io.File)
    {
        java.lang.Class r0;
        java.io.File r1, r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.io.File;
        $z0 = staticinvoke <java.lang.ClassLoader: boolean loadLibrary1(java.lang.Class,java.io.File)>(r0, r1);
        if $z0 == 0 goto label0;

        return 1;

     label0:
        r2 = staticinvoke <java.lang.ClassLoaderHelper: java.io.File mapAlternativeName(java.io.File)>(r1);
        if r2 == null goto label1;

        $z1 = staticinvoke <java.lang.ClassLoader: boolean loadLibrary1(java.lang.Class,java.io.File)>(r0, r2);
        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean loadLibrary1(java.lang.Class, java.io.File)
    {
        java.lang.Class r0, $r33;
        java.io.File r1;
        java.lang.ClassLoader$3 $r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String r3, $r19, $r28, $r32, $r40;
        java.io.IOException r4, $r13;
        java.util.Vector r5, r6, $r16, $r20, r21, $r22, $r50;
        int i0, i1, i2, i3;
        java.lang.ClassLoader$NativeLibrary r7, r8, $r41, r42;
        java.lang.Throwable r9, r10, r11, $r47, $r51, $r52;
        java.lang.Object $r12, $r18, $r31;
        java.lang.ClassLoader $r14, r15, $r34;
        java.lang.UnsatisfiedLinkError $r23, $r35;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r36, $r37, $r38, $r39;
        java.util.Stack $r29, $r30, $r43, $r45, $r48;
        long $l4;
        byte $b5;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.io.File;
        $r2 = new java.lang.ClassLoader$3;
        specialinvoke $r2.<java.lang.ClassLoader$3: void <init>(java.io.File)>(r1);
        $r12 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        if $r12 == null goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        if z0 != 0 goto label2;

        return 0;

     label2:
        r3 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;
        r4 = $r13;
        return 0;

     label5:
        if r0 != null goto label6;

        $r14 = null;
        goto label7;

     label6:
        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label7:
        r15 = $r14;
        if r15 == null goto label8;

        $r16 = r15.<java.lang.ClassLoader: java.util.Vector nativeLibraries>;
        goto label9;

     label8:
        $r16 = <java.lang.ClassLoader: java.util.Vector systemNativeLibraries>;

     label9:
        r5 = $r16;
        r6 = r5;
        entermonitor r5;

     label10:
        i0 = virtualinvoke r5.<java.util.Vector: int size()>();
        i1 = 0;

     label11:
        if i1 >= i0 goto label14;

        $r18 = virtualinvoke r5.<java.util.Vector: java.lang.Object elementAt(int)>(i1);
        r7 = (java.lang.ClassLoader$NativeLibrary) $r18;
        $r19 = r7.<java.lang.ClassLoader$NativeLibrary: java.lang.String name>;
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r19);
        if $z2 == 0 goto label13;

        $z3 = 1;
        exitmonitor r6;

     label12:
        return $z3;

     label13:
        i1 = i1 + 1;
        goto label11;

     label14:
        $r20 = <java.lang.ClassLoader: java.util.Vector loadedLibraryNames>;
        r21 = $r20;
        entermonitor $r20;

     label15:
        $r22 = <java.lang.ClassLoader: java.util.Vector loadedLibraryNames>;
        $z4 = virtualinvoke $r22.<java.util.Vector: boolean contains(java.lang.Object)>(r3);
        if $z4 == 0 goto label16;

        $r23 = new java.lang.UnsatisfiedLinkError;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Native Library ");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already loaded in another classloader");
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r23.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r28);
        throw $r23;

     label16:
        $r29 = <java.lang.ClassLoader: java.util.Stack nativeLibraryContext>;
        i3 = virtualinvoke $r29.<java.util.Stack: int size()>();
        i2 = 0;

     label17:
        if i2 >= i3 goto label22;

        $r30 = <java.lang.ClassLoader: java.util.Stack nativeLibraryContext>;
        $r31 = virtualinvoke $r30.<java.util.Stack: java.lang.Object elementAt(int)>(i2);
        r8 = (java.lang.ClassLoader$NativeLibrary) $r31;
        $r32 = r8.<java.lang.ClassLoader$NativeLibrary: java.lang.String name>;
        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r32);
        if $z5 == 0 goto label21;

        $r33 = staticinvoke <java.lang.ClassLoader$NativeLibrary: java.lang.Class access$200(java.lang.ClassLoader$NativeLibrary)>(r8);
        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if r15 != $r34 goto label20;

        $z6 = 1;
        exitmonitor r21;

     label18:
        exitmonitor r6;

     label19:
        return $z6;

     label20:
        $r35 = new java.lang.UnsatisfiedLinkError;
        $r36 = new java.lang.StringBuilder;
        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Native Library ");
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is being loaded in another classloader");
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r35.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r40);
        throw $r35;

     label21:
        i2 = i2 + 1;
        goto label17;

     label22:
        $r41 = new java.lang.ClassLoader$NativeLibrary;
        specialinvoke $r41.<java.lang.ClassLoader$NativeLibrary: void <init>(java.lang.Class,java.lang.String)>(r0, r3);
        r42 = $r41;
        $r43 = <java.lang.ClassLoader: java.util.Stack nativeLibraryContext>;
        virtualinvoke $r43.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r42);

     label23:
        virtualinvoke r42.<java.lang.ClassLoader$NativeLibrary: void load(java.lang.String)>(r3);

     label24:
        $r45 = <java.lang.ClassLoader: java.util.Stack nativeLibraryContext>;
        virtualinvoke $r45.<java.util.Stack: java.lang.Object pop()>();
        goto label28;

     label25:
        $r47 := @caughtexception;

     label26:
        r9 = $r47;

     label27:
        $r48 = <java.lang.ClassLoader: java.util.Stack nativeLibraryContext>;
        virtualinvoke $r48.<java.util.Stack: java.lang.Object pop()>();
        throw r9;

     label28:
        $l4 = r42.<java.lang.ClassLoader$NativeLibrary: long handle>;
        $b5 = $l4 cmp 0L;
        if $b5 == 0 goto label31;

        $r50 = <java.lang.ClassLoader: java.util.Vector loadedLibraryNames>;
        virtualinvoke $r50.<java.util.Vector: void addElement(java.lang.Object)>(r3);
        virtualinvoke r5.<java.util.Vector: void addElement(java.lang.Object)>(r42);
        $z7 = 1;
        exitmonitor r21;

     label29:
        exitmonitor r6;

     label30:
        return $z7;

     label31:
        $z8 = 0;
        exitmonitor r21;

     label32:
        exitmonitor r6;

     label33:
        return $z8;

     label34:
        $r51 := @caughtexception;

     label35:
        r10 = $r51;
        exitmonitor r21;

     label36:
        throw r10;

     label37:
        $r52 := @caughtexception;
        r11 = $r52;
        exitmonitor r6;

     label38:
        throw r11;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label15 to label18 with label34;
        catch java.lang.Throwable from label20 to label29 with label34;
        catch java.lang.Throwable from label31 to label32 with label34;
        catch java.lang.Throwable from label35 to label36 with label34;
        catch java.lang.Throwable from label10 to label12 with label37;
        catch java.lang.Throwable from label13 to label19 with label37;
        catch java.lang.Throwable from label20 to label30 with label37;
        catch java.lang.Throwable from label31 to label33 with label37;
        catch java.lang.Throwable from label35 to label38 with label37;
    }

    static long findNative(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.util.Vector r2, r3, $r6;
        int i0, i1;
        java.lang.ClassLoader$NativeLibrary r4;
        long l2;
        java.lang.Throwable r5, $r9;
        java.lang.Object $r8;
        byte $b3;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.String;
        if r0 == null goto label0;

        $r6 = r0.<java.lang.ClassLoader: java.util.Vector nativeLibraries>;
        goto label1;

     label0:
        $r6 = <java.lang.ClassLoader: java.util.Vector systemNativeLibraries>;

     label1:
        r2 = $r6;
        r3 = r2;
        entermonitor r2;

     label2:
        i0 = virtualinvoke r2.<java.util.Vector: int size()>();
        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        $r8 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);
        r4 = (java.lang.ClassLoader$NativeLibrary) $r8;
        l2 = virtualinvoke r4.<java.lang.ClassLoader$NativeLibrary: long find(java.lang.String)>(r1);
        $b3 = l2 cmp 0L;
        if $b3 == 0 goto label5;

        exitmonitor r3;

     label4:
        return l2;

     label5:
        i1 = i1 + 1;
        goto label3;

     label6:
        exitmonitor r3;

     label7:
        goto label11;

     label8:
        $r9 := @caughtexception;

     label9:
        r5 = $r9;
        exitmonitor r3;

     label10:
        throw r5;

     label11:
        return 0L;

        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public void setDefaultAssertionStatus(boolean)
    {
        java.lang.ClassLoader r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.Map $r4;

        r0 := @this: java.lang.ClassLoader;
        z0 := @parameter0: boolean;
        $r3 = r0.<java.lang.ClassLoader: java.lang.Object assertionLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;
        if $r4 != null goto label1;

        specialinvoke r0.<java.lang.ClassLoader: void initializeJavaAssertionMaps()>();

     label1:
        r0.<java.lang.ClassLoader: boolean defaultAssertionStatus> = z0;
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        r2 = $r5;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPackageAssertionStatus(java.lang.String, boolean)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        java.util.Map $r5, $r6;
        java.lang.Boolean $r7;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r4 = r0.<java.lang.ClassLoader: java.lang.Object assertionLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus>;
        if $r5 != null goto label1;

        specialinvoke r0.<java.lang.ClassLoader: void initializeJavaAssertionMaps()>();

     label1:
        $r6 = r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus>;
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        r3 = $r9;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setClassAssertionStatus(java.lang.String, boolean)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        java.util.Map $r5, $r6;
        java.lang.Boolean $r7;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r4 = r0.<java.lang.ClassLoader: java.lang.Object assertionLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;
        if $r5 != null goto label1;

        specialinvoke r0.<java.lang.ClassLoader: void initializeJavaAssertionMaps()>();

     label1:
        $r6 = r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        r3 = $r9;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void clearAssertionStatus()
    {
        java.lang.ClassLoader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.util.HashMap $r4, $r5;

        r0 := @this: java.lang.ClassLoader;
        $r3 = r0.<java.lang.ClassLoader: java.lang.Object assertionLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = new java.util.HashMap;
        specialinvoke $r4.<java.util.HashMap: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus> = $r4;
        $r5 = new java.util.HashMap;
        specialinvoke $r5.<java.util.HashMap: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus> = $r5;
        r0.<java.lang.ClassLoader: boolean defaultAssertionStatus> = 0;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r2 = $r6;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    boolean desiredAssertionStatus(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.Object r2, $r5, $r7, $r9, $r12;
        java.lang.Boolean r3, r10, r13;
        int i0, $i1;
        java.lang.Throwable r4, $r14;
        java.util.Map $r6, $r8, $r11;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.lang.ClassLoader;
        r1 := @parameter0: java.lang.String;
        $r5 = r0.<java.lang.ClassLoader: java.lang.Object assertionLock>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        $r6 = r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (java.lang.Boolean) $r7;
        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();
        exitmonitor r2;

     label1:
        return $z0;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>(".");
        if i0 >= 0 goto label4;

        $r8 = r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus>;
        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
        r10 = (java.lang.Boolean) $r9;
        if r10 == null goto label4;

        $z1 = virtualinvoke r10.<java.lang.Boolean: boolean booleanValue()>();
        exitmonitor r2;

     label3:
        return $z1;

     label4:
        if i0 <= 0 goto label7;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $r11 = r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus>;
        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r13 = (java.lang.Boolean) $r12;
        if r13 == null goto label6;

        $z2 = virtualinvoke r13.<java.lang.Boolean: boolean booleanValue()>();
        exitmonitor r2;

     label5:
        return $z2;

     label6:
        $i1 = i0 - 1;
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String,int)>(".", $i1);
        goto label4;

     label7:
        $z3 = r0.<java.lang.ClassLoader: boolean defaultAssertionStatus>;
        exitmonitor r2;

     label8:
        return $z3;

     label9:
        $r14 := @caughtexception;

     label10:
        r4 = $r14;
        exitmonitor r2;

     label11:
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label9;
        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label6 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    private void initializeJavaAssertionMaps()
    {
        java.lang.ClassLoader r0;
        java.util.HashMap $r1, $r3;
        java.lang.AssertionStatusDirectives r2;
        int i0, $i1, i2, $i3;
        java.lang.String[] $r4, $r6, $r11, $r13;
        java.util.Map $r5, $r12;
        java.lang.String $r7, $r14;
        boolean[] $r8, $r15;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r9, $r16;

        r0 := @this: java.lang.ClassLoader;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus> = $r1;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus> = $r3;
        r2 = staticinvoke <java.lang.ClassLoader: java.lang.AssertionStatusDirectives retrieveDirectives()>();
        i0 = 0;

     label0:
        $r4 = r2.<java.lang.AssertionStatusDirectives: java.lang.String[] classes>;
        $i1 = lengthof $r4;
        if i0 >= $i1 goto label1;

        $r5 = r0.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;
        $r6 = r2.<java.lang.AssertionStatusDirectives: java.lang.String[] classes>;
        $r7 = $r6[i0];
        $r8 = r2.<java.lang.AssertionStatusDirectives: boolean[] classEnabled>;
        $z0 = $r8[i0];
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);
        i0 = i0 + 1;
        goto label0;

     label1:
        i2 = 0;

     label2:
        $r11 = r2.<java.lang.AssertionStatusDirectives: java.lang.String[] packages>;
        $i3 = lengthof $r11;
        if i2 >= $i3 goto label3;

        $r12 = r0.<java.lang.ClassLoader: java.util.Map packageAssertionStatus>;
        $r13 = r2.<java.lang.AssertionStatusDirectives: java.lang.String[] packages>;
        $r14 = $r13[i2];
        $r15 = r2.<java.lang.AssertionStatusDirectives: boolean[] packageEnabled>;
        $z1 = $r15[i2];
        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);
        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16);
        i2 = i2 + 1;
        goto label2;

     label3:
        $z2 = r2.<java.lang.AssertionStatusDirectives: boolean deflt>;
        r0.<java.lang.ClassLoader: boolean defaultAssertionStatus> = $z2;
        return;
    }

    private static native java.lang.AssertionStatusDirectives retrieveDirectives();

    static java.util.Vector access$000()
    {
        java.util.Vector $r0;

        $r0 = <java.lang.ClassLoader: java.util.Vector loadedLibraryNames>;
        return $r0;
    }

    static java.util.Stack access$100()
    {
        java.util.Stack $r0;

        $r0 = <java.lang.ClassLoader: java.util.Stack nativeLibraryContext>;
        return $r0;
    }

    static void <clinit>()
    {
        java.security.cert.Certificate[] $r0;
        java.util.Vector $r1, $r2;
        java.util.Stack $r3;

        staticinvoke <java.lang.ClassLoader: void registerNatives()>();
        $r0 = newarray (java.security.cert.Certificate)[0];
        <java.lang.ClassLoader: java.security.cert.Certificate[] nocerts> = $r0;
        $r1 = new java.util.Vector;
        specialinvoke $r1.<java.util.Vector: void <init>()>();
        <java.lang.ClassLoader: java.util.Vector loadedLibraryNames> = $r1;
        $r2 = new java.util.Vector;
        specialinvoke $r2.<java.util.Vector: void <init>()>();
        <java.lang.ClassLoader: java.util.Vector systemNativeLibraries> = $r2;
        $r3 = new java.util.Stack;
        specialinvoke $r3.<java.util.Stack: void <init>()>();
        <java.lang.ClassLoader: java.util.Stack nativeLibraryContext> = $r3;
        return;
    }
}
