public abstract class sun.misc.ClassFileTransformer extends java.lang.Object
{
    private static java.util.ArrayList transformerList;
    private static sun.misc.ClassFileTransformer[] transformers;

    public void <init>()
    {
        sun.misc.ClassFileTransformer r0;

        r0 := @this: sun.misc.ClassFileTransformer;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void add(sun.misc.ClassFileTransformer)
    {
        sun.misc.ClassFileTransformer r0;
        java.util.ArrayList $r1, r2, $r4, $r5;
        java.lang.Throwable r3, $r9;
        sun.misc.ClassFileTransformer[] $r6, $r8;
        java.lang.Object[] $r7;

        r0 := @parameter0: sun.misc.ClassFileTransformer;
        $r1 = <sun.misc.ClassFileTransformer: java.util.ArrayList transformerList>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r4 = <sun.misc.ClassFileTransformer: java.util.ArrayList transformerList>;
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);
        $r5 = <sun.misc.ClassFileTransformer: java.util.ArrayList transformerList>;
        $r6 = newarray (sun.misc.ClassFileTransformer)[0];
        $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);
        $r8 = (sun.misc.ClassFileTransformer[]) $r7;
        <sun.misc.ClassFileTransformer: sun.misc.ClassFileTransformer[] transformers> = $r8;
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r9 := @caughtexception;

     label3:
        r3 = $r9;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public static sun.misc.ClassFileTransformer[] getTransformers()
    {
        sun.misc.ClassFileTransformer[] $r0;

        $r0 = <sun.misc.ClassFileTransformer: sun.misc.ClassFileTransformer[] transformers>;
        return $r0;
    }

    public abstract byte[] transform(byte[], int, int) throws java.lang.ClassFormatError;

    static void <clinit>()
    {
        java.util.ArrayList $r0;
        sun.misc.ClassFileTransformer[] $r1;

        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        <sun.misc.ClassFileTransformer: java.util.ArrayList transformerList> = $r0;
        $r1 = newarray (sun.misc.ClassFileTransformer)[0];
        <sun.misc.ClassFileTransformer: sun.misc.ClassFileTransformer[] transformers> = $r1;
        return;
    }
}
