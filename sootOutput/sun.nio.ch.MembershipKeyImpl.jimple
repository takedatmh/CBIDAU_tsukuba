class sun.nio.ch.MembershipKeyImpl extends java.nio.channels.MembershipKey
{
    private final java.nio.channels.MulticastChannel ch;
    private final java.net.InetAddress group;
    private final java.net.NetworkInterface interf;
    private final java.net.InetAddress source;
    private volatile boolean valid;
    private java.lang.Object stateLock;
    private java.util.HashSet blockedSet;

    private void <init>(java.nio.channels.MulticastChannel, java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.nio.channels.MulticastChannel r1;
        java.net.InetAddress r2, r4;
        java.net.NetworkInterface r3;
        java.lang.Object $r5;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        r1 := @parameter0: java.nio.channels.MulticastChannel;
        r2 := @parameter1: java.net.InetAddress;
        r3 := @parameter2: java.net.NetworkInterface;
        r4 := @parameter3: java.net.InetAddress;
        specialinvoke r0.<java.nio.channels.MembershipKey: void <init>()>();
        r0.<sun.nio.ch.MembershipKeyImpl: boolean valid> = 1;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.MembershipKeyImpl: java.lang.Object stateLock> = $r5;
        r0.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel ch> = r1;
        r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress group> = r2;
        r0.<sun.nio.ch.MembershipKeyImpl: java.net.NetworkInterface interf> = r3;
        r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress source> = r4;
        return;
    }

    public boolean isValid()
    {
        sun.nio.ch.MembershipKeyImpl r0;
        boolean $z0;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        $z0 = r0.<sun.nio.ch.MembershipKeyImpl: boolean valid>;
        return $z0;
    }

    void invalidate()
    {
        sun.nio.ch.MembershipKeyImpl r0;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        r0.<sun.nio.ch.MembershipKeyImpl: boolean valid> = 0;
        return;
    }

    public void drop()
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.nio.channels.MulticastChannel $r1;
        sun.nio.ch.DatagramChannelImpl $r2;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        $r1 = r0.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel ch>;
        $r2 = (sun.nio.ch.DatagramChannelImpl) $r1;
        virtualinvoke $r2.<sun.nio.ch.DatagramChannelImpl: void drop(sun.nio.ch.MembershipKeyImpl)>(r0);
        return;
    }

    public java.nio.channels.MulticastChannel channel()
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.nio.channels.MulticastChannel $r1;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        $r1 = r0.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel ch>;
        return $r1;
    }

    public java.net.InetAddress group()
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.net.InetAddress $r1;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        $r1 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress group>;
        return $r1;
    }

    public java.net.NetworkInterface networkInterface()
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.net.NetworkInterface $r1;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        $r1 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.NetworkInterface interf>;
        return $r1;
    }

    public java.net.InetAddress sourceAddress()
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.net.InetAddress $r1;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        $r1 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress source>;
        return $r1;
    }

    public java.nio.channels.MembershipKey block(java.net.InetAddress) throws java.io.IOException
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.net.InetAddress r1, $r4;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r15;
        java.lang.IllegalStateException $r5;
        java.util.HashSet $r7, $r8, $r12, $r13, $r14;
        boolean $z0;
        java.nio.channels.MulticastChannel $r10;
        sun.nio.ch.DatagramChannelImpl $r11;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        r1 := @parameter0: java.net.InetAddress;
        $r4 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress source>;
        if $r4 == null goto label0;

        $r5 = new java.lang.IllegalStateException;
        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("key is source-specific");
        throw $r5;

     label0:
        $r6 = r0.<sun.nio.ch.MembershipKeyImpl: java.lang.Object stateLock>;
        r2 = $r6;
        entermonitor $r6;

     label1:
        $r7 = r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet>;
        if $r7 == null goto label3;

        $r8 = r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet>;
        $z0 = virtualinvoke $r8.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);
        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return r0;

     label3:
        $r10 = r0.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel ch>;
        $r11 = (sun.nio.ch.DatagramChannelImpl) $r10;
        virtualinvoke $r11.<sun.nio.ch.DatagramChannelImpl: void block(sun.nio.ch.MembershipKeyImpl,java.net.InetAddress)>(r0, r1);
        $r12 = r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet>;
        if $r12 != null goto label4;

        $r13 = new java.util.HashSet;
        specialinvoke $r13.<java.util.HashSet: void <init>()>();
        r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet> = $r13;

     label4:
        $r14 = r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet>;
        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>(r1);
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r15 := @caughtexception;

     label7:
        r3 = $r15;
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return r0;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.nio.channels.MembershipKey unblock(java.net.InetAddress)
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.net.InetAddress r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r11;
        java.util.HashSet $r5, $r6, $r10;
        boolean $z0;
        java.lang.IllegalStateException $r7;
        java.nio.channels.MulticastChannel $r8;
        sun.nio.ch.DatagramChannelImpl $r9;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        r1 := @parameter0: java.net.InetAddress;
        $r4 = r0.<sun.nio.ch.MembershipKeyImpl: java.lang.Object stateLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet>;
        if $r5 == null goto label1;

        $r6 = r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet>;
        $z0 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);
        if $z0 != 0 goto label2;

     label1:
        $r7 = new java.lang.IllegalStateException;
        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not blocked");
        throw $r7;

     label2:
        $r8 = r0.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel ch>;
        $r9 = (sun.nio.ch.DatagramChannelImpl) $r8;
        virtualinvoke $r9.<sun.nio.ch.DatagramChannelImpl: void unblock(sun.nio.ch.MembershipKeyImpl,java.net.InetAddress)>(r0, r1);
        $r10 = r0.<sun.nio.ch.MembershipKeyImpl: java.util.HashSet blockedSet>;
        virtualinvoke $r10.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r11 := @caughtexception;

     label5:
        r3 = $r11;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return r0;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String toString()
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.lang.StringBuilder $r1, r2;
        java.net.InetAddress $r4, $r11, $r13;
        java.lang.String $r5, $r9, $r14, $r17;
        java.net.NetworkInterface $r8;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(64);
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);
        $r4 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress group>;
        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
        $r8 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.NetworkInterface interf>;
        $r9 = virtualinvoke $r8.<java.net.NetworkInterface: java.lang.String getName()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress source>;
        if $r11 == null goto label0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
        $r13 = r0.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress source>;
        $r14 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label0:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);
        $r17 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r17;
    }

    void <init>(java.nio.channels.MulticastChannel, java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, sun.nio.ch.MembershipKeyImpl$1)
    {
        sun.nio.ch.MembershipKeyImpl r0;
        java.nio.channels.MulticastChannel r1;
        java.net.InetAddress r2, r4;
        java.net.NetworkInterface r3;
        sun.nio.ch.MembershipKeyImpl$1 r5;

        r0 := @this: sun.nio.ch.MembershipKeyImpl;
        r1 := @parameter0: java.nio.channels.MulticastChannel;
        r2 := @parameter1: java.net.InetAddress;
        r3 := @parameter2: java.net.NetworkInterface;
        r4 := @parameter3: java.net.InetAddress;
        r5 := @parameter4: sun.nio.ch.MembershipKeyImpl$1;
        specialinvoke r0.<sun.nio.ch.MembershipKeyImpl: void <init>(java.nio.channels.MulticastChannel,java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>(r1, r2, r3, r4);
        return;
    }
}
