final class sun.text.normalizer.NormalizerBase$IsNextNFDSafe extends java.lang.Object implements sun.text.normalizer.NormalizerBase$IsNextBoundary
{

    private void <init>()
    {
        sun.text.normalizer.NormalizerBase$IsNextNFDSafe r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$IsNextNFDSafe;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[])
    {
        sun.text.normalizer.NormalizerBase$IsNextNFDSafe r0;
        sun.text.normalizer.UCharacterIterator r1;
        int i0, i1, $i3;
        int[] r2;
        long $l2;
        boolean $z0;

        r0 := @this: sun.text.normalizer.NormalizerBase$IsNextNFDSafe;
        r1 := @parameter0: sun.text.normalizer.UCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: int[];
        $l2 = staticinvoke <sun.text.normalizer.NormalizerBase: long access$1100(sun.text.normalizer.UCharacterIterator,int,int,int[])>(r1, i0, i1, r2);
        $i3 = i1 & 63;
        $z0 = staticinvoke <sun.text.normalizer.NormalizerImpl: boolean isNFDSafe(long,int,int)>($l2, i1, $i3);
        return $z0;
    }

    void <init>(sun.text.normalizer.NormalizerBase$1)
    {
        sun.text.normalizer.NormalizerBase$IsNextNFDSafe r0;
        sun.text.normalizer.NormalizerBase$1 r1;

        r0 := @this: sun.text.normalizer.NormalizerBase$IsNextNFDSafe;
        r1 := @parameter0: sun.text.normalizer.NormalizerBase$1;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase$IsNextNFDSafe: void <init>()>();
        return;
    }
}
