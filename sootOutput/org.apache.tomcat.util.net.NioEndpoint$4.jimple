class org.apache.tomcat.util.net.NioEndpoint$4 extends java.util.concurrent.ConcurrentLinkedQueue
{
    private static final long serialVersionUID;
    protected java.util.concurrent.atomic.AtomicInteger size;
    protected java.util.concurrent.atomic.AtomicInteger bytes;
    final org.apache.tomcat.util.net.NioEndpoint this$0;

    void <init>(org.apache.tomcat.util.net.NioEndpoint)
    {
        org.apache.tomcat.util.net.NioEndpoint$4 r0;
        org.apache.tomcat.util.net.NioEndpoint r1;
        java.util.concurrent.atomic.AtomicInteger $r2, $r3;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint$4;
        r1 := @parameter0: org.apache.tomcat.util.net.NioEndpoint;
        r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioEndpoint this$0> = r1;
        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();
        $r2 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
        r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger size> = $r2;
        $r3 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
        r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger bytes> = $r3;
        return;
    }

    public boolean offer(org.apache.tomcat.util.net.NioChannel)
    {
        org.apache.tomcat.util.net.NioEndpoint$4 r0;
        org.apache.tomcat.util.net.NioChannel r1;
        boolean z0, z1, $z2, $z3, z4, $z5, $z6;
        org.apache.tomcat.util.net.NioEndpoint $r2, $r5, $r7, $r10, $r12, $r13;
        org.apache.tomcat.util.net.SocketProperties $r3, $r6, $r8, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.util.concurrent.atomic.AtomicInteger $r4, $r9, $r14, $r15;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint$4;
        r1 := @parameter0: org.apache.tomcat.util.net.NioChannel;
        $r2 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioEndpoint this$0>;
        $r3 = $r2.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i0 = virtualinvoke $r3.<org.apache.tomcat.util.net.SocketProperties: int getBufferPool()>();
        if $i0 != -1 goto label0;

        $z2 = 1;
        goto label2;

     label0:
        $r4 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger size>;
        $i1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $r5 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioEndpoint this$0>;
        $r6 = $r5.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i2 = virtualinvoke $r6.<org.apache.tomcat.util.net.SocketProperties: int getBufferPool()>();
        if $i1 >= $i2 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;
        if z0 == 0 goto label5;

        $r7 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioEndpoint this$0>;
        $r8 = $r7.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i3 = virtualinvoke $r8.<org.apache.tomcat.util.net.SocketProperties: int getBufferPoolSize()>();
        if $i3 != -1 goto label3;

        goto label4;

     label3:
        $r9 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger bytes>;
        $i4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i5 = virtualinvoke r1.<org.apache.tomcat.util.net.NioChannel: int getBufferSize()>();
        $i6 = $i4 + $i5;
        $r10 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioEndpoint this$0>;
        $r11 = $r10.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i7 = virtualinvoke $r11.<org.apache.tomcat.util.net.SocketProperties: int getBufferPoolSize()>();
        if $i6 >= $i7 goto label5;

     label4:
        $z3 = 1;
        goto label6;

     label5:
        $z3 = 0;

     label6:
        z4 = $z3;
        $r12 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioEndpoint this$0>;
        $z5 = $r12.<org.apache.tomcat.util.net.NioEndpoint: boolean running>;
        if $z5 == 0 goto label8;

        $r13 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioEndpoint this$0>;
        $z6 = $r13.<org.apache.tomcat.util.net.NioEndpoint: boolean paused>;
        if $z6 != 0 goto label8;

        if z4 == 0 goto label8;

        z1 = specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>(r1);
        if z1 == 0 goto label7;

        $r14 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger size>;
        virtualinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        $r15 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger bytes>;
        $i9 = virtualinvoke r1.<org.apache.tomcat.util.net.NioChannel: int getBufferSize()>();
        virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>($i9);

     label7:
        return z1;

     label8:
        return 0;
    }

    public org.apache.tomcat.util.net.NioChannel poll()
    {
        org.apache.tomcat.util.net.NioEndpoint$4 r0;
        org.apache.tomcat.util.net.NioChannel r1;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        int $i1, $i2;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint$4;
        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();
        r1 = (org.apache.tomcat.util.net.NioChannel) $r2;
        if r1 == null goto label0;

        $r3 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger size>;
        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
        $r4 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger bytes>;
        $i1 = virtualinvoke r1.<org.apache.tomcat.util.net.NioChannel: int getBufferSize()>();
        $i2 = neg $i1;
        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>($i2);

     label0:
        return r1;
    }

    public void clear()
    {
        org.apache.tomcat.util.net.NioEndpoint$4 r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint$4;
        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger size>;
        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);
        $r2 = r0.<org.apache.tomcat.util.net.NioEndpoint$4: java.util.concurrent.atomic.AtomicInteger bytes>;
        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);
        return;
    }

    public volatile java.lang.Object poll()
    {
        org.apache.tomcat.util.net.NioEndpoint$4 r0;
        org.apache.tomcat.util.net.NioChannel $r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint$4;
        $r1 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint$4: org.apache.tomcat.util.net.NioChannel poll()>();
        return $r1;
    }

    public volatile boolean offer(java.lang.Object)
    {
        org.apache.tomcat.util.net.NioEndpoint$4 r0;
        java.lang.Object r1;
        org.apache.tomcat.util.net.NioChannel $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint$4;
        r1 := @parameter0: java.lang.Object;
        $r2 = (org.apache.tomcat.util.net.NioChannel) r1;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint$4: boolean offer(org.apache.tomcat.util.net.NioChannel)>($r2);
        return $z0;
    }
}
