final class java.io.SerialCallbackContext extends java.lang.Object
{
    private final java.lang.Object obj;
    private final java.io.ObjectStreamClass desc;
    private java.lang.Thread thread;

    public void <init>(java.lang.Object, java.io.ObjectStreamClass)
    {
        java.io.SerialCallbackContext r0;
        java.lang.Object r1;
        java.io.ObjectStreamClass r2;
        java.lang.Thread $r3;

        r0 := @this: java.io.SerialCallbackContext;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.io.ObjectStreamClass;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.io.SerialCallbackContext: java.lang.Object obj> = r1;
        r0.<java.io.SerialCallbackContext: java.io.ObjectStreamClass desc> = r2;
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r0.<java.io.SerialCallbackContext: java.lang.Thread thread> = $r3;
        return;
    }

    public java.lang.Object getObj() throws java.io.NotActiveException
    {
        java.io.SerialCallbackContext r0;
        java.lang.Object $r1;

        r0 := @this: java.io.SerialCallbackContext;
        specialinvoke r0.<java.io.SerialCallbackContext: void checkAndSetUsed()>();
        $r1 = r0.<java.io.SerialCallbackContext: java.lang.Object obj>;
        return $r1;
    }

    public java.io.ObjectStreamClass getDesc()
    {
        java.io.SerialCallbackContext r0;
        java.io.ObjectStreamClass $r1;

        r0 := @this: java.io.SerialCallbackContext;
        $r1 = r0.<java.io.SerialCallbackContext: java.io.ObjectStreamClass desc>;
        return $r1;
    }

    private void checkAndSetUsed() throws java.io.NotActiveException
    {
        java.io.SerialCallbackContext r0;
        java.lang.Thread $r1, $r2;
        java.io.NotActiveException $r3;

        r0 := @this: java.io.SerialCallbackContext;
        $r2 = r0.<java.io.SerialCallbackContext: java.lang.Thread thread>;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        if $r2 == $r1 goto label0;

        $r3 = new java.io.NotActiveException;
        specialinvoke $r3.<java.io.NotActiveException: void <init>(java.lang.String)>("not in readObject invocation or fields already read");
        throw $r3;

     label0:
        r0.<java.io.SerialCallbackContext: java.lang.Thread thread> = null;
        return;
    }

    public void setUsed()
    {
        java.io.SerialCallbackContext r0;

        r0 := @this: java.io.SerialCallbackContext;
        r0.<java.io.SerialCallbackContext: java.lang.Thread thread> = null;
        return;
    }
}
