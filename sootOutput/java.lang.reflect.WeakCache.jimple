final class java.lang.reflect.WeakCache extends java.lang.Object
{
    private final java.lang.ref.ReferenceQueue refQueue;
    private final java.util.concurrent.ConcurrentMap map;
    private final java.util.concurrent.ConcurrentMap reverseMap;
    private final java.lang.reflect.WeakCache$BiFunction subKeyFactory;
    private final java.lang.reflect.WeakCache$BiFunction valueFactory;

    public void <init>(java.lang.reflect.WeakCache$BiFunction, java.lang.reflect.WeakCache$BiFunction)
    {
        java.lang.reflect.WeakCache r0;
        java.lang.reflect.WeakCache$BiFunction r1, r2, $r7, $r9;
        java.lang.ref.ReferenceQueue $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r5;
        java.lang.Object $r6, $r8;

        r0 := @this: java.lang.reflect.WeakCache;
        r1 := @parameter0: java.lang.reflect.WeakCache$BiFunction;
        r2 := @parameter1: java.lang.reflect.WeakCache$BiFunction;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r3.<java.lang.ref.ReferenceQueue: void <init>()>();
        r0.<java.lang.reflect.WeakCache: java.lang.ref.ReferenceQueue refQueue> = $r3;
        $r4 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap map> = $r4;
        $r5 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap> = $r5;
        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        $r7 = (java.lang.reflect.WeakCache$BiFunction) $r6;
        r0.<java.lang.reflect.WeakCache: java.lang.reflect.WeakCache$BiFunction subKeyFactory> = $r7;
        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);
        $r9 = (java.lang.reflect.WeakCache$BiFunction) $r8;
        r0.<java.lang.reflect.WeakCache: java.lang.reflect.WeakCache$BiFunction valueFactory> = $r9;
        return;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        java.lang.reflect.WeakCache r0;
        java.lang.Object r1, r2, r3, r9, $r13, $r15, $r17, r18, $r19, $r21, $r22;
        java.util.concurrent.ConcurrentMap r4, r6, $r12, $r14;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.reflect.WeakCache$Supplier r7;
        java.lang.reflect.WeakCache$Factory r8, $r20;
        java.lang.ref.ReferenceQueue $r11;
        java.lang.reflect.WeakCache$BiFunction $r16;
        boolean $z0;

        r0 := @this: java.lang.reflect.WeakCache;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);
        specialinvoke r0.<java.lang.reflect.WeakCache: void expungeStaleEntries()>();
        $r11 = r0.<java.lang.reflect.WeakCache: java.lang.ref.ReferenceQueue refQueue>;
        r3 = staticinvoke <java.lang.reflect.WeakCache$CacheKey: java.lang.Object valueOf(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, $r11);
        $r12 = r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap map>;
        $r13 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (java.util.concurrent.ConcurrentMap) $r13;
        if r4 != null goto label0;

        $r14 = r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap map>;
        $r5 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r4 = $r5;
        $r15 = interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, $r5);
        r6 = (java.util.concurrent.ConcurrentMap) $r15;
        if r6 == null goto label0;

        r4 = r6;

     label0:
        $r16 = r0.<java.lang.reflect.WeakCache: java.lang.reflect.WeakCache$BiFunction subKeyFactory>;
        $r17 = interfaceinvoke $r16.<java.lang.reflect.WeakCache$BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(r1, r2);
        r18 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r17);
        $r19 = interfaceinvoke r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r18);
        r7 = (java.lang.reflect.WeakCache$Supplier) $r19;
        r8 = null;

     label1:
        if r7 == null goto label2;

        r9 = interfaceinvoke r7.<java.lang.reflect.WeakCache$Supplier: java.lang.Object get()>();
        if r9 == null goto label2;

        return r9;

     label2:
        if r8 != null goto label3;

        $r20 = new java.lang.reflect.WeakCache$Factory;
        specialinvoke $r20.<java.lang.reflect.WeakCache$Factory: void <init>(java.lang.reflect.WeakCache,java.lang.Object,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentMap)>(r0, r1, r2, r18, r4);
        r8 = $r20;

     label3:
        if r7 != null goto label4;

        $r21 = interfaceinvoke r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r18, r8);
        r7 = (java.lang.reflect.WeakCache$Supplier) $r21;
        if r7 != null goto label1;

        r7 = r8;
        goto label1;

     label4:
        $z0 = interfaceinvoke r4.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r18, r7, r8);
        if $z0 == 0 goto label5;

        r7 = r8;
        goto label1;

     label5:
        $r22 = interfaceinvoke r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r18);
        r7 = (java.lang.reflect.WeakCache$Supplier) $r22;
        goto label1;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.reflect.WeakCache r0;
        java.lang.Object r1;
        java.lang.reflect.WeakCache$LookupValue $r2;
        java.util.concurrent.ConcurrentMap $r4;
        boolean $z0;

        r0 := @this: java.lang.reflect.WeakCache;
        r1 := @parameter0: java.lang.Object;
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        specialinvoke r0.<java.lang.reflect.WeakCache: void expungeStaleEntries()>();
        $r4 = r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap>;
        $r2 = new java.lang.reflect.WeakCache$LookupValue;
        specialinvoke $r2.<java.lang.reflect.WeakCache$LookupValue: void <init>(java.lang.Object)>(r1);
        $z0 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>($r2);
        return $z0;
    }

    public int size()
    {
        java.lang.reflect.WeakCache r0;
        java.util.concurrent.ConcurrentMap $r1;
        int $i0;

        r0 := @this: java.lang.reflect.WeakCache;
        specialinvoke r0.<java.lang.reflect.WeakCache: void expungeStaleEntries()>();
        $r1 = r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap>;
        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>();
        return $i0;
    }

    private void expungeStaleEntries()
    {
        java.lang.reflect.WeakCache r0;
        java.lang.reflect.WeakCache$CacheKey r1, $r4;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.ref.Reference $r3;
        java.util.concurrent.ConcurrentMap $r5, $r6;

        r0 := @this: java.lang.reflect.WeakCache;

     label0:
        $r2 = r0.<java.lang.reflect.WeakCache: java.lang.ref.ReferenceQueue refQueue>;
        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        $r4 = (java.lang.reflect.WeakCache$CacheKey) $r3;
        r1 = $r4;
        if $r4 == null goto label1;

        $r5 = r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap map>;
        $r6 = r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap>;
        virtualinvoke r1.<java.lang.reflect.WeakCache$CacheKey: void expungeFrom(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)>($r5, $r6);
        goto label0;

     label1:
        return;
    }

    static java.lang.reflect.WeakCache$BiFunction access$000(java.lang.reflect.WeakCache)
    {
        java.lang.reflect.WeakCache r0;
        java.lang.reflect.WeakCache$BiFunction $r1;

        r0 := @parameter0: java.lang.reflect.WeakCache;
        $r1 = r0.<java.lang.reflect.WeakCache: java.lang.reflect.WeakCache$BiFunction valueFactory>;
        return $r1;
    }

    static java.util.concurrent.ConcurrentMap access$100(java.lang.reflect.WeakCache)
    {
        java.lang.reflect.WeakCache r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: java.lang.reflect.WeakCache;
        $r1 = r0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap>;
        return $r1;
    }
}
