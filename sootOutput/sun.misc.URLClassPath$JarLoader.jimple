class sun.misc.URLClassPath$JarLoader extends sun.misc.URLClassPath$Loader
{
    private java.util.jar.JarFile jar;
    private java.net.URL csu;
    private sun.misc.JarIndex index;
    private sun.misc.MetaIndex metaIndex;
    private java.net.URLStreamHandler handler;
    private java.util.HashMap lmap;
    private boolean closed;
    private static final sun.misc.JavaUtilZipFileAccess zipAccess;

    void <init>(java.net.URL, java.net.URLStreamHandler, java.util.HashMap) throws java.io.IOException
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.net.URL r1, $r4;
        java.net.URLStreamHandler r2;
        java.util.HashMap r3;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String r6, $r10, r11;
        java.io.File r7, $r12;
        boolean $z0, $z1;
        sun.misc.MetaIndex $r13, $r14, $r15;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.net.URLStreamHandler;
        r3 := @parameter2: java.util.HashMap;
        $r4 = new java.net.URL;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>("jar", "", -1, $r10, r2);
        specialinvoke r0.<sun.misc.URLClassPath$Loader: void <init>(java.net.URL)>($r4);
        r0.<sun.misc.URLClassPath$JarLoader: boolean closed> = 0;
        r0.<sun.misc.URLClassPath$JarLoader: java.net.URL csu> = r1;
        r0.<sun.misc.URLClassPath$JarLoader: java.net.URLStreamHandler handler> = r2;
        r0.<sun.misc.URLClassPath$JarLoader: java.util.HashMap lmap> = r3;
        $z0 = specialinvoke r0.<sun.misc.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>(r1);
        if $z0 != 0 goto label0;

        specialinvoke r0.<sun.misc.URLClassPath$JarLoader: void ensureOpen()>();
        goto label2;

     label0:
        r6 = virtualinvoke r1.<java.net.URL: java.lang.String getFile()>();
        if r6 == null goto label1;

        r11 = staticinvoke <sun.net.www.ParseUtil: java.lang.String decode(java.lang.String)>(r6);
        $r12 = new java.io.File;
        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>(r11);
        r7 = $r12;
        $r13 = staticinvoke <sun.misc.MetaIndex: sun.misc.MetaIndex forJar(java.io.File)>(r7);
        r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex> = $r13;
        $r14 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex>;
        if $r14 == null goto label1;

        $z1 = virtualinvoke r7.<java.io.File: boolean exists()>();
        if $z1 != 0 goto label1;

        r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex> = null;

     label1:
        $r15 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex>;
        if $r15 != null goto label2;

        specialinvoke r0.<sun.misc.URLClassPath$JarLoader: void ensureOpen()>();

     label2:
        return;
    }

    public void close() throws java.io.IOException
    {
        sun.misc.URLClassPath$JarLoader r0;
        boolean $z0;
        java.util.jar.JarFile $r1;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        $z0 = r0.<sun.misc.URLClassPath$JarLoader: boolean closed>;
        if $z0 != 0 goto label0;

        r0.<sun.misc.URLClassPath$JarLoader: boolean closed> = 1;
        specialinvoke r0.<sun.misc.URLClassPath$JarLoader: void ensureOpen()>();
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        virtualinvoke $r1.<java.util.jar.JarFile: void close()>();

     label0:
        return;
    }

    java.util.jar.JarFile getJarFile()
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.util.jar.JarFile $r1;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        return $r1;
    }

    private boolean isOptimizable(java.net.URL)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.net.URL r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.net.URL;
        $r2 = "file";
        $r3 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);
        return $z0;
    }

    private void ensureOpen() throws java.io.IOException
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.security.PrivilegedActionException r1, $r5;
        java.util.jar.JarFile $r2;
        sun.misc.URLClassPath$JarLoader$1 $r3;
        java.lang.Exception $r6;
        java.io.IOException $r7;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        $r2 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        if $r2 != null goto label3;

     label0:
        $r3 = new sun.misc.URLClassPath$JarLoader$1;
        specialinvoke $r3.<sun.misc.URLClassPath$JarLoader$1: void <init>(sun.misc.URLClassPath$JarLoader)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r3);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        $r6 = virtualinvoke r1.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $r7 = (java.io.IOException) $r6;
        throw $r7;

     label3:
        return;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    static java.util.jar.JarFile checkJar(java.util.jar.JarFile) throws java.io.IOException
    {
        java.util.jar.JarFile r0;
        java.lang.SecurityManager $r1;
        java.io.IOException r2, r3, $r5, $r6;
        boolean $z0, $z1;
        sun.misc.JavaUtilZipFileAccess $r4;

        r0 := @parameter0: java.util.jar.JarFile;
        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r1 == null goto label4;

        $z0 = staticinvoke <sun.misc.URLClassPath: boolean access$1000()>();
        if $z0 != 0 goto label4;

        $r4 = <sun.misc.URLClassPath$JarLoader: sun.misc.JavaUtilZipFileAccess zipAccess>;
        $z1 = interfaceinvoke $r4.<sun.misc.JavaUtilZipFileAccess: boolean startsWithLocHeader(java.util.zip.ZipFile)>(r0);
        if $z1 != 0 goto label4;

        $r5 = new java.io.IOException;
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Invalid Jar file");
        r2 = $r5;

     label0:
        virtualinvoke r0.<java.util.jar.JarFile: void close()>();

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r3 = $r6;
        virtualinvoke r2.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r3);

     label3:
        throw r2;

     label4:
        return r0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private java.util.jar.JarFile getJarFile(java.net.URL) throws java.io.IOException
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.net.URL r1, $r10;
        sun.misc.FileURLMapper r2, $r4;
        java.util.jar.JarFile r3, $r7, $r9, $r14;
        boolean $z0, $z1;
        java.io.FileNotFoundException $r5;
        java.lang.String $r6, $r8, $r12;
        java.net.URLConnection r11;
        java.net.JarURLConnection $r13;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.net.URL;
        $z0 = specialinvoke r0.<sun.misc.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>(r1);
        if $z0 == 0 goto label1;

        $r4 = new sun.misc.FileURLMapper;
        specialinvoke $r4.<sun.misc.FileURLMapper: void <init>(java.net.URL)>(r1);
        r2 = $r4;
        $z1 = virtualinvoke r2.<sun.misc.FileURLMapper: boolean exists()>();
        if $z1 != 0 goto label0;

        $r5 = new java.io.FileNotFoundException;
        $r6 = virtualinvoke r2.<sun.misc.FileURLMapper: java.lang.String getPath()>();
        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);
        throw $r5;

     label0:
        $r7 = new java.util.jar.JarFile;
        $r8 = virtualinvoke r2.<sun.misc.FileURLMapper: java.lang.String getPath()>();
        specialinvoke $r7.<java.util.jar.JarFile: void <init>(java.lang.String)>($r8);
        $r9 = staticinvoke <sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>($r7);
        return $r9;

     label1:
        $r10 = virtualinvoke r0.<sun.misc.URLClassPath$JarLoader: java.net.URL getBaseURL()>();
        r11 = virtualinvoke $r10.<java.net.URL: java.net.URLConnection openConnection()>();
        $r12 = <sun.misc.URLClassPath: java.lang.String JAVA_VERSION>;
        virtualinvoke r11.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("UA-Java-Version", $r12);
        $r13 = (java.net.JarURLConnection) r11;
        r3 = virtualinvoke $r13.<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()>();
        $r14 = staticinvoke <sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>(r3);
        return $r14;
    }

    sun.misc.JarIndex getIndex()
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.io.IOException r1, $r2;
        java.lang.InternalError $r3, $r5;
        java.lang.Throwable $r4;
        sun.misc.JarIndex $r6;

        r0 := @this: sun.misc.URLClassPath$JarLoader;

     label0:
        specialinvoke r0.<sun.misc.URLClassPath$JarLoader: void ensureOpen()>();

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        $r3 = new java.lang.InternalError;
        specialinvoke $r3.<java.lang.InternalError: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.InternalError: java.lang.Throwable initCause(java.lang.Throwable)>(r1);
        $r5 = (java.lang.InternalError) $r4;
        throw $r5;

     label3:
        $r6 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index>;
        return $r6;

        catch java.io.IOException from label0 to label1 with label2;
    }

    sun.misc.Resource checkResource(java.lang.String, boolean, java.util.jar.JarEntry)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.lang.String r1, $r7;
        boolean z0;
        java.util.jar.JarEntry r2;
        java.net.URL $r3, r4, $r6;
        java.net.MalformedURLException r5, $r8;
        java.io.IOException $r9, r10;
        java.security.AccessControlException $r11, r12;
        sun.misc.URLClassPath$JarLoader$2 $r13;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.util.jar.JarEntry;

     label0:
        $r3 = new java.net.URL;
        $r6 = virtualinvoke r0.<sun.misc.URLClassPath$JarLoader: java.net.URL getBaseURL()>();
        $r7 = staticinvoke <sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>(r1, 0);
        specialinvoke $r3.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r6, $r7);
        r4 = $r3;
        if z0 == 0 goto label1;

        staticinvoke <sun.misc.URLClassPath: void check(java.net.URL)>(r4);

     label1:
        goto label5;

     label2:
        $r8 := @caughtexception;
        r5 = $r8;
        return null;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        return null;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;
        return null;

     label5:
        $r13 = new sun.misc.URLClassPath$JarLoader$2;
        specialinvoke $r13.<sun.misc.URLClassPath$JarLoader$2: void <init>(sun.misc.URLClassPath$JarLoader,java.lang.String,java.net.URL,java.util.jar.JarEntry)>(r0, r1, r4, r2);
        return $r13;

        catch java.net.MalformedURLException from label0 to label1 with label2;
        catch java.io.IOException from label0 to label1 with label3;
        catch java.security.AccessControlException from label0 to label1 with label4;
    }

    boolean validIndex(java.lang.String)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.lang.String r1, r2, r5;
        int i0, $i1, $i2, i3;
        java.util.Enumeration r3;
        java.util.zip.ZipEntry r4;
        java.util.jar.JarFile $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.lang.String;
        r2 = r1;
        $i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");
        i0 = $i1;
        if $i1 == -1 goto label0;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label0:
        $r6 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        r3 = virtualinvoke $r6.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        r4 = (java.util.zip.ZipEntry) $r7;
        r5 = virtualinvoke r4.<java.util.zip.ZipEntry: java.lang.String getName()>();
        $i2 = virtualinvoke r5.<java.lang.String: int lastIndexOf(java.lang.String)>("/");
        i3 = $i2;
        if $i2 == -1 goto label2;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

     label2:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label1;

        return 1;

     label3:
        return 0;
    }

    java.net.URL findResource(java.lang.String, boolean)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.lang.String r1;
        boolean z0;
        sun.misc.Resource r2;
        java.net.URL $r3;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r2 = virtualinvoke r0.<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean)>(r1, z0);
        if r2 == null goto label0;

        $r3 = virtualinvoke r2.<sun.misc.Resource: java.net.URL getURL()>();
        return $r3;

     label0:
        return null;
    }

    sun.misc.Resource getResource(java.lang.String, boolean)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.io.IOException r2, $r6;
        java.util.HashSet r3, $r14;
        sun.misc.MetaIndex $r4, $r5;
        java.lang.InternalError $r7, $r9;
        java.lang.Throwable $r8;
        java.util.jar.JarFile $r10;
        java.util.jar.JarEntry r11;
        sun.misc.Resource $r12, $r15;
        sun.misc.JarIndex $r13;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r4 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex>;
        if $r4 == null goto label0;

        $r5 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex>;
        $z1 = virtualinvoke $r5.<sun.misc.MetaIndex: boolean mayContain(java.lang.String)>(r1);
        if $z1 != 0 goto label0;

        return null;

     label0:
        specialinvoke r0.<sun.misc.URLClassPath$JarLoader: void ensureOpen()>();

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = new java.lang.InternalError;
        specialinvoke $r7.<java.lang.InternalError: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.InternalError: java.lang.Throwable initCause(java.lang.Throwable)>(r2);
        $r9 = (java.lang.InternalError) $r8;
        throw $r9;

     label3:
        $r10 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        r11 = virtualinvoke $r10.<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>(r1);
        if r11 == null goto label4;

        $r12 = virtualinvoke r0.<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>(r1, z0, r11);
        return $r12;

     label4:
        $r13 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index>;
        if $r13 != null goto label5;

        return null;

     label5:
        $r14 = new java.util.HashSet;
        specialinvoke $r14.<java.util.HashSet: void <init>()>();
        r3 = $r14;
        $r15 = virtualinvoke r0.<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>(r1, z0, r3);
        return $r15;

        catch java.io.IOException from label0 to label1 with label2;
    }

    sun.misc.Resource getResource(java.lang.String, boolean, java.util.Set)
    {
        sun.misc.URLClassPath$JarLoader r0, r7, $r18;
        java.lang.String r1, r4, r6, $r23, $r30;
        boolean z0, z1, $z2, $z3, z4, $z5;
        java.util.Set r2;
        int i0, i1, i2, $i3, $i4, $i5;
        null_type n0;
        java.lang.Object[] r3;
        java.net.URL r5, $r14, $r15;
        sun.misc.JarIndex r8, $r10, $r22, $r40, $r42;
        sun.misc.Resource r9, $r38, $r41;
        java.util.LinkedList $r11, r12;
        java.lang.Object $r13, $r17, $r20;
        java.util.HashMap $r16, $r24;
        sun.misc.URLClassPath$JarLoader$3 $r19;
        java.security.PrivilegedActionException $r26, r27;
        java.net.MalformedURLException $r28, r29;
        java.io.IOException $r31, r32;
        java.lang.InternalError $r33, $r35;
        java.lang.Throwable $r34;
        java.util.jar.JarFile $r36;
        java.util.jar.JarEntry r37;
        sun.misc.InvalidJarIndexException $r39;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.util.Set;
        z1 = 0;
        i0 = 0;
        n0 = null;
        $r10 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index>;
        $r11 = virtualinvoke $r10.<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>(r1);
        r12 = $r11;
        if $r11 != null goto label0;

        return null;

     label0:
        r3 = virtualinvoke r12.<java.util.LinkedList: java.lang.Object[] toArray()>();
        i1 = virtualinvoke r12.<java.util.LinkedList: int size()>();

     label1:
        if i0 >= i1 goto label20;

        $i3 = i0;
        i0 = i0 + 1;
        $r13 = r3[$i3];
        r4 = (java.lang.String) $r13;

     label2:
        $r14 = new java.net.URL;
        $r15 = r0.<sun.misc.URLClassPath$JarLoader: java.net.URL csu>;
        specialinvoke $r14.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r15, r4);
        r5 = $r14;
        r6 = staticinvoke <sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>(r5);
        $r16 = r0.<sun.misc.URLClassPath$JarLoader: java.util.HashMap lmap>;
        $r17 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);
        $r18 = (sun.misc.URLClassPath$JarLoader) $r17;
        r7 = $r18;
        if $r18 != null goto label6;

        $r19 = new sun.misc.URLClassPath$JarLoader$3;
        specialinvoke $r19.<sun.misc.URLClassPath$JarLoader$3: void <init>(sun.misc.URLClassPath$JarLoader,java.net.URL)>(r0, r5);
        $r20 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r19);
        r7 = (sun.misc.URLClassPath$JarLoader) $r20;
        r8 = virtualinvoke r7.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>();
        if r8 == null goto label5;

        i2 = virtualinvoke r4.<java.lang.String: int lastIndexOf(java.lang.String)>("/");
        $r22 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index>;
        if i2 != -1 goto label3;

        $r23 = null;
        goto label4;

     label3:
        $i4 = i2 + 1;
        $r23 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label4:
        virtualinvoke r8.<sun.misc.JarIndex: void merge(sun.misc.JarIndex,java.lang.String)>($r22, $r23);

     label5:
        $r24 = r0.<sun.misc.URLClassPath$JarLoader: java.util.HashMap lmap>;
        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label6:
        goto label9;

     label7:
        $r26 := @caughtexception;
        r27 = $r26;
        goto label1;

     label8:
        $r28 := @caughtexception;
        r29 = $r28;
        goto label1;

     label9:
        $r30 = staticinvoke <sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>(r5);
        $z2 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r30);
        if $z2 != 0 goto label10;

        $z3 = 1;
        goto label11;

     label10:
        $z3 = 0;

     label11:
        z4 = $z3;
        if z4 != 0 goto label17;

     label12:
        specialinvoke r7.<sun.misc.URLClassPath$JarLoader: void ensureOpen()>();

     label13:
        goto label15;

     label14:
        $r31 := @caughtexception;
        r32 = $r31;
        $r33 = new java.lang.InternalError;
        specialinvoke $r33.<java.lang.InternalError: void <init>()>();
        $r34 = virtualinvoke $r33.<java.lang.InternalError: java.lang.Throwable initCause(java.lang.Throwable)>(r32);
        $r35 = (java.lang.InternalError) $r34;
        throw $r35;

     label15:
        $r36 = r7.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        r37 = virtualinvoke $r36.<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>(r1);
        if r37 == null goto label16;

        $r38 = virtualinvoke r7.<sun.misc.URLClassPath$JarLoader: sun.misc.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>(r1, z0, r37);
        return $r38;

     label16:
        $z5 = virtualinvoke r7.<sun.misc.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>(r1);
        if $z5 != 0 goto label17;

        $r39 = new sun.misc.InvalidJarIndexException;
        specialinvoke $r39.<sun.misc.InvalidJarIndexException: void <init>(java.lang.String)>("Invalid index");
        throw $r39;

     label17:
        if z4 != 0 goto label1;

        if r7 == r0 goto label1;

        $r40 = virtualinvoke r7.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex getIndex()>();
        if $r40 != null goto label18;

        goto label1;

     label18:
        $r41 = virtualinvoke r7.<sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>(r1, z0, r2);
        r9 = $r41;
        if $r41 == null goto label19;

        return r9;

     label19:
        goto label1;

     label20:
        $r42 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index>;
        r12 = virtualinvoke $r42.<sun.misc.JarIndex: java.util.LinkedList get(java.lang.String)>(r1);
        $i5 = virtualinvoke r12.<java.util.LinkedList: int size()>();
        if i0 < $i5 goto label0;

        return null;

        catch java.security.PrivilegedActionException from label2 to label6 with label7;
        catch java.net.MalformedURLException from label2 to label6 with label8;
        catch java.io.IOException from label12 to label13 with label14;
    }

    java.net.URL[] getClassPath() throws java.io.IOException
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.util.jar.Manifest r1;
        java.util.jar.Attributes r2;
        java.lang.String r3;
        sun.misc.JarIndex $r4;
        sun.misc.MetaIndex $r5;
        sun.misc.JavaUtilJarAccess $r6;
        java.util.jar.JarFile $r7, $r8;
        boolean $z0;
        java.util.jar.Attributes$Name $r9;
        java.net.URL $r10;
        java.net.URL[] $r11;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        $r4 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index>;
        if $r4 == null goto label0;

        return null;

     label0:
        $r5 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex>;
        if $r5 == null goto label1;

        return null;

     label1:
        specialinvoke r0.<sun.misc.URLClassPath$JarLoader: void ensureOpen()>();
        specialinvoke r0.<sun.misc.URLClassPath$JarLoader: void parseExtensionsDependencies()>();
        $r6 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaUtilJarAccess javaUtilJarAccess()>();
        $r7 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        $z0 = interfaceinvoke $r6.<sun.misc.JavaUtilJarAccess: boolean jarFileHasClassPathAttribute(java.util.jar.JarFile)>($r7);
        if $z0 == 0 goto label2;

        $r8 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        r1 = virtualinvoke $r8.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>();
        if r1 == null goto label2;

        r2 = virtualinvoke r1.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();
        if r2 == null goto label2;

        $r9 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name CLASS_PATH>;
        r3 = virtualinvoke r2.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>($r9);
        if r3 == null goto label2;

        $r10 = r0.<sun.misc.URLClassPath$JarLoader: java.net.URL csu>;
        $r11 = specialinvoke r0.<sun.misc.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>($r10, r3);
        return $r11;

     label2:
        return null;
    }

    private void parseExtensionsDependencies() throws java.io.IOException
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.util.jar.JarFile $r1;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        staticinvoke <sun.misc.ExtensionDependency: boolean checkExtensionsDependencies(java.util.jar.JarFile)>($r1);
        return;
    }

    private java.net.URL[] parseClassPath(java.net.URL, java.lang.String) throws java.net.MalformedURLException
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.net.URL r1, $r7;
        java.lang.String r2, r6;
        java.util.StringTokenizer $r3, r4;
        java.net.URL[] r5;
        int i0, $i1;
        boolean $z0;

        r0 := @this: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.lang.String;
        $r3 = new java.util.StringTokenizer;
        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String)>(r2);
        r4 = $r3;
        $i1 = virtualinvoke r4.<java.util.StringTokenizer: int countTokens()>();
        r5 = newarray (java.net.URL)[$i1];
        i0 = 0;

     label0:
        $z0 = virtualinvoke r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z0 == 0 goto label1;

        r6 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $r7 = new java.net.URL;
        specialinvoke $r7.<java.net.URL: void <init>(java.net.URL,java.lang.String)>(r1, r6);
        r5[i0] = $r7;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r5;
    }

    static java.net.URL access$400(sun.misc.URLClassPath$JarLoader)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.net.URL $r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: java.net.URL csu>;
        return $r1;
    }

    static java.util.jar.JarFile access$502(sun.misc.URLClassPath$JarLoader, java.util.jar.JarFile)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.util.jar.JarFile r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter1: java.util.jar.JarFile;
        r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar> = r1;
        return r1;
    }

    static java.util.jar.JarFile access$600(sun.misc.URLClassPath$JarLoader, java.net.URL) throws java.io.IOException
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.net.URL r1;
        java.util.jar.JarFile $r2;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter1: java.net.URL;
        $r2 = specialinvoke r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>(r1);
        return $r2;
    }

    static sun.misc.JarIndex access$702(sun.misc.URLClassPath$JarLoader, sun.misc.JarIndex)
    {
        sun.misc.URLClassPath$JarLoader r0;
        sun.misc.JarIndex r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        r1 := @parameter1: sun.misc.JarIndex;
        r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index> = r1;
        return r1;
    }

    static java.util.jar.JarFile access$500(sun.misc.URLClassPath$JarLoader)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.util.jar.JarFile $r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile jar>;
        return $r1;
    }

    static sun.misc.MetaIndex access$800(sun.misc.URLClassPath$JarLoader)
    {
        sun.misc.URLClassPath$JarLoader r0;
        sun.misc.MetaIndex $r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.MetaIndex metaIndex>;
        return $r1;
    }

    static sun.misc.JarIndex access$700(sun.misc.URLClassPath$JarLoader)
    {
        sun.misc.URLClassPath$JarLoader r0;
        sun.misc.JarIndex $r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: sun.misc.JarIndex index>;
        return $r1;
    }

    static java.util.HashMap access$900(sun.misc.URLClassPath$JarLoader)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.util.HashMap $r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: java.util.HashMap lmap>;
        return $r1;
    }

    static java.net.URLStreamHandler access$1100(sun.misc.URLClassPath$JarLoader)
    {
        sun.misc.URLClassPath$JarLoader r0;
        java.net.URLStreamHandler $r1;

        r0 := @parameter0: sun.misc.URLClassPath$JarLoader;
        $r1 = r0.<sun.misc.URLClassPath$JarLoader: java.net.URLStreamHandler handler>;
        return $r1;
    }

    static void <clinit>()
    {
        sun.misc.JavaUtilZipFileAccess $r0;

        $r0 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaUtilZipFileAccess getJavaUtilZipFileAccess()>();
        <sun.misc.URLClassPath$JarLoader: sun.misc.JavaUtilZipFileAccess zipAccess> = $r0;
        return;
    }
}
