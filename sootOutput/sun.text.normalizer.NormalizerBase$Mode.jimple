public class sun.text.normalizer.NormalizerBase$Mode extends java.lang.Object
{
    private int modeValue;

    private void <init>(int)
    {
        sun.text.normalizer.NormalizerBase$Mode r0;
        int i0;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.text.normalizer.NormalizerBase$Mode: int modeValue> = i0;
        return;
    }

    protected int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.NormalizerBase$Mode r0;
        char[] r1, r2;
        int i0, i1, i2, i3, i4, i5;
        sun.text.normalizer.UnicodeSet r3;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: char[];
        i2 := @parameter4: int;
        i3 := @parameter5: int;
        r3 := @parameter6: sun.text.normalizer.UnicodeSet;
        i4 = i1 - i0;
        i5 = i3 - i2;
        if i4 <= i5 goto label0;

        return i4;

     label0:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r2, i2, i4);
        return i4;
    }

    protected int normalize(char[], int, int, char[], int, int, int)
    {
        sun.text.normalizer.NormalizerBase$Mode r0;
        char[] r1, r2;
        int i0, i1, i2, i3, i4, $i5;
        sun.text.normalizer.UnicodeSet $r3;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: char[];
        i2 := @parameter4: int;
        i3 := @parameter5: int;
        i4 := @parameter6: int;
        $r3 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet getNX(int)>(i4);
        $i5 = virtualinvoke r0.<sun.text.normalizer.NormalizerBase$Mode: int normalize(char[],int,int,char[],int,int,sun.text.normalizer.UnicodeSet)>(r1, i0, i1, r2, i2, i3, $r3);
        return $i5;
    }

    protected java.lang.String normalize(java.lang.String, int)
    {
        sun.text.normalizer.NormalizerBase$Mode r0;
        java.lang.String r1;
        int i0;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        return r1;
    }

    protected int getMinC()
    {
        sun.text.normalizer.NormalizerBase$Mode r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        return -1;
    }

    protected int getMask()
    {
        sun.text.normalizer.NormalizerBase$Mode r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        return -1;
    }

    protected sun.text.normalizer.NormalizerBase$IsPrevBoundary getPrevBoundary()
    {
        sun.text.normalizer.NormalizerBase$Mode r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        return null;
    }

    protected sun.text.normalizer.NormalizerBase$IsNextBoundary getNextBoundary()
    {
        sun.text.normalizer.NormalizerBase$Mode r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        return null;
    }

    protected sun.text.normalizer.NormalizerBase$QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.NormalizerBase$Mode r0;
        char[] r1;
        int i0, i1;
        boolean z0;
        sun.text.normalizer.UnicodeSet r2;
        sun.text.normalizer.NormalizerBase$QuickCheckResult $r3, $r4;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        z0 := @parameter3: boolean;
        r2 := @parameter4: sun.text.normalizer.UnicodeSet;
        if z0 == 0 goto label0;

        $r3 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult MAYBE>;
        return $r3;

     label0:
        $r4 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult NO>;
        return $r4;
    }

    protected boolean isNFSkippable(int)
    {
        sun.text.normalizer.NormalizerBase$Mode r0;
        int i0;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        i0 := @parameter0: int;
        return 1;
    }

    void <init>(int, sun.text.normalizer.NormalizerBase$1)
    {
        sun.text.normalizer.NormalizerBase$Mode r0;
        int i0;
        sun.text.normalizer.NormalizerBase$1 r1;

        r0 := @this: sun.text.normalizer.NormalizerBase$Mode;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.text.normalizer.NormalizerBase$1;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase$Mode: void <init>(int)>(i0);
        return;
    }
}
