final class sun.nio.fs.DefaultFileSystemProvider$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    final java.lang.String val$cn;

    void <init>(java.lang.String)
    {
        sun.nio.fs.DefaultFileSystemProvider$1 r0;
        java.lang.String r1;

        r0 := @this: sun.nio.fs.DefaultFileSystemProvider$1;
        r1 := @parameter0: java.lang.String;
        r0.<sun.nio.fs.DefaultFileSystemProvider$1: java.lang.String val$cn> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.nio.file.spi.FileSystemProvider run()
    {
        sun.nio.fs.DefaultFileSystemProvider$1 r0;
        java.lang.Class r1;
        java.lang.ClassNotFoundException r2, $r4;
        java.lang.String $r3;
        java.lang.AssertionError $r5, $r10, $r13;
        java.lang.Object $r6;
        java.nio.file.spi.FileSystemProvider $r7;
        java.lang.IllegalAccessException $r8, r9;
        java.lang.InstantiationException $r11, r12;

        r0 := @this: sun.nio.fs.DefaultFileSystemProvider$1;

     label0:
        $r3 = r0.<sun.nio.fs.DefaultFileSystemProvider$1: java.lang.String val$cn>;
        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 1, null);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);
        throw $r5;

     label3:
        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();
        $r7 = (java.nio.file.spi.FileSystemProvider) $r6;

     label4:
        return $r7;

     label5:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r9);
        throw $r10;

     label6:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(r12);
        throw $r13;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label6;
    }

    public volatile java.lang.Object run()
    {
        sun.nio.fs.DefaultFileSystemProvider$1 r0;
        java.nio.file.spi.FileSystemProvider $r1;

        r0 := @this: sun.nio.fs.DefaultFileSystemProvider$1;
        $r1 = virtualinvoke r0.<sun.nio.fs.DefaultFileSystemProvider$1: java.nio.file.spi.FileSystemProvider run()>();
        return $r1;
    }
}
