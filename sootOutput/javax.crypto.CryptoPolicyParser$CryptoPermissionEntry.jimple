class javax.crypto.CryptoPolicyParser$CryptoPermissionEntry extends java.lang.Object
{
    java.lang.String cryptoPermission;
    java.lang.String alg;
    java.lang.String exemptionMechanism;
    int maxKeySize;
    boolean checkParam;
    java.security.spec.AlgorithmParameterSpec algParamSpec;

    void <init>()
    {
        javax.crypto.CryptoPolicyParser$CryptoPermissionEntry r0;

        r0 := @this: javax.crypto.CryptoPolicyParser$CryptoPermissionEntry;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize> = 0;
        r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg> = null;
        r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String exemptionMechanism> = null;
        r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean checkParam> = 0;
        r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec> = null;
        return;
    }

    public int hashCode()
    {
        javax.crypto.CryptoPolicyParser$CryptoPermissionEntry r0;
        int i0, $i1, $i2, $i3, i4, $i5;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        java.security.spec.AlgorithmParameterSpec $r6, $r7;

        r0 := @this: javax.crypto.CryptoPolicyParser$CryptoPermissionEntry;
        $r1 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission>;
        i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();
        $r2 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        if $r2 == null goto label0;

        $r3 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        $i1 = virtualinvoke $r3.<java.lang.String: int hashCode()>();
        i0 = i0 ^ $i1;

     label0:
        $r4 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String exemptionMechanism>;
        if $r4 == null goto label1;

        $r5 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String exemptionMechanism>;
        $i2 = virtualinvoke $r5.<java.lang.String: int hashCode()>();
        i0 = i0 ^ $i2;

     label1:
        $i3 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize>;
        i4 = i0 ^ $i3;
        $z0 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean checkParam>;
        if $z0 == 0 goto label2;

        i4 = i4 ^ 100;

     label2:
        $r6 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        if $r6 == null goto label3;

        $r7 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $i5 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();
        i4 = i4 ^ $i5;

     label3:
        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        javax.crypto.CryptoPolicyParser$CryptoPermissionEntry r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1;
        java.security.spec.AlgorithmParameterSpec $r11, $r12, $r13, $r14;

        r0 := @this: javax.crypto.CryptoPolicyParser$CryptoPermissionEntry;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof javax.crypto.CryptoPolicyParser$CryptoPermissionEntry;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.crypto.CryptoPolicyParser$CryptoPermissionEntry) r1;
        $r3 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission>;
        if $r3 != null goto label2;

        $r4 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission>;
        if $r4 == null goto label3;

        return 0;

     label2:
        $r5 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission>;
        $r6 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission>;
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r7 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        if $r7 != null goto label4;

        $r8 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        if $r8 == null goto label5;

        return 0;

     label4:
        $r9 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        $r10 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        $z2 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r10);
        if $z2 != 0 goto label5;

        return 0;

     label5:
        $i0 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize>;
        $i1 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize>;
        if $i0 == $i1 goto label6;

        return 0;

     label6:
        $z3 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean checkParam>;
        $z4 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean checkParam>;
        if $z3 == $z4 goto label7;

        return 0;

     label7:
        $r11 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        if $r11 != null goto label8;

        $r12 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        if $r12 == null goto label9;

        return 0;

     label8:
        $r13 = r0.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r14 = r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $z5 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r14);
        if $z5 != 0 goto label9;

        return 0;

     label9:
        return 1;
    }
}
