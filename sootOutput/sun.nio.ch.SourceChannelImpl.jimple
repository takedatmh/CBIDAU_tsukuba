class sun.nio.ch.SourceChannelImpl extends java.nio.channels.Pipe$SourceChannel implements sun.nio.ch.SelChImpl
{
    private static sun.nio.ch.NativeDispatcher nd;
    java.io.FileDescriptor fd;
    int fdVal;
    private volatile long thread;
    private final java.lang.Object lock;
    private final java.lang.Object stateLock;
    private static final int ST_UNINITIALIZED;
    private static final int ST_INUSE;
    private static final int ST_KILLED;
    private volatile int state;
    static final boolean $assertionsDisabled;

    public java.io.FileDescriptor getFD()
    {
        sun.nio.ch.SourceChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        $r1 = r0.<sun.nio.ch.SourceChannelImpl: java.io.FileDescriptor fd>;
        return $r1;
    }

    public int getFDVal()
    {
        sun.nio.ch.SourceChannelImpl r0;
        int $i0;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        $i0 = r0.<sun.nio.ch.SourceChannelImpl: int fdVal>;
        return $i0;
    }

    void <init>(java.nio.channels.spi.SelectorProvider, java.io.FileDescriptor)
    {
        sun.nio.ch.SourceChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.io.FileDescriptor r2;
        java.lang.Object $r3, $r4;
        int $i0;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        r2 := @parameter1: java.io.FileDescriptor;
        specialinvoke r0.<java.nio.channels.Pipe$SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = 0L;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.SourceChannelImpl: java.lang.Object lock> = $r3;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.SourceChannelImpl: java.lang.Object stateLock> = $r4;
        r0.<sun.nio.ch.SourceChannelImpl: int state> = -1;
        r0.<sun.nio.ch.SourceChannelImpl: java.io.FileDescriptor fd> = r2;
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>(r2);
        r0.<sun.nio.ch.SourceChannelImpl: int fdVal> = $i0;
        r0.<sun.nio.ch.SourceChannelImpl: int state> = 0;
        return;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        sun.nio.ch.SourceChannelImpl r0;
        java.lang.Object r1, $r3;
        long l0;
        java.lang.Throwable r2, $r6;
        int $i1;
        sun.nio.ch.NativeDispatcher $r4;
        java.io.FileDescriptor $r5;
        byte $b2;
        boolean $z0;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        $r3 = r0.<sun.nio.ch.SourceChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i1 = r0.<sun.nio.ch.SourceChannelImpl: int state>;
        if $i1 == 1 goto label1;

        $r4 = <sun.nio.ch.SourceChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r5 = r0.<sun.nio.ch.SourceChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r4.<sun.nio.ch.NativeDispatcher: void preClose(java.io.FileDescriptor)>($r5);

     label1:
        l0 = r0.<sun.nio.ch.SourceChannelImpl: long thread>;
        $b2 = l0 cmp 0L;
        if $b2 == 0 goto label2;

        staticinvoke <sun.nio.ch.NativeThread: void signal(long)>(l0);

     label2:
        $z0 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isRegistered()>();
        if $z0 != 0 goto label3;

        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void kill()>();

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r6 := @caughtexception;

     label6:
        r2 = $r6;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void kill() throws java.io.IOException
    {
        sun.nio.ch.SourceChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r4;
        sun.nio.ch.NativeDispatcher $r5;
        java.io.FileDescriptor $r6;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        $r3 = r0.<sun.nio.ch.SourceChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i0 = r0.<sun.nio.ch.SourceChannelImpl: int state>;
        if $i0 != 1 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        $i1 = r0.<sun.nio.ch.SourceChannelImpl: int state>;
        if $i1 != -1 goto label4;

        r0.<sun.nio.ch.SourceChannelImpl: int state> = 1;
        exitmonitor r1;

     label3:
        return;

     label4:
        $z0 = <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label5;

        $z2 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isRegistered()>();
        if $z2 == 0 goto label6;

     label5:
        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label6:
        $r5 = <sun.nio.ch.SourceChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r6 = r0.<sun.nio.ch.SourceChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r5.<sun.nio.ch.NativeDispatcher: void close(java.io.FileDescriptor)>($r6);
        r0.<sun.nio.ch.SourceChannelImpl: int state> = 1;
        exitmonitor r1;

     label7:
        goto label11;

     label8:
        $r7 := @caughtexception;

     label9:
        r2 = $r7;
        exitmonitor r1;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        sun.nio.ch.SourceChannelImpl r0;
        boolean z0;
        java.io.FileDescriptor $r1;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        z0 := @parameter0: boolean;
        $r1 = r0.<sun.nio.ch.SourceChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.IOUtil: void configureBlocking(java.io.FileDescriptor,boolean)>($r1, z0);
        return;
    }

    public boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.SourceChannelImpl r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13;
        sun.nio.ch.SelectionKeyImpl r1;
        java.lang.Error $r2;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: sun.nio.ch.SelectionKeyImpl;
        i2 = virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: int nioInterestOps()>();
        i3 = virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: int nioReadyOps()>();
        i4 = i1;
        $i5 = i0 & 32;
        if $i5 == 0 goto label0;

        $r2 = new java.lang.Error;
        specialinvoke $r2.<java.lang.Error: void <init>(java.lang.String)>("POLLNVAL detected");
        throw $r2;

     label0:
        $i6 = i0 & 24;
        if $i6 == 0 goto label3;

        i7 = i2;
        virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: void nioReadyOps(int)>(i7);
        $i8 = i3 ^ -1;
        $i9 = i7 & $i8;
        if $i9 == 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i10 = i0 & 1;
        if $i10 == 0 goto label4;

        $i11 = i2 & 1;
        if $i11 == 0 goto label4;

        i4 = i4 | 1;

     label4:
        virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: void nioReadyOps(int)>(i4);
        $i12 = i3 ^ -1;
        $i13 = i4 & $i12;
        if $i13 == 0 goto label5;

        $z1 = 1;
        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    public boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.SourceChannelImpl r0;
        int i0, $i1;
        sun.nio.ch.SelectionKeyImpl r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.nio.ch.SelectionKeyImpl;
        $i1 = virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: int nioReadyOps()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl)>(i0, $i1, r1);
        return $z0;
    }

    public boolean translateAndSetReadyOps(int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.SourceChannelImpl r0;
        int i0;
        sun.nio.ch.SelectionKeyImpl r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.nio.ch.SelectionKeyImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl)>(i0, 0, r1);
        return $z0;
    }

    public void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.SourceChannelImpl r0;
        int i0;
        sun.nio.ch.SelectionKeyImpl r1;
        sun.nio.ch.SelectorImpl $r2;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.nio.ch.SelectionKeyImpl;
        if i0 != 1 goto label0;

        i0 = 1;

     label0:
        $r2 = r1.<sun.nio.ch.SelectionKeyImpl: sun.nio.ch.SelectorImpl selector>;
        virtualinvoke $r2.<sun.nio.ch.SelectorImpl: void putEventOps(sun.nio.ch.SelectionKeyImpl,int)>(r1, i0);
        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        sun.nio.ch.SourceChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.SourceChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r6;
        int i0, i3;
        byte b1;
        sun.nio.ch.NativeDispatcher $r3;
        java.lang.Throwable r4, r5, $r12, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.AssertionError $r8, $r11, $r14;
        long $l2;
        java.io.FileDescriptor $r9;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        specialinvoke r0.<sun.nio.ch.SourceChannelImpl: void ensureOpen()>();
        $r6 = r0.<sun.nio.ch.SourceChannelImpl: java.lang.Object lock>;
        r2 = $r6;
        entermonitor $r6;

     label0:
        i0 = 0;

     label1:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void begin()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label8;

        b1 = 0;

     label2:
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = 0L;
        if i0 > 0 goto label3;

        if i0 != -2 goto label4;

     label3:
        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void end(boolean)>($z1);
        $z2 = <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled>;
        if $z2 != 0 goto label6;

        $z3 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z3 != 0 goto label6;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label6:
        exitmonitor r2;

     label7:
        return b1;

     label8:
        $l2 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = $l2;

     label9:
        $r9 = r0.<sun.nio.ch.SourceChannelImpl: java.io.FileDescriptor fd>;
        $r3 = <sun.nio.ch.SourceChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r9, r1, -1L, $r3);
        if i0 != -3 goto label10;

        $z4 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isOpen()>();
        if $z4 != 0 goto label9;

     label10:
        i3 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i0);

     label11:
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = 0L;
        if i0 > 0 goto label12;

        if i0 != -2 goto label13;

     label12:
        $z5 = 1;
        goto label14;

     label13:
        $z5 = 0;

     label14:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void end(boolean)>($z5);
        $z6 = <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled>;
        if $z6 != 0 goto label15;

        $z7 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z7 != 0 goto label15;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label15:
        exitmonitor r2;

     label16:
        return i3;

     label17:
        $r12 := @caughtexception;

     label18:
        r4 = $r12;

     label19:
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = 0L;
        if i0 > 0 goto label20;

        if i0 != -2 goto label21;

     label20:
        $z8 = 1;
        goto label22;

     label21:
        $z8 = 0;

     label22:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void end(boolean)>($z8);
        $z9 = <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled>;
        if $z9 != 0 goto label23;

        $z10 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z10 != 0 goto label23;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label23:
        throw r4;

     label24:
        $r15 := @caughtexception;
        r5 = $r15;
        exitmonitor r2;

     label25:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label17;
        catch java.lang.Throwable from label8 to label11 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label0 to label7 with label24;
        catch java.lang.Throwable from label8 to label16 with label24;
        catch java.lang.Throwable from label18 to label25 with label24;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        sun.nio.ch.SourceChannelImpl r0;
        java.nio.ByteBuffer[] r1, $r3;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;
        long $l4;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        $i2 = lengthof r1;
        $i3 = $i2 - i1;
        if i0 <= $i3 goto label1;

     label0:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        $r3 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer[] subsequence(java.nio.ByteBuffer[],int,int)>(r1, i0, i1);
        $l4 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: long read(java.nio.ByteBuffer[])>($r3);
        return $l4;
    }

    public long read(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        sun.nio.ch.SourceChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        java.lang.Object r2, $r7;
        long l0, l1, $l4, l6;
        sun.nio.ch.NativeDispatcher $r3;
        java.lang.Throwable r4, r5, $r13, $r16;
        java.lang.NullPointerException $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        byte $b2, $b3, $b5, $b7, $b8, $b9, $b10;
        java.lang.AssertionError $r9, $r12, $r15;
        java.io.FileDescriptor $r10;

        r0 := @this: sun.nio.ch.SourceChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        if r1 != null goto label0;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label0:
        specialinvoke r0.<sun.nio.ch.SourceChannelImpl: void ensureOpen()>();
        $r7 = r0.<sun.nio.ch.SourceChannelImpl: java.lang.Object lock>;
        r2 = $r7;
        entermonitor $r7;

     label1:
        l0 = 0L;

     label2:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void begin()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label9;

        l1 = 0L;

     label3:
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = 0L;
        $b2 = l0 cmp 0L;
        if $b2 > 0 goto label4;

        $b3 = l0 cmp -2L;
        if $b3 != 0 goto label5;

     label4:
        $z1 = 1;
        goto label6;

     label5:
        $z1 = 0;

     label6:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void end(boolean)>($z1);
        $z2 = <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled>;
        if $z2 != 0 goto label7;

        $z3 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z3 != 0 goto label7;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label7:
        exitmonitor r2;

     label8:
        return l1;

     label9:
        $l4 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = $l4;

     label10:
        $r10 = r0.<sun.nio.ch.SourceChannelImpl: java.io.FileDescriptor fd>;
        $r3 = <sun.nio.ch.SourceChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        l0 = staticinvoke <sun.nio.ch.IOUtil: long read(java.io.FileDescriptor,java.nio.ByteBuffer[],sun.nio.ch.NativeDispatcher)>($r10, r1, $r3);
        $b5 = l0 cmp -3L;
        if $b5 != 0 goto label11;

        $z4 = virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: boolean isOpen()>();
        if $z4 != 0 goto label10;

     label11:
        l6 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l0);

     label12:
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = 0L;
        $b7 = l0 cmp 0L;
        if $b7 > 0 goto label13;

        $b8 = l0 cmp -2L;
        if $b8 != 0 goto label14;

     label13:
        $z5 = 1;
        goto label15;

     label14:
        $z5 = 0;

     label15:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void end(boolean)>($z5);
        $z6 = <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled>;
        if $z6 != 0 goto label16;

        $z7 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z7 != 0 goto label16;

        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label16:
        exitmonitor r2;

     label17:
        return l6;

     label18:
        $r13 := @caughtexception;

     label19:
        r4 = $r13;

     label20:
        r0.<sun.nio.ch.SourceChannelImpl: long thread> = 0L;
        $b9 = l0 cmp 0L;
        if $b9 > 0 goto label21;

        $b10 = l0 cmp -2L;
        if $b10 != 0 goto label22;

     label21:
        $z8 = 1;
        goto label23;

     label22:
        $z8 = 0;

     label23:
        virtualinvoke r0.<sun.nio.ch.SourceChannelImpl: void end(boolean)>($z8);
        $z9 = <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled>;
        if $z9 != 0 goto label24;

        $z10 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z10 != 0 goto label24;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label24:
        throw r4;

     label25:
        $r16 := @caughtexception;
        r5 = $r16;
        exitmonitor r2;

     label26:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label18;
        catch java.lang.Throwable from label9 to label12 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label1 to label8 with label25;
        catch java.lang.Throwable from label9 to label17 with label25;
        catch java.lang.Throwable from label19 to label26 with label25;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.nio.ch.FileDispatcherImpl $r1;

        $r0 = class "sun/nio/ch/SourceChannelImpl";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.SourceChannelImpl: boolean $assertionsDisabled> = $z1;
        staticinvoke <sun.nio.ch.Util: void load()>();
        $r1 = new sun.nio.ch.FileDispatcherImpl;
        specialinvoke $r1.<sun.nio.ch.FileDispatcherImpl: void <init>()>();
        <sun.nio.ch.SourceChannelImpl: sun.nio.ch.NativeDispatcher nd> = $r1;
        return;
    }
}
