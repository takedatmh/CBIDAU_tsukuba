class javax.security.auth.kerberos.KeyImpl extends java.lang.Object implements javax.crypto.SecretKey, javax.security.auth.Destroyable, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient byte[] keyBytes;
    private transient int keyType;
    private transient volatile boolean destroyed;

    public void <init>(byte[], int)
    {
        javax.security.auth.kerberos.KeyImpl r0;
        byte[] r1, $r3;
        int i0;
        java.lang.Object $r2;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed> = 0;
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes> = $r3;
        r0.<javax.security.auth.kerberos.KeyImpl: int keyType> = i0;
        return;
    }

    public void <init>(javax.security.auth.kerberos.KerberosPrincipal, char[], java.lang.String)
    {
        javax.security.auth.kerberos.KeyImpl r0;
        javax.security.auth.kerberos.KerberosPrincipal r1;
        char[] r2;
        java.lang.String r3, $r7, $r9, $r14;
        sun.security.krb5.PrincipalName r4, $r6;
        sun.security.krb5.EncryptionKey r5, $r8;
        byte[] $r10;
        int $i0;
        sun.security.krb5.KrbException $r11, r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        r1 := @parameter0: javax.security.auth.kerberos.KerberosPrincipal;
        r2 := @parameter1: char[];
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed> = 0;

     label0:
        $r6 = new sun.security.krb5.PrincipalName;
        $r7 = virtualinvoke r1.<javax.security.auth.kerberos.KerberosPrincipal: java.lang.String getName()>();
        specialinvoke $r6.<sun.security.krb5.PrincipalName: void <init>(java.lang.String)>($r7);
        r4 = $r6;
        $r8 = new sun.security.krb5.EncryptionKey;
        $r9 = virtualinvoke r4.<sun.security.krb5.PrincipalName: java.lang.String getSalt()>();
        specialinvoke $r8.<sun.security.krb5.EncryptionKey: void <init>(char[],java.lang.String,java.lang.String)>(r2, $r9, r3);
        r5 = $r8;
        $r10 = virtualinvoke r5.<sun.security.krb5.EncryptionKey: byte[] getBytes()>();
        r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes> = $r10;
        $i0 = virtualinvoke r5.<sun.security.krb5.EncryptionKey: int getEType()>();
        r0.<javax.security.auth.kerberos.KeyImpl: int keyType> = $i0;

     label1:
        goto label3;

     label2:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = new java.lang.IllegalArgumentException;
        $r14 = virtualinvoke r12.<sun.security.krb5.KrbException: java.lang.String getMessage()>();
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);
        throw $r13;

     label3:
        return;

        catch sun.security.krb5.KrbException from label0 to label1 with label2;
    }

    public final int getKeyType()
    {
        javax.security.auth.kerberos.KeyImpl r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        int $i0;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        $z0 = r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This key is no longer valid");
        throw $r1;

     label0:
        $i0 = r0.<javax.security.auth.kerberos.KeyImpl: int keyType>;
        return $i0;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.security.auth.kerberos.KeyImpl r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        $i0 = r0.<javax.security.auth.kerberos.KeyImpl: int keyType>;
        $r1 = specialinvoke r0.<javax.security.auth.kerberos.KeyImpl: java.lang.String getAlgorithmName(int)>($i0);
        return $r1;
    }

    private java.lang.String getAlgorithmName(int)
    {
        javax.security.auth.kerberos.KeyImpl r0;
        int i0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        i0 := @parameter0: int;
        $z0 = r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This key is no longer valid");
        throw $r1;

     label0:
        tableswitch(i0)
        {
            case 0: goto label6;
            case 1: goto label1;
            case 2: goto label7;
            case 3: goto label1;
            case 4: goto label7;
            case 5: goto label7;
            case 6: goto label7;
            case 7: goto label7;
            case 8: goto label7;
            case 9: goto label7;
            case 10: goto label7;
            case 11: goto label7;
            case 12: goto label7;
            case 13: goto label7;
            case 14: goto label7;
            case 15: goto label7;
            case 16: goto label2;
            case 17: goto label4;
            case 18: goto label5;
            case 19: goto label7;
            case 20: goto label7;
            case 21: goto label7;
            case 22: goto label7;
            case 23: goto label3;
            default: goto label7;
        };

     label1:
        return "DES";

     label2:
        return "DESede";

     label3:
        return "ArcFourHmac";

     label4:
        return "AES128";

     label5:
        return "AES256";

     label6:
        return "NULL";

     label7:
        $r2 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encryption type: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r2;
    }

    public final java.lang.String getFormat()
    {
        javax.security.auth.kerberos.KeyImpl r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        $z0 = r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This key is no longer valid");
        throw $r1;

     label0:
        return "RAW";
    }

    public final byte[] getEncoded()
    {
        javax.security.auth.kerberos.KeyImpl r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        byte[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        $z0 = r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This key is no longer valid");
        throw $r1;

     label0:
        $r2 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public void destroy() throws javax.security.auth.DestroyFailedException
    {
        javax.security.auth.kerberos.KeyImpl r0;
        boolean $z0;
        byte[] $r1;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        $z0 = r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed>;
        if $z0 != 0 goto label0;

        r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed> = 1;
        $r1 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 0);

     label0:
        return;
    }

    public boolean isDestroyed()
    {
        javax.security.auth.kerberos.KeyImpl r0;
        boolean $z0;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        $z0 = r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed>;
        return $z0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        javax.security.auth.kerberos.KeyImpl r0;
        java.io.ObjectOutputStream r1;
        sun.security.krb5.Asn1Exception r2, $r7;
        boolean $z0;
        java.io.IOException $r3, $r8;
        sun.security.krb5.EncryptionKey $r4;
        int $i0;
        byte[] $r5, $r6;
        java.lang.String $r9;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $z0 = r0.<javax.security.auth.kerberos.KeyImpl: boolean destroyed>;
        if $z0 == 0 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("This key is no longer valid");
        throw $r3;

     label0:
        $r4 = new sun.security.krb5.EncryptionKey;
        $i0 = r0.<javax.security.auth.kerberos.KeyImpl: int keyType>;
        $r5 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        specialinvoke $r4.<sun.security.krb5.EncryptionKey: void <init>(int,byte[])>($i0, $r5);
        $r6 = virtualinvoke $r4.<sun.security.krb5.EncryptionKey: byte[] asn1Encode()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r2 = $r7;
        $r8 = new java.io.IOException;
        $r9 = virtualinvoke r2.<sun.security.krb5.Asn1Exception: java.lang.String getMessage()>();
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);
        throw $r8;

     label3:
        return;

        catch sun.security.krb5.Asn1Exception from label0 to label1 with label2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        javax.security.auth.kerberos.KeyImpl r0;
        java.io.ObjectInputStream r1;
        sun.security.krb5.EncryptionKey $r2, r4;
        sun.security.util.DerValue $r3;
        java.lang.Object $r5;
        byte[] $r6, $r7, $r8;
        int $i0;
        sun.security.krb5.Asn1Exception $r9, r10;
        java.io.IOException $r11;
        java.lang.String $r12;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        r1 := @parameter0: java.io.ObjectInputStream;

     label0:
        $r2 = new sun.security.krb5.EncryptionKey;
        $r3 = new sun.security.util.DerValue;
        $r5 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        $r6 = (byte[]) $r5;
        $r7 = (byte[]) $r6;
        specialinvoke $r3.<sun.security.util.DerValue: void <init>(byte[])>($r7);
        specialinvoke $r2.<sun.security.krb5.EncryptionKey: void <init>(sun.security.util.DerValue)>($r3);
        r4 = $r2;
        $i0 = virtualinvoke r4.<sun.security.krb5.EncryptionKey: int getEType()>();
        r0.<javax.security.auth.kerberos.KeyImpl: int keyType> = $i0;
        $r8 = virtualinvoke r4.<sun.security.krb5.EncryptionKey: byte[] getBytes()>();
        r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes> = $r8;

     label1:
        goto label3;

     label2:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = new java.io.IOException;
        $r12 = virtualinvoke r10.<sun.security.krb5.Asn1Exception: java.lang.String getMessage()>();
        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r12);
        throw $r11;

     label3:
        return;

        catch sun.security.krb5.Asn1Exception from label0 to label1 with label2;
    }

    public java.lang.String toString()
    {
        javax.security.auth.kerberos.KeyImpl r0;
        sun.misc.HexDumpEncoder $r1, r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r14, $r15, $r16;
        int $i0, $i1;
        byte[] $r7, $r8, $r12;
        java.lang.String $r9, $r13, $r17;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        $r1 = new sun.misc.HexDumpEncoder;
        specialinvoke $r1.<sun.misc.HexDumpEncoder: void <init>()>();
        r2 = $r1;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EncryptionKey: keyType=");
        $i0 = r0.<javax.security.auth.kerberos.KeyImpl: int keyType>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyBytes (hex dump)=");
        $r7 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        if $r7 == null goto label0;

        $r8 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        $i1 = lengthof $r8;
        if $i1 != 0 goto label1;

     label0:
        $r9 = " Empty Key";
        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
        $r12 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        $r13 = virtualinvoke r2.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>($r12);
        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
        $r9 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r16 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r17;
    }

    public int hashCode()
    {
        javax.security.auth.kerberos.KeyImpl r0;
        byte b0;
        boolean $z0;
        int $i1, $i2, i3, $i4, $i5, $i6;
        byte[] $r1;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        b0 = 17;
        $z0 = virtualinvoke r0.<javax.security.auth.kerberos.KeyImpl: boolean isDestroyed()>();
        if $z0 == 0 goto label0;

        return b0;

     label0:
        $i1 = 37 * b0;
        $r1 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        $i2 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);
        i3 = $i1 + $i2;
        $i4 = 37 * i3;
        $i5 = r0.<javax.security.auth.kerberos.KeyImpl: int keyType>;
        $i6 = $i4 + $i5;
        return $i6;
    }

    public boolean equals(java.lang.Object)
    {
        javax.security.auth.kerberos.KeyImpl r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        byte[] $r3, $r4;

        r0 := @this: javax.security.auth.kerberos.KeyImpl;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof javax.security.auth.kerberos.KeyImpl;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.security.auth.kerberos.KeyImpl) r1;
        $z1 = virtualinvoke r0.<javax.security.auth.kerberos.KeyImpl: boolean isDestroyed()>();
        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r2.<javax.security.auth.kerberos.KeyImpl: boolean isDestroyed()>();
        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        $i0 = r0.<javax.security.auth.kerberos.KeyImpl: int keyType>;
        $i1 = virtualinvoke r2.<javax.security.auth.kerberos.KeyImpl: int getKeyType()>();
        if $i0 != $i1 goto label4;

        $r3 = r0.<javax.security.auth.kerberos.KeyImpl: byte[] keyBytes>;
        $r4 = virtualinvoke r2.<javax.security.auth.kerberos.KeyImpl: byte[] getEncoded()>();
        $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r4);
        if $z3 != 0 goto label5;

     label4:
        return 0;

     label5:
        return 1;
    }
}
