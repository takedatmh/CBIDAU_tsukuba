public final class java.lang.reflect.Field extends java.lang.reflect.AccessibleObject implements java.lang.reflect.Member
{
    private java.lang.Class clazz;
    private int slot;
    private java.lang.String name;
    private java.lang.Class type;
    private int modifiers;
    private transient java.lang.String signature;
    private transient sun.reflect.generics.repository.FieldRepository genericInfo;
    private byte[] annotations;
    private sun.reflect.FieldAccessor fieldAccessor;
    private sun.reflect.FieldAccessor overrideFieldAccessor;
    private java.lang.reflect.Field root;
    private transient java.util.Map declaredAnnotations;

    private java.lang.String getGenericSignature()
    {
        java.lang.reflect.Field r0;
        java.lang.String $r1;

        r0 := @this: java.lang.reflect.Field;
        $r1 = r0.<java.lang.reflect.Field: java.lang.String signature>;
        return $r1;
    }

    private sun.reflect.generics.factory.GenericsFactory getFactory()
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1;
        sun.reflect.generics.scope.ClassScope $r2;
        sun.reflect.generics.factory.CoreReflectionFactory $r3;

        r0 := @this: java.lang.reflect.Field;
        r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r2 = staticinvoke <sun.reflect.generics.scope.ClassScope: sun.reflect.generics.scope.ClassScope make(java.lang.Class)>(r1);
        $r3 = staticinvoke <sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration,sun.reflect.generics.scope.Scope)>(r1, $r2);
        return $r3;
    }

    private sun.reflect.generics.repository.FieldRepository getGenericInfo()
    {
        java.lang.reflect.Field r0;
        sun.reflect.generics.repository.FieldRepository $r1, $r4, $r5;
        java.lang.String $r2;
        sun.reflect.generics.factory.GenericsFactory $r3;

        r0 := @this: java.lang.reflect.Field;
        $r1 = r0.<java.lang.reflect.Field: sun.reflect.generics.repository.FieldRepository genericInfo>;
        if $r1 != null goto label0;

        $r2 = specialinvoke r0.<java.lang.reflect.Field: java.lang.String getGenericSignature()>();
        $r3 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r4 = staticinvoke <sun.reflect.generics.repository.FieldRepository: sun.reflect.generics.repository.FieldRepository make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>($r2, $r3);
        r0.<java.lang.reflect.Field: sun.reflect.generics.repository.FieldRepository genericInfo> = $r4;

     label0:
        $r5 = r0.<java.lang.reflect.Field: sun.reflect.generics.repository.FieldRepository genericInfo>;
        return $r5;
    }

    void <init>(java.lang.Class, java.lang.String, java.lang.Class, int, int, java.lang.String, byte[])
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1, r3;
        java.lang.String r2, r4;
        int i0, i1;
        byte[] r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Class;
        i0 := @parameter3: int;
        i1 := @parameter4: int;
        r4 := @parameter5: java.lang.String;
        r5 := @parameter6: byte[];
        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();
        r0.<java.lang.reflect.Field: java.lang.Class clazz> = r1;
        r0.<java.lang.reflect.Field: java.lang.String name> = r2;
        r0.<java.lang.reflect.Field: java.lang.Class type> = r3;
        r0.<java.lang.reflect.Field: int modifiers> = i0;
        r0.<java.lang.reflect.Field: int slot> = i1;
        r0.<java.lang.reflect.Field: java.lang.String signature> = r4;
        r0.<java.lang.reflect.Field: byte[] annotations> = r5;
        return;
    }

    java.lang.reflect.Field copy()
    {
        java.lang.reflect.Field r0, $r1, r2;
        java.lang.Class $r3, $r5;
        java.lang.String $r4, $r6;
        int $i0, $i1;
        byte[] $r7;
        sun.reflect.FieldAccessor $r8, $r9;

        r0 := @this: java.lang.reflect.Field;
        $r1 = new java.lang.reflect.Field;
        $r3 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $r4 = r0.<java.lang.reflect.Field: java.lang.String name>;
        $r5 = r0.<java.lang.reflect.Field: java.lang.Class type>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $i1 = r0.<java.lang.reflect.Field: int slot>;
        $r6 = r0.<java.lang.reflect.Field: java.lang.String signature>;
        $r7 = r0.<java.lang.reflect.Field: byte[] annotations>;
        specialinvoke $r1.<java.lang.reflect.Field: void <init>(java.lang.Class,java.lang.String,java.lang.Class,int,int,java.lang.String,byte[])>($r3, $r4, $r5, $i0, $i1, $r6, $r7);
        r2 = $r1;
        r2.<java.lang.reflect.Field: java.lang.reflect.Field root> = r0;
        $r8 = r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor fieldAccessor>;
        r2.<java.lang.reflect.Field: sun.reflect.FieldAccessor fieldAccessor> = $r8;
        $r9 = r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor overrideFieldAccessor>;
        r2.<java.lang.reflect.Field: sun.reflect.FieldAccessor overrideFieldAccessor> = $r9;
        return r2;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Field;
        $r1 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        return $r1;
    }

    public java.lang.String getName()
    {
        java.lang.reflect.Field r0;
        java.lang.String $r1;

        r0 := @this: java.lang.reflect.Field;
        $r1 = r0.<java.lang.reflect.Field: java.lang.String name>;
        return $r1;
    }

    public int getModifiers()
    {
        java.lang.reflect.Field r0;
        int $i0;

        r0 := @this: java.lang.reflect.Field;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        return $i0;
    }

    public boolean isEnumConstant()
    {
        java.lang.reflect.Field r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;
        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();
        $i1 = $i0 & 16384;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isSynthetic()
    {
        java.lang.reflect.Field r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;
        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isSynthetic(int)>($i0);
        return $z0;
    }

    public java.lang.Class getType()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Field;
        $r1 = r0.<java.lang.reflect.Field: java.lang.Class type>;
        return $r1;
    }

    public java.lang.reflect.Type getGenericType()
    {
        java.lang.reflect.Field r0;
        java.lang.String $r1;
        sun.reflect.generics.repository.FieldRepository $r2;
        java.lang.reflect.Type $r3;
        java.lang.Class $r4;

        r0 := @this: java.lang.reflect.Field;
        $r1 = specialinvoke r0.<java.lang.reflect.Field: java.lang.String getGenericSignature()>();
        if $r1 == null goto label0;

        $r2 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.generics.repository.FieldRepository getGenericInfo()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.repository.FieldRepository: java.lang.reflect.Type getGenericType()>();
        return $r3;

     label0:
        $r4 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();
        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Field r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r3, $r4, $r7, $r8;
        java.lang.String $r5, $r6;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label2;

        $z0 = r1 instanceof java.lang.reflect.Field;
        if $z0 == 0 goto label2;

        r2 = (java.lang.reflect.Field) r1;
        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r4 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        if $r3 != $r4 goto label0;

        $r5 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();
        $r6 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();
        if $r5 != $r6 goto label0;

        $r7 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();
        $r8 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();
        if $r7 != $r8 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;
        java.lang.String $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: java.lang.reflect.Field;
        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();
        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();
        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();
        $i1 = virtualinvoke $r3.<java.lang.String: int hashCode()>();
        $i2 = $i0 ^ $i1;
        return $i2;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.Field r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r5, $r6, $r7, $r10, $r11, $r14, $r15, $r17;
        java.lang.String $r2, $r4, $r9, $r13, $r16, $r18;
        java.lang.Class $r8, $r12;

        r0 := @this: java.lang.reflect.Field;
        i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        if i0 != 0 goto label0;

        $r2 = "";
        goto label1;

     label0:
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r8 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();
        $r9 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r8);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r12 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r13 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r12);
        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r16 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r18;
    }

    public java.lang.String toGenericString()
    {
        java.lang.reflect.Field r0;
        int i0;
        java.lang.reflect.Type r1;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r8, $r11, $r12, $r15, $r16, $r18;
        java.lang.String $r3, $r5, $r10, $r14, $r17, $r19;
        boolean $z0;
        java.lang.Class $r9, $r13;

        r0 := @this: java.lang.reflect.Field;
        i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();
        r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        if i0 != 0 goto label0;

        $r3 = "";
        goto label1;

     label0:
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $z0 = r1 instanceof java.lang.Class;
        if $z0 == 0 goto label2;

        $r9 = (java.lang.Class) r1;
        $r10 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r9);
        goto label3;

     label2:
        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label3:
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r13 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r14 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r13);
        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r17 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r19;
    }

    public java.lang.Object get(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1, $r6;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $r6 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: java.lang.Object get(java.lang.Object)>(r1);
        return $r6;
    }

    public boolean getBoolean(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $z2 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: boolean getBoolean(java.lang.Object)>(r1);
        return $z2;
    }

    public byte getByte(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;
        byte $b2;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $b2 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: byte getByte(java.lang.Object)>(r1);
        return $b2;
    }

    public char getChar(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;
        char $c2;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $c2 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: char getChar(java.lang.Object)>(r1);
        return $c2;
    }

    public short getShort(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;
        short $s2;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $s2 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: short getShort(java.lang.Object)>(r1);
        return $s2;
    }

    public int getInt(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1, $i2;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $i2 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: int getInt(java.lang.Object)>(r1);
        return $i2;
    }

    public long getLong(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;
        long $l2;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $l2 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: long getLong(java.lang.Object)>(r1);
        return $l2;
    }

    public float getFloat(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;
        float $f0;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $f0 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: float getFloat(java.lang.Object)>(r1);
        return $f0;
    }

    public double getDouble(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;
        double $d0;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        $d0 = interfaceinvoke $r5.<sun.reflect.FieldAccessor: double getDouble(java.lang.Object)>(r1);
        return $d0;
    }

    public void set(java.lang.Object, java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1;
        java.lang.Class $r3, $r4, $r5;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r6;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r3 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r3, $i0);
        if $z1 != 0 goto label0;

        $r4 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r5 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r4, $r5, r1, $i1);

     label0:
        $r6 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r6.<sun.reflect.FieldAccessor: void set(java.lang.Object,java.lang.Object)>(r1, r2);
        return;
    }

    public void setBoolean(java.lang.Object, boolean) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean z0, $z1, $z2;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $z1 = r0.<java.lang.reflect.Field: boolean override>;
        if $z1 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z2 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z2 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setBoolean(java.lang.Object,boolean)>(r1, z0);
        return;
    }

    public void setByte(java.lang.Object, byte) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        byte b0;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i1, $i2;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        b0 := @parameter1: byte;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i1);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i2 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i2);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setByte(java.lang.Object,byte)>(r1, b0);
        return;
    }

    public void setChar(java.lang.Object, char) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        char c0;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i1, $i2;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        c0 := @parameter1: char;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i1);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i2 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i2);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setChar(java.lang.Object,char)>(r1, c0);
        return;
    }

    public void setShort(java.lang.Object, short) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        short s0;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i1, $i2;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        s0 := @parameter1: short;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i1);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i2 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i2);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setShort(java.lang.Object,short)>(r1, s0);
        return;
    }

    public void setInt(java.lang.Object, int) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i1);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i2 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i2);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setInt(java.lang.Object,int)>(r1, i0);
        return;
    }

    public void setLong(java.lang.Object, long) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        long l0;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i1, $i2;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        l0 := @parameter1: long;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i1);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i2 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i2);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setLong(java.lang.Object,long)>(r1, l0);
        return;
    }

    public void setFloat(java.lang.Object, float) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        float f0;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        f0 := @parameter1: float;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setFloat(java.lang.Object,float)>(r1, f0);
        return;
    }

    public void setDouble(java.lang.Object, double) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        double d0;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        sun.reflect.FieldAccessor $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        d0 := @parameter1: double;
        $z0 = r0.<java.lang.reflect.Field: boolean override>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Field: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r2, $i0);
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Field: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Field: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>($r3, $r4, r1, $i1);

     label0:
        $r5 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>(r1);
        interfaceinvoke $r5.<sun.reflect.FieldAccessor: void setDouble(java.lang.Object,double)>(r1, d0);
        return;
    }

    private sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean z0;
        sun.reflect.FieldAccessor r2, $r3, $r4;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Object;
        z0 = r0.<java.lang.reflect.Field: boolean override>;
        if z0 == 0 goto label0;

        $r3 = r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor overrideFieldAccessor>;
        goto label1;

     label0:
        $r3 = r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor fieldAccessor>;

     label1:
        r2 = $r3;
        if r2 == null goto label2;

        $r4 = r2;
        goto label3;

     label2:
        $r4 = specialinvoke r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor acquireFieldAccessor(boolean)>(z0);

     label3:
        return $r4;
    }

    private sun.reflect.FieldAccessor acquireFieldAccessor(boolean)
    {
        java.lang.reflect.Field r0, $r2, $r3;
        boolean z0;
        sun.reflect.FieldAccessor r1;
        sun.reflect.ReflectionFactory $r4;

        r0 := @this: java.lang.reflect.Field;
        z0 := @parameter0: boolean;
        r1 = null;
        $r2 = r0.<java.lang.reflect.Field: java.lang.reflect.Field root>;
        if $r2 == null goto label0;

        $r3 = r0.<java.lang.reflect.Field: java.lang.reflect.Field root>;
        r1 = specialinvoke $r3.<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(boolean)>(z0);

     label0:
        if r1 == null goto label2;

        if z0 == 0 goto label1;

        r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor overrideFieldAccessor> = r1;
        goto label3;

     label1:
        r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor fieldAccessor> = r1;
        goto label3;

     label2:
        $r4 = <java.lang.reflect.Field: sun.reflect.ReflectionFactory reflectionFactory>;
        r1 = virtualinvoke $r4.<sun.reflect.ReflectionFactory: sun.reflect.FieldAccessor newFieldAccessor(java.lang.reflect.Field,boolean)>(r0, z0);
        specialinvoke r0.<java.lang.reflect.Field: void setFieldAccessor(sun.reflect.FieldAccessor,boolean)>(r1, z0);

     label3:
        return r1;
    }

    private sun.reflect.FieldAccessor getFieldAccessor(boolean)
    {
        java.lang.reflect.Field r0;
        boolean z0;
        sun.reflect.FieldAccessor $r1;

        r0 := @this: java.lang.reflect.Field;
        z0 := @parameter0: boolean;
        if z0 == 0 goto label0;

        $r1 = r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor overrideFieldAccessor>;
        goto label1;

     label0:
        $r1 = r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor fieldAccessor>;

     label1:
        return $r1;
    }

    private void setFieldAccessor(sun.reflect.FieldAccessor, boolean)
    {
        java.lang.reflect.Field r0, $r2, $r3;
        sun.reflect.FieldAccessor r1;
        boolean z0;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: sun.reflect.FieldAccessor;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor overrideFieldAccessor> = r1;
        goto label1;

     label0:
        r0.<java.lang.reflect.Field: sun.reflect.FieldAccessor fieldAccessor> = r1;

     label1:
        $r2 = r0.<java.lang.reflect.Field: java.lang.reflect.Field root>;
        if $r2 == null goto label2;

        $r3 = r0.<java.lang.reflect.Field: java.lang.reflect.Field root>;
        specialinvoke $r3.<java.lang.reflect.Field: void setFieldAccessor(sun.reflect.FieldAccessor,boolean)>(r1, z0);

     label2:
        return;
    }

    static java.lang.String getTypeName(java.lang.Class)
    {
        java.lang.Class r0, r1;
        int i0, i1;
        java.lang.StringBuffer r2, $r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r7, $r10;
        java.lang.Throwable $r8, r9;

        r0 := @parameter0: java.lang.Class;
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();
        if $z0 == 0 goto label7;

     label0:
        r1 = r0;
        i0 = 0;

     label1:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();
        if $z1 == 0 goto label2;

        i0 = i0 + 1;
        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();
        goto label1;

     label2:
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        r2 = $r3;
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);
        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");
        i1 = i1 + 1;
        goto label3;

     label4:
        $r7 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        return $r7;

     label6:
        $r8 := @caughtexception;
        r9 = $r8;

     label7:
        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        return $r10;

        catch java.lang.Throwable from label0 to label5 with label6;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1;
        java.lang.NullPointerException $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.annotation.Annotation $r5;

        r0 := @this: java.lang.reflect.Field;
        r1 := @parameter0: java.lang.Class;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = specialinvoke r0.<java.lang.reflect.Field: java.util.Map declaredAnnotations()>();
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r5 = (java.lang.annotation.Annotation) $r4;
        return $r5;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.Field r0;
        java.util.Map $r1;
        java.lang.annotation.Annotation[] $r2;

        r0 := @this: java.lang.reflect.Field;
        $r1 = specialinvoke r0.<java.lang.reflect.Field: java.util.Map declaredAnnotations()>();
        $r2 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] toArray(java.util.Map)>($r1);
        return $r2;
    }

    private synchronized java.util.Map declaredAnnotations()
    {
        java.lang.reflect.Field r0;
        sun.misc.JavaLangAccess $r1;
        java.util.Map $r2, $r7, $r8;
        byte[] $r3;
        java.lang.Class $r4, $r6;
        sun.reflect.ConstantPool $r5;

        r0 := @this: java.lang.reflect.Field;
        $r2 = r0.<java.lang.reflect.Field: java.util.Map declaredAnnotations>;
        if $r2 != null goto label0;

        $r3 = r0.<java.lang.reflect.Field: byte[] annotations>;
        $r1 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        $r4 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r5 = interfaceinvoke $r1.<sun.misc.JavaLangAccess: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>($r4);
        $r6 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r7 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.util.Map parseAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>($r3, $r5, $r6);
        r0.<java.lang.reflect.Field: java.util.Map declaredAnnotations> = $r7;

     label0:
        $r8 = r0.<java.lang.reflect.Field: java.util.Map declaredAnnotations>;
        return $r8;
    }
}
