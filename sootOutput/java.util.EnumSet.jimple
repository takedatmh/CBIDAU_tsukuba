public abstract class java.util.EnumSet extends java.util.AbstractSet implements java.lang.Cloneable, java.io.Serializable
{
    final java.lang.Class elementType;
    final java.lang.Enum[] universe;
    private static java.lang.Enum[] ZERO_LENGTH_ENUM_ARRAY;

    void <init>(java.lang.Class, java.lang.Enum[])
    {
        java.util.EnumSet r0;
        java.lang.Class r1;
        java.lang.Enum[] r2;

        r0 := @this: java.util.EnumSet;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Enum[];
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        r0.<java.util.EnumSet: java.lang.Class elementType> = r1;
        r0.<java.util.EnumSet: java.lang.Enum[] universe> = r2;
        return;
    }

    public static java.util.EnumSet noneOf(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Enum[] r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.ClassCastException $r3;
        java.lang.String $r6;
        int $i0;
        java.util.RegularEnumSet $r7;
        java.util.JumboEnumSet $r8;

        r0 := @parameter0: java.lang.Class;
        r1 = staticinvoke <java.util.EnumSet: java.lang.Enum[] getUniverse(java.lang.Class)>(r0);
        if r1 != null goto label0;

        $r3 = new java.lang.ClassCastException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not an enum");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.ClassCastException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label0:
        $i0 = lengthof r1;
        if $i0 > 64 goto label1;

        $r7 = new java.util.RegularEnumSet;
        specialinvoke $r7.<java.util.RegularEnumSet: void <init>(java.lang.Class,java.lang.Enum[])>(r0, r1);
        return $r7;

     label1:
        $r8 = new java.util.JumboEnumSet;
        specialinvoke $r8.<java.util.JumboEnumSet: void <init>(java.lang.Class,java.lang.Enum[])>(r0, r1);
        return $r8;
    }

    public static java.util.EnumSet allOf(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.EnumSet r1;

        r0 := @parameter0: java.lang.Class;
        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(r0);
        virtualinvoke r1.<java.util.EnumSet: void addAll()>();
        return r1;
    }

    abstract void addAll();

    public static java.util.EnumSet copyOf(java.util.EnumSet)
    {
        java.util.EnumSet r0, $r1;

        r0 := @parameter0: java.util.EnumSet;
        $r1 = virtualinvoke r0.<java.util.EnumSet: java.util.EnumSet clone()>();
        return $r1;
    }

    public static java.util.EnumSet copyOf(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Enum r2;
        java.util.EnumSet r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object $r7, $r8;

        r0 := @parameter0: java.util.Collection;
        $z0 = r0 instanceof java.util.EnumSet;
        if $z0 == 0 goto label0;

        $r4 = (java.util.EnumSet) r0;
        $r5 = virtualinvoke $r4.<java.util.EnumSet: java.util.EnumSet clone()>();
        return $r5;

     label0:
        $z1 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();
        if $z1 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Collection is empty");
        throw $r6;

     label1:
        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();
        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.lang.Enum) $r7;
        r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>(r2);

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label3;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        virtualinvoke r3.<java.util.EnumSet: boolean add(java.lang.Object)>($r8);
        goto label2;

     label3:
        return r3;
    }

    public static java.util.EnumSet complementOf(java.util.EnumSet)
    {
        java.util.EnumSet r0, r1;

        r0 := @parameter0: java.util.EnumSet;
        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet copyOf(java.util.EnumSet)>(r0);
        virtualinvoke r1.<java.util.EnumSet: void complement()>();
        return r1;
    }

    public static java.util.EnumSet of(java.lang.Enum)
    {
        java.lang.Enum r0;
        java.util.EnumSet r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Enum;
        $r2 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r2);
        virtualinvoke r1.<java.util.EnumSet: boolean add(java.lang.Object)>(r0);
        return r1;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1;
        java.util.EnumSet r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Enum;
        r1 := @parameter1: java.lang.Enum;
        $r3 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r3);
        virtualinvoke r2.<java.util.EnumSet: boolean add(java.lang.Object)>(r0);
        virtualinvoke r2.<java.util.EnumSet: boolean add(java.lang.Object)>(r1);
        return r2;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1, r2;
        java.util.EnumSet r3;
        java.lang.Class $r4;

        r0 := @parameter0: java.lang.Enum;
        r1 := @parameter1: java.lang.Enum;
        r2 := @parameter2: java.lang.Enum;
        $r4 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r4);
        virtualinvoke r3.<java.util.EnumSet: boolean add(java.lang.Object)>(r0);
        virtualinvoke r3.<java.util.EnumSet: boolean add(java.lang.Object)>(r1);
        virtualinvoke r3.<java.util.EnumSet: boolean add(java.lang.Object)>(r2);
        return r3;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1, r2, r3;
        java.util.EnumSet r4;
        java.lang.Class $r5;

        r0 := @parameter0: java.lang.Enum;
        r1 := @parameter1: java.lang.Enum;
        r2 := @parameter2: java.lang.Enum;
        r3 := @parameter3: java.lang.Enum;
        $r5 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        r4 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r5);
        virtualinvoke r4.<java.util.EnumSet: boolean add(java.lang.Object)>(r0);
        virtualinvoke r4.<java.util.EnumSet: boolean add(java.lang.Object)>(r1);
        virtualinvoke r4.<java.util.EnumSet: boolean add(java.lang.Object)>(r2);
        virtualinvoke r4.<java.util.EnumSet: boolean add(java.lang.Object)>(r3);
        return r4;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1, r2, r3, r4;
        java.util.EnumSet r5;
        java.lang.Class $r6;

        r0 := @parameter0: java.lang.Enum;
        r1 := @parameter1: java.lang.Enum;
        r2 := @parameter2: java.lang.Enum;
        r3 := @parameter3: java.lang.Enum;
        r4 := @parameter4: java.lang.Enum;
        $r6 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r6);
        virtualinvoke r5.<java.util.EnumSet: boolean add(java.lang.Object)>(r0);
        virtualinvoke r5.<java.util.EnumSet: boolean add(java.lang.Object)>(r1);
        virtualinvoke r5.<java.util.EnumSet: boolean add(java.lang.Object)>(r2);
        virtualinvoke r5.<java.util.EnumSet: boolean add(java.lang.Object)>(r3);
        virtualinvoke r5.<java.util.EnumSet: boolean add(java.lang.Object)>(r4);
        return r5;
    }

    public static transient java.util.EnumSet of(java.lang.Enum, java.lang.Enum[])
    {
        java.lang.Enum r0, r4;
        java.lang.Enum[] r1, r3;
        java.util.EnumSet r2;
        int i0, i1;
        java.lang.Class $r5;

        r0 := @parameter0: java.lang.Enum;
        r1 := @parameter1: java.lang.Enum[];
        $r5 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r5);
        virtualinvoke r2.<java.util.EnumSet: boolean add(java.lang.Object)>(r0);
        r3 = r1;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r4 = r3[i1];
        virtualinvoke r2.<java.util.EnumSet: boolean add(java.lang.Object)>(r4);
        i1 = i1 + 1;
        goto label0;

     label1:
        return r2;
    }

    public static java.util.EnumSet range(java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1;
        java.lang.StringBuilder $r2, $r5, $r6, $r7;
        java.util.EnumSet r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r8;
        java.lang.Class $r9;

        r0 := @parameter0: java.lang.Enum;
        r1 := @parameter1: java.lang.Enum;
        $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>(r1);
        if $i0 <= 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label0:
        $r9 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r9);
        virtualinvoke r3.<java.util.EnumSet: void addRange(java.lang.Enum,java.lang.Enum)>(r0, r1);
        return r3;
    }

    abstract void addRange(java.lang.Enum, java.lang.Enum);

    public java.util.EnumSet clone()
    {
        java.util.EnumSet r0, $r3;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r2;
        java.lang.AssertionError $r5;

        r0 := @this: java.util.EnumSet;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.util.EnumSet) $r2;

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);
        throw $r5;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    abstract void complement();

    final void typeCheck(java.lang.Enum)
    {
        java.util.EnumSet r0;
        java.lang.Enum r1;
        java.lang.Class r2, $r4, $r5, $r6, $r10;
        java.lang.StringBuilder $r3, $r8, $r9, $r11;
        java.lang.ClassCastException $r7;
        java.lang.String $r12;

        r0 := @this: java.util.EnumSet;
        r1 := @parameter0: java.lang.Enum;
        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = r0.<java.util.EnumSet: java.lang.Class elementType>;
        if r2 == $r4 goto label0;

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();
        $r6 = r0.<java.util.EnumSet: java.lang.Class elementType>;
        if $r5 == $r6 goto label0;

        $r7 = new java.lang.ClassCastException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");
        $r10 = r0.<java.util.EnumSet: java.lang.Class elementType>;
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label0:
        return;
    }

    private static java.lang.Enum[] getUniverse(java.lang.Class)
    {
        java.lang.Class r0;
        sun.misc.JavaLangAccess $r1;
        java.lang.Enum[] $r2;

        r0 := @parameter0: java.lang.Class;
        $r1 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        $r2 = interfaceinvoke $r1.<sun.misc.JavaLangAccess: java.lang.Enum[] getEnumConstantsShared(java.lang.Class)>(r0);
        return $r2;
    }

    java.lang.Object writeReplace()
    {
        java.util.EnumSet r0;
        java.util.EnumSet$SerializationProxy $r1;

        r0 := @this: java.util.EnumSet;
        $r1 = new java.util.EnumSet$SerializationProxy;
        specialinvoke $r1.<java.util.EnumSet$SerializationProxy: void <init>(java.util.EnumSet)>(r0);
        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException
    {
        java.util.EnumSet r0;
        java.io.ObjectInputStream r1;
        java.io.InvalidObjectException $r2;

        r0 := @this: java.util.EnumSet;
        r1 := @parameter0: java.io.ObjectInputStream;
        $r2 = new java.io.InvalidObjectException;
        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Proxy required");
        throw $r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.EnumSet r0, $r1;

        r0 := @this: java.util.EnumSet;
        $r1 = virtualinvoke r0.<java.util.EnumSet: java.util.EnumSet clone()>();
        return $r1;
    }

    static java.lang.Enum[] access$000()
    {
        java.lang.Enum[] $r0;

        $r0 = <java.util.EnumSet: java.lang.Enum[] ZERO_LENGTH_ENUM_ARRAY>;
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Enum[] $r0;

        $r0 = newarray (java.lang.Enum)[0];
        <java.util.EnumSet: java.lang.Enum[] ZERO_LENGTH_ENUM_ARRAY> = $r0;
        return;
    }
}
