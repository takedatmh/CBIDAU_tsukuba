public final class sun.security.ec.ECPublicKeyImpl extends sun.security.x509.X509Key implements java.security.interfaces.ECPublicKey
{
    private static final long serialVersionUID;
    private java.security.spec.ECPoint w;
    private java.security.spec.ECParameterSpec params;

    public void <init>(java.security.spec.ECPoint, java.security.spec.ECParameterSpec) throws java.security.InvalidKeyException
    {
        sun.security.ec.ECPublicKeyImpl r0;
        java.security.spec.ECPoint r1;
        java.security.spec.ECParameterSpec r2;
        sun.security.util.ObjectIdentifier $r3;
        sun.security.x509.AlgorithmId $r4;
        java.security.AlgorithmParameters $r5;
        java.security.spec.EllipticCurve $r6;
        byte[] $r7;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        r1 := @parameter0: java.security.spec.ECPoint;
        r2 := @parameter1: java.security.spec.ECParameterSpec;
        specialinvoke r0.<sun.security.x509.X509Key: void <init>()>();
        r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECPoint w> = r1;
        r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECParameterSpec params> = r2;
        $r4 = new sun.security.x509.AlgorithmId;
        $r3 = <sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier EC_oid>;
        $r5 = staticinvoke <sun.security.ec.ECParameters: java.security.AlgorithmParameters getAlgorithmParameters(java.security.spec.ECParameterSpec)>(r2);
        specialinvoke $r4.<sun.security.x509.AlgorithmId: void <init>(sun.security.util.ObjectIdentifier,java.security.AlgorithmParameters)>($r3, $r5);
        r0.<sun.security.ec.ECPublicKeyImpl: sun.security.x509.AlgorithmId algid> = $r4;
        $r6 = virtualinvoke r2.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();
        $r7 = staticinvoke <sun.security.ec.ECParameters: byte[] encodePoint(java.security.spec.ECPoint,java.security.spec.EllipticCurve)>(r1, $r6);
        r0.<sun.security.ec.ECPublicKeyImpl: byte[] key> = $r7;
        return;
    }

    public void <init>(byte[]) throws java.security.InvalidKeyException
    {
        sun.security.ec.ECPublicKeyImpl r0;
        byte[] r1;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        r1 := @parameter0: byte[];
        specialinvoke r0.<sun.security.x509.X509Key: void <init>()>();
        virtualinvoke r0.<sun.security.ec.ECPublicKeyImpl: void decode(byte[])>(r1);
        return;
    }

    public java.lang.String getAlgorithm()
    {
        sun.security.ec.ECPublicKeyImpl r0;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        return "EC";
    }

    public java.security.spec.ECPoint getW()
    {
        sun.security.ec.ECPublicKeyImpl r0;
        java.security.spec.ECPoint $r1;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        $r1 = r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECPoint w>;
        return $r1;
    }

    public java.security.spec.ECParameterSpec getParams()
    {
        sun.security.ec.ECPublicKeyImpl r0;
        java.security.spec.ECParameterSpec $r1;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        $r1 = r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECParameterSpec params>;
        return $r1;
    }

    public byte[] getEncodedPublicValue()
    {
        sun.security.ec.ECPublicKeyImpl r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        $r1 = r0.<sun.security.ec.ECPublicKeyImpl: byte[] key>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        return $r3;
    }

    protected void parseKeyBits() throws java.security.InvalidKeyException
    {
        sun.security.ec.ECPublicKeyImpl r0;
        java.security.AlgorithmParameters r1;
        sun.security.x509.AlgorithmId $r2;
        java.security.spec.AlgorithmParameterSpec $r3;
        java.security.spec.ECParameterSpec $r4, $r6;
        byte[] $r5;
        java.security.spec.EllipticCurve $r7;
        java.security.spec.ECPoint $r8;
        java.io.IOException $r9, r10;
        java.security.InvalidKeyException $r11, $r14;
        java.security.spec.InvalidParameterSpecException $r12, r13;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;

     label0:
        $r2 = r0.<sun.security.ec.ECPublicKeyImpl: sun.security.x509.AlgorithmId algid>;
        r1 = virtualinvoke $r2.<sun.security.x509.AlgorithmId: java.security.AlgorithmParameters getParameters()>();
        $r3 = virtualinvoke r1.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "java/security/spec/ECParameterSpec");
        $r4 = (java.security.spec.ECParameterSpec) $r3;
        r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECParameterSpec params> = $r4;
        $r5 = r0.<sun.security.ec.ECPublicKeyImpl: byte[] key>;
        $r6 = r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECParameterSpec params>;
        $r7 = virtualinvoke $r6.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();
        $r8 = staticinvoke <sun.security.ec.ECParameters: java.security.spec.ECPoint decodePoint(byte[],java.security.spec.EllipticCurve)>($r5, $r7);
        r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECPoint w> = $r8;

     label1:
        goto label4;

     label2:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = new java.security.InvalidKeyException;
        specialinvoke $r11.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid EC key", r10);
        throw $r11;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = new java.security.InvalidKeyException;
        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid EC key", r13);
        throw $r14;

     label4:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.security.spec.InvalidParameterSpecException from label0 to label1 with label3;
    }

    public java.lang.String toString()
    {
        sun.security.ec.ECPublicKeyImpl r0;
        java.lang.StringBuilder $r1, $r2, $r6, $r7, $r10, $r11, $r14, $r15, $r17;
        java.security.spec.ECParameterSpec $r3, $r16;
        java.security.spec.EllipticCurve $r4;
        java.security.spec.ECField $r5;
        int $i0;
        java.security.spec.ECPoint $r8, $r12;
        java.math.BigInteger $r9, $r13;
        java.lang.String $r18;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sun EC public key, ");
        $r3 = r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECParameterSpec params>;
        $r4 = virtualinvoke $r3.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();
        $r5 = virtualinvoke $r4.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();
        $i0 = interfaceinvoke $r5.<java.security.spec.ECField: int getFieldSize()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits\n  public x coord: ");
        $r8 = r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECPoint w>;
        $r9 = virtualinvoke $r8.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  public y coord: ");
        $r12 = r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECPoint w>;
        $r13 = virtualinvoke $r12.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();
        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  parameters: ");
        $r16 = r0.<sun.security.ec.ECPublicKeyImpl: java.security.spec.ECParameterSpec params>;
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r18;
    }

    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        sun.security.ec.ECPublicKeyImpl r0;
        java.security.KeyRep $r1;
        java.security.KeyRep$Type $r2;
        java.lang.String $r3, $r4;
        byte[] $r5;

        r0 := @this: sun.security.ec.ECPublicKeyImpl;
        $r1 = new java.security.KeyRep;
        $r2 = <java.security.KeyRep$Type: java.security.KeyRep$Type PUBLIC>;
        $r3 = virtualinvoke r0.<sun.security.ec.ECPublicKeyImpl: java.lang.String getAlgorithm()>();
        $r4 = virtualinvoke r0.<sun.security.ec.ECPublicKeyImpl: java.lang.String getFormat()>();
        $r5 = virtualinvoke r0.<sun.security.ec.ECPublicKeyImpl: byte[] getEncoded()>();
        specialinvoke $r1.<java.security.KeyRep: void <init>(java.security.KeyRep$Type,java.lang.String,java.lang.String,byte[])>($r2, $r3, $r4, $r5);
        return $r1;
    }
}
