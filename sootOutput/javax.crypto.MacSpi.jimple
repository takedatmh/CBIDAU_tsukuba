public abstract class javax.crypto.MacSpi extends java.lang.Object
{

    public void <init>()
    {
        javax.crypto.MacSpi r0;

        r0 := @this: javax.crypto.MacSpi;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected abstract int engineGetMacLength();

    protected abstract void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

    protected abstract void engineUpdate(byte);

    protected abstract void engineUpdate(byte[], int, int);

    protected void engineUpdate(java.nio.ByteBuffer)
    {
        javax.crypto.MacSpi r0;
        java.nio.ByteBuffer r1;
        byte[] r2, r4;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, i8;
        boolean $z0, $z1;

        r0 := @this: javax.crypto.MacSpi;
        r1 := @parameter0: java.nio.ByteBuffer;
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z0 != 0 goto label0;

        return;

     label0:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();
        if $z1 == 0 goto label1;

        r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        $i3 = i0 + i1;
        $i4 = i2 - i1;
        virtualinvoke r0.<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>(r2, $i3, $i4);
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);
        goto label3;

     label1:
        i5 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        $i6 = staticinvoke <javax.crypto.CipherSpi: int getTempArraySize(int)>(i5);
        r4 = newarray (byte)[$i6];

     label2:
        if i5 <= 0 goto label3;

        $i7 = lengthof r4;
        i8 = staticinvoke <java.lang.Math: int min(int,int)>(i5, $i7);
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r4, 0, i8);
        virtualinvoke r0.<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)>(r4, 0, i8);
        i5 = i5 - i8;
        goto label2;

     label3:
        return;
    }

    protected abstract byte[] engineDoFinal();

    protected abstract void engineReset();

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        javax.crypto.MacSpi r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: javax.crypto.MacSpi;
        $z0 = r0 instanceof java.lang.Cloneable;
        if $z0 == 0 goto label0;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        return $r1;

     label0:
        $r2 = new java.lang.CloneNotSupportedException;
        specialinvoke $r2.<java.lang.CloneNotSupportedException: void <init>()>();
        throw $r2;
    }
}
