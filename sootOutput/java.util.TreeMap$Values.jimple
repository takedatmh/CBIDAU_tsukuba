class java.util.TreeMap$Values extends java.util.AbstractCollection
{
    final java.util.TreeMap this$0;

    void <init>(java.util.TreeMap)
    {
        java.util.TreeMap$Values r0;
        java.util.TreeMap r1;

        r0 := @this: java.util.TreeMap$Values;
        r1 := @parameter0: java.util.TreeMap;
        r0.<java.util.TreeMap$Values: java.util.TreeMap this$0> = r1;
        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeMap$Values r0;
        java.util.TreeMap$ValueIterator $r1;
        java.util.TreeMap $r2, $r3;
        java.util.TreeMap$Entry $r4;

        r0 := @this: java.util.TreeMap$Values;
        $r1 = new java.util.TreeMap$ValueIterator;
        $r2 = r0.<java.util.TreeMap$Values: java.util.TreeMap this$0>;
        $r3 = r0.<java.util.TreeMap$Values: java.util.TreeMap this$0>;
        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();
        specialinvoke $r1.<java.util.TreeMap$ValueIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>($r2, $r4);
        return $r1;
    }

    public int size()
    {
        java.util.TreeMap$Values r0;
        java.util.TreeMap $r1;
        int $i0;

        r0 := @this: java.util.TreeMap$Values;
        $r1 = r0.<java.util.TreeMap$Values: java.util.TreeMap this$0>;
        $i0 = virtualinvoke $r1.<java.util.TreeMap: int size()>();
        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeMap$Values r0;
        java.lang.Object r1;
        java.util.TreeMap $r2;
        boolean $z0;

        r0 := @this: java.util.TreeMap$Values;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.TreeMap$Values: java.util.TreeMap this$0>;
        $z0 = virtualinvoke $r2.<java.util.TreeMap: boolean containsValue(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeMap$Values r0;
        java.lang.Object r1, $r4;
        java.util.TreeMap$Entry r2;
        java.util.TreeMap $r3, $r5;
        boolean $z0;

        r0 := @this: java.util.TreeMap$Values;
        r1 := @parameter0: java.lang.Object;
        $r3 = r0.<java.util.TreeMap$Values: java.util.TreeMap this$0>;
        r2 = virtualinvoke $r3.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();

     label0:
        if r2 == null goto label2;

        $r4 = virtualinvoke r2.<java.util.TreeMap$Entry: java.lang.Object getValue()>();
        $z0 = staticinvoke <java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>($r4, r1);
        if $z0 == 0 goto label1;

        $r5 = r0.<java.util.TreeMap$Values: java.util.TreeMap this$0>;
        staticinvoke <java.util.TreeMap: void access$000(java.util.TreeMap,java.util.TreeMap$Entry)>($r5, r2);
        return 1;

     label1:
        r2 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)>(r2);
        goto label0;

     label2:
        return 0;
    }

    public void clear()
    {
        java.util.TreeMap$Values r0;
        java.util.TreeMap $r1;

        r0 := @this: java.util.TreeMap$Values;
        $r1 = r0.<java.util.TreeMap$Values: java.util.TreeMap this$0>;
        virtualinvoke $r1.<java.util.TreeMap: void clear()>();
        return;
    }
}
