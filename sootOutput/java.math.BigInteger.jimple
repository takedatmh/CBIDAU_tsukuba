public class java.math.BigInteger extends java.lang.Number implements java.lang.Comparable
{
    final int signum;
    final int[] mag;
    private int bitCount;
    private int bitLength;
    private int lowestSetBit;
    private int firstNonzeroIntNum;
    static final long LONG_MASK;
    private static long[] bitsPerDigit;
    private static final int SMALL_PRIME_THRESHOLD;
    private static final int DEFAULT_PRIME_CERTAINTY;
    private static final java.math.BigInteger SMALL_PRIME_PRODUCT;
    private static volatile java.util.Random staticRandom;
    private static final int MAX_CONSTANT;
    private static java.math.BigInteger[] posConst;
    private static java.math.BigInteger[] negConst;
    public static final java.math.BigInteger ZERO;
    public static final java.math.BigInteger ONE;
    private static final java.math.BigInteger TWO;
    public static final java.math.BigInteger TEN;
    static int[] bnExpModThreshTable;
    private static java.lang.String[] zeros;
    private static int[] digitsPerLong;
    private static java.math.BigInteger[] longRadix;
    private static int[] digitsPerInt;
    private static int[] intRadix;
    private static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final sun.misc.Unsafe unsafe;
    private static final long signumOffset;
    private static final long magOffset;
    static final boolean $assertionsDisabled;

    public void <init>(byte[])
    {
        java.math.BigInteger r0;
        byte[] r1;
        int $i0, $i2;
        java.lang.NumberFormatException $r2;
        byte $b1, $b3;
        int[] $r3, $r4, $r6;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: byte[];
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $i0 = lengthof r1;
        if $i0 != 0 goto label0;

        $r2 = new java.lang.NumberFormatException;
        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length BigInteger");
        throw $r2;

     label0:
        $b1 = r1[0];
        if $b1 >= 0 goto label1;

        $r3 = staticinvoke <java.math.BigInteger: int[] makePositive(byte[])>(r1);
        r0.<java.math.BigInteger: int[] mag> = $r3;
        r0.<java.math.BigInteger: int signum> = -1;
        goto label4;

     label1:
        $r4 = staticinvoke <java.math.BigInteger: int[] stripLeadingZeroBytes(byte[])>(r1);
        r0.<java.math.BigInteger: int[] mag> = $r4;
        $r6 = r0.<java.math.BigInteger: int[] mag>;
        $i2 = lengthof $r6;
        if $i2 != 0 goto label2;

        $b3 = 0;
        goto label3;

     label2:
        $b3 = 1;

     label3:
        r0.<java.math.BigInteger: int signum> = $b3;

     label4:
        return;
    }

    private void <init>(int[])
    {
        java.math.BigInteger r0;
        int[] r1, $r3, $r4, $r6;
        int $i0, $i1, $i2;
        java.lang.NumberFormatException $r2;
        byte $b3;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: int[];
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $i0 = lengthof r1;
        if $i0 != 0 goto label0;

        $r2 = new java.lang.NumberFormatException;
        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length BigInteger");
        throw $r2;

     label0:
        $i1 = r1[0];
        if $i1 >= 0 goto label1;

        $r3 = staticinvoke <java.math.BigInteger: int[] makePositive(int[])>(r1);
        r0.<java.math.BigInteger: int[] mag> = $r3;
        r0.<java.math.BigInteger: int signum> = -1;
        goto label4;

     label1:
        $r4 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r1);
        r0.<java.math.BigInteger: int[] mag> = $r4;
        $r6 = r0.<java.math.BigInteger: int[] mag>;
        $i2 = lengthof $r6;
        if $i2 != 0 goto label2;

        $b3 = 0;
        goto label3;

     label2:
        $b3 = 1;

     label3:
        r0.<java.math.BigInteger: int signum> = $b3;

     label4:
        return;
    }

    public void <init>(int, byte[])
    {
        java.math.BigInteger r0;
        int i0, $i1;
        byte[] r1;
        int[] $r2, $r4;
        java.lang.NumberFormatException $r3, $r5;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $r2 = staticinvoke <java.math.BigInteger: int[] stripLeadingZeroBytes(byte[])>(r1);
        r0.<java.math.BigInteger: int[] mag> = $r2;
        if i0 < -1 goto label0;

        if i0 <= 1 goto label1;

     label0:
        $r3 = new java.lang.NumberFormatException;
        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Invalid signum value");
        throw $r3;

     label1:
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $i1 = lengthof $r4;
        if $i1 != 0 goto label2;

        r0.<java.math.BigInteger: int signum> = 0;
        goto label4;

     label2:
        if i0 != 0 goto label3;

        $r5 = new java.lang.NumberFormatException;
        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("signum-magnitude mismatch");
        throw $r5;

     label3:
        r0.<java.math.BigInteger: int signum> = i0;

     label4:
        return;
    }

    private void <init>(int, int[])
    {
        java.math.BigInteger r0;
        int i0, $i1;
        int[] r1, $r2, $r4;
        java.lang.NumberFormatException $r3, $r5;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        r1 := @parameter1: int[];
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $r2 = staticinvoke <java.math.BigInteger: int[] stripLeadingZeroInts(int[])>(r1);
        r0.<java.math.BigInteger: int[] mag> = $r2;
        if i0 < -1 goto label0;

        if i0 <= 1 goto label1;

     label0:
        $r3 = new java.lang.NumberFormatException;
        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Invalid signum value");
        throw $r3;

     label1:
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $i1 = lengthof $r4;
        if $i1 != 0 goto label2;

        r0.<java.math.BigInteger: int signum> = 0;
        goto label4;

     label2:
        if i0 != 0 goto label3;

        $r5 = new java.lang.NumberFormatException;
        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("signum-magnitude mismatch");
        throw $r5;

     label3:
        r0.<java.math.BigInteger: int signum> = i0;

     label4:
        return;
    }

    public void <init>(java.lang.String, int)
    {
        java.math.BigInteger r0, $r8;
        java.lang.String r1, r3, r16;
        int i0, i1, i2, i4, i5, i6, i7, i8, i9, i10, $i11, $i13, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30;
        byte b3;
        int[] r2, $r9, $r11, $r12, $r14, $r15, $r18;
        boolean z0;
        java.lang.NumberFormatException $r4, $r5, $r6, $r7, $r13, $r17;
        char $c12;
        long $l14, $l15, $l16, $l17, $l18;
        long[] $r10;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        i1 = 0;
        i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 < 2 goto label0;

        if i0 <= 36 goto label1;

     label0:
        $r4 = new java.lang.NumberFormatException;
        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Radix out of range");
        throw $r4;

     label1:
        if i2 != 0 goto label2;

        $r5 = new java.lang.NumberFormatException;
        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length BigInteger");
        throw $r5;

     label2:
        b3 = 1;
        i4 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(45);
        i5 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(43);
        $i11 = i4 + i5;
        if $i11 > -1 goto label5;

        if i4 == 0 goto label3;

        if i5 != 0 goto label4;

     label3:
        i1 = 1;
        if i2 != 1 goto label4;

        $r6 = new java.lang.NumberFormatException;
        specialinvoke $r6.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length BigInteger");
        throw $r6;

     label4:
        if i4 != 0 goto label6;

        b3 = -1;
        goto label6;

     label5:
        $r7 = new java.lang.NumberFormatException;
        specialinvoke $r7.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Illegal embedded sign character");
        throw $r7;

     label6:
        if i1 >= i2 goto label7;

        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $i13 = staticinvoke <java.lang.Character: int digit(char,int)>($c12, i0);
        if $i13 != 0 goto label7;

        i1 = i1 + 1;
        goto label6;

     label7:
        if i1 != i2 goto label8;

        r0.<java.math.BigInteger: int signum> = 0;
        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        $r9 = $r8.<java.math.BigInteger: int[] mag>;
        r0.<java.math.BigInteger: int[] mag> = $r9;
        return;

     label8:
        i6 = i2 - i1;
        r0.<java.math.BigInteger: int signum> = b3;
        $l14 = (long) i6;
        $r10 = <java.math.BigInteger: long[] bitsPerDigit>;
        $l15 = $r10[i0];
        $l16 = $l14 * $l15;
        $l17 = $l16 >>> 10;
        $l18 = $l17 + 1L;
        i7 = (int) $l18;
        $i19 = i7 + 31;
        i8 = $i19 >>> 5;
        r2 = newarray (int)[i8];
        $r11 = <java.math.BigInteger: int[] digitsPerInt>;
        $i20 = $r11[i0];
        i9 = i6 % $i20;
        if i9 != 0 goto label9;

        $r12 = <java.math.BigInteger: int[] digitsPerInt>;
        i9 = $r12[i0];

     label9:
        $i21 = i1 + i9;
        i22 = $i21;
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, $i21);
        $i23 = i8 - 1;
        $i24 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r3, i0);
        r2[$i23] = $i24;
        $i25 = i8 - 1;
        $i26 = r2[$i25];
        if $i26 >= 0 goto label10;

        $r13 = new java.lang.NumberFormatException;
        specialinvoke $r13.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Illegal digit");
        throw $r13;

     label10:
        $r14 = <java.math.BigInteger: int[] intRadix>;
        i10 = $r14[i0];
        z0 = 0;

     label11:
        if i22 >= i2 goto label13;

        $i27 = i22;
        $r15 = <java.math.BigInteger: int[] digitsPerInt>;
        $i28 = $r15[i0];
        $i29 = i22 + $i28;
        i22 = $i29;
        r16 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i27, $i29);
        i30 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r16, i0);
        if i30 >= 0 goto label12;

        $r17 = new java.lang.NumberFormatException;
        specialinvoke $r17.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Illegal digit");
        throw $r17;

     label12:
        staticinvoke <java.math.BigInteger: void destructiveMulAdd(int[],int,int)>(r2, i10, i30);
        goto label11;

     label13:
        $r18 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r2);
        r0.<java.math.BigInteger: int[] mag> = $r18;
        return;
    }

    void <init>(char[])
    {
        java.math.BigInteger r0, $r4;
        char[] r1;
        int i0, i1, i3, i4, i5, i6, i7, $i11, $i17, $i18, $i19, $i20, i21, $i22, $i23, $i24, $i25, $i26;
        byte b2;
        char $c8, $c9, $c10;
        java.lang.NumberFormatException $r2, $r3;
        int[] $r5, r7, $r8, $r9, $r10, $r11, $r12;
        long $l12, $l13, $l14, $l15, $l16;
        long[] $r6;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: char[];
        specialinvoke r0.<java.lang.Number: void <init>()>();
        i0 = 0;
        i1 = lengthof r1;
        b2 = 1;
        $c8 = r1[0];
        if $c8 != 45 goto label1;

        if i1 != 1 goto label0;

        $r2 = new java.lang.NumberFormatException;
        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length BigInteger");
        throw $r2;

     label0:
        b2 = -1;
        i0 = 1;
        goto label3;

     label1:
        $c9 = r1[0];
        if $c9 != 43 goto label3;

        if i1 != 1 goto label2;

        $r3 = new java.lang.NumberFormatException;
        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length BigInteger");
        throw $r3;

     label2:
        i0 = 1;

     label3:
        if i0 >= i1 goto label4;

        $c10 = r1[i0];
        $i11 = staticinvoke <java.lang.Character: int digit(char,int)>($c10, 10);
        if $i11 != 0 goto label4;

        i0 = i0 + 1;
        goto label3;

     label4:
        if i0 != i1 goto label5;

        r0.<java.math.BigInteger: int signum> = 0;
        $r4 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        $r5 = $r4.<java.math.BigInteger: int[] mag>;
        r0.<java.math.BigInteger: int[] mag> = $r5;
        return;

     label5:
        i3 = i1 - i0;
        r0.<java.math.BigInteger: int signum> = b2;
        if i1 >= 10 goto label6;

        i4 = 1;
        goto label7;

     label6:
        $l12 = (long) i3;
        $r6 = <java.math.BigInteger: long[] bitsPerDigit>;
        $l13 = $r6[10];
        $l14 = $l12 * $l13;
        $l15 = $l14 >>> 10;
        $l16 = $l15 + 1L;
        i5 = (int) $l16;
        $i17 = i5 + 31;
        i4 = $i17 >>> 5;

     label7:
        r7 = newarray (int)[i4];
        $r8 = <java.math.BigInteger: int[] digitsPerInt>;
        $i18 = $r8[10];
        i6 = i3 % $i18;
        if i6 != 0 goto label8;

        $r9 = <java.math.BigInteger: int[] digitsPerInt>;
        i6 = $r9[10];

     label8:
        $i19 = i4 - 1;
        $i20 = i0 + i6;
        i21 = $i20;
        $i22 = specialinvoke r0.<java.math.BigInteger: int parseInt(char[],int,int)>(r1, i0, $i20);
        r7[$i19] = $i22;

     label9:
        if i21 >= i1 goto label10;

        $i23 = i21;
        $r10 = <java.math.BigInteger: int[] digitsPerInt>;
        $i24 = $r10[10];
        $i25 = i21 + $i24;
        i21 = $i25;
        i7 = specialinvoke r0.<java.math.BigInteger: int parseInt(char[],int,int)>(r1, $i23, $i25);
        $r11 = <java.math.BigInteger: int[] intRadix>;
        $i26 = $r11[10];
        staticinvoke <java.math.BigInteger: void destructiveMulAdd(int[],int,int)>(r7, $i26, i7);
        goto label9;

     label10:
        $r12 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r7);
        r0.<java.math.BigInteger: int[] mag> = $r12;
        return;
    }

    private int parseInt(char[], int, int)
    {
        java.math.BigInteger r0;
        char[] r1;
        int i0, i1, i2, i3, i4, i5, $i8;
        java.lang.String $r2, $r5;
        char $c6, $c7;
        java.lang.NumberFormatException $r3, $r4;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i5 = i0 + 1;
        $c6 = r1[i0];
        i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c6, 10);
        if i2 != -1 goto label0;

        $r3 = new java.lang.NumberFormatException;
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);
        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r2);
        throw $r3;

     label0:
        i3 = i5;

     label1:
        if i3 >= i1 goto label3;

        $c7 = r1[i3];
        i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c7, 10);
        if i4 != -1 goto label2;

        $r4 = new java.lang.NumberFormatException;
        $r5 = new java.lang.String;
        specialinvoke $r5.<java.lang.String: void <init>(char[])>(r1);
        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label2:
        $i8 = 10 * i2;
        i2 = $i8 + i4;
        i3 = i3 + 1;
        goto label1;

     label3:
        return i2;
    }

    private static void destructiveMulAdd(int[], int, int)
    {
        int[] r0;
        int i0, i1, i4, i7, i8, $i11, $i16, $i17, $i18, $i22, $i23, $i25, $i29;
        long l2, l3, l5, l6, $l9, $l10, $l12, $l13, $l14, l15, $l19, $l20, l21, l24, $l26, $l27, l28;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $l9 = (long) i0;
        l2 = $l9 & 4294967295L;
        $l10 = (long) i1;
        l3 = $l10 & 4294967295L;
        i4 = lengthof r0;
        l5 = 0L;
        l6 = 0L;
        i7 = i4 - 1;

     label0:
        if i7 < 0 goto label1;

        $i11 = r0[i7];
        $l12 = (long) $i11;
        $l13 = $l12 & 4294967295L;
        $l14 = l2 * $l13;
        l15 = $l14 + l6;
        $i16 = (int) l15;
        r0[i7] = $i16;
        l6 = l15 >>> 32;
        i7 = i7 + -1;
        goto label0;

     label1:
        $i17 = i4 - 1;
        $i18 = r0[$i17];
        $l19 = (long) $i18;
        $l20 = $l19 & 4294967295L;
        l21 = $l20 + l3;
        $i22 = i4 - 1;
        $i23 = (int) l21;
        r0[$i22] = $i23;
        l24 = l21 >>> 32;
        i8 = i4 - 2;

     label2:
        if i8 < 0 goto label3;

        $i25 = r0[i8];
        $l26 = (long) $i25;
        $l27 = $l26 & 4294967295L;
        l28 = $l27 + l24;
        $i29 = (int) l28;
        r0[i8] = $i29;
        l24 = l28 >>> 32;
        i8 = i8 + -1;
        goto label2;

     label3:
        return;
    }

    public void <init>(java.lang.String)
    {
        java.math.BigInteger r0;
        java.lang.String r1;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.math.BigInteger: void <init>(java.lang.String,int)>(r1, 10);
        return;
    }

    public void <init>(int, java.util.Random)
    {
        java.math.BigInteger r0;
        int i0;
        java.util.Random r1;
        byte[] $r2;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Random;
        $r2 = staticinvoke <java.math.BigInteger: byte[] randomBits(int,java.util.Random)>(i0, r1);
        specialinvoke r0.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);
        return;
    }

    private static byte[] randomBits(int, java.util.Random)
    {
        int i0, i1, i2, $i6, $i9, $i10, $i11, $i12;
        java.util.Random r0;
        byte[] r1;
        java.lang.IllegalArgumentException $r2;
        long $l3, $l4, $l5;
        byte $b7, $b8, $b13;

        i0 := @parameter0: int;
        r0 := @parameter1: java.util.Random;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("numBits must be non-negative");
        throw $r2;

     label0:
        $l3 = (long) i0;
        $l4 = $l3 + 7L;
        $l5 = $l4 / 8L;
        i1 = (int) $l5;
        r1 = newarray (byte)[i1];
        if i1 <= 0 goto label1;

        virtualinvoke r0.<java.util.Random: void nextBytes(byte[])>(r1);
        $i6 = 8 * i1;
        i2 = $i6 - i0;
        $b7 = 0;
        $b8 = r1[$b7];
        $i9 = 8 - i2;
        $i10 = 1 << $i9;
        $i11 = $i10 - 1;
        $i12 = $b8 & $i11;
        $b13 = (byte) $i12;
        r1[$b7] = $b13;

     label1:
        return r1;
    }

    public void <init>(int, int, java.util.Random)
    {
        java.math.BigInteger r0, r2, $r4;
        int i0, i1;
        java.util.Random r1;
        java.lang.ArithmeticException $r3;
        int[] $r5;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.util.Random;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        if i0 >= 2 goto label0;

        $r3 = new java.lang.ArithmeticException;
        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("bitLength < 2");
        throw $r3;

     label0:
        if i0 >= 95 goto label1;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger smallPrime(int,int,java.util.Random)>(i0, i1, r1);
        goto label2;

     label1:
        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger largePrime(int,int,java.util.Random)>(i0, i1, r1);

     label2:
        r2 = $r4;
        r0.<java.math.BigInteger: int signum> = 1;
        $r5 = r2.<java.math.BigInteger: int[] mag>;
        r0.<java.math.BigInteger: int[] mag> = $r5;
        return;
    }

    public static java.math.BigInteger probablePrime(int, java.util.Random)
    {
        int i0;
        java.util.Random r0;
        java.lang.ArithmeticException $r1;
        java.math.BigInteger $r2;

        i0 := @parameter0: int;
        r0 := @parameter1: java.util.Random;
        if i0 >= 2 goto label0;

        $r1 = new java.lang.ArithmeticException;
        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("bitLength < 2");
        throw $r1;

     label0:
        if i0 >= 95 goto label1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger smallPrime(int,int,java.util.Random)>(i0, 100, r0);
        goto label2;

     label1:
        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger largePrime(int,int,java.util.Random)>(i0, 100, r0);

     label2:
        return $r2;
    }

    private static java.math.BigInteger smallPrime(int, int, java.util.Random)
    {
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.util.Random r0;
        int[] r1;
        long l6, $l18, $l20, $l22, $l24, $l26, $l28, $l30, $l32, $l34, $l36, $l38, $l40;
        java.math.BigInteger $r3, r4, $r5, $r6;
        byte $b19, $b21, $b23, $b25, $b27, $b29, $b31, $b33, $b35, $b37, $b39, $b41;
        boolean $z0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: java.util.Random;
        $i7 = i0 + 31;
        i2 = $i7 >>> 5;
        r1 = newarray (int)[i2];
        $i8 = i0 + 31;
        $i9 = $i8 & 31;
        i3 = 1 << $i9;
        $i10 = i3 << 1;
        i4 = $i10 - 1;

     label0:
        i5 = 0;

     label1:
        if i5 >= i2 goto label2;

        $i11 = virtualinvoke r0.<java.util.Random: int nextInt()>();
        r1[i5] = $i11;
        i5 = i5 + 1;
        goto label1;

     label2:
        $i12 = r1[0];
        $i13 = $i12 & i4;
        $i14 = $i13 | i3;
        r1[0] = $i14;
        if i0 <= 2 goto label3;

        $i15 = i2 - 1;
        $i16 = r1[$i15];
        $i17 = $i16 | 1;
        r1[$i15] = $i17;

     label3:
        $r3 = new java.math.BigInteger;
        specialinvoke $r3.<java.math.BigInteger: void <init>(int[],int)>(r1, 1);
        r4 = $r3;
        if i0 <= 6 goto label4;

        $r5 = <java.math.BigInteger: java.math.BigInteger SMALL_PRIME_PRODUCT>;
        $r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r5);
        l6 = virtualinvoke $r6.<java.math.BigInteger: long longValue()>();
        $l18 = l6 % 3L;
        $b19 = $l18 cmp 0L;
        if $b19 == 0 goto label0;

        $l20 = l6 % 5L;
        $b21 = $l20 cmp 0L;
        if $b21 == 0 goto label0;

        $l22 = l6 % 7L;
        $b23 = $l22 cmp 0L;
        if $b23 == 0 goto label0;

        $l24 = l6 % 11L;
        $b25 = $l24 cmp 0L;
        if $b25 == 0 goto label0;

        $l26 = l6 % 13L;
        $b27 = $l26 cmp 0L;
        if $b27 == 0 goto label0;

        $l28 = l6 % 17L;
        $b29 = $l28 cmp 0L;
        if $b29 == 0 goto label0;

        $l30 = l6 % 19L;
        $b31 = $l30 cmp 0L;
        if $b31 == 0 goto label0;

        $l32 = l6 % 23L;
        $b33 = $l32 cmp 0L;
        if $b33 == 0 goto label0;

        $l34 = l6 % 29L;
        $b35 = $l34 cmp 0L;
        if $b35 == 0 goto label0;

        $l36 = l6 % 31L;
        $b37 = $l36 cmp 0L;
        if $b37 == 0 goto label0;

        $l38 = l6 % 37L;
        $b39 = $l38 cmp 0L;
        if $b39 == 0 goto label0;

        $l40 = l6 % 41L;
        $b41 = $l40 cmp 0L;
        if $b41 != 0 goto label4;

        goto label0;

     label4:
        if i0 >= 4 goto label5;

        return r4;

     label5:
        $z0 = virtualinvoke r4.<java.math.BigInteger: boolean primeToCertainty(int,java.util.Random)>(i1, r0);
        if $z0 == 0 goto label6;

        return r4;

     label6:
        goto label0;
    }

    private static java.math.BigInteger largePrime(int, int, java.util.Random)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17;
        java.util.Random r0;
        java.math.BigInteger $r1, r2, r4, $r8, $r9;
        java.math.BitSieve r3, $r7, $r12, r13;
        int[] $r5, $r6, $r10, $r11;
        long $l11;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: java.util.Random;
        $r1 = new java.math.BigInteger;
        specialinvoke $r1.<java.math.BigInteger: void <init>(int,java.util.Random)>(i0, r0);
        $i3 = i0 - 1;
        r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i3);
        $r5 = r2.<java.math.BigInteger: int[] mag>;
        $r6 = r2.<java.math.BigInteger: int[] mag>;
        $i4 = lengthof $r6;
        $i5 = $i4 - 1;
        $i6 = $r5[$i5];
        $i7 = $i6 & -2;
        $r5[$i5] = $i7;
        $i8 = i0 / 20;
        i2 = $i8 * 64;
        $r7 = new java.math.BitSieve;
        specialinvoke $r7.<java.math.BitSieve: void <init>(java.math.BigInteger,int)>(r2, i2);
        r3 = $r7;
        r4 = virtualinvoke r3.<java.math.BitSieve: java.math.BigInteger retrieve(java.math.BigInteger,int,java.util.Random)>(r2, i1, r0);

     label0:
        if r4 == null goto label1;

        $i9 = virtualinvoke r4.<java.math.BigInteger: int bitLength()>();
        if $i9 == i0 goto label3;

     label1:
        $i10 = 2 * i2;
        $l11 = (long) $i10;
        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l11);
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r8);
        $i12 = virtualinvoke r2.<java.math.BigInteger: int bitLength()>();
        if $i12 == i0 goto label2;

        $r9 = new java.math.BigInteger;
        specialinvoke $r9.<java.math.BigInteger: void <init>(int,java.util.Random)>(i0, r0);
        $i13 = i0 - 1;
        r2 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i13);

     label2:
        $r10 = r2.<java.math.BigInteger: int[] mag>;
        $r11 = r2.<java.math.BigInteger: int[] mag>;
        $i14 = lengthof $r11;
        $i15 = $i14 - 1;
        $i16 = $r10[$i15];
        $i17 = $i16 & -2;
        $r10[$i15] = $i17;
        $r12 = new java.math.BitSieve;
        specialinvoke $r12.<java.math.BitSieve: void <init>(java.math.BigInteger,int)>(r2, i2);
        r13 = $r12;
        r4 = virtualinvoke r13.<java.math.BitSieve: java.math.BigInteger retrieve(java.math.BigInteger,int,java.util.Random)>(r2, i1, r0);
        goto label0;

     label3:
        return r4;
    }

    public java.math.BigInteger nextProbablePrime()
    {
        java.math.BigInteger r0, r2, r4, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19;
        java.lang.StringBuilder $r1, $r6, $r7;
        long l0, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l34;
        java.math.BitSieve r3, $r18;
        int $i1, $i2, $i3, $i4, $i29, $i30, $i31, i32, $i33;
        java.lang.ArithmeticException $r5;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3;
        byte $b6, $b8, $b10, $b12, $b14, $b16, $b18, $b20, $b22, $b24, $b26, $b28;

        r0 := @this: java.math.BigInteger;
        $i1 = r0.<java.math.BigInteger: int signum>;
        if $i1 >= 0 goto label0;

        $r5 = new java.lang.ArithmeticException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start < 0: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label0:
        $i2 = r0.<java.math.BigInteger: int signum>;
        if $i2 == 0 goto label1;

        $r9 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);
        if $z0 == 0 goto label2;

     label1:
        $r10 = <java.math.BigInteger: java.math.BigInteger TWO>;
        return $r10;

     label2:
        $r11 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r11);
        $i3 = virtualinvoke r2.<java.math.BigInteger: int bitLength()>();
        if $i3 >= 95 goto label8;

        $z1 = virtualinvoke r2.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z1 != 0 goto label3;

        $r12 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r12);

     label3:
        $i4 = virtualinvoke r2.<java.math.BigInteger: int bitLength()>();
        if $i4 <= 6 goto label5;

        $r13 = <java.math.BigInteger: java.math.BigInteger SMALL_PRIME_PRODUCT>;
        $r14 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r13);
        l0 = virtualinvoke $r14.<java.math.BigInteger: long longValue()>();
        $l5 = l0 % 3L;
        $b6 = $l5 cmp 0L;
        if $b6 == 0 goto label4;

        $l7 = l0 % 5L;
        $b8 = $l7 cmp 0L;
        if $b8 == 0 goto label4;

        $l9 = l0 % 7L;
        $b10 = $l9 cmp 0L;
        if $b10 == 0 goto label4;

        $l11 = l0 % 11L;
        $b12 = $l11 cmp 0L;
        if $b12 == 0 goto label4;

        $l13 = l0 % 13L;
        $b14 = $l13 cmp 0L;
        if $b14 == 0 goto label4;

        $l15 = l0 % 17L;
        $b16 = $l15 cmp 0L;
        if $b16 == 0 goto label4;

        $l17 = l0 % 19L;
        $b18 = $l17 cmp 0L;
        if $b18 == 0 goto label4;

        $l19 = l0 % 23L;
        $b20 = $l19 cmp 0L;
        if $b20 == 0 goto label4;

        $l21 = l0 % 29L;
        $b22 = $l21 cmp 0L;
        if $b22 == 0 goto label4;

        $l23 = l0 % 31L;
        $b24 = $l23 cmp 0L;
        if $b24 == 0 goto label4;

        $l25 = l0 % 37L;
        $b26 = $l25 cmp 0L;
        if $b26 == 0 goto label4;

        $l27 = l0 % 41L;
        $b28 = $l27 cmp 0L;
        if $b28 != 0 goto label5;

     label4:
        $r15 = <java.math.BigInteger: java.math.BigInteger TWO>;
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r15);
        goto label3;

     label5:
        $i29 = virtualinvoke r2.<java.math.BigInteger: int bitLength()>();
        if $i29 >= 4 goto label6;

        return r2;

     label6:
        $z2 = virtualinvoke r2.<java.math.BigInteger: boolean primeToCertainty(int,java.util.Random)>(100, null);
        if $z2 == 0 goto label7;

        return r2;

     label7:
        $r16 = <java.math.BigInteger: java.math.BigInteger TWO>;
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r16);
        goto label3;

     label8:
        $z3 = virtualinvoke r2.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z3 == 0 goto label9;

        $r17 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r17);

     label9:
        $i30 = virtualinvoke r2.<java.math.BigInteger: int bitLength()>();
        $i31 = $i30 / 20;
        i32 = $i31 * 64;

     label10:
        $r18 = new java.math.BitSieve;
        specialinvoke $r18.<java.math.BitSieve: void <init>(java.math.BigInteger,int)>(r2, i32);
        r3 = $r18;
        r4 = virtualinvoke r3.<java.math.BitSieve: java.math.BigInteger retrieve(java.math.BigInteger,int,java.util.Random)>(r2, 100, null);
        if r4 == null goto label11;

        return r4;

     label11:
        $i33 = 2 * i32;
        $l34 = (long) $i33;
        $r19 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l34);
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r19);
        goto label10;
    }

    boolean primeToCertainty(int, java.util.Random)
    {
        java.math.BigInteger r0;
        int i0, i1, i2, $i3, $i4, $i6, i7, $i9, i10;
        java.util.Random r1;
        boolean z0, $z1, $z2, $z3, $z4;
        byte b5, b8;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Random;
        z0 = 0;
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 2147483646);
        $i4 = $i3 + 1;
        i1 = $i4 / 2;
        i2 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        if i2 >= 100 goto label2;

        b5 = 50;
        if i1 >= b5 goto label0;

        $i6 = i1;
        goto label1;

     label0:
        $i6 = b5;

     label1:
        i7 = $i6;
        $z1 = specialinvoke r0.<java.math.BigInteger: boolean passesMillerRabin(int,java.util.Random)>(i7, r1);
        return $z1;

     label2:
        if i2 >= 256 goto label3;

        b8 = 27;
        goto label7;

     label3:
        if i2 >= 512 goto label4;

        b8 = 15;
        goto label7;

     label4:
        if i2 >= 768 goto label5;

        b8 = 8;
        goto label7;

     label5:
        if i2 >= 1024 goto label6;

        b8 = 4;
        goto label7;

     label6:
        b8 = 2;

     label7:
        if i1 >= b8 goto label8;

        $i9 = i1;
        goto label9;

     label8:
        $i9 = b8;

     label9:
        i10 = $i9;
        $z2 = specialinvoke r0.<java.math.BigInteger: boolean passesMillerRabin(int,java.util.Random)>(i10, r1);
        if $z2 == 0 goto label10;

        $z3 = specialinvoke r0.<java.math.BigInteger: boolean passesLucasLehmer()>();
        if $z3 == 0 goto label10;

        $z4 = 1;
        goto label11;

     label10:
        $z4 = 0;

     label11:
        return $z4;
    }

    private boolean passesLucasLehmer()
    {
        java.math.BigInteger r0, $r1, r2, r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: java.math.BigInteger;
        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r1);
        i0 = 5;

     label0:
        $i1 = staticinvoke <java.math.BigInteger: int jacobiSymbol(int,java.math.BigInteger)>(i0, r0);
        if $i1 == -1 goto label3;

        if i0 >= 0 goto label1;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>(i0);
        $i3 = $i2 + 2;
        goto label2;

     label1:
        $i4 = i0 + 2;
        $i3 = neg $i4;

     label2:
        i0 = $i3;
        goto label0;

     label3:
        r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger lucasLehmerSequence(int,java.math.BigInteger,java.math.BigInteger)>(i0, r2, r0);
        $r4 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r0);
        $r5 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        $z0 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);
        return $z0;
    }

    private static int jacobiSymbol(int, java.math.BigInteger)
    {
        int i0, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14, $i15, $i16, $i17, $i18, $i19, i20, i21, $i22, $i23;
        java.math.BigInteger r0, $r3, $r4;
        byte b1;
        int[] $r1, $r2;
        long $l13;
        boolean $z0;
        java.lang.AssertionError $r5;

        i0 := @parameter0: int;
        r0 := @parameter1: java.math.BigInteger;
        if i0 != 0 goto label0;

        return 0;

     label0:
        b1 = 1;
        $r1 = r0.<java.math.BigInteger: int[] mag>;
        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $i4 = lengthof $r2;
        $i5 = $i4 - 1;
        i2 = $r1[$i5];
        if i0 >= 0 goto label2;

        i0 = neg i0;
        i3 = i2 & 7;
        if i3 == 3 goto label1;

        if i3 != 7 goto label2;

     label1:
        b1 = neg b1;

     label2:
        $i6 = i0 & 3;
        if $i6 != 0 goto label3;

        i0 = i0 >> 2;
        goto label2;

     label3:
        $i7 = i0 & 1;
        if $i7 != 0 goto label4;

        i0 = i0 >> 1;
        $i8 = i2 >> 1;
        $i9 = i2 ^ $i8;
        $i10 = $i9 & 2;
        if $i10 == 0 goto label4;

        b1 = neg b1;

     label4:
        if i0 != 1 goto label5;

        return b1;

     label5:
        $i11 = i0 & i2;
        $i12 = $i11 & 2;
        if $i12 == 0 goto label6;

        b1 = neg b1;

     label6:
        $l13 = (long) i0;
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l13);
        $r4 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);
        i14 = virtualinvoke $r4.<java.math.BigInteger: int intValue()>();

     label7:
        if i14 == 0 goto label14;

     label8:
        $i15 = i14 & 3;
        if $i15 != 0 goto label9;

        i14 = i14 >> 2;
        goto label8;

     label9:
        $i16 = i14 & 1;
        if $i16 != 0 goto label10;

        i14 = i14 >> 1;
        $i17 = i0 >> 1;
        $i18 = i0 ^ $i17;
        $i19 = $i18 & 2;
        if $i19 == 0 goto label10;

        b1 = neg b1;

     label10:
        if i14 != 1 goto label11;

        return b1;

     label11:
        $z0 = <java.math.BigInteger: boolean $assertionsDisabled>;
        if $z0 != 0 goto label12;

        if i14 < i0 goto label12;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label12:
        i20 = i14;
        i21 = i0;
        i0 = i20;
        $i22 = i21 & i0;
        $i23 = $i22 & 2;
        if $i23 == 0 goto label13;

        b1 = neg b1;

     label13:
        i14 = i21 % i0;
        goto label7;

     label14:
        return 0;
    }

    private static java.math.BigInteger lucasLehmerSequence(int, java.math.BigInteger, java.math.BigInteger)
    {
        int i0, i1, $i3;
        java.math.BigInteger r0, r1, r2, r3, r4, r5, r6, $r7, $r8, $r9, $r10, $r11, r12, $r13, r14, r15, $r16, $r17, r18, r19;
        long $l2;
        boolean $z0, $z1, $z2, $z3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.math.BigInteger;
        r1 := @parameter2: java.math.BigInteger;
        $l2 = (long) i0;
        r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);
        r3 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r4 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $i3 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        i1 = $i3 - 2;

     label0:
        if i1 < 0 goto label5;

        $r7 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);
        r5 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r1);
        $r8 = specialinvoke r4.<java.math.BigInteger: java.math.BigInteger square()>();
        $r9 = specialinvoke r3.<java.math.BigInteger: java.math.BigInteger square()>();
        $r10 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);
        $r11 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);
        r6 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r1);
        $z0 = virtualinvoke r6.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z0 == 0 goto label1;

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r1);

     label1:
        r12 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);
        r3 = r5;
        r4 = r12;
        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i1);
        if $z1 == 0 goto label4;

        $r13 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r4);
        r14 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r1);
        $z2 = virtualinvoke r14.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z2 == 0 goto label2;

        r14 = virtualinvoke r14.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r1);

     label2:
        r15 = virtualinvoke r14.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);
        $r16 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);
        $r17 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r16);
        r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r1);
        $z3 = virtualinvoke r18.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z3 == 0 goto label3;

        r18 = virtualinvoke r18.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r1);

     label3:
        r19 = virtualinvoke r18.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);
        r3 = r15;
        r4 = r19;

     label4:
        i1 = i1 + -1;
        goto label0;

     label5:
        return r3;
    }

    private static java.util.Random getSecureRandom()
    {
        java.util.Random $r0, $r2;
        java.security.SecureRandom $r1;

        $r0 = <java.math.BigInteger: java.util.Random staticRandom>;
        if $r0 != null goto label0;

        $r1 = new java.security.SecureRandom;
        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();
        <java.math.BigInteger: java.util.Random staticRandom> = $r1;

     label0:
        $r2 = <java.math.BigInteger: java.util.Random staticRandom>;
        return $r2;
    }

    private boolean passesMillerRabin(int, java.util.Random)
    {
        java.math.BigInteger r0, $r2, r3, r4, r5, r6, r7, $r8, $r9, $r10, $r11, $r12;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.util.Random r1;
        boolean $z0, $z1, $z2;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Random;
        $r2 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);
        r4 = r3;
        i1 = virtualinvoke r4.<java.math.BigInteger: int getLowestSetBit()>();
        r7 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i1);
        if r1 != null goto label0;

        r1 = staticinvoke <java.math.BigInteger: java.util.Random getSecureRandom()>();

     label0:
        i2 = 0;

     label1:
        if i2 >= i0 goto label9;

     label2:
        $r8 = new java.math.BigInteger;
        $i4 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        specialinvoke $r8.<java.math.BigInteger: void <init>(int,java.util.Random)>($i4, r1);
        r5 = $r8;
        $r9 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $i5 = virtualinvoke r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);
        if $i5 <= 0 goto label2;

        $i6 = virtualinvoke r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r0);
        if $i6 >= 0 goto label2;

        i3 = 0;
        r6 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r7, r0);

     label3:
        if i3 != 0 goto label4;

        $r10 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z0 = virtualinvoke r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);
        if $z0 != 0 goto label8;

     label4:
        $z1 = virtualinvoke r6.<java.math.BigInteger: boolean equals(java.lang.Object)>(r3);
        if $z1 != 0 goto label8;

        if i3 <= 0 goto label5;

        $r11 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z2 = virtualinvoke r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);
        if $z2 != 0 goto label6;

     label5:
        i3 = i3 + 1;
        if i3 != i1 goto label7;

     label6:
        return 0;

     label7:
        $r12 = <java.math.BigInteger: java.math.BigInteger TWO>;
        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r12, r0);
        goto label3;

     label8:
        i2 = i2 + 1;
        goto label1;

     label9:
        return 1;
    }

    void <init>(int[], int)
    {
        java.math.BigInteger r0;
        int[] r1;
        int i0, $i1, $i2;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $i1 = lengthof r1;
        if $i1 != 0 goto label0;

        $i2 = 0;
        goto label1;

     label0:
        $i2 = i0;

     label1:
        r0.<java.math.BigInteger: int signum> = $i2;
        r0.<java.math.BigInteger: int[] mag> = r1;
        return;
    }

    private void <init>(byte[], int)
    {
        java.math.BigInteger r0;
        byte[] r1;
        int i0, $i1, $i2;
        int[] $r3;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $i1 = lengthof r1;
        if $i1 != 0 goto label0;

        $i2 = 0;
        goto label1;

     label0:
        $i2 = i0;

     label1:
        r0.<java.math.BigInteger: int signum> = $i2;
        $r3 = staticinvoke <java.math.BigInteger: int[] stripLeadingZeroBytes(byte[])>(r1);
        r0.<java.math.BigInteger: int[] mag> = $r3;
        return;
    }

    public static java.math.BigInteger valueOf(long)
    {
        long l0, $l7;
        byte $b1, $b2, $b3, $b5, $b6;
        java.math.BigInteger $r0, $r2, $r4, $r5;
        java.math.BigInteger[] $r1, $r3;
        int $i4, $i8;

        l0 := @parameter0: long;
        $b1 = l0 cmp 0L;
        if $b1 != 0 goto label0;

        $r0 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r0;

     label0:
        $b2 = l0 cmp 0L;
        if $b2 <= 0 goto label1;

        $b3 = l0 cmp 16L;
        if $b3 > 0 goto label1;

        $r1 = <java.math.BigInteger: java.math.BigInteger[] posConst>;
        $i4 = (int) l0;
        $r2 = $r1[$i4];
        return $r2;

     label1:
        $b5 = l0 cmp 0L;
        if $b5 >= 0 goto label2;

        $b6 = l0 cmp -16L;
        if $b6 < 0 goto label2;

        $r3 = <java.math.BigInteger: java.math.BigInteger[] negConst>;
        $l7 = neg l0;
        $i8 = (int) $l7;
        $r4 = $r3[$i8];
        return $r4;

     label2:
        $r5 = new java.math.BigInteger;
        specialinvoke $r5.<java.math.BigInteger: void <init>(long)>(l0);
        return $r5;
    }

    private void <init>(long)
    {
        java.math.BigInteger r0;
        long l0, $l3;
        int i1, $i4, $i5;
        byte $b2;
        int[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.math.BigInteger;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $b2 = l0 cmp 0L;
        if $b2 >= 0 goto label0;

        l0 = neg l0;
        r0.<java.math.BigInteger: int signum> = -1;
        goto label1;

     label0:
        r0.<java.math.BigInteger: int signum> = 1;

     label1:
        $l3 = l0 >>> 32;
        i1 = (int) $l3;
        if i1 != 0 goto label2;

        $r1 = newarray (int)[1];
        r0.<java.math.BigInteger: int[] mag> = $r1;
        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $i4 = (int) l0;
        $r2[0] = $i4;
        goto label3;

     label2:
        $r3 = newarray (int)[2];
        r0.<java.math.BigInteger: int[] mag> = $r3;
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $r4[0] = i1;
        $r5 = r0.<java.math.BigInteger: int[] mag>;
        $i5 = (int) l0;
        $r5[1] = $i5;

     label3:
        return;
    }

    private static java.math.BigInteger valueOf(int[])
    {
        int[] r0;
        int $i0;
        java.math.BigInteger $r1;

        r0 := @parameter0: int[];
        $i0 = r0[0];
        if $i0 <= 0 goto label0;

        $r1 = new java.math.BigInteger;
        specialinvoke $r1.<java.math.BigInteger: void <init>(int[],int)>(r0, 1);
        goto label1;

     label0:
        $r1 = new java.math.BigInteger;
        specialinvoke $r1.<java.math.BigInteger: void <init>(int[])>(r0);

     label1:
        return $r1;
    }

    public java.math.BigInteger add(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r7, $r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] r2, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, r13;
        byte $b7;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i1 = r1.<java.math.BigInteger: int signum>;
        if $i1 != 0 goto label0;

        return r0;

     label0:
        $i2 = r0.<java.math.BigInteger: int signum>;
        if $i2 != 0 goto label1;

        return r1;

     label1:
        $i3 = r1.<java.math.BigInteger: int signum>;
        $i4 = r0.<java.math.BigInteger: int signum>;
        if $i3 != $i4 goto label2;

        $r3 = new java.math.BigInteger;
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $r5 = r1.<java.math.BigInteger: int[] mag>;
        $r6 = staticinvoke <java.math.BigInteger: int[] add(int[],int[])>($r4, $r5);
        $i5 = r0.<java.math.BigInteger: int signum>;
        specialinvoke $r3.<java.math.BigInteger: void <init>(int[],int)>($r6, $i5);
        return $r3;

     label2:
        i0 = virtualinvoke r0.<java.math.BigInteger: int compareMagnitude(java.math.BigInteger)>(r1);
        if i0 != 0 goto label3;

        $r7 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r7;

     label3:
        if i0 <= 0 goto label4;

        $r8 = r0.<java.math.BigInteger: int[] mag>;
        $r9 = r1.<java.math.BigInteger: int[] mag>;
        $r10 = staticinvoke <java.math.BigInteger: int[] subtract(int[],int[])>($r8, $r9);
        goto label5;

     label4:
        $r11 = r1.<java.math.BigInteger: int[] mag>;
        $r12 = r0.<java.math.BigInteger: int[] mag>;
        $r10 = staticinvoke <java.math.BigInteger: int[] subtract(int[],int[])>($r11, $r12);

     label5:
        r2 = $r10;
        r13 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r2);
        $r14 = new java.math.BigInteger;
        $i6 = r0.<java.math.BigInteger: int signum>;
        if i0 != $i6 goto label6;

        $b7 = 1;
        goto label7;

     label6:
        $b7 = -1;

     label7:
        specialinvoke $r14.<java.math.BigInteger: void <init>(int[],int)>(r13, $b7);
        return $r14;
    }

    private static int[] add(int[], int[])
    {
        int[] r0, r1, r2, r3, r4;
        int i0, $i2, $i3, i4, $i5, $i8, $i13, $i16, $i17, $i18, $i19, $i20, $i21;
        long l1, $l6, $l7, $l9, $l10, $l11, $l12, $l14;
        boolean z0, $z1, $z2;
        byte $b15;

        r0 := @parameter0: int[];
        r1 := @parameter1: int[];
        $i2 = lengthof r0;
        $i3 = lengthof r1;
        if $i2 >= $i3 goto label0;

        r2 = r0;
        r0 = r1;
        r1 = r2;

     label0:
        i4 = lengthof r0;
        i0 = lengthof r1;
        r3 = newarray (int)[i4];
        l1 = 0L;

     label1:
        if i0 <= 0 goto label2;

        i4 = i4 + -1;
        $i5 = r0[i4];
        $l6 = (long) $i5;
        $l7 = $l6 & 4294967295L;
        i0 = i0 + -1;
        $i8 = r1[i0];
        $l9 = (long) $i8;
        $l10 = $l9 & 4294967295L;
        $l11 = $l7 + $l10;
        $l12 = l1 >>> 32;
        l1 = $l11 + $l12;
        $i13 = (int) l1;
        r3[i4] = $i13;
        goto label1;

     label2:
        $l14 = l1 >>> 32;
        $b15 = $l14 cmp 0L;
        if $b15 == 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

     label5:
        if i4 <= 0 goto label8;

        if z0 == 0 goto label8;

        i4 = i4 + -1;
        $i16 = r0[i4];
        $i17 = $i16 + 1;
        r3[i4] = $i17;
        if $i17 != 0 goto label6;

        $z2 = 1;
        goto label7;

     label6:
        $z2 = 0;

     label7:
        z0 = $z2;
        goto label5;

     label8:
        if i4 <= 0 goto label9;

        i4 = i4 + -1;
        $i18 = r0[i4];
        r3[i4] = $i18;
        goto label8;

     label9:
        if z0 == 0 goto label10;

        $i19 = lengthof r3;
        $i20 = $i19 + 1;
        r4 = newarray (int)[$i20];
        $i21 = lengthof r3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 1, $i21);
        r4[0] = 1;
        return r4;

     label10:
        return r3;
    }

    public java.math.BigInteger subtract(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r4, $r8, $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] r2, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, r14;
        byte $b7;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i1 = r1.<java.math.BigInteger: int signum>;
        if $i1 != 0 goto label0;

        return r0;

     label0:
        $i2 = r0.<java.math.BigInteger: int signum>;
        if $i2 != 0 goto label1;

        $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger negate()>();
        return $r3;

     label1:
        $i3 = r1.<java.math.BigInteger: int signum>;
        $i4 = r0.<java.math.BigInteger: int signum>;
        if $i3 == $i4 goto label2;

        $r4 = new java.math.BigInteger;
        $r5 = r0.<java.math.BigInteger: int[] mag>;
        $r6 = r1.<java.math.BigInteger: int[] mag>;
        $r7 = staticinvoke <java.math.BigInteger: int[] add(int[],int[])>($r5, $r6);
        $i5 = r0.<java.math.BigInteger: int signum>;
        specialinvoke $r4.<java.math.BigInteger: void <init>(int[],int)>($r7, $i5);
        return $r4;

     label2:
        i0 = virtualinvoke r0.<java.math.BigInteger: int compareMagnitude(java.math.BigInteger)>(r1);
        if i0 != 0 goto label3;

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r8;

     label3:
        if i0 <= 0 goto label4;

        $r9 = r0.<java.math.BigInteger: int[] mag>;
        $r10 = r1.<java.math.BigInteger: int[] mag>;
        $r11 = staticinvoke <java.math.BigInteger: int[] subtract(int[],int[])>($r9, $r10);
        goto label5;

     label4:
        $r12 = r1.<java.math.BigInteger: int[] mag>;
        $r13 = r0.<java.math.BigInteger: int[] mag>;
        $r11 = staticinvoke <java.math.BigInteger: int[] subtract(int[],int[])>($r12, $r13);

     label5:
        r2 = $r11;
        r14 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r2);
        $r15 = new java.math.BigInteger;
        $i6 = r0.<java.math.BigInteger: int signum>;
        if i0 != $i6 goto label6;

        $b7 = 1;
        goto label7;

     label6:
        $b7 = -1;

     label7:
        specialinvoke $r15.<java.math.BigInteger: void <init>(int[],int)>(r14, $b7);
        return $r15;
    }

    private static int[] subtract(int[], int[])
    {
        int[] r0, r1, r2;
        int i0, i1, $i3, $i6, $i11, $i14, $i15, $i16;
        long l2, $l4, $l5, $l7, $l8, $l9, $l10, $l12;
        boolean z0, $z1, $z2;
        byte $b13;

        r0 := @parameter0: int[];
        r1 := @parameter1: int[];
        i0 = lengthof r0;
        r2 = newarray (int)[i0];
        i1 = lengthof r1;
        l2 = 0L;

     label0:
        if i1 <= 0 goto label1;

        i0 = i0 + -1;
        $i3 = r0[i0];
        $l4 = (long) $i3;
        $l5 = $l4 & 4294967295L;
        i1 = i1 + -1;
        $i6 = r1[i1];
        $l7 = (long) $i6;
        $l8 = $l7 & 4294967295L;
        $l9 = $l5 - $l8;
        $l10 = l2 >> 32;
        l2 = $l9 + $l10;
        $i11 = (int) l2;
        r2[i0] = $i11;
        goto label0;

     label1:
        $l12 = l2 >> 32;
        $b13 = $l12 cmp 0L;
        if $b13 == 0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

     label4:
        if i0 <= 0 goto label7;

        if z0 == 0 goto label7;

        i0 = i0 + -1;
        $i14 = r0[i0];
        $i15 = $i14 - 1;
        r2[i0] = $i15;
        if $i15 != -1 goto label5;

        $z2 = 1;
        goto label6;

     label5:
        $z2 = 0;

     label6:
        z0 = $z2;
        goto label4;

     label7:
        if i0 <= 0 goto label8;

        i0 = i0 + -1;
        $i16 = r0[i0];
        r2[i0] = $i16;
        goto label7;

     label8:
        return r2;
    }

    public java.math.BigInteger multiply(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r9;
        int[] r2, $r4, $r5, $r6, $r7, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte $b6;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i0 = r1.<java.math.BigInteger: int signum>;
        if $i0 == 0 goto label0;

        $i1 = r0.<java.math.BigInteger: int signum>;
        if $i1 != 0 goto label1;

     label0:
        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r3;

     label1:
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $r5 = r0.<java.math.BigInteger: int[] mag>;
        $i2 = lengthof $r5;
        $r6 = r1.<java.math.BigInteger: int[] mag>;
        $r7 = r1.<java.math.BigInteger: int[] mag>;
        $i3 = lengthof $r7;
        r2 = specialinvoke r0.<java.math.BigInteger: int[] multiplyToLen(int[],int,int[],int,int[])>($r4, $i2, $r6, $i3, null);
        r8 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r2);
        $r9 = new java.math.BigInteger;
        $i4 = r0.<java.math.BigInteger: int signum>;
        $i5 = r1.<java.math.BigInteger: int signum>;
        if $i4 != $i5 goto label2;

        $b6 = 1;
        goto label3;

     label2:
        $b6 = -1;

     label3:
        specialinvoke $r9.<java.math.BigInteger: void <init>(int[],int)>(r8, $b6);
        return $r9;
    }

    java.math.BigInteger multiply(long)
    {
        java.math.BigInteger r0, $r3, $r4, $r5, $r8;
        long l0, l2, l3, l5, l8, $l21, $l22, $l23, $l32, $l33, $l34, $l36, $l37, $l38, l39;
        int i1, i4, i6, i7, $i10, $i13, $i14, $i17, $i18, $i19, $i20, $i24, $i25, $i26, $i28, i29, i30, $i31, $i35, $i40, $i41, $i42, $i44;
        int[] r1, r2, $r6, $r7;
        byte $b9, $b11, $b12, $b15, $b16, $b27, $b43;

        r0 := @this: java.math.BigInteger;
        l0 := @parameter0: long;
        $b9 = l0 cmp 0L;
        if $b9 == 0 goto label0;

        $i10 = r0.<java.math.BigInteger: int signum>;
        if $i10 != 0 goto label1;

     label0:
        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r3;

     label1:
        $b11 = l0 cmp -9223372036854775808L;
        if $b11 != 0 goto label2;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);
        $r5 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);
        return $r5;

     label2:
        $b12 = l0 cmp 0L;
        if $b12 <= 0 goto label3;

        $i13 = r0.<java.math.BigInteger: int signum>;
        goto label4;

     label3:
        $i14 = r0.<java.math.BigInteger: int signum>;
        $i13 = neg $i14;

     label4:
        i1 = $i13;
        $b15 = l0 cmp 0L;
        if $b15 >= 0 goto label5;

        l0 = neg l0;

     label5:
        l2 = l0 >>> 32;
        l3 = l0 & 4294967295L;
        $r6 = r0.<java.math.BigInteger: int[] mag>;
        i4 = lengthof $r6;
        r1 = r0.<java.math.BigInteger: int[] mag>;
        $b16 = l2 cmp 0L;
        if $b16 != 0 goto label6;

        $i17 = i4 + 1;
        $r7 = newarray (int)[$i17];
        goto label7;

     label6:
        $i18 = i4 + 2;
        $r7 = newarray (int)[$i18];

     label7:
        r2 = $r7;
        l5 = 0L;
        $i19 = lengthof r2;
        i6 = $i19 - 1;
        i7 = i4 - 1;

     label8:
        if i7 < 0 goto label9;

        $i20 = r1[i7];
        $l21 = (long) $i20;
        $l22 = $l21 & 4294967295L;
        $l23 = $l22 * l3;
        l8 = $l23 + l5;
        $i24 = i6;
        i6 = i6 + -1;
        $i25 = (int) l8;
        r2[$i24] = $i25;
        l5 = l8 >>> 32;
        i7 = i7 + -1;
        goto label8;

     label9:
        $i26 = (int) l5;
        r2[i6] = $i26;
        $b27 = l2 cmp 0L;
        if $b27 == 0 goto label12;

        l5 = 0L;
        $i28 = lengthof r2;
        i29 = $i28 - 2;
        i30 = i4 - 1;

     label10:
        if i30 < 0 goto label11;

        $i31 = r1[i30];
        $l32 = (long) $i31;
        $l33 = $l32 & 4294967295L;
        $l34 = $l33 * l2;
        $i35 = r2[i29];
        $l36 = (long) $i35;
        $l37 = $l36 & 4294967295L;
        $l38 = $l34 + $l37;
        l39 = $l38 + l5;
        $i40 = i29;
        i29 = i29 + -1;
        $i41 = (int) l39;
        r2[$i40] = $i41;
        l5 = l39 >>> 32;
        i30 = i30 + -1;
        goto label10;

     label11:
        $i42 = (int) l5;
        r2[0] = $i42;

     label12:
        $b43 = l5 cmp 0L;
        if $b43 != 0 goto label13;

        $i44 = lengthof r2;
        r2 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r2, 1, $i44);

     label13:
        $r8 = new java.math.BigInteger;
        specialinvoke $r8.<java.math.BigInteger: void <init>(int[],int)>(r2, i1);
        return $r8;
    }

    private int[] multiplyToLen(int[], int, int[], int, int[])
    {
        java.math.BigInteger r0;
        int[] r1, r2, r3;
        int i0, i1, i2, i3, i5, i6, $i9, $i10, $i11, $i12, $i13, $i16, $i20, $i21, i22, i24, $i25, i26, $i27, $i30, $i34, $i38, $i39;
        long l4, l7, l8, $l14, $l15, $l17, $l18, $l19, l23, $l28, $l29, $l31, $l32, $l33, $l35, $l36, $l37;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        r2 := @parameter2: int[];
        i1 := @parameter3: int;
        r3 := @parameter4: int[];
        i2 = i0 - 1;
        i3 = i1 - 1;
        if r3 == null goto label0;

        $i9 = lengthof r3;
        $i10 = i0 + i1;
        if $i9 >= $i10 goto label1;

     label0:
        $i11 = i0 + i1;
        r3 = newarray (int)[$i11];

     label1:
        l4 = 0L;
        i5 = i3;
        $i12 = i3 + 1;
        i6 = $i12 + i2;

     label2:
        if i5 < 0 goto label3;

        $i13 = r2[i5];
        $l14 = (long) $i13;
        $l15 = $l14 & 4294967295L;
        $i16 = r1[i2];
        $l17 = (long) $i16;
        $l18 = $l17 & 4294967295L;
        $l19 = $l15 * $l18;
        l7 = $l19 + l4;
        $i20 = (int) l7;
        r3[i6] = $i20;
        l4 = l7 >>> 32;
        i5 = i5 + -1;
        i6 = i6 + -1;
        goto label2;

     label3:
        $i21 = (int) l4;
        r3[i2] = $i21;
        i22 = i2 - 1;

     label4:
        if i22 < 0 goto label7;

        l23 = 0L;
        i24 = i3;
        $i25 = i3 + 1;
        i26 = $i25 + i22;

     label5:
        if i24 < 0 goto label6;

        $i27 = r2[i24];
        $l28 = (long) $i27;
        $l29 = $l28 & 4294967295L;
        $i30 = r1[i22];
        $l31 = (long) $i30;
        $l32 = $l31 & 4294967295L;
        $l33 = $l29 * $l32;
        $i34 = r3[i26];
        $l35 = (long) $i34;
        $l36 = $l35 & 4294967295L;
        $l37 = $l33 + $l36;
        l8 = $l37 + l23;
        $i38 = (int) l8;
        r3[i26] = $i38;
        l23 = l8 >>> 32;
        i24 = i24 + -1;
        i26 = i26 + -1;
        goto label5;

     label6:
        $i39 = (int) l23;
        r3[i22] = $i39;
        i22 = i22 + -1;
        goto label4;

     label7:
        return r3;
    }

    private java.math.BigInteger square()
    {
        java.math.BigInteger r0, $r2, $r5;
        int[] r1, $r3, $r4, $r6;
        int $i0, $i1;

        r0 := @this: java.math.BigInteger;
        $i0 = r0.<java.math.BigInteger: int signum>;
        if $i0 != 0 goto label0;

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r2;

     label0:
        $r3 = r0.<java.math.BigInteger: int[] mag>;
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $i1 = lengthof $r4;
        r1 = staticinvoke <java.math.BigInteger: int[] squareToLen(int[],int,int[])>($r3, $i1, null);
        $r5 = new java.math.BigInteger;
        $r6 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r1);
        specialinvoke $r5.<java.math.BigInteger: void <init>(int[],int)>($r6, 1);
        return $r5;
    }

    private static final int[] squareToLen(int[], int, int[])
    {
        int[] r0, r1;
        int i0, i1, i2, i3, i4, $i7, $i8, i10, $i11, $i13, $i14, $i16, i17, i18, $i19, i20, $i21, i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30;
        long l5, l6, $l9, $l12, $l15;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        r1 := @parameter2: int[];
        i1 = i0 << 1;
        if r1 == null goto label0;

        $i7 = lengthof r1;
        if $i7 >= i1 goto label1;

     label0:
        r1 = newarray (int)[i1];

     label1:
        i2 = 0;
        i3 = 0;
        i4 = 0;

     label2:
        if i3 >= i0 goto label3;

        $i8 = r0[i3];
        $l9 = (long) $i8;
        l5 = $l9 & 4294967295L;
        l6 = l5 * l5;
        i10 = i4 + 1;
        $i11 = i2 << 31;
        $l12 = l6 >>> 33;
        $i13 = (int) $l12;
        $i14 = $i11 | $i13;
        r1[i4] = $i14;
        i4 = i10 + 1;
        $l15 = l6 >>> 1;
        $i16 = (int) $l15;
        r1[i10] = $i16;
        i2 = (int) l6;
        i3 = i3 + 1;
        goto label2;

     label3:
        i17 = i0;
        i18 = 1;

     label4:
        if i17 <= 0 goto label5;

        $i19 = i17 - 1;
        i20 = r0[$i19];
        $i21 = i17 - 1;
        i22 = staticinvoke <java.math.BigInteger: int mulAdd(int[],int[],int,int,int)>(r1, r0, i18, $i21, i20);
        $i23 = i18 - 1;
        staticinvoke <java.math.BigInteger: int addOne(int[],int,int,int)>(r1, $i23, i17, i22);
        i17 = i17 + -1;
        i18 = i18 + 2;
        goto label4;

     label5:
        staticinvoke <java.math.BigInteger: void primitiveLeftShift(int[],int,int)>(r1, i1, 1);
        $i25 = i1 - 1;
        $i26 = r1[$i25];
        $i27 = i0 - 1;
        $i28 = r0[$i27];
        $i29 = $i28 & 1;
        $i30 = $i26 | $i29;
        r1[$i25] = $i30;
        return r1;
    }

    public java.math.BigInteger divide(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r12;
        java.math.MutableBigInteger $r2, r3, r4, r5, $r6, $r8;
        int[] $r7, $r9;
        int $i0, $i1;
        byte $b2;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $r2 = new java.math.MutableBigInteger;
        specialinvoke $r2.<java.math.MutableBigInteger: void <init>()>();
        r3 = $r2;
        $r6 = new java.math.MutableBigInteger;
        $r7 = r0.<java.math.BigInteger: int[] mag>;
        specialinvoke $r6.<java.math.MutableBigInteger: void <init>(int[])>($r7);
        r4 = $r6;
        $r8 = new java.math.MutableBigInteger;
        $r9 = r1.<java.math.BigInteger: int[] mag>;
        specialinvoke $r8.<java.math.MutableBigInteger: void <init>(int[])>($r9);
        r5 = $r8;
        virtualinvoke r4.<java.math.MutableBigInteger: java.math.MutableBigInteger divide(java.math.MutableBigInteger,java.math.MutableBigInteger)>(r5, r3);
        $i0 = r0.<java.math.BigInteger: int signum>;
        $i1 = r1.<java.math.BigInteger: int signum>;
        if $i0 != $i1 goto label0;

        $b2 = 1;
        goto label1;

     label0:
        $b2 = -1;

     label1:
        $r12 = virtualinvoke r3.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>($b2);
        return $r12;
    }

    public java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r14, $r15;
        java.math.BigInteger[] r2;
        java.math.MutableBigInteger r3, r4, r5, r6, $r7, $r8, $r10;
        int[] $r9, $r11;
        byte $b0, $b3;
        int $i1, $i2, $i4;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        r2 = newarray (java.math.BigInteger)[2];
        $r7 = new java.math.MutableBigInteger;
        specialinvoke $r7.<java.math.MutableBigInteger: void <init>()>();
        r3 = $r7;
        $r8 = new java.math.MutableBigInteger;
        $r9 = r0.<java.math.BigInteger: int[] mag>;
        specialinvoke $r8.<java.math.MutableBigInteger: void <init>(int[])>($r9);
        r4 = $r8;
        $r10 = new java.math.MutableBigInteger;
        $r11 = r1.<java.math.BigInteger: int[] mag>;
        specialinvoke $r10.<java.math.MutableBigInteger: void <init>(int[])>($r11);
        r5 = $r10;
        r6 = virtualinvoke r4.<java.math.MutableBigInteger: java.math.MutableBigInteger divide(java.math.MutableBigInteger,java.math.MutableBigInteger)>(r5, r3);
        $b0 = 0;
        $i1 = r0.<java.math.BigInteger: int signum>;
        $i2 = r1.<java.math.BigInteger: int signum>;
        if $i1 != $i2 goto label0;

        $b3 = 1;
        goto label1;

     label0:
        $b3 = -1;

     label1:
        $r14 = virtualinvoke r3.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>($b3);
        r2[$b0] = $r14;
        $i4 = r0.<java.math.BigInteger: int signum>;
        $r15 = virtualinvoke r6.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>($i4);
        r2[1] = $r15;
        return r2;
    }

    public java.math.BigInteger remainder(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r11;
        java.math.MutableBigInteger $r2, r3, r4, r5, $r6, $r8, $r10;
        int[] $r7, $r9;
        int $i0;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $r2 = new java.math.MutableBigInteger;
        specialinvoke $r2.<java.math.MutableBigInteger: void <init>()>();
        r3 = $r2;
        $r6 = new java.math.MutableBigInteger;
        $r7 = r0.<java.math.BigInteger: int[] mag>;
        specialinvoke $r6.<java.math.MutableBigInteger: void <init>(int[])>($r7);
        r4 = $r6;
        $r8 = new java.math.MutableBigInteger;
        $r9 = r1.<java.math.BigInteger: int[] mag>;
        specialinvoke $r8.<java.math.MutableBigInteger: void <init>(int[])>($r9);
        r5 = $r8;
        $r10 = virtualinvoke r4.<java.math.MutableBigInteger: java.math.MutableBigInteger divide(java.math.MutableBigInteger,java.math.MutableBigInteger)>(r5, r3);
        $i0 = r0.<java.math.BigInteger: int signum>;
        $r11 = virtualinvoke $r10.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>($i0);
        return $r11;
    }

    public java.math.BigInteger pow(int)
    {
        java.math.BigInteger r0, $r4, $r8;
        int i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10;
        byte b1, $b5;
        int[] r1, r2, $r5, r6, r7;
        java.lang.ArithmeticException $r3;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r3 = new java.lang.ArithmeticException;
        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Negative exponent");
        throw $r3;

     label0:
        $i2 = r0.<java.math.BigInteger: int signum>;
        if $i2 != 0 goto label3;

        if i0 != 0 goto label1;

        $r4 = <java.math.BigInteger: java.math.BigInteger ONE>;
        goto label2;

     label1:
        $r4 = r0;

     label2:
        return $r4;

     label3:
        $i3 = r0.<java.math.BigInteger: int signum>;
        if $i3 >= 0 goto label4;

        $i4 = i0 & 1;
        if $i4 != 1 goto label4;

        $b5 = -1;
        goto label5;

     label4:
        $b5 = 1;

     label5:
        b1 = $b5;
        r1 = r0.<java.math.BigInteger: int[] mag>;
        $r5 = newarray (int)[1];
        $r5[0] = 1;
        r2 = $r5;

     label6:
        if i0 == 0 goto label8;

        $i6 = i0 & 1;
        if $i6 != 1 goto label7;

        $i7 = lengthof r2;
        $i8 = lengthof r1;
        r6 = specialinvoke r0.<java.math.BigInteger: int[] multiplyToLen(int[],int,int[],int,int[])>(r2, $i7, r1, $i8, null);
        r2 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r6);

     label7:
        $i9 = i0 >>> 1;
        i0 = $i9;
        if $i9 == 0 goto label6;

        $i10 = lengthof r1;
        r7 = staticinvoke <java.math.BigInteger: int[] squareToLen(int[],int,int[])>(r1, $i10, null);
        r1 = staticinvoke <java.math.BigInteger: int[] trustedStripLeadingZeroInts(int[])>(r7);
        goto label6;

     label8:
        $r8 = new java.math.BigInteger;
        specialinvoke $r8.<java.math.BigInteger: void <init>(int[],int)>(r2, b1);
        return $r8;
    }

    public java.math.BigInteger gcd(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r5, $r6, $r9;
        java.math.MutableBigInteger r2, r3, r4, $r7, $r8;
        int $i0, $i1;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i0 = r1.<java.math.BigInteger: int signum>;
        if $i0 != 0 goto label0;

        $r5 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger abs()>();
        return $r5;

     label0:
        $i1 = r0.<java.math.BigInteger: int signum>;
        if $i1 != 0 goto label1;

        $r6 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger abs()>();
        return $r6;

     label1:
        $r7 = new java.math.MutableBigInteger;
        specialinvoke $r7.<java.math.MutableBigInteger: void <init>(java.math.BigInteger)>(r0);
        r2 = $r7;
        $r8 = new java.math.MutableBigInteger;
        specialinvoke $r8.<java.math.MutableBigInteger: void <init>(java.math.BigInteger)>(r1);
        r3 = $r8;
        r4 = virtualinvoke r2.<java.math.MutableBigInteger: java.math.MutableBigInteger hybridGCD(java.math.MutableBigInteger)>(r3);
        $r9 = virtualinvoke r4.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>(1);
        return $r9;
    }

    static int bitLengthForInt(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);
        $i2 = 32 - $i1;
        return $i2;
    }

    private static int[] leftShift(int[], int, int)
    {
        int[] r0, r1, r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 >>> 5;
        i3 = i1 & 31;
        $i6 = r0[0];
        i4 = staticinvoke <java.math.BigInteger: int bitLengthForInt(int)>($i6);
        $i7 = 32 - i4;
        if i1 > $i7 goto label0;

        staticinvoke <java.math.BigInteger: void primitiveLeftShift(int[],int,int)>(r0, i0, i3);
        return r0;

     label0:
        $i8 = 32 - i4;
        if i3 > $i8 goto label3;

        $i9 = i2 + i0;
        r1 = newarray (int)[$i9];
        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $i10 = r0[i5];
        r1[i5] = $i10;
        i5 = i5 + 1;
        goto label1;

     label2:
        $i11 = lengthof r1;
        staticinvoke <java.math.BigInteger: void primitiveLeftShift(int[],int,int)>(r1, $i11, i3);
        return r1;

     label3:
        $i12 = i2 + i0;
        $i13 = $i12 + 1;
        r2 = newarray (int)[$i13];
        i14 = 0;

     label4:
        if i14 >= i0 goto label5;

        $i15 = r0[i14];
        r2[i14] = $i15;
        i14 = i14 + 1;
        goto label4;

     label5:
        $i16 = lengthof r2;
        $i17 = 32 - i3;
        staticinvoke <java.math.BigInteger: void primitiveRightShift(int[],int,int)>(r2, $i16, $i17);
        return r2;
    }

    static void primitiveRightShift(int[], int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i11, $i12;
        byte $b10;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = 32 - i1;
        i3 = i0 - 1;
        i4 = r0[i3];

     label0:
        if i3 <= 0 goto label1;

        i5 = i4;
        $i6 = i3 - 1;
        i4 = r0[$i6];
        $i7 = i4 << i2;
        $i8 = i5 >>> i1;
        $i9 = $i7 | $i8;
        r0[i3] = $i9;
        i3 = i3 + -1;
        goto label0;

     label1:
        $b10 = 0;
        $i11 = r0[$b10];
        $i12 = $i11 >>> i1;
        r0[$b10] = $i12;
        return;
    }

    static void primitiveLeftShift(int[], int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 == 0 goto label0;

        if i1 != 0 goto label1;

     label0:
        return;

     label1:
        i2 = 32 - i1;
        i3 = 0;
        i4 = r0[i3];
        $i7 = i3 + i0;
        i5 = $i7 - 1;

     label2:
        if i3 >= i5 goto label3;

        i6 = i4;
        $i8 = i3 + 1;
        i4 = r0[$i8];
        $i9 = i6 << i1;
        $i10 = i4 >>> i2;
        $i11 = $i9 | $i10;
        r0[i3] = $i11;
        i3 = i3 + 1;
        goto label2;

     label3:
        $i12 = i0 - 1;
        $i13 = r0[$i12];
        $i14 = $i13 << i1;
        r0[$i12] = $i14;
        return;
    }

    private static int bitLength(int[], int)
    {
        int[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        if i0 != 0 goto label0;

        return 0;

     label0:
        $i1 = i0 - 1;
        $i2 = $i1 << 5;
        $i3 = r0[0];
        $i4 = staticinvoke <java.math.BigInteger: int bitLengthForInt(int)>($i3);
        $i5 = $i2 + $i4;
        return $i5;
    }

    public java.math.BigInteger abs()
    {
        java.math.BigInteger r0, $r1;
        int $i0;

        r0 := @this: java.math.BigInteger;
        $i0 = r0.<java.math.BigInteger: int signum>;
        if $i0 < 0 goto label0;

        $r1 = r0;
        goto label1;

     label0:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger negate()>();

     label1:
        return $r1;
    }

    public java.math.BigInteger negate()
    {
        java.math.BigInteger r0, $r1;
        int[] $r2;
        int $i0, $i1;

        r0 := @this: java.math.BigInteger;
        $r1 = new java.math.BigInteger;
        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $i0 = r0.<java.math.BigInteger: int signum>;
        $i1 = neg $i0;
        specialinvoke $r1.<java.math.BigInteger: void <init>(int[],int)>($r2, $i1);
        return $r1;
    }

    public int signum()
    {
        java.math.BigInteger r0;
        int $i0;

        r0 := @this: java.math.BigInteger;
        $i0 = r0.<java.math.BigInteger: int signum>;
        return $i0;
    }

    public java.math.BigInteger mod(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, $r4;
        int $i0, $i1;
        java.lang.ArithmeticException $r3;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i0 = r1.<java.math.BigInteger: int signum>;
        if $i0 > 0 goto label0;

        $r3 = new java.lang.ArithmeticException;
        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("BigInteger: modulus not positive");
        throw $r3;

     label0:
        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>(r1);
        $i1 = r2.<java.math.BigInteger: int signum>;
        if $i1 < 0 goto label1;

        $r4 = r2;
        goto label2;

     label1:
        $r4 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r1);

     label2:
        return $r4;
    }

    public java.math.BigInteger modPow(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.ArithmeticException $r12;
        java.math.BigInteger[] $r20;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        r2 := @parameter1: java.math.BigInteger;
        $i1 = r2.<java.math.BigInteger: int signum>;
        if $i1 > 0 goto label0;

        $r12 = new java.lang.ArithmeticException;
        specialinvoke $r12.<java.lang.ArithmeticException: void <init>(java.lang.String)>("BigInteger: modulus not positive");
        throw $r12;

     label0:
        $i2 = r1.<java.math.BigInteger: int signum>;
        if $i2 != 0 goto label3;

        $r13 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z1 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r13);
        if $z1 == 0 goto label1;

        $r14 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        goto label2;

     label1:
        $r14 = <java.math.BigInteger: java.math.BigInteger ONE>;

     label2:
        return $r14;

     label3:
        $r15 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z2 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r15);
        if $z2 == 0 goto label6;

        $r16 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z3 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16);
        if $z3 == 0 goto label4;

        $r17 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        goto label5;

     label4:
        $r17 = <java.math.BigInteger: java.math.BigInteger ONE>;

     label5:
        return $r17;

     label6:
        $r18 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        $z4 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r18);
        if $z4 == 0 goto label7;

        $i3 = r1.<java.math.BigInteger: int signum>;
        if $i3 < 0 goto label7;

        $r19 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r19;

     label7:
        $r20 = <java.math.BigInteger: java.math.BigInteger[] negConst>;
        $r21 = $r20[1];
        $z5 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r21);
        if $z5 == 0 goto label10;

        $z6 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z6 != 0 goto label10;

        $r22 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z7 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r22);
        if $z7 == 0 goto label8;

        $r23 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        goto label9;

     label8:
        $r23 = <java.math.BigInteger: java.math.BigInteger ONE>;

     label9:
        return $r23;

     label10:
        $i4 = r1.<java.math.BigInteger: int signum>;
        if $i4 >= 0 goto label11;

        $z8 = 1;
        goto label12;

     label11:
        $z8 = 0;

     label12:
        z0 = $z8;
        if $z8 == 0 goto label13;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger negate()>();

     label13:
        $i5 = r0.<java.math.BigInteger: int signum>;
        if $i5 < 0 goto label14;

        $i6 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r2);
        if $i6 < 0 goto label15;

     label14:
        $r24 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);
        goto label16;

     label15:
        $r24 = r0;

     label16:
        r3 = $r24;
        $z9 = virtualinvoke r2.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z9 == 0 goto label17;

        r4 = specialinvoke r3.<java.math.BigInteger: java.math.BigInteger oddModPow(java.math.BigInteger,java.math.BigInteger)>(r1, r2);
        goto label23;

     label17:
        i0 = virtualinvoke r2.<java.math.BigInteger: int getLowestSetBit()>();
        r5 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i0);
        $r25 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r6 = virtualinvoke $r25.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i0);
        $i7 = r0.<java.math.BigInteger: int signum>;
        if $i7 < 0 goto label18;

        $i8 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r5);
        if $i8 < 0 goto label19;

     label18:
        $r26 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r5);
        goto label20;

     label19:
        $r26 = r0;

     label20:
        r7 = $r26;
        $r27 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z10 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r27);
        if $z10 == 0 goto label21;

        $r28 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        goto label22;

     label21:
        $r28 = specialinvoke r7.<java.math.BigInteger: java.math.BigInteger oddModPow(java.math.BigInteger,java.math.BigInteger)>(r1, r5);

     label22:
        r8 = $r28;
        r9 = specialinvoke r3.<java.math.BigInteger: java.math.BigInteger modPow2(java.math.BigInteger,int)>(r1, i0);
        r10 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r5);
        r11 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r6);
        $r29 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);
        $r30 = virtualinvoke $r29.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r10);
        $r31 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);
        $r32 = virtualinvoke $r31.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r11);
        $r33 = virtualinvoke $r30.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r32);
        r4 = virtualinvoke $r33.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

     label23:
        if z0 == 0 goto label24;

        $r34 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r2);
        goto label25;

     label24:
        $r34 = r4;

     label25:
        return $r34;
    }

    private java.math.BigInteger oddModPow(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, $r3, $r17, $r47;
        int[] r4, r5, r6, r8, r13, r14, r15, r16, $r18, $r20, $r21, $r25, $r26, $r27, $r28, $r29, $r30, r31, r32, r33, $r34, $r35, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i27, i28, $i29, $i30, $i31, i32, i33, $i34, $i35, $i36, i38, i39, i40, $i41, $i42, i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i52, $i53, i54, $i55;
        int[][] r7;
        java.math.MutableBigInteger r9, r10, r11, r12, $r22, $r23, $r24;
        boolean z0, $z1;
        java.lang.Object $r19, $r36;
        byte $b37, $b47;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        r2 := @parameter1: java.math.BigInteger;
        $r3 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);
        if $z1 == 0 goto label0;

        return r0;

     label0:
        $i11 = r0.<java.math.BigInteger: int signum>;
        if $i11 != 0 goto label1;

        $r17 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r17;

     label1:
        $r18 = r0.<java.math.BigInteger: int[] mag>;
        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.Object clone()>();
        r4 = (int[]) $r19;
        r5 = r1.<java.math.BigInteger: int[] mag>;
        r6 = r2.<java.math.BigInteger: int[] mag>;
        i0 = lengthof r6;
        i1 = 0;
        $i12 = lengthof r5;
        i2 = staticinvoke <java.math.BigInteger: int bitLength(int[],int)>(r5, $i12);
        if i2 != 17 goto label2;

        $i13 = r5[0];
        if $i13 == 65537 goto label3;

     label2:
        $r20 = <java.math.BigInteger: int[] bnExpModThreshTable>;
        $i14 = $r20[i1];
        if i2 <= $i14 goto label3;

        i1 = i1 + 1;
        goto label2;

     label3:
        i3 = 1 << i1;
        r7 = newarray (int[])[i3];
        i4 = 0;

     label4:
        if i4 >= i3 goto label5;

        $r21 = newarray (int)[i0];
        r7[i4] = $r21;
        i4 = i4 + 1;
        goto label4;

     label5:
        $i15 = i0 - 1;
        $i16 = r6[$i15];
        $i17 = staticinvoke <java.math.MutableBigInteger: int inverseMod32(int)>($i16);
        i18 = neg $i17;
        $i19 = lengthof r4;
        $i20 = i0 << 5;
        r8 = staticinvoke <java.math.BigInteger: int[] leftShift(int[],int,int)>(r4, $i19, $i20);
        $r22 = new java.math.MutableBigInteger;
        specialinvoke $r22.<java.math.MutableBigInteger: void <init>()>();
        r9 = $r22;
        $r23 = new java.math.MutableBigInteger;
        specialinvoke $r23.<java.math.MutableBigInteger: void <init>(int[])>(r8);
        r10 = $r23;
        $r24 = new java.math.MutableBigInteger;
        specialinvoke $r24.<java.math.MutableBigInteger: void <init>(int[])>(r6);
        r11 = $r24;
        r12 = virtualinvoke r10.<java.math.MutableBigInteger: java.math.MutableBigInteger divide(java.math.MutableBigInteger,java.math.MutableBigInteger)>(r11, r9);
        $r25 = virtualinvoke r12.<java.math.MutableBigInteger: int[] toIntArray()>();
        r7[0] = $r25;
        $r26 = r7[0];
        $i21 = lengthof $r26;
        if $i21 >= i0 goto label8;

        $r27 = r7[0];
        $i22 = lengthof $r27;
        i5 = i0 - $i22;
        r13 = newarray (int)[i0];
        i6 = 0;

     label6:
        $r28 = r7[0];
        $i23 = lengthof $r28;
        if i6 >= $i23 goto label7;

        $i24 = i6 + i5;
        $r29 = r7[0];
        $i25 = $r29[i6];
        r13[$i24] = $i25;
        i6 = i6 + 1;
        goto label6;

     label7:
        r7[0] = r13;

     label8:
        $r30 = r7[0];
        r31 = staticinvoke <java.math.BigInteger: int[] squareToLen(int[],int,int[])>($r30, i0, null);
        r32 = staticinvoke <java.math.BigInteger: int[] montReduce(int[],int[],int,int)>(r31, r6, i0, i18);
        r33 = newarray (int)[i0];
        i26 = 0;

     label9:
        if i26 >= i0 goto label10;

        $i27 = r32[i26];
        r33[i26] = $i27;
        i26 = i26 + 1;
        goto label9;

     label10:
        i28 = 1;

     label11:
        if i28 >= i3 goto label12;

        $i29 = i28 - 1;
        $r34 = r7[$i29];
        r14 = specialinvoke r0.<java.math.BigInteger: int[] multiplyToLen(int[],int,int[],int,int[])>(r33, i0, $r34, i0, null);
        $r35 = staticinvoke <java.math.BigInteger: int[] montReduce(int[],int[],int,int)>(r14, r6, i0, i18);
        r7[i28] = $r35;
        i28 = i28 + 1;
        goto label11;

     label12:
        $i30 = i2 - 1;
        $i31 = $i30 & 31;
        i32 = 1 << $i31;
        i33 = 0;
        i7 = lengthof r5;
        i8 = 0;
        i9 = 0;

     label13:
        if i9 > i1 goto label17;

        $i34 = i33 << 1;
        $i35 = r5[i8];
        $i36 = $i35 & i32;
        if $i36 == 0 goto label14;

        $b37 = 1;
        goto label15;

     label14:
        $b37 = 0;

     label15:
        i33 = $i34 | $b37;
        i32 = i32 >>> 1;
        if i32 != 0 goto label16;

        i8 = i8 + 1;
        i32 = -2147483648;
        i7 = i7 + -1;

     label16:
        i9 = i9 + 1;
        goto label13;

     label17:
        i38 = i2;
        i39 = i2 + -1;
        z0 = 1;
        i40 = i39 - i1;

     label18:
        $i41 = i33 & 1;
        if $i41 != 0 goto label19;

        i33 = i33 >>> 1;
        i40 = i40 + 1;
        goto label18;

     label19:
        $i42 = i33 >>> 1;
        r15 = r7[$i42];
        i43 = 0;
        if i40 != i39 goto label20;

        z0 = 0;

     label20:
        i39 = i39 + -1;
        i43 = i43 << 1;
        if i7 == 0 goto label23;

        $i44 = i43;
        $i45 = r5[i8];
        $i46 = $i45 & i32;
        if $i46 == 0 goto label21;

        $b47 = 1;
        goto label22;

     label21:
        $b47 = 0;

     label22:
        i43 = $i44 | $b47;
        i32 = i32 >>> 1;
        if i32 != 0 goto label23;

        i8 = i8 + 1;
        i32 = -2147483648;
        i7 = i7 + -1;

     label23:
        $i48 = i43 & i3;
        if $i48 == 0 goto label26;

        i40 = i39 - i1;

     label24:
        $i49 = i43 & 1;
        if $i49 != 0 goto label25;

        i43 = i43 >>> 1;
        i40 = i40 + 1;
        goto label24;

     label25:
        $i50 = i43 >>> 1;
        r15 = r7[$i50];
        i43 = 0;

     label26:
        if i39 != i40 goto label28;

        if z0 == 0 goto label27;

        $r36 = virtualinvoke r15.<java.lang.Object: java.lang.Object clone()>();
        r32 = (int[]) $r36;
        z0 = 0;
        goto label28;

     label27:
        r37 = r32;
        r38 = specialinvoke r0.<java.math.BigInteger: int[] multiplyToLen(int[],int,int[],int,int[])>(r37, i0, r15, i0, r8);
        r39 = staticinvoke <java.math.BigInteger: int[] montReduce(int[],int[],int,int)>(r38, r6, i0, i18);
        r40 = r39;
        r8 = r32;
        r32 = r40;

     label28:
        if i39 != 0 goto label29;

        goto label30;

     label29:
        if z0 != 0 goto label20;

        r41 = r32;
        r42 = staticinvoke <java.math.BigInteger: int[] squareToLen(int[],int,int[])>(r41, i0, r8);
        r43 = staticinvoke <java.math.BigInteger: int[] montReduce(int[],int[],int,int)>(r42, r6, i0, i18);
        r44 = r43;
        r8 = r32;
        r32 = r44;
        goto label20;

     label30:
        $i51 = 2 * i0;
        r16 = newarray (int)[$i51];
        i10 = 0;

     label31:
        if i10 >= i0 goto label32;

        $i52 = i10 + i0;
        $i53 = r32[i10];
        r16[$i52] = $i53;
        i10 = i10 + 1;
        goto label31;

     label32:
        r45 = staticinvoke <java.math.BigInteger: int[] montReduce(int[],int[],int,int)>(r16, r6, i0, i18);
        r46 = newarray (int)[i0];
        i54 = 0;

     label33:
        if i54 >= i0 goto label34;

        $i55 = r45[i54];
        r46[i54] = $i55;
        i54 = i54 + 1;
        goto label33;

     label34:
        $r47 = new java.math.BigInteger;
        specialinvoke $r47.<java.math.BigInteger: void <init>(int,int[])>(1, r46);
        return $r47;
    }

    private static int[] montReduce(int[], int[], int, int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @parameter0: int[];
        r1 := @parameter1: int[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 = 0;
        i3 = i0;
        i4 = 0;

     label0:
        $i7 = lengthof r0;
        $i8 = $i7 - 1;
        $i9 = $i8 - i4;
        i5 = r0[$i9];
        $i10 = i1 * i5;
        i6 = staticinvoke <java.math.BigInteger: int mulAdd(int[],int[],int,int,int)>(r0, r1, i4, i0, $i10);
        $i11 = staticinvoke <java.math.BigInteger: int addOne(int[],int,int,int)>(r0, i4, i0, i6);
        i2 = i2 + $i11;
        i4 = i4 + 1;
        i3 = i3 + -1;
        if i3 > 0 goto label0;

     label1:
        if i2 <= 0 goto label2;

        $i12 = staticinvoke <java.math.BigInteger: int subN(int[],int[],int)>(r0, r1, i0);
        i2 = i2 + $i12;
        goto label1;

     label2:
        $i13 = staticinvoke <java.math.BigInteger: int intArrayCmpToLen(int[],int[],int)>(r0, r1, i0);
        if $i13 < 0 goto label3;

        staticinvoke <java.math.BigInteger: int subN(int[],int[],int)>(r0, r1, i0);
        goto label2;

     label3:
        return r0;
    }

    private static int intArrayCmpToLen(int[], int[], int)
    {
        int[] r0, r1;
        int i0, i1, $i4, $i6;
        long l2, l3, $l5, $l7;
        byte $b8, $b9;

        r0 := @parameter0: int[];
        r1 := @parameter1: int[];
        i0 := @parameter2: int;
        i1 = 0;

     label0:
        if i1 >= i0 goto label3;

        $i4 = r0[i1];
        $l5 = (long) $i4;
        l2 = $l5 & 4294967295L;
        $i6 = r1[i1];
        $l7 = (long) $i6;
        l3 = $l7 & 4294967295L;
        $b8 = l2 cmp l3;
        if $b8 >= 0 goto label1;

        return -1;

     label1:
        $b9 = l2 cmp l3;
        if $b9 <= 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        return 0;
    }

    private static int subN(int[], int[], int)
    {
        int[] r0, r1;
        int i0, $i2, $i5, $i10, $i12;
        long l1, $l3, $l4, $l6, $l7, $l8, $l9, $l11;

        r0 := @parameter0: int[];
        r1 := @parameter1: int[];
        i0 := @parameter2: int;
        l1 = 0L;

     label0:
        i0 = i0 + -1;
        if i0 < 0 goto label1;

        $i2 = r0[i0];
        $l3 = (long) $i2;
        $l4 = $l3 & 4294967295L;
        $i5 = r1[i0];
        $l6 = (long) $i5;
        $l7 = $l6 & 4294967295L;
        $l8 = $l4 - $l7;
        $l9 = l1 >> 32;
        l1 = $l8 + $l9;
        $i10 = (int) l1;
        r0[i0] = $i10;
        goto label0;

     label1:
        $l11 = l1 >> 32;
        $i12 = (int) $l11;
        return $i12;
    }

    static int mulAdd(int[], int[], int, int, int)
    {
        int[] r0, r1;
        int i0, i1, i2, i5, $i8, $i9, i10, $i11, $i15, $i19, $i20, $i21;
        long l3, l4, l6, $l7, $l12, $l13, $l14, $l16, $l17, $l18;

        r0 := @parameter0: int[];
        r1 := @parameter1: int[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        $l7 = (long) i2;
        l3 = $l7 & 4294967295L;
        l4 = 0L;
        $i8 = lengthof r0;
        $i9 = $i8 - i0;
        i10 = $i9 - 1;
        i5 = i1 - 1;

     label0:
        if i5 < 0 goto label1;

        $i11 = r1[i5];
        $l12 = (long) $i11;
        $l13 = $l12 & 4294967295L;
        $l14 = $l13 * l3;
        $i15 = r0[i10];
        $l16 = (long) $i15;
        $l17 = $l16 & 4294967295L;
        $l18 = $l14 + $l17;
        l6 = $l18 + l4;
        $i19 = i10;
        i10 = i10 + -1;
        $i20 = (int) l6;
        r0[$i19] = $i20;
        l4 = l6 >>> 32;
        i5 = i5 + -1;
        goto label0;

     label1:
        $i21 = (int) l4;
        return $i21;
    }

    static int addOne(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, $i4, $i5, $i6, i7, $i8, $i13, $i17, $i18, $i19;
        long l3, $l9, $l10, $l11, $l12, $l14;
        byte $b15;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $i4 = lengthof r0;
        $i5 = $i4 - 1;
        $i6 = $i5 - i1;
        i7 = $i6 - i0;
        $i8 = r0[i7];
        $l9 = (long) $i8;
        $l10 = $l9 & 4294967295L;
        $l11 = (long) i2;
        $l12 = $l11 & 4294967295L;
        l3 = $l10 + $l12;
        $i13 = (int) l3;
        r0[i7] = $i13;
        $l14 = l3 >>> 32;
        $b15 = $l14 cmp 0L;
        if $b15 != 0 goto label0;

        return 0;

     label0:
        i1 = i1 + -1;
        if i1 < 0 goto label2;

        i7 = i7 + -1;
        if i7 >= 0 goto label1;

        return 1;

     label1:
        $i17 = r0[i7];
        $i18 = $i17 + 1;
        r0[i7] = $i18;
        $i19 = r0[i7];
        if $i19 == 0 goto label0;

        return 0;

     label2:
        return 1;
    }

    private java.math.BigInteger modPow2(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, r1, r2, r3, $r4, $r5;
        int i0, i1, i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        i0 := @parameter1: int;
        r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);
        r3 = specialinvoke r0.<java.math.BigInteger: java.math.BigInteger mod2(int)>(i0);
        i1 = 0;
        i2 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();
        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z0 == 0 goto label2;

        $i3 = i0 - 1;
        if $i3 >= i2 goto label0;

        $i4 = i0 - 1;
        goto label1;

     label0:
        $i4 = i2;

     label1:
        i2 = $i4;

     label2:
        if i1 >= i2 goto label4;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i1);
        if $z1 == 0 goto label3;

        $r4 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);
        r2 = specialinvoke $r4.<java.math.BigInteger: java.math.BigInteger mod2(int)>(i0);

     label3:
        i1 = i1 + 1;
        if i1 >= i2 goto label2;

        $r5 = specialinvoke r3.<java.math.BigInteger: java.math.BigInteger square()>();
        r3 = specialinvoke $r5.<java.math.BigInteger: java.math.BigInteger mod2(int)>(i0);
        goto label2;

     label4:
        return r2;
    }

    private java.math.BigInteger mod2(int)
    {
        java.math.BigInteger r0, $r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i12, $i14, $i18, $i19;
        int[] r1, $r2, $r3;
        byte $b11;
        long $l13, $l15, $l16, $l17;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        $i3 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        if $i3 > i0 goto label0;

        return r0;

     label0:
        $i4 = i0 + 31;
        i1 = $i4 >>> 5;
        r1 = newarray (int)[i1];
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $r3 = r0.<java.math.BigInteger: int[] mag>;
        $i5 = lengthof $r3;
        $i6 = $i5 - i1;
        $i7 = i2 + $i6;
        $i8 = $r2[$i7];
        r1[i2] = $i8;
        i2 = i2 + 1;
        goto label1;

     label2:
        $i9 = i1 << 5;
        i10 = $i9 - i0;
        $b11 = 0;
        $i12 = r1[$b11];
        $l13 = (long) $i12;
        $i14 = 32 - i10;
        $l15 = 1L << $i14;
        $l16 = $l15 - 1L;
        $l17 = $l13 & $l16;
        $i18 = (int) $l17;
        r1[$b11] = $i18;
        $i19 = r1[0];
        if $i19 != 0 goto label3;

        $r5 = new java.math.BigInteger;
        specialinvoke $r5.<java.math.BigInteger: void <init>(int,int[])>(1, r1);
        goto label4;

     label3:
        $r5 = new java.math.BigInteger;
        specialinvoke $r5.<java.math.BigInteger: void <init>(int[],int)>(r1, 1);

     label4:
        return $r5;
    }

    public java.math.BigInteger modInverse(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, $r7, $r8, $r9, $r10, $r13;
        java.math.MutableBigInteger r3, r4, r5, $r11, $r12;
        int $i0, $i1, $i2;
        java.lang.ArithmeticException $r6;
        boolean $z0, $z1;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i0 = r1.<java.math.BigInteger: int signum>;
        if $i0 == 1 goto label0;

        $r6 = new java.lang.ArithmeticException;
        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("BigInteger: modulus not positive");
        throw $r6;

     label0:
        $r7 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);
        if $z0 == 0 goto label1;

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r8;

     label1:
        r2 = r0;
        $i1 = r0.<java.math.BigInteger: int signum>;
        if $i1 < 0 goto label2;

        $i2 = virtualinvoke r0.<java.math.BigInteger: int compareMagnitude(java.math.BigInteger)>(r1);
        if $i2 < 0 goto label3;

     label2:
        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r1);

     label3:
        $r9 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z1 = virtualinvoke r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);
        if $z1 == 0 goto label4;

        $r10 = <java.math.BigInteger: java.math.BigInteger ONE>;
        return $r10;

     label4:
        $r11 = new java.math.MutableBigInteger;
        specialinvoke $r11.<java.math.MutableBigInteger: void <init>(java.math.BigInteger)>(r2);
        r3 = $r11;
        $r12 = new java.math.MutableBigInteger;
        specialinvoke $r12.<java.math.MutableBigInteger: void <init>(java.math.BigInteger)>(r1);
        r4 = $r12;
        r5 = virtualinvoke r3.<java.math.MutableBigInteger: java.math.MutableBigInteger mutableModInverse(java.math.MutableBigInteger)>(r4);
        $r13 = virtualinvoke r5.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>(1);
        return $r13;
    }

    public java.math.BigInteger shiftLeft(int)
    {
        java.math.BigInteger r0, $r1, $r3, $r11;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        null_type n0;
        java.lang.ArithmeticException $r2;
        int[] $r4, r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        $i8 = r0.<java.math.BigInteger: int signum>;
        if $i8 != 0 goto label0;

        $r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        return $r1;

     label0:
        if i0 != 0 goto label1;

        return r0;

     label1:
        if i0 >= 0 goto label3;

        if i0 != -2147483648 goto label2;

        $r2 = new java.lang.ArithmeticException;
        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Shift distance of Integer.MIN_VALUE not supported.");
        throw $r2;

     label2:
        $i9 = neg i0;
        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i9);
        return $r3;

     label3:
        i1 = i0 >>> 5;
        i2 = i0 & 31;
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        i3 = lengthof $r4;
        n0 = null;
        if i2 != 0 goto label6;

        $i10 = i3 + i1;
        r5 = newarray (int)[$i10];
        i4 = 0;

     label4:
        if i4 >= i3 goto label5;

        $r6 = r0.<java.math.BigInteger: int[] mag>;
        $i11 = $r6[i4];
        r5[i4] = $i11;
        i4 = i4 + 1;
        goto label4;

     label5:
        goto label11;

     label6:
        i12 = 0;
        i5 = 32 - i2;
        $r7 = r0.<java.math.BigInteger: int[] mag>;
        $i13 = $r7[0];
        i6 = $i13 >>> i5;
        if i6 == 0 goto label7;

        $i14 = i3 + i1;
        $i15 = $i14 + 1;
        r5 = newarray (int)[$i15];
        $i16 = i12;
        i12 = i12 + 1;
        r5[$i16] = i6;
        goto label8;

     label7:
        $i17 = i3 + i1;
        r5 = newarray (int)[$i17];

     label8:
        i7 = 0;

     label9:
        $i18 = i3 - 1;
        if i7 >= $i18 goto label10;

        $i19 = i12;
        i12 = i12 + 1;
        $r8 = r0.<java.math.BigInteger: int[] mag>;
        $i20 = i7;
        i7 = i7 + 1;
        $i21 = $r8[$i20];
        $i22 = $i21 << i2;
        $r9 = r0.<java.math.BigInteger: int[] mag>;
        $i23 = $r9[i7];
        $i24 = $i23 >>> i5;
        $i25 = $i22 | $i24;
        r5[$i19] = $i25;
        goto label9;

     label10:
        $r10 = r0.<java.math.BigInteger: int[] mag>;
        $i26 = $r10[i7];
        $i27 = $i26 << i2;
        r5[i12] = $i27;

     label11:
        $r11 = new java.math.BigInteger;
        $i28 = r0.<java.math.BigInteger: int signum>;
        specialinvoke $r11.<java.math.BigInteger: void <init>(int[],int)>(r5, $i28);
        return $r11;
    }

    public java.math.BigInteger shiftRight(int)
    {
        java.math.BigInteger r0, $r2, $r4, $r13;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        null_type n0;
        java.lang.ArithmeticException $r1;
        int[] $r3, r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.math.BigInteger[] $r5;
        boolean z0, $z1, $z2;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 != 0 goto label0;

        return r0;

     label0:
        if i0 >= 0 goto label2;

        if i0 != -2147483648 goto label1;

        $r1 = new java.lang.ArithmeticException;
        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Shift distance of Integer.MIN_VALUE not supported.");
        throw $r1;

     label1:
        $i8 = neg i0;
        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i8);
        return $r2;

     label2:
        i1 = i0 >>> 5;
        i2 = i0 & 31;
        $r3 = r0.<java.math.BigInteger: int[] mag>;
        i3 = lengthof $r3;
        n0 = null;
        if i1 < i3 goto label5;

        $i9 = r0.<java.math.BigInteger: int signum>;
        if $i9 < 0 goto label3;

        $r4 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        goto label4;

     label3:
        $r5 = <java.math.BigInteger: java.math.BigInteger[] negConst>;
        $r4 = $r5[1];

     label4:
        return $r4;

     label5:
        if i2 != 0 goto label8;

        i4 = i3 - i1;
        r6 = newarray (int)[i4];
        i5 = 0;

     label6:
        if i5 >= i4 goto label7;

        $r7 = r0.<java.math.BigInteger: int[] mag>;
        $i10 = $r7[i5];
        r6[i5] = $i10;
        i5 = i5 + 1;
        goto label6;

     label7:
        goto label12;

     label8:
        i11 = 0;
        $r8 = r0.<java.math.BigInteger: int[] mag>;
        $i12 = $r8[0];
        i13 = $i12 >>> i2;
        if i13 == 0 goto label9;

        $i14 = i3 - i1;
        r6 = newarray (int)[$i14];
        $i15 = i11;
        i11 = i11 + 1;
        r6[$i15] = i13;
        goto label10;

     label9:
        $i16 = i3 - i1;
        $i17 = $i16 - 1;
        r6 = newarray (int)[$i17];

     label10:
        i6 = 32 - i2;
        i7 = 0;

     label11:
        $i18 = i3 - i1;
        $i19 = $i18 - 1;
        if i7 >= $i19 goto label12;

        $i20 = i11;
        i11 = i11 + 1;
        $r9 = r0.<java.math.BigInteger: int[] mag>;
        $i21 = i7;
        i7 = i7 + 1;
        $i22 = $r9[$i21];
        $i23 = $i22 << i6;
        $r10 = r0.<java.math.BigInteger: int[] mag>;
        $i24 = $r10[i7];
        $i25 = $i24 >>> i2;
        $i26 = $i23 | $i25;
        r6[$i20] = $i26;
        goto label11;

     label12:
        $i27 = r0.<java.math.BigInteger: int signum>;
        if $i27 >= 0 goto label20;

        z0 = 0;
        i28 = i3 - 1;
        i29 = i3 - i1;

     label13:
        if i28 < i29 goto label16;

        if z0 != 0 goto label16;

        $r11 = r0.<java.math.BigInteger: int[] mag>;
        $i30 = $r11[i28];
        if $i30 == 0 goto label14;

        $z1 = 1;
        goto label15;

     label14:
        $z1 = 0;

     label15:
        z0 = $z1;
        i28 = i28 + -1;
        goto label13;

     label16:
        if z0 != 0 goto label19;

        if i2 == 0 goto label19;

        $r12 = r0.<java.math.BigInteger: int[] mag>;
        $i31 = i3 - i1;
        $i32 = $i31 - 1;
        $i33 = $r12[$i32];
        $i34 = 32 - i2;
        $i35 = $i33 << $i34;
        if $i35 == 0 goto label17;

        $z2 = 1;
        goto label18;

     label17:
        $z2 = 0;

     label18:
        z0 = $z2;

     label19:
        if z0 == 0 goto label20;

        r6 = virtualinvoke r0.<java.math.BigInteger: int[] javaIncrement(int[])>(r6);

     label20:
        $r13 = new java.math.BigInteger;
        $i36 = r0.<java.math.BigInteger: int signum>;
        specialinvoke $r13.<java.math.BigInteger: void <init>(int[],int)>(r6, $i36);
        return $r13;
    }

    int[] javaIncrement(int[])
    {
        java.math.BigInteger r0;
        int[] r1;
        int i0, i1, $i2, $i4, $i5, $i6, $i7;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: int[];
        i0 = 0;
        $i2 = lengthof r1;
        i1 = $i2 - 1;

     label0:
        if i1 < 0 goto label1;

        if i0 != 0 goto label1;

        $i4 = r1[i1];
        $i5 = $i4 + 1;
        r1[i1] = $i5;
        i0 = $i5;
        i1 = i1 + -1;
        goto label0;

     label1:
        if i0 != 0 goto label2;

        $i6 = lengthof r1;
        $i7 = $i6 + 1;
        r1 = newarray (int)[$i7];
        r1[0] = 1;

     label2:
        return r1;
    }

    public java.math.BigInteger and(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i1 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        $i2 = specialinvoke r1.<java.math.BigInteger: int intLength()>();
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);
        r2 = newarray (int)[$i3];
        i0 = 0;

     label0:
        $i4 = lengthof r2;
        if i0 >= $i4 goto label1;

        $i5 = lengthof r2;
        $i6 = $i5 - i0;
        $i7 = $i6 - 1;
        $i8 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>($i7);
        $i9 = lengthof r2;
        $i10 = $i9 - i0;
        $i11 = $i10 - 1;
        $i12 = specialinvoke r1.<java.math.BigInteger: int getInt(int)>($i11);
        $i13 = $i8 & $i12;
        r2[i0] = $i13;
        i0 = i0 + 1;
        goto label0;

     label1:
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r2);
        return $r3;
    }

    public java.math.BigInteger or(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i1 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        $i2 = specialinvoke r1.<java.math.BigInteger: int intLength()>();
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);
        r2 = newarray (int)[$i3];
        i0 = 0;

     label0:
        $i4 = lengthof r2;
        if i0 >= $i4 goto label1;

        $i5 = lengthof r2;
        $i6 = $i5 - i0;
        $i7 = $i6 - 1;
        $i8 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>($i7);
        $i9 = lengthof r2;
        $i10 = $i9 - i0;
        $i11 = $i10 - 1;
        $i12 = specialinvoke r1.<java.math.BigInteger: int getInt(int)>($i11);
        $i13 = $i8 | $i12;
        r2[i0] = $i13;
        i0 = i0 + 1;
        goto label0;

     label1:
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r2);
        return $r3;
    }

    public java.math.BigInteger xor(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i1 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        $i2 = specialinvoke r1.<java.math.BigInteger: int intLength()>();
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);
        r2 = newarray (int)[$i3];
        i0 = 0;

     label0:
        $i4 = lengthof r2;
        if i0 >= $i4 goto label1;

        $i5 = lengthof r2;
        $i6 = $i5 - i0;
        $i7 = $i6 - 1;
        $i8 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>($i7);
        $i9 = lengthof r2;
        $i10 = $i9 - i0;
        $i11 = $i10 - 1;
        $i12 = specialinvoke r1.<java.math.BigInteger: int getInt(int)>($i11);
        $i13 = $i8 ^ $i12;
        r2[i0] = $i13;
        i0 = i0 + 1;
        goto label0;

     label1:
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r2);
        return $r3;
    }

    public java.math.BigInteger not()
    {
        java.math.BigInteger r0, $r2;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.math.BigInteger;
        $i1 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        r1 = newarray (int)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        $i5 = $i4 - 1;
        $i6 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>($i5);
        $i7 = $i6 ^ -1;
        r1[i0] = $i7;
        i0 = i0 + 1;
        goto label0;

     label1:
        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r1);
        return $r2;
    }

    public java.math.BigInteger andNot(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i1 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        $i2 = specialinvoke r1.<java.math.BigInteger: int intLength()>();
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);
        r2 = newarray (int)[$i3];
        i0 = 0;

     label0:
        $i4 = lengthof r2;
        if i0 >= $i4 goto label1;

        $i5 = lengthof r2;
        $i6 = $i5 - i0;
        $i7 = $i6 - 1;
        $i8 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>($i7);
        $i9 = lengthof r2;
        $i10 = $i9 - i0;
        $i11 = $i10 - 1;
        $i12 = specialinvoke r1.<java.math.BigInteger: int getInt(int)>($i11);
        $i13 = $i12 ^ -1;
        $i14 = $i8 & $i13;
        r2[i0] = $i14;
        i0 = i0 + 1;
        goto label0;

     label1:
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r2);
        return $r3;
    }

    public boolean testBit(int)
    {
        java.math.BigInteger r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.ArithmeticException $r1;
        boolean $z0;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r1 = new java.lang.ArithmeticException;
        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Negative bit address");
        throw $r1;

     label0:
        $i1 = i0 >>> 5;
        $i2 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>($i1);
        $i3 = i0 & 31;
        $i4 = 1 << $i3;
        $i5 = $i2 & $i4;
        if $i5 == 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.math.BigInteger setBit(int)
    {
        java.math.BigInteger r0, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        int[] r1;
        java.lang.ArithmeticException $r2;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.ArithmeticException;
        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Negative bit address");
        throw $r2;

     label0:
        i1 = i0 >>> 5;
        $i3 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        $i4 = i1 + 2;
        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);
        r1 = newarray (int)[$i5];
        i2 = 0;

     label1:
        $i6 = lengthof r1;
        if i2 >= $i6 goto label2;

        $i7 = lengthof r1;
        $i8 = $i7 - i2;
        $i9 = $i8 - 1;
        $i10 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>(i2);
        r1[$i9] = $i10;
        i2 = i2 + 1;
        goto label1;

     label2:
        $i11 = lengthof r1;
        $i12 = $i11 - i1;
        $i13 = $i12 - 1;
        $i14 = r1[$i13];
        $i15 = i0 & 31;
        $i16 = 1 << $i15;
        $i17 = $i14 | $i16;
        r1[$i13] = $i17;
        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r1);
        return $r4;
    }

    public java.math.BigInteger clearBit(int)
    {
        java.math.BigInteger r0, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        int[] r1;
        java.lang.ArithmeticException $r2;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.ArithmeticException;
        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Negative bit address");
        throw $r2;

     label0:
        i1 = i0 >>> 5;
        $i3 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        $i4 = i0 + 1;
        $i5 = $i4 >>> 5;
        $i6 = $i5 + 1;
        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i6);
        r1 = newarray (int)[$i7];
        i2 = 0;

     label1:
        $i8 = lengthof r1;
        if i2 >= $i8 goto label2;

        $i9 = lengthof r1;
        $i10 = $i9 - i2;
        $i11 = $i10 - 1;
        $i12 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>(i2);
        r1[$i11] = $i12;
        i2 = i2 + 1;
        goto label1;

     label2:
        $i13 = lengthof r1;
        $i14 = $i13 - i1;
        $i15 = $i14 - 1;
        $i16 = r1[$i15];
        $i17 = i0 & 31;
        $i18 = 1 << $i17;
        $i19 = $i18 ^ -1;
        $i20 = $i16 & $i19;
        r1[$i15] = $i20;
        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r1);
        return $r4;
    }

    public java.math.BigInteger flipBit(int)
    {
        java.math.BigInteger r0, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        int[] r1;
        java.lang.ArithmeticException $r2;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.ArithmeticException;
        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Negative bit address");
        throw $r2;

     label0:
        i1 = i0 >>> 5;
        $i3 = specialinvoke r0.<java.math.BigInteger: int intLength()>();
        $i4 = i1 + 2;
        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);
        r1 = newarray (int)[$i5];
        i2 = 0;

     label1:
        $i6 = lengthof r1;
        if i2 >= $i6 goto label2;

        $i7 = lengthof r1;
        $i8 = $i7 - i2;
        $i9 = $i8 - 1;
        $i10 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>(i2);
        r1[$i9] = $i10;
        i2 = i2 + 1;
        goto label1;

     label2:
        $i11 = lengthof r1;
        $i12 = $i11 - i1;
        $i13 = $i12 - 1;
        $i14 = r1[$i13];
        $i15 = i0 & 31;
        $i16 = 1 << $i15;
        $i17 = $i14 ^ $i16;
        r1[$i13] = $i17;
        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(int[])>(r1);
        return $r4;
    }

    public int getLowestSetBit()
    {
        java.math.BigInteger r0;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10;
        byte b4;

        r0 := @this: java.math.BigInteger;
        $i3 = r0.<java.math.BigInteger: int lowestSetBit>;
        i0 = $i3 - 2;
        if i0 != -2 goto label4;

        b4 = 0;
        $i5 = r0.<java.math.BigInteger: int signum>;
        if $i5 != 0 goto label0;

        i0 = b4 + -1;
        goto label3;

     label0:
        i1 = 0;

     label1:
        $i6 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>(i1);
        i2 = $i6;
        if $i6 != 0 goto label2;

        i1 = i1 + 1;
        goto label1;

     label2:
        $i7 = i1 << 5;
        $i8 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i2);
        $i9 = $i7 + $i8;
        i0 = b4 + $i9;

     label3:
        $i10 = i0 + 2;
        r0.<java.math.BigInteger: int lowestSetBit> = $i10;

     label4:
        return i0;
    }

    public int bitLength()
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        int[] r1, $r2, $r3, $r4;
        boolean z0, $z1, $z2;

        r0 := @this: java.math.BigInteger;
        $i4 = r0.<java.math.BigInteger: int bitLength>;
        i0 = $i4 - 1;
        if i0 != -1 goto label11;

        r1 = r0.<java.math.BigInteger: int[] mag>;
        i1 = lengthof r1;
        if i1 != 0 goto label0;

        i0 = 0;
        goto label10;

     label0:
        $i5 = i1 - 1;
        $i6 = $i5 << 5;
        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $i7 = $r2[0];
        $i8 = staticinvoke <java.math.BigInteger: int bitLengthForInt(int)>($i7);
        i2 = $i6 + $i8;
        $i9 = r0.<java.math.BigInteger: int signum>;
        if $i9 >= 0 goto label9;

        $r3 = r0.<java.math.BigInteger: int[] mag>;
        $i10 = $r3[0];
        $i11 = staticinvoke <java.lang.Integer: int bitCount(int)>($i10);
        if $i11 != 1 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;
        i3 = 1;

     label3:
        if i3 >= i1 goto label6;

        if z0 == 0 goto label6;

        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $i12 = $r4[i3];
        if $i12 != 0 goto label4;

        $z2 = 1;
        goto label5;

     label4:
        $z2 = 0;

     label5:
        z0 = $z2;
        i3 = i3 + 1;
        goto label3;

     label6:
        if z0 == 0 goto label7;

        $i13 = i2 - 1;
        goto label8;

     label7:
        $i13 = i2;

     label8:
        i0 = $i13;
        goto label10;

     label9:
        i0 = i2;

     label10:
        $i14 = i0 + 1;
        r0.<java.math.BigInteger: int bitLength> = $i14;

     label11:
        return i0;
    }

    public int bitCount()
    {
        java.math.BigInteger r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, i13, $i14, $i15;
        int[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.math.BigInteger;
        $i3 = r0.<java.math.BigInteger: int bitCount>;
        i0 = $i3 - 1;
        if i0 != -1 goto label5;

        i0 = 0;
        i1 = 0;

     label0:
        $r1 = r0.<java.math.BigInteger: int[] mag>;
        $i4 = lengthof $r1;
        if i1 >= $i4 goto label1;

        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $i5 = $r2[i1];
        $i6 = staticinvoke <java.lang.Integer: int bitCount(int)>($i5);
        i0 = i0 + $i6;
        i1 = i1 + 1;
        goto label0;

     label1:
        $i7 = r0.<java.math.BigInteger: int signum>;
        if $i7 >= 0 goto label4;

        i8 = 0;
        $r3 = r0.<java.math.BigInteger: int[] mag>;
        $i9 = lengthof $r3;
        i2 = $i9 - 1;

     label2:
        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $i10 = $r4[i2];
        if $i10 != 0 goto label3;

        i8 = i8 + 32;
        i2 = i2 + -1;
        goto label2;

     label3:
        $r5 = r0.<java.math.BigInteger: int[] mag>;
        $i11 = $r5[i2];
        $i12 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i11);
        i13 = i8 + $i12;
        $i14 = i13 - 1;
        i0 = i0 + $i14;

     label4:
        $i15 = i0 + 1;
        r0.<java.math.BigInteger: int bitCount> = $i15;

     label5:
        return i0;
    }

    public boolean isProbablePrime(int)
    {
        java.math.BigInteger r0, r1, $r2, $r3;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        return 1;

     label0:
        r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger abs()>();
        $r2 = <java.math.BigInteger: java.math.BigInteger TWO>;
        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z1 == 0 goto label2;

        $r3 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $z2 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);
        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        $z3 = virtualinvoke r1.<java.math.BigInteger: boolean primeToCertainty(int,java.util.Random)>(i0, null);
        return $z3;
    }

    public int compareTo(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte $b7;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i0 = r0.<java.math.BigInteger: int signum>;
        $i1 = r1.<java.math.BigInteger: int signum>;
        if $i0 != $i1 goto label3;

        $i2 = r0.<java.math.BigInteger: int signum>;
        lookupswitch($i2)
        {
            case -1: goto label1;
            case 1: goto label0;
            default: goto label2;
        };

     label0:
        $i3 = virtualinvoke r0.<java.math.BigInteger: int compareMagnitude(java.math.BigInteger)>(r1);
        return $i3;

     label1:
        $i4 = virtualinvoke r1.<java.math.BigInteger: int compareMagnitude(java.math.BigInteger)>(r0);
        return $i4;

     label2:
        return 0;

     label3:
        $i5 = r0.<java.math.BigInteger: int signum>;
        $i6 = r1.<java.math.BigInteger: int signum>;
        if $i5 <= $i6 goto label4;

        $b7 = 1;
        goto label5;

     label4:
        $b7 = -1;

     label5:
        return $b7;
    }

    final int compareMagnitude(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1;
        int[] r2, r3;
        int i0, i1, i2, i3, i4;
        long $l5, $l6, $l7, $l8;
        byte $b9, $b10;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        r2 = r0.<java.math.BigInteger: int[] mag>;
        i0 = lengthof r2;
        r3 = r1.<java.math.BigInteger: int[] mag>;
        i1 = lengthof r3;
        if i0 >= i1 goto label0;

        return -1;

     label0:
        if i0 <= i1 goto label1;

        return 1;

     label1:
        i2 = 0;

     label2:
        if i2 >= i0 goto label6;

        i3 = r2[i2];
        i4 = r3[i2];
        if i3 == i4 goto label5;

        $l5 = (long) i3;
        $l6 = $l5 & 4294967295L;
        $l7 = (long) i4;
        $l8 = $l7 & 4294967295L;
        $b9 = $l6 cmp $l8;
        if $b9 >= 0 goto label3;

        $b10 = -1;
        goto label4;

     label3:
        $b10 = 1;

     label4:
        return $b10;

     label5:
        i2 = i2 + 1;
        goto label2;

     label6:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        java.math.BigInteger r0, r2;
        java.lang.Object r1;
        int[] r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.math.BigInteger;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.math.BigInteger) r1;
        $i2 = r2.<java.math.BigInteger: int signum>;
        $i3 = r0.<java.math.BigInteger: int signum>;
        if $i2 == $i3 goto label2;

        return 0;

     label2:
        r3 = r0.<java.math.BigInteger: int[] mag>;
        i0 = lengthof r3;
        r4 = r2.<java.math.BigInteger: int[] mag>;
        $i4 = lengthof r4;
        if i0 == $i4 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $i5 = r4[i1];
        $i6 = r3[i1];
        if $i5 == $i6 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public java.math.BigInteger min(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;
        int $i0;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);
        if $i0 >= 0 goto label0;

        $r2 = r0;
        goto label1;

     label0:
        $r2 = r1;

     label1:
        return $r2;
    }

    public java.math.BigInteger max(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;
        int $i0;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.math.BigInteger;
        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);
        if $i0 <= 0 goto label0;

        $r2 = r0;
        goto label1;

     label0:
        $r2 = r1;

     label1:
        return $r2;
    }

    public int hashCode()
    {
        java.math.BigInteger r0;
        int i0, i1, $i2, $i3, $i5, $i9, $i10;
        int[] $r1, $r2;
        long $l4, $l6, $l7, $l8;

        r0 := @this: java.math.BigInteger;
        i0 = 0;
        i1 = 0;

     label0:
        $r1 = r0.<java.math.BigInteger: int[] mag>;
        $i2 = lengthof $r1;
        if i1 >= $i2 goto label1;

        $i3 = 31 * i0;
        $l4 = (long) $i3;
        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $i5 = $r2[i1];
        $l6 = (long) $i5;
        $l7 = $l6 & 4294967295L;
        $l8 = $l4 + $l7;
        i0 = (int) $l8;
        i1 = i1 + 1;
        goto label0;

     label1:
        $i9 = r0.<java.math.BigInteger: int signum>;
        $i10 = i0 * $i9;
        return $i10;
    }

    public java.lang.String toString(int)
    {
        java.math.BigInteger r0, r2, r3, r8, r9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, i21, $i22, $i23, i24;
        java.lang.String[] r1, $r26;
        java.math.MutableBigInteger r4, r5, r6, r7, $r13, $r14, $r16;
        int[] $r10, $r11, $r15, $r17, $r24;
        java.math.BigInteger[] $r12;
        long $l15;
        java.lang.String $r18, $r22, $r25, $r27, $r29, $r31;
        java.lang.StringBuilder $r19, r20;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        $i3 = r0.<java.math.BigInteger: int signum>;
        if $i3 != 0 goto label0;

        return "0";

     label0:
        if i0 < 2 goto label1;

        if i0 <= 36 goto label2;

     label1:
        i0 = 10;

     label2:
        $r11 = r0.<java.math.BigInteger: int[] mag>;
        $i4 = lengthof $r11;
        $i5 = 4 * $i4;
        $i6 = $i5 + 6;
        i1 = $i6 / 7;
        r1 = newarray (java.lang.String)[i1];
        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger abs()>();
        i2 = 0;

     label3:
        $i7 = r2.<java.math.BigInteger: int signum>;
        if $i7 == 0 goto label4;

        $r12 = <java.math.BigInteger: java.math.BigInteger[] longRadix>;
        r3 = $r12[i0];
        $r13 = new java.math.MutableBigInteger;
        specialinvoke $r13.<java.math.MutableBigInteger: void <init>()>();
        r4 = $r13;
        $r14 = new java.math.MutableBigInteger;
        $r15 = r2.<java.math.BigInteger: int[] mag>;
        specialinvoke $r14.<java.math.MutableBigInteger: void <init>(int[])>($r15);
        r5 = $r14;
        $r16 = new java.math.MutableBigInteger;
        $r17 = r3.<java.math.BigInteger: int[] mag>;
        specialinvoke $r16.<java.math.MutableBigInteger: void <init>(int[])>($r17);
        r6 = $r16;
        r7 = virtualinvoke r5.<java.math.MutableBigInteger: java.math.MutableBigInteger divide(java.math.MutableBigInteger,java.math.MutableBigInteger)>(r6, r4);
        $i8 = r2.<java.math.BigInteger: int signum>;
        $i9 = r3.<java.math.BigInteger: int signum>;
        $i10 = $i8 * $i9;
        r8 = virtualinvoke r4.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>($i10);
        $i11 = r2.<java.math.BigInteger: int signum>;
        $i12 = r3.<java.math.BigInteger: int signum>;
        $i13 = $i11 * $i12;
        r9 = virtualinvoke r7.<java.math.MutableBigInteger: java.math.BigInteger toBigInteger(int)>($i13);
        $i14 = i2;
        i2 = i2 + 1;
        $l15 = virtualinvoke r9.<java.math.BigInteger: long longValue()>();
        $r18 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>($l15, i0);
        r1[$i14] = $r18;
        r2 = r8;
        goto label3;

     label4:
        $r19 = new java.lang.StringBuilder;
        $r10 = <java.math.BigInteger: int[] digitsPerLong>;
        $i16 = $r10[i0];
        $i17 = i2 * $i16;
        $i18 = $i17 + 1;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>(int)>($i18);
        r20 = $r19;
        $i19 = r0.<java.math.BigInteger: int signum>;
        if $i19 >= 0 goto label5;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label5:
        $i20 = i2 - 1;
        $r22 = r1[$i20];
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);
        i21 = i2 - 2;

     label6:
        if i21 < 0 goto label8;

        $r24 = <java.math.BigInteger: int[] digitsPerLong>;
        $i22 = $r24[i0];
        $r25 = r1[i21];
        $i23 = virtualinvoke $r25.<java.lang.String: int length()>();
        i24 = $i22 - $i23;
        if i24 == 0 goto label7;

        $r26 = <java.math.BigInteger: java.lang.String[] zeros>;
        $r27 = $r26[i24];
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

     label7:
        $r29 = r1[i21];
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
        i21 = i21 + -1;
        goto label6;

     label8:
        $r31 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r31;
    }

    public java.lang.String toString()
    {
        java.math.BigInteger r0;
        java.lang.String $r1;

        r0 := @this: java.math.BigInteger;
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString(int)>(10);
        return $r1;
    }

    public byte[] toByteArray()
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        byte[] r1;
        byte $b8;

        r0 := @this: java.math.BigInteger;
        $i5 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        $i6 = $i5 / 8;
        i0 = $i6 + 1;
        r1 = newarray (byte)[i0];
        i1 = i0 - 1;
        i2 = 4;
        i3 = 0;
        i4 = 0;

     label0:
        if i1 < 0 goto label3;

        if i2 != 4 goto label1;

        $i7 = i4;
        i4 = i4 + 1;
        i3 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>($i7);
        i2 = 1;
        goto label2;

     label1:
        i3 = i3 >>> 8;
        i2 = i2 + 1;

     label2:
        $b8 = (byte) i3;
        r1[i1] = $b8;
        i1 = i1 + -1;
        goto label0;

     label3:
        return r1;
    }

    public int intValue()
    {
        java.math.BigInteger r0;
        boolean z0;
        int i0;

        r0 := @this: java.math.BigInteger;
        z0 = 0;
        i0 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0);
        return i0;
    }

    public long longValue()
    {
        java.math.BigInteger r0;
        long l0, $l2, $l4, $l5;
        int i1, $i3;

        r0 := @this: java.math.BigInteger;
        l0 = 0L;
        i1 = 1;

     label0:
        if i1 < 0 goto label1;

        $l2 = l0 << 32;
        $i3 = specialinvoke r0.<java.math.BigInteger: int getInt(int)>(i1);
        $l4 = (long) $i3;
        $l5 = $l4 & 4294967295L;
        l0 = $l2 + $l5;
        i1 = i1 + -1;
        goto label0;

     label1:
        return l0;
    }

    public float floatValue()
    {
        java.math.BigInteger r0;
        java.lang.String $r1;
        float $f0;

        r0 := @this: java.math.BigInteger;
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString()>();
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1);
        return $f0;
    }

    public double doubleValue()
    {
        java.math.BigInteger r0;
        java.lang.String $r1;
        double $d0;

        r0 := @this: java.math.BigInteger;
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString()>();
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);
        return $d0;
    }

    private static int[] stripLeadingZeroInts(int[])
    {
        int[] r0, $r1;
        int i0, i1, $i2;

        r0 := @parameter0: int[];
        i0 = lengthof r0;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $i2 = r0[i1];
        if $i2 != 0 goto label1;

        i1 = i1 + 1;
        goto label0;

     label1:
        $r1 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r0, i1, i0);
        return $r1;
    }

    private static int[] trustedStripLeadingZeroInts(int[])
    {
        int[] r0, $r1;
        int i0, i1, $i2;

        r0 := @parameter0: int[];
        i0 = lengthof r0;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $i2 = r0[i1];
        if $i2 != 0 goto label1;

        i1 = i1 + 1;
        goto label0;

     label1:
        if i1 != 0 goto label2;

        $r1 = r0;
        goto label3;

     label2:
        $r1 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r0, i1, i0);

     label3:
        return $r1;
    }

    private static int[] stripLeadingZeroBytes(byte[])
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, $i5, i6, i7, i8, $i9, $i11, $i12, $i15, $i16, $i18, $i21, $i22;
        int[] r1;
        byte $b10, $b13, $b19;
        short $s14, $s20;

        r0 := @parameter0: byte[];
        i0 = lengthof r0;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $b10 = r0[i1];
        if $b10 != 0 goto label1;

        i1 = i1 + 1;
        goto label0;

     label1:
        $i11 = i0 - i1;
        $i12 = $i11 + 3;
        i2 = $i12 >>> 2;
        r1 = newarray (int)[i2];
        i3 = i0 - 1;
        i4 = i2 - 1;

     label2:
        if i4 < 0 goto label5;

        $i5 = i3;
        i3 = i3 + -1;
        $b13 = r0[$i5];
        $s14 = $b13 & 255;
        r1[i4] = $s14;
        $i15 = i3 - i1;
        i6 = $i15 + 1;
        i7 = staticinvoke <java.lang.Math: int min(int,int)>(3, i6);
        i8 = 8;

     label3:
        $i16 = i7 << 3;
        if i8 > $i16 goto label4;

        $i18 = r1[i4];
        $i9 = i3;
        i3 = i3 + -1;
        $b19 = r0[$i9];
        $s20 = $b19 & 255;
        $i21 = $s20 << i8;
        $i22 = $i18 | $i21;
        r1[i4] = $i22;
        i8 = i8 + 8;
        goto label3;

     label4:
        i4 = i4 + -1;
        goto label2;

     label5:
        return r1;
    }

    private static int[] makePositive(byte[])
    {
        byte[] r0;
        int i0, i1, i2, i4, i5, i6, $i7, i8, i9, $i10, $i14, $i15, $i16, $i19, $i20, $i21, $i23, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, i35, $i36, $i40, $i41;
        byte b3, $b11, $b12, $b13, $b17, $b24, b30;
        int[] r1;
        short $s18, $s25;
        long $l37, $l38, $l39;

        r0 := @parameter0: byte[];
        i0 = lengthof r0;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $b11 = r0[i1];
        if $b11 != -1 goto label1;

        i1 = i1 + 1;
        goto label0;

     label1:
        i2 = i1;

     label2:
        if i2 >= i0 goto label3;

        $b12 = r0[i2];
        if $b12 != 0 goto label3;

        i2 = i2 + 1;
        goto label2;

     label3:
        if i2 != i0 goto label4;

        $b13 = 1;
        goto label5;

     label4:
        $b13 = 0;

     label5:
        b3 = $b13;
        $i14 = i0 - i1;
        $i15 = $i14 + b3;
        $i16 = $i15 + 3;
        i4 = $i16 / 4;
        r1 = newarray (int)[i4];
        i5 = i0 - 1;
        i6 = i4 - 1;

     label6:
        if i6 < 0 goto label10;

        $i7 = i5;
        i5 = i5 + -1;
        $b17 = r0[$i7];
        $s18 = $b17 & 255;
        r1[i6] = $s18;
        $i19 = i5 - i1;
        $i20 = $i19 + 1;
        i8 = staticinvoke <java.lang.Math: int min(int,int)>(3, $i20);
        if i8 >= 0 goto label7;

        i8 = 0;

     label7:
        i9 = 8;

     label8:
        $i21 = 8 * i8;
        if i9 > $i21 goto label9;

        $i23 = r1[i6];
        $i10 = i5;
        i5 = i5 + -1;
        $b24 = r0[$i10];
        $s25 = $b24 & 255;
        $i26 = $s25 << i9;
        $i27 = $i23 | $i26;
        r1[i6] = $i27;
        i9 = i9 + 8;
        goto label8;

     label9:
        $i28 = 3 - i8;
        $i29 = 8 * $i28;
        b30 = -1 >>> $i29;
        $i31 = r1[i6];
        $i32 = $i31 ^ -1;
        $i33 = $i32 & b30;
        r1[i6] = $i33;
        i6 = i6 + -1;
        goto label6;

     label10:
        $i34 = lengthof r1;
        i35 = $i34 - 1;

     label11:
        if i35 < 0 goto label13;

        $i36 = r1[i35];
        $l37 = (long) $i36;
        $l38 = $l37 & 4294967295L;
        $l39 = $l38 + 1L;
        $i40 = (int) $l39;
        r1[i35] = $i40;
        $i41 = r1[i35];
        if $i41 == 0 goto label12;

        goto label13;

     label12:
        i35 = i35 + -1;
        goto label11;

     label13:
        return r1;
    }

    private static int[] makePositive(int[])
    {
        int[] r0, r1;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i21, $i22;
        byte b2, $b9;

        r0 := @parameter0: int[];
        i0 = 0;

     label0:
        $i4 = lengthof r0;
        if i0 >= $i4 goto label1;

        $i5 = r0[i0];
        if $i5 != -1 goto label1;

        i0 = i0 + 1;
        goto label0;

     label1:
        i1 = i0;

     label2:
        $i6 = lengthof r0;
        if i1 >= $i6 goto label3;

        $i7 = r0[i1];
        if $i7 != 0 goto label3;

        i1 = i1 + 1;
        goto label2;

     label3:
        $i8 = lengthof r0;
        if i1 != $i8 goto label4;

        $b9 = 1;
        goto label5;

     label4:
        $b9 = 0;

     label5:
        b2 = $b9;
        $i10 = lengthof r0;
        $i11 = $i10 - i0;
        $i12 = $i11 + b2;
        r1 = newarray (int)[$i12];
        i3 = i0;

     label6:
        $i13 = lengthof r0;
        if i3 >= $i13 goto label7;

        $i14 = i3 - i0;
        $i15 = $i14 + b2;
        $i16 = r0[i3];
        $i17 = $i16 ^ -1;
        r1[$i15] = $i17;
        i3 = i3 + 1;
        goto label6;

     label7:
        $i18 = lengthof r1;
        i19 = $i18 - 1;

     label8:
        $i21 = r1[i19];
        $i22 = $i21 + 1;
        r1[i19] = $i22;
        if $i22 != 0 goto label9;

        i19 = i19 + -1;
        goto label8;

     label9:
        return r1;
    }

    private int intLength()
    {
        java.math.BigInteger r0;
        int $i0, $i1, $i2;

        r0 := @this: java.math.BigInteger;
        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        $i1 = $i0 >>> 5;
        $i2 = $i1 + 1;
        return $i2;
    }

    private int signBit()
    {
        java.math.BigInteger r0;
        int $i0;
        byte $b1;

        r0 := @this: java.math.BigInteger;
        $i0 = r0.<java.math.BigInteger: int signum>;
        if $i0 >= 0 goto label0;

        $b1 = 1;
        goto label1;

     label0:
        $b1 = 0;

     label1:
        return $b1;
    }

    private int signInt()
    {
        java.math.BigInteger r0;
        int $i0;
        byte $b1;

        r0 := @this: java.math.BigInteger;
        $i0 = r0.<java.math.BigInteger: int signum>;
        if $i0 >= 0 goto label0;

        $b1 = -1;
        goto label1;

     label0:
        $b1 = 0;

     label1:
        return $b1;
    }

    private int getInt(int)
    {
        java.math.BigInteger r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r1, $r2, $r3;

        r0 := @this: java.math.BigInteger;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        return 0;

     label0:
        $r1 = r0.<java.math.BigInteger: int[] mag>;
        $i2 = lengthof $r1;
        if i0 < $i2 goto label1;

        $i3 = specialinvoke r0.<java.math.BigInteger: int signInt()>();
        return $i3;

     label1:
        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $r3 = r0.<java.math.BigInteger: int[] mag>;
        $i4 = lengthof $r3;
        $i5 = $i4 - i0;
        $i6 = $i5 - 1;
        i1 = $r2[$i6];
        $i7 = r0.<java.math.BigInteger: int signum>;
        if $i7 < 0 goto label2;

        $i8 = i1;
        goto label4;

     label2:
        $i9 = specialinvoke r0.<java.math.BigInteger: int firstNonzeroIntNum()>();
        if i0 > $i9 goto label3;

        $i8 = neg i1;
        goto label4;

     label3:
        $i8 = i1 ^ -1;

     label4:
        return $i8;
    }

    private int firstNonzeroIntNum()
    {
        java.math.BigInteger r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean z0;
        int[] $r1, $r2;

        r0 := @this: java.math.BigInteger;
        $i3 = r0.<java.math.BigInteger: int firstNonzeroIntNum>;
        i0 = $i3 - 2;
        if i0 != -2 goto label2;

        z0 = 0;
        $r1 = r0.<java.math.BigInteger: int[] mag>;
        i1 = lengthof $r1;
        i2 = i1 - 1;

     label0:
        if i2 < 0 goto label1;

        $r2 = r0.<java.math.BigInteger: int[] mag>;
        $i4 = $r2[i2];
        if $i4 != 0 goto label1;

        i2 = i2 + -1;
        goto label0;

     label1:
        $i5 = i1 - i2;
        i0 = $i5 - 1;
        $i6 = i0 + 2;
        r0.<java.math.BigInteger: int firstNonzeroIntNum> = $i6;

     label2:
        return i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.math.BigInteger r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        int i0, $i1;
        byte[] r3, $r6;
        java.lang.String r4, r8;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2, $z3;
        java.io.StreamCorruptedException $r7, $r9;
        sun.misc.Unsafe $r10, $r11;
        long $l2, $l3;
        int[] $r12;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("signum", -2);
        $r5 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("magnitude", null);
        $r6 = (byte[]) $r5;
        r3 = (byte[]) $r6;
        if i0 < -1 goto label0;

        if i0 <= 1 goto label2;

     label0:
        r4 = "BigInteger: Invalid signum value";
        $z0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean defaulted(java.lang.String)>("signum");
        if $z0 == 0 goto label1;

        r4 = "BigInteger: Signum not present in stream";

     label1:
        $r7 = new java.io.StreamCorruptedException;
        specialinvoke $r7.<java.io.StreamCorruptedException: void <init>(java.lang.String)>(r4);
        throw $r7;

     label2:
        $i1 = lengthof r3;
        if $i1 != 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        if i0 != 0 goto label5;

        $z2 = 1;
        goto label6;

     label5:
        $z2 = 0;

     label6:
        if $z1 == $z2 goto label8;

        r8 = "BigInteger: signum-magnitude mismatch";
        $z3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean defaulted(java.lang.String)>("magnitude");
        if $z3 == 0 goto label7;

        r8 = "BigInteger: Magnitude not present in stream";

     label7:
        $r9 = new java.io.StreamCorruptedException;
        specialinvoke $r9.<java.io.StreamCorruptedException: void <init>(java.lang.String)>(r8);
        throw $r9;

     label8:
        $r10 = <java.math.BigInteger: sun.misc.Unsafe unsafe>;
        $l2 = <java.math.BigInteger: long signumOffset>;
        virtualinvoke $r10.<sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(r0, $l2, i0);
        $r11 = <java.math.BigInteger: sun.misc.Unsafe unsafe>;
        $l3 = <java.math.BigInteger: long magOffset>;
        $r12 = staticinvoke <java.math.BigInteger: int[] stripLeadingZeroBytes(byte[])>(r3);
        virtualinvoke $r11.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r0, $l3, $r12);
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.math.BigInteger r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        int $i0;
        byte[] $r3;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.io.ObjectOutputStream;
        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        $i0 = r0.<java.math.BigInteger: int signum>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("signum", $i0);
        $r3 = specialinvoke r0.<java.math.BigInteger: byte[] magSerializedForm()>();
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("magnitude", $r3);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("bitCount", -1);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("bitLength", -1);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("lowestSetBit", -2);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("firstNonzeroByteNum", -2);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;
    }

    private byte[] magSerializedForm()
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        byte[] r1;
        int[] $r2, $r3, $r4;
        byte $b14;

        r0 := @this: java.math.BigInteger;
        $r2 = r0.<java.math.BigInteger: int[] mag>;
        i0 = lengthof $r2;
        if i0 != 0 goto label0;

        $i7 = 0;
        goto label1;

     label0:
        $i8 = i0 - 1;
        $i9 = $i8 << 5;
        $r3 = r0.<java.math.BigInteger: int[] mag>;
        $i10 = $r3[0];
        $i11 = staticinvoke <java.math.BigInteger: int bitLengthForInt(int)>($i10);
        $i7 = $i9 + $i11;

     label1:
        i1 = $i7;
        $i12 = i1 + 7;
        i2 = $i12 >>> 3;
        r1 = newarray (byte)[i2];
        i3 = i2 - 1;
        i4 = 4;
        i5 = i0 - 1;
        i6 = 0;

     label2:
        if i3 < 0 goto label5;

        if i4 != 4 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] mag>;
        $i13 = i5;
        i5 = i5 + -1;
        i6 = $r4[$i13];
        i4 = 1;
        goto label4;

     label3:
        i6 = i6 >>> 8;
        i4 = i4 + 1;

     label4:
        $b14 = (byte) i6;
        r1[i3] = $b14;
        i3 = i3 + -1;
        goto label2;

     label5:
        return r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.math.BigInteger r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.math.BigInteger;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.math.BigInteger) r1;
        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2, $r66, $r68, $r70, $r72, $r75, $r78;
        int i0, i1;
        int[] r1, $r12, $r16, $r23, $r60, $r61;
        boolean $z0, $z1;
        long[] $r3;
        java.math.BigInteger $r4, $r8, $r10, $r11, $r13, $r14, $r15, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59;
        java.math.BigInteger[] $r5, $r6, $r7, $r9, $r24;
        java.lang.String[] $r17, $r18, $r19, $r20;
        java.lang.String $r21, $r22;
        java.io.ObjectStreamField[] $r62;
        java.io.ObjectStreamField $r63, $r64, $r65, $r67, $r69, $r71;
        sun.misc.Unsafe $r73, $r74, $r77;
        java.lang.reflect.Field $r76, $r79;
        long $l2, $l3;
        java.lang.Exception $r80, r81;
        java.lang.Error $r82;

        $r0 = class "java/math/BigInteger";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.math.BigInteger: boolean $assertionsDisabled> = $z1;
        $r3 = newarray (long)[37];
        $r3[0] = 0L;
        $r3[1] = 0L;
        $r3[2] = 1024L;
        $r3[3] = 1624L;
        $r3[4] = 2048L;
        $r3[5] = 2378L;
        $r3[6] = 2648L;
        $r3[7] = 2875L;
        $r3[8] = 3072L;
        $r3[9] = 3247L;
        $r3[10] = 3402L;
        $r3[11] = 3543L;
        $r3[12] = 3672L;
        $r3[13] = 3790L;
        $r3[14] = 3899L;
        $r3[15] = 4001L;
        $r3[16] = 4096L;
        $r3[17] = 4186L;
        $r3[18] = 4271L;
        $r3[19] = 4350L;
        $r3[20] = 4426L;
        $r3[21] = 4498L;
        $r3[22] = 4567L;
        $r3[23] = 4633L;
        $r3[24] = 4696L;
        $r3[25] = 4756L;
        $r3[26] = 4814L;
        $r3[27] = 4870L;
        $r3[28] = 4923L;
        $r3[29] = 4975L;
        $r3[30] = 5025L;
        $r3[31] = 5074L;
        $r3[32] = 5120L;
        $r3[33] = 5166L;
        $r3[34] = 5210L;
        $r3[35] = 5253L;
        $r3[36] = 5295L;
        <java.math.BigInteger: long[] bitsPerDigit> = $r3;
        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(152125131763605L);
        <java.math.BigInteger: java.math.BigInteger SMALL_PRIME_PRODUCT> = $r4;
        $r5 = newarray (java.math.BigInteger)[17];
        <java.math.BigInteger: java.math.BigInteger[] posConst> = $r5;
        $r6 = newarray (java.math.BigInteger)[17];
        <java.math.BigInteger: java.math.BigInteger[] negConst> = $r6;
        i0 = 1;

     label2:
        if i0 > 16 goto label3;

        r1 = newarray (int)[1];
        r1[0] = i0;
        $r7 = <java.math.BigInteger: java.math.BigInteger[] posConst>;
        $r8 = new java.math.BigInteger;
        specialinvoke $r8.<java.math.BigInteger: void <init>(int[],int)>(r1, 1);
        $r7[i0] = $r8;
        $r9 = <java.math.BigInteger: java.math.BigInteger[] negConst>;
        $r10 = new java.math.BigInteger;
        specialinvoke $r10.<java.math.BigInteger: void <init>(int[],int)>(r1, -1);
        $r9[i0] = $r10;
        i0 = i0 + 1;
        goto label2;

     label3:
        $r11 = new java.math.BigInteger;
        $r12 = newarray (int)[0];
        specialinvoke $r11.<java.math.BigInteger: void <init>(int[],int)>($r12, 0);
        <java.math.BigInteger: java.math.BigInteger ZERO> = $r11;
        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);
        <java.math.BigInteger: java.math.BigInteger ONE> = $r13;
        $r14 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);
        <java.math.BigInteger: java.math.BigInteger TWO> = $r14;
        $r15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10L);
        <java.math.BigInteger: java.math.BigInteger TEN> = $r15;
        $r16 = newarray (int)[7];
        $r16[0] = 7;
        $r16[1] = 25;
        $r16[2] = 81;
        $r16[3] = 241;
        $r16[4] = 673;
        $r16[5] = 1793;
        $r16[6] = 2147483647;
        <java.math.BigInteger: int[] bnExpModThreshTable> = $r16;
        $r17 = newarray (java.lang.String)[64];
        <java.math.BigInteger: java.lang.String[] zeros> = $r17;
        $r18 = <java.math.BigInteger: java.lang.String[] zeros>;
        $r18[63] = "000000000000000000000000000000000000000000000000000000000000000";
        i1 = 0;

     label4:
        if i1 >= 63 goto label5;

        $r19 = <java.math.BigInteger: java.lang.String[] zeros>;
        $r20 = <java.math.BigInteger: java.lang.String[] zeros>;
        $r21 = $r20[63];
        $r22 = virtualinvoke $r21.<java.lang.String: java.lang.String substring(int,int)>(0, i1);
        $r19[i1] = $r22;
        i1 = i1 + 1;
        goto label4;

     label5:
        $r23 = newarray (int)[37];
        $r23[0] = 0;
        $r23[1] = 0;
        $r23[2] = 62;
        $r23[3] = 39;
        $r23[4] = 31;
        $r23[5] = 27;
        $r23[6] = 24;
        $r23[7] = 22;
        $r23[8] = 20;
        $r23[9] = 19;
        $r23[10] = 18;
        $r23[11] = 18;
        $r23[12] = 17;
        $r23[13] = 17;
        $r23[14] = 16;
        $r23[15] = 16;
        $r23[16] = 15;
        $r23[17] = 15;
        $r23[18] = 15;
        $r23[19] = 14;
        $r23[20] = 14;
        $r23[21] = 14;
        $r23[22] = 14;
        $r23[23] = 13;
        $r23[24] = 13;
        $r23[25] = 13;
        $r23[26] = 13;
        $r23[27] = 13;
        $r23[28] = 13;
        $r23[29] = 12;
        $r23[30] = 12;
        $r23[31] = 12;
        $r23[32] = 12;
        $r23[33] = 12;
        $r23[34] = 12;
        $r23[35] = 12;
        $r23[36] = 12;
        <java.math.BigInteger: int[] digitsPerLong> = $r23;
        $r24 = newarray (java.math.BigInteger)[37];
        $r24[0] = null;
        $r24[1] = null;
        $r25 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4611686018427387904L);
        $r24[2] = $r25;
        $r26 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4052555153018976267L);
        $r24[3] = $r26;
        $r27 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4611686018427387904L);
        $r24[4] = $r27;
        $r28 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(7450580596923828125L);
        $r24[5] = $r28;
        $r29 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4738381338321616896L);
        $r24[6] = $r29;
        $r30 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3909821048582988049L);
        $r24[7] = $r30;
        $r31 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1152921504606846976L);
        $r24[8] = $r31;
        $r32 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1350851717672992089L);
        $r24[9] = $r32;
        $r33 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1000000000000000000L);
        $r24[10] = $r33;
        $r34 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(5559917313492231481L);
        $r24[11] = $r34;
        $r35 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2218611106740436992L);
        $r24[12] = $r35;
        $r36 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(8650415919381337933L);
        $r24[13] = $r36;
        $r37 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2177953337809371136L);
        $r24[14] = $r37;
        $r38 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(6568408355712890625L);
        $r24[15] = $r38;
        $r39 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1152921504606846976L);
        $r24[16] = $r39;
        $r40 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2862423051509815793L);
        $r24[17] = $r40;
        $r41 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(6746640616477458432L);
        $r24[18] = $r41;
        $r42 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(799006685782884121L);
        $r24[19] = $r42;
        $r43 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1638400000000000000L);
        $r24[20] = $r43;
        $r44 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3243919932521508681L);
        $r24[21] = $r44;
        $r45 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(6221821273427820544L);
        $r24[22] = $r45;
        $r46 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(504036361936467383L);
        $r24[23] = $r46;
        $r47 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(876488338465357824L);
        $r24[24] = $r47;
        $r48 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1490116119384765625L);
        $r24[25] = $r48;
        $r49 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2481152873203736576L);
        $r24[26] = $r49;
        $r50 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4052555153018976267L);
        $r24[27] = $r50;
        $r51 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(6502111422497947648L);
        $r24[28] = $r51;
        $r52 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(353814783205469041L);
        $r24[29] = $r52;
        $r53 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(531441000000000000L);
        $r24[30] = $r53;
        $r54 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(787662783788549761L);
        $r24[31] = $r54;
        $r55 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1152921504606846976L);
        $r24[32] = $r55;
        $r56 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1667889514952984961L);
        $r24[33] = $r56;
        $r57 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2386420683693101056L);
        $r24[34] = $r57;
        $r58 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(3379220508056640625L);
        $r24[35] = $r58;
        $r59 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4738381338321616896L);
        $r24[36] = $r59;
        <java.math.BigInteger: java.math.BigInteger[] longRadix> = $r24;
        $r60 = newarray (int)[37];
        $r60[0] = 0;
        $r60[1] = 0;
        $r60[2] = 30;
        $r60[3] = 19;
        $r60[4] = 15;
        $r60[5] = 13;
        $r60[6] = 11;
        $r60[7] = 11;
        $r60[8] = 10;
        $r60[9] = 9;
        $r60[10] = 9;
        $r60[11] = 8;
        $r60[12] = 8;
        $r60[13] = 8;
        $r60[14] = 8;
        $r60[15] = 7;
        $r60[16] = 7;
        $r60[17] = 7;
        $r60[18] = 7;
        $r60[19] = 7;
        $r60[20] = 7;
        $r60[21] = 7;
        $r60[22] = 6;
        $r60[23] = 6;
        $r60[24] = 6;
        $r60[25] = 6;
        $r60[26] = 6;
        $r60[27] = 6;
        $r60[28] = 6;
        $r60[29] = 6;
        $r60[30] = 6;
        $r60[31] = 6;
        $r60[32] = 6;
        $r60[33] = 6;
        $r60[34] = 6;
        $r60[35] = 6;
        $r60[36] = 5;
        <java.math.BigInteger: int[] digitsPerInt> = $r60;
        $r61 = newarray (int)[37];
        $r61[0] = 0;
        $r61[1] = 0;
        $r61[2] = 1073741824;
        $r61[3] = 1162261467;
        $r61[4] = 1073741824;
        $r61[5] = 1220703125;
        $r61[6] = 362797056;
        $r61[7] = 1977326743;
        $r61[8] = 1073741824;
        $r61[9] = 387420489;
        $r61[10] = 1000000000;
        $r61[11] = 214358881;
        $r61[12] = 429981696;
        $r61[13] = 815730721;
        $r61[14] = 1475789056;
        $r61[15] = 170859375;
        $r61[16] = 268435456;
        $r61[17] = 410338673;
        $r61[18] = 612220032;
        $r61[19] = 893871739;
        $r61[20] = 1280000000;
        $r61[21] = 1801088541;
        $r61[22] = 113379904;
        $r61[23] = 148035889;
        $r61[24] = 191102976;
        $r61[25] = 244140625;
        $r61[26] = 308915776;
        $r61[27] = 387420489;
        $r61[28] = 481890304;
        $r61[29] = 594823321;
        $r61[30] = 729000000;
        $r61[31] = 887503681;
        $r61[32] = 1073741824;
        $r61[33] = 1291467969;
        $r61[34] = 1544804416;
        $r61[35] = 1838265625;
        $r61[36] = 60466176;
        <java.math.BigInteger: int[] intRadix> = $r61;
        $r62 = newarray (java.io.ObjectStreamField)[6];
        $r63 = new java.io.ObjectStreamField;
        $r2 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r63.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("signum", $r2);
        $r62[0] = $r63;
        $r64 = new java.io.ObjectStreamField;
        specialinvoke $r64.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("magnitude", class "[B");
        $r62[1] = $r64;
        $r65 = new java.io.ObjectStreamField;
        $r66 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r65.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("bitCount", $r66);
        $r62[2] = $r65;
        $r67 = new java.io.ObjectStreamField;
        $r68 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r67.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("bitLength", $r68);
        $r62[3] = $r67;
        $r69 = new java.io.ObjectStreamField;
        $r70 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r69.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("firstNonzeroByteNum", $r70);
        $r62[4] = $r69;
        $r71 = new java.io.ObjectStreamField;
        $r72 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r71.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("lowestSetBit", $r72);
        $r62[5] = $r71;
        <java.math.BigInteger: java.io.ObjectStreamField[] serialPersistentFields> = $r62;
        $r73 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.math.BigInteger: sun.misc.Unsafe unsafe> = $r73;

     label6:
        $r74 = <java.math.BigInteger: sun.misc.Unsafe unsafe>;
        $r75 = class "java/math/BigInteger";
        $r76 = virtualinvoke $r75.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("signum");
        $l2 = virtualinvoke $r74.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r76);
        <java.math.BigInteger: long signumOffset> = $l2;
        $r77 = <java.math.BigInteger: sun.misc.Unsafe unsafe>;
        $r78 = class "java/math/BigInteger";
        $r79 = virtualinvoke $r78.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mag");
        $l3 = virtualinvoke $r77.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r79);
        <java.math.BigInteger: long magOffset> = $l3;

     label7:
        goto label9;

     label8:
        $r80 := @caughtexception;
        r81 = $r80;
        $r82 = new java.lang.Error;
        specialinvoke $r82.<java.lang.Error: void <init>(java.lang.Throwable)>(r81);
        throw $r82;

     label9:
        return;

        catch java.lang.Exception from label6 to label7 with label8;
    }
}
