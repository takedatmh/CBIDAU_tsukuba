public class java.net.InetAddress extends java.lang.Object implements java.io.Serializable
{
    static final int IPv4;
    static final int IPv6;
    static transient boolean preferIPv6Address;
    final transient java.net.InetAddress$InetAddressHolder holder;
    private static java.util.List nameServices;
    private transient java.lang.String canonicalHostName;
    private static final long serialVersionUID;
    private static java.net.InetAddress$Cache addressCache;
    private static java.net.InetAddress$Cache negativeCache;
    private static boolean addressCacheInit;
    static java.net.InetAddress[] unknown_array;
    static java.net.InetAddressImpl impl;
    private static final java.util.HashMap lookupTable;
    private static java.net.InetAddress cachedLocalHost;
    private static long cacheTime;
    private static final long maxCacheTime;
    private static final java.lang.Object cacheLock;
    private static final long FIELDS_OFFSET;
    private static final sun.misc.Unsafe UNSAFE;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    static final boolean $assertionsDisabled;

    java.net.InetAddress$InetAddressHolder holder()
    {
        java.net.InetAddress r0;
        java.net.InetAddress$InetAddressHolder $r1;

        r0 := @this: java.net.InetAddress;
        $r1 = r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder>;
        return $r1;
    }

    void <init>()
    {
        java.net.InetAddress r0;
        java.net.InetAddress$InetAddressHolder $r1;

        r0 := @this: java.net.InetAddress;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.InetAddress: java.lang.String canonicalHostName> = null;
        $r1 = new java.net.InetAddress$InetAddressHolder;
        specialinvoke $r1.<java.net.InetAddress$InetAddressHolder: void <init>()>();
        r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder> = $r1;
        return;
    }

    private java.lang.Object readResolve() throws java.io.ObjectStreamException
    {
        java.net.InetAddress r0;
        java.net.Inet4Address $r1;
        java.net.InetAddress$InetAddressHolder $r2, $r4;
        java.lang.String $r3;
        int $i0;

        r0 := @this: java.net.InetAddress;
        $r1 = new java.net.Inet4Address;
        $r2 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r3 = virtualinvoke $r2.<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>();
        $r4 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = virtualinvoke $r4.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        specialinvoke $r1.<java.net.Inet4Address: void <init>(java.lang.String,int)>($r3, $i0);
        return $r1;
    }

    public boolean isMulticastAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isAnyLocalAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isLoopbackAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isLinkLocalAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isSiteLocalAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isMCGlobal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isMCNodeLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isMCLinkLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isMCSiteLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isMCOrgLocal()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return 0;
    }

    public boolean isReachable(int) throws java.io.IOException
    {
        java.net.InetAddress r0;
        int i0;
        boolean $z0;

        r0 := @this: java.net.InetAddress;
        i0 := @parameter0: int;
        $z0 = virtualinvoke r0.<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>(null, 0, i0);
        return $z0;
    }

    public boolean isReachable(java.net.NetworkInterface, int, int) throws java.io.IOException
    {
        java.net.InetAddress r0;
        java.net.NetworkInterface r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r2, $r3;
        java.net.InetAddressImpl $r4;
        boolean $z0;

        r0 := @this: java.net.InetAddress;
        r1 := @parameter0: java.net.NetworkInterface;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ttl can\'t be negative");
        throw $r2;

     label0:
        if i1 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout can\'t be negative");
        throw $r3;

     label1:
        $r4 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $z0 = interfaceinvoke $r4.<java.net.InetAddressImpl: boolean isReachable(java.net.InetAddress,int,java.net.NetworkInterface,int)>(r0, i1, r1, i0);
        return $z0;
    }

    public java.lang.String getHostName()
    {
        java.net.InetAddress r0;
        java.lang.String $r1;

        r0 := @this: java.net.InetAddress;
        $r1 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostName(boolean)>(1);
        return $r1;
    }

    java.lang.String getHostName(boolean)
    {
        java.net.InetAddress r0;
        boolean z0;
        java.net.InetAddress$InetAddressHolder $r1, $r3, $r5;
        java.lang.String $r2, $r4, $r6;

        r0 := @this: java.net.InetAddress;
        z0 := @parameter0: boolean;
        $r1 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r2 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>();
        if $r2 != null goto label0;

        $r3 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r4 = staticinvoke <java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>(r0, z0);
        $r3.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName> = $r4;

     label0:
        $r5 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r6 = virtualinvoke $r5.<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>();
        return $r6;
    }

    public java.lang.String getCanonicalHostName()
    {
        java.net.InetAddress r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: java.net.InetAddress;
        $r1 = r0.<java.net.InetAddress: java.lang.String canonicalHostName>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <java.net.InetAddress: java.lang.String getHostFromNameService(java.net.InetAddress,boolean)>(r0, 1);
        r0.<java.net.InetAddress: java.lang.String canonicalHostName> = $r2;

     label0:
        $r3 = r0.<java.net.InetAddress: java.lang.String canonicalHostName>;
        return $r3;
    }

    private static java.lang.String getHostFromNameService(java.net.InetAddress, boolean)
    {
        java.net.InetAddress r0, $r9;
        boolean z0, z1, $z2;
        java.lang.String r1, r10;
        java.util.Iterator r2;
        sun.net.spi.nameservice.NameService r3;
        java.lang.SecurityManager r4;
        int i0, $i1;
        java.util.List $r5;
        java.lang.Object $r6;
        byte[] $r7;
        java.net.InetAddress[] r8;
        java.lang.SecurityException $r12, r13;
        java.net.UnknownHostException $r14, r15;

        r0 := @parameter0: java.net.InetAddress;
        z0 := @parameter1: boolean;
        r1 = null;
        $r5 = <java.net.InetAddress: java.util.List nameServices>;
        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label9;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.net.spi.nameservice.NameService) $r6;

     label1:
        $r7 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();
        r1 = interfaceinvoke r3.<sun.net.spi.nameservice.NameService: java.lang.String getHostByAddr(byte[])>($r7);
        if z0 == 0 goto label2;

        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label2;

        virtualinvoke r4.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>(r1, -1);

     label2:
        r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>(r1, z0);
        z1 = 0;
        if r8 == null goto label4;

        i0 = 0;

     label3:
        if z1 != 0 goto label4;

        $i1 = lengthof r8;
        if i0 >= $i1 goto label4;

        $r9 = r8[i0];
        z1 = virtualinvoke r0.<java.net.InetAddress: boolean equals(java.lang.Object)>($r9);
        i0 = i0 + 1;
        goto label3;

     label4:
        if z1 != 0 goto label6;

        r10 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label5:
        return r10;

     label6:
        goto label9;

     label7:
        $r12 := @caughtexception;
        r13 = $r12;
        r1 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();
        goto label9;

     label8:
        $r14 := @caughtexception;
        r15 = $r14;
        r1 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();
        goto label0;

     label9:
        return r1;

        catch java.lang.SecurityException from label1 to label5 with label7;
        catch java.net.UnknownHostException from label1 to label5 with label8;
    }

    public byte[] getAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return null;
    }

    public java.lang.String getHostAddress()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return null;
    }

    public int hashCode()
    {
        java.net.InetAddress r0;

        r0 := @this: java.net.InetAddress;
        return -1;
    }

    public boolean equals(java.lang.Object)
    {
        java.net.InetAddress r0;
        java.lang.Object r1;

        r0 := @this: java.net.InetAddress;
        r1 := @parameter0: java.lang.Object;
        return 0;
    }

    public java.lang.String toString()
    {
        java.net.InetAddress r0;
        java.lang.String r1, $r4, $r7, $r9;
        java.net.InetAddress$InetAddressHolder $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r8;

        r0 := @this: java.net.InetAddress;
        $r2 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        r1 = virtualinvoke $r2.<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>();
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        if r1 == null goto label0;

        $r4 = r1;
        goto label1;

     label0:
        $r4 = "";

     label1:
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        $r7 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    private static void cacheInitIfNeeded()
    {
        boolean $z0, $z1, $z2;
        java.net.InetAddressImpl $r0, $r7;
        java.net.InetAddress$Cache $r1, $r6;
        java.lang.AssertionError $r2;
        java.net.InetAddress[] $r3, $r4, $r10;
        java.net.InetAddress $r5, $r8;
        java.lang.String $r9;

        $z0 = <java.net.InetAddress: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = <java.net.InetAddress: java.net.InetAddress$Cache addressCache>;
        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $z2 = <java.net.InetAddress: boolean addressCacheInit>;
        if $z2 == 0 goto label1;

        return;

     label1:
        $r3 = newarray (java.net.InetAddress)[1];
        <java.net.InetAddress: java.net.InetAddress[] unknown_array> = $r3;
        $r4 = <java.net.InetAddress: java.net.InetAddress[] unknown_array>;
        $r0 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r5 = interfaceinvoke $r0.<java.net.InetAddressImpl: java.net.InetAddress anyLocalAddress()>();
        $r4[0] = $r5;
        $r6 = <java.net.InetAddress: java.net.InetAddress$Cache addressCache>;
        $r7 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r8 = interfaceinvoke $r7.<java.net.InetAddressImpl: java.net.InetAddress anyLocalAddress()>();
        $r9 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostName()>();
        $r10 = <java.net.InetAddress: java.net.InetAddress[] unknown_array>;
        virtualinvoke $r6.<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>($r9, $r10);
        <java.net.InetAddress: boolean addressCacheInit> = 1;
        return;
    }

    private static void cacheAddresses(java.lang.String, java.net.InetAddress[], boolean)
    {
        java.lang.String r0, r4;
        java.net.InetAddress[] r1;
        boolean z0;
        java.net.InetAddress$Cache r2, $r5, $r6, $r8;
        java.lang.Throwable r3, $r10;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.net.InetAddress[];
        z0 := @parameter2: boolean;
        r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();
        $r5 = <java.net.InetAddress: java.net.InetAddress$Cache addressCache>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        staticinvoke <java.net.InetAddress: void cacheInitIfNeeded()>();
        if z0 == 0 goto label1;

        $r6 = <java.net.InetAddress: java.net.InetAddress$Cache addressCache>;
        virtualinvoke $r6.<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>(r4, r1);
        goto label2;

     label1:
        $r8 = <java.net.InetAddress: java.net.InetAddress$Cache negativeCache>;
        virtualinvoke $r8.<java.net.InetAddress$Cache: java.net.InetAddress$Cache put(java.lang.String,java.net.InetAddress[])>(r4, r1);

     label2:
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r10 := @caughtexception;

     label5:
        r3 = $r10;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static java.net.InetAddress[] getCachedAddresses(java.lang.String)
    {
        java.lang.String r0, r4;
        java.net.InetAddress$Cache r1, $r5, $r6, $r7;
        java.net.InetAddress$CacheEntry r2;
        java.lang.Throwable r3, $r9;
        java.net.InetAddress[] $r8;

        r0 := @parameter0: java.lang.String;
        r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();
        $r5 = <java.net.InetAddress: java.net.InetAddress$Cache addressCache>;
        r1 = $r5;
        entermonitor $r5;

     label0:
        staticinvoke <java.net.InetAddress: void cacheInitIfNeeded()>();
        $r6 = <java.net.InetAddress: java.net.InetAddress$Cache addressCache>;
        r2 = virtualinvoke $r6.<java.net.InetAddress$Cache: java.net.InetAddress$CacheEntry get(java.lang.String)>(r4);
        if r2 != null goto label1;

        $r7 = <java.net.InetAddress: java.net.InetAddress$Cache negativeCache>;
        r2 = virtualinvoke $r7.<java.net.InetAddress$Cache: java.net.InetAddress$CacheEntry get(java.lang.String)>(r4);

     label1:
        if r2 == null goto label3;

        $r8 = r2.<java.net.InetAddress$CacheEntry: java.net.InetAddress[] addresses>;
        exitmonitor r1;

     label2:
        return $r8;

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r9 := @caughtexception;

     label6:
        r3 = $r9;
        exitmonitor r1;

     label7:
        throw r3;

     label8:
        return null;

        catch java.lang.Throwable from label0 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static sun.net.spi.nameservice.NameService createNSProvider(java.lang.String)
    {
        java.lang.String r0, r2;
        sun.net.spi.nameservice.NameService r1;
        java.security.PrivilegedActionException r3, $r7;
        boolean $z0;
        java.net.InetAddress$1 $r4;
        java.net.InetAddress$2 $r5;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        return null;

     label0:
        r1 = null;
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("default");
        if $z0 == 0 goto label1;

        $r4 = new java.net.InetAddress$1;
        specialinvoke $r4.<java.net.InetAddress$1: void <init>()>();
        r1 = $r4;
        goto label5;

     label1:
        r2 = r0;

     label2:
        $r5 = new java.net.InetAddress$2;
        specialinvoke $r5.<java.net.InetAddress$2: void <init>(java.lang.String)>(r2);
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r5);
        r1 = (sun.net.spi.nameservice.NameService) $r6;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        r3 = $r7;

     label5:
        return r1;

        catch java.security.PrivilegedActionException from label2 to label3 with label4;
    }

    public static java.net.InetAddress getByAddress(java.lang.String, byte[]) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        byte[] r1, r2;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8;
        char $c1, $c4;
        java.net.Inet4Address $r3, $r4;
        java.net.Inet6Address $r5;
        java.net.UnknownHostException $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: byte[];
        if r0 == null goto label0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i0 <= 0 goto label0;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if $c1 != 91 goto label0;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        $i3 = $i2 - 1;
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);
        if $c4 != 93 goto label0;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();
        $i6 = $i5 - 1;
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i6);

     label0:
        if r1 == null goto label3;

        $i7 = lengthof r1;
        if $i7 != 4 goto label1;

        $r3 = new java.net.Inet4Address;
        specialinvoke $r3.<java.net.Inet4Address: void <init>(java.lang.String,byte[])>(r0, r1);
        return $r3;

     label1:
        $i8 = lengthof r1;
        if $i8 != 16 goto label3;

        r2 = staticinvoke <sun.net.util.IPAddressUtil: byte[] convertFromIPv4MappedAddress(byte[])>(r1);
        if r2 == null goto label2;

        $r4 = new java.net.Inet4Address;
        specialinvoke $r4.<java.net.Inet4Address: void <init>(java.lang.String,byte[])>(r0, r2);
        return $r4;

     label2:
        $r5 = new java.net.Inet6Address;
        specialinvoke $r5.<java.net.Inet6Address: void <init>(java.lang.String,byte[])>(r0, r1);
        return $r5;

     label3:
        $r6 = new java.net.UnknownHostException;
        specialinvoke $r6.<java.net.UnknownHostException: void <init>(java.lang.String)>("addr is of illegal length");
        throw $r6;
    }

    public static java.net.InetAddress getByName(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress[] $r1;
        java.net.InetAddress $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(r0);
        $r2 = $r1[0];
        return $r2;
    }

    private static java.net.InetAddress getByName(java.lang.String, java.net.InetAddress) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress r1, $r3;
        java.net.InetAddress[] $r2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.net.InetAddress;
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>(r0, r1);
        $r3 = $r2[0];
        return $r3;
    }

    public static java.net.InetAddress[] getAllByName(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress[] $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String,java.net.InetAddress)>(r0, null);
        return $r1;
    }

    private static java.net.InetAddress[] getAllByName(java.lang.String, java.net.InetAddress) throws java.net.UnknownHostException
    {
        java.lang.String r0, r4, $r10, $r17, $r23, $r33;
        java.net.InetAddress r1, $r5;
        java.net.InetAddress[] r2, r24, $r34;
        java.net.InetAddressImpl $r3;
        null_type n0;
        int i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i11, $i13, $i14, $i15;
        boolean z0, $z1;
        char $c3, $c7, $c10, $c12;
        java.net.UnknownHostException $r6, $r13, $r18, $r28;
        java.lang.StringBuilder $r7, $r8, $r9, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r29, $r30, $r31, $r32;
        byte[] r11, $r12;
        java.net.Inet4Address $r25;
        java.net.Inet6Address $r26, $r27;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.net.InetAddress;
        if r0 == null goto label0;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i2 != 0 goto label1;

     label0:
        r2 = newarray (java.net.InetAddress)[1];
        $r3 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r5 = interfaceinvoke $r3.<java.net.InetAddressImpl: java.net.InetAddress loopbackAddress()>();
        r2[0] = $r5;
        return r2;

     label1:
        z0 = 0;
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if $c3 != 91 goto label3;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i4 <= 2 goto label2;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();
        $i6 = $i5 - 1;
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);
        if $c7 != 93 goto label2;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();
        $i9 = $i8 - 1;
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i9);
        z0 = 1;
        goto label3;

     label2:
        $r6 = new java.net.UnknownHostException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invalid IPv6 address");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.net.UnknownHostException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label3:
        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        $i11 = staticinvoke <java.lang.Character: int digit(char,int)>($c10, 16);
        if $i11 != -1 goto label4;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if $c12 != 58 goto label13;

     label4:
        n0 = null;
        i0 = -1;
        r4 = null;
        r11 = staticinvoke <sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>(r0);
        if r11 != null goto label7;

        $i13 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("%");
        i1 = $i13;
        if $i13 == -1 goto label5;

        i0 = staticinvoke <java.net.InetAddress: int checkNumericZone(java.lang.String)>(r0);
        if i0 != -1 goto label5;

        $i14 = i1 + 1;
        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i14);

     label5:
        $r12 = staticinvoke <sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>(r0);
        r11 = $r12;
        if $r12 != null goto label6;

        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");
        if $z1 == 0 goto label6;

        $r13 = new java.net.UnknownHostException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invalid IPv6 address");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.net.UnknownHostException: void <init>(java.lang.String)>($r17);
        throw $r13;

     label6:
        goto label8;

     label7:
        if z0 == 0 goto label8;

        $r18 = new java.net.UnknownHostException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.net.UnknownHostException: void <init>(java.lang.String)>($r23);
        throw $r18;

     label8:
        r24 = newarray (java.net.InetAddress)[1];
        if r11 == null goto label12;

        $i15 = lengthof r11;
        if $i15 != 4 goto label9;

        $r25 = new java.net.Inet4Address;
        specialinvoke $r25.<java.net.Inet4Address: void <init>(java.lang.String,byte[])>(null, r11);
        r24[0] = $r25;
        goto label11;

     label9:
        if r4 == null goto label10;

        $r26 = new java.net.Inet6Address;
        specialinvoke $r26.<java.net.Inet6Address: void <init>(java.lang.String,byte[],java.lang.String)>(null, r11, r4);
        r24[0] = $r26;
        goto label11;

     label10:
        $r27 = new java.net.Inet6Address;
        specialinvoke $r27.<java.net.Inet6Address: void <init>(java.lang.String,byte[],int)>(null, r11, i0);
        r24[0] = $r27;

     label11:
        return r24;

     label12:
        goto label14;

     label13:
        if z0 == 0 goto label14;

        $r28 = new java.net.UnknownHostException;
        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r28.<java.net.UnknownHostException: void <init>(java.lang.String)>($r33);
        throw $r28;

     label14:
        $r34 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>(r0, r1, 1);
        return $r34;
    }

    public static java.net.InetAddress getLoopbackAddress()
    {
        java.net.InetAddressImpl $r0;
        java.net.InetAddress $r1;

        $r0 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r1 = interfaceinvoke $r0.<java.net.InetAddressImpl: java.net.InetAddress loopbackAddress()>();
        return $r1;
    }

    private static int checkNumericZone(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8;
        char c4;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(37);
        i1 = virtualinvoke r0.<java.lang.String: int length()>();
        i2 = 0;
        if i0 != -1 goto label0;

        return -1;

     label0:
        i3 = i0 + 1;

     label1:
        if i3 >= i1 goto label4;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);
        if c4 != 93 goto label2;

        $i6 = i0 + 1;
        if i3 != $i6 goto label4;

        return -1;

     label2:
        $i7 = staticinvoke <java.lang.Character: int digit(char,int)>(c4, 10);
        i5 = $i7;
        if $i7 >= 0 goto label3;

        return -1;

     label3:
        $i8 = i2 * 10;
        i2 = $i8 + i5;
        i3 = i3 + 1;
        goto label1;

     label4:
        return i2;
    }

    private static java.net.InetAddress[] getAllByName0(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress[] $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,boolean)>(r0, 1);
        return $r1;
    }

    static java.net.InetAddress[] getAllByName0(java.lang.String, boolean) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        boolean z0;
        java.net.InetAddress[] $r1;

        r0 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName0(java.lang.String,java.net.InetAddress,boolean)>(r0, null, z0);
        return $r1;
    }

    private static java.net.InetAddress[] getAllByName0(java.lang.String, java.net.InetAddress, boolean) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress r1;
        boolean z0;
        java.lang.SecurityManager r2;
        java.net.InetAddress[] r3, $r4, $r7;
        java.net.UnknownHostException $r5;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.net.InetAddress;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        virtualinvoke r2.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>(r0, -1);

     label0:
        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getCachedAddresses(java.lang.String)>(r0);
        if r3 != null goto label1;

        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAddressesFromNameService(java.lang.String,java.net.InetAddress)>(r0, r1);

     label1:
        $r4 = <java.net.InetAddress: java.net.InetAddress[] unknown_array>;
        if r3 != $r4 goto label2;

        $r5 = new java.net.UnknownHostException;
        specialinvoke $r5.<java.net.UnknownHostException: void <init>(java.lang.String)>(r0);
        throw $r5;

     label2:
        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();
        $r7 = (java.net.InetAddress[]) $r6;
        return $r7;
    }

    private static java.net.InetAddress[] getAddressesFromNameService(java.lang.String, java.net.InetAddress) throws java.net.UnknownHostException
    {
        java.lang.String r0;
        java.net.InetAddress r1, $r15, $r16, $r17, r18, r19;
        null_type n0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.net.UnknownHostException r2, r5, $r13;
        java.util.Iterator r3;
        sun.net.spi.nameservice.NameService r4;
        java.net.InetAddressImpl $r6;
        java.net.InetAddress[] r7, $r9, r10, $r14;
        java.lang.Throwable r8, $r20;
        java.util.List $r11;
        java.lang.Object $r12;
        int $i0, i1, $i2, $i3, i4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.net.InetAddress;
        n0 = null;
        z0 = 0;
        r2 = null;
        $r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] checkLookupTable(java.lang.String)>(r0);
        r10 = $r9;
        if $r9 != null goto label17;

     label0:
        $r11 = <java.net.InetAddress: java.util.List nameServices>;
        r3 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label6;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (sun.net.spi.nameservice.NameService) $r12;

     label2:
        r10 = interfaceinvoke r4.<sun.net.spi.nameservice.NameService: java.net.InetAddress[] lookupAllHostAddr(java.lang.String)>(r0);
        z0 = 1;

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;
        r5 = $r13;
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("localhost");
        if $z2 == 0 goto label5;

        $r14 = newarray (java.net.InetAddress)[1];
        $r6 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r15 = interfaceinvoke $r6.<java.net.InetAddressImpl: java.net.InetAddress loopbackAddress()>();
        $r14[0] = $r15;
        r7 = $r14;
        r10 = r7;
        z0 = 1;
        goto label6;

     label5:
        r10 = <java.net.InetAddress: java.net.InetAddress[] unknown_array>;
        z0 = 0;
        r2 = r5;
        goto label1;

     label6:
        if r1 == null goto label12;

        $i0 = lengthof r10;
        if $i0 <= 1 goto label12;

        $r16 = r10[0];
        $z3 = virtualinvoke $r16.<java.net.InetAddress: boolean equals(java.lang.Object)>(r1);
        if $z3 != 0 goto label12;

        i1 = 1;

     label7:
        $i2 = lengthof r10;
        if i1 >= $i2 goto label9;

        $r17 = r10[i1];
        $z4 = virtualinvoke $r17.<java.net.InetAddress: boolean equals(java.lang.Object)>(r1);
        if $z4 == 0 goto label8;

        goto label9;

     label8:
        i1 = i1 + 1;
        goto label7;

     label9:
        $i3 = lengthof r10;
        if i1 >= $i3 goto label12;

        r18 = r1;
        i4 = 0;

     label10:
        if i4 >= i1 goto label11;

        r19 = r10[i4];
        r10[i4] = r18;
        r18 = r19;
        i4 = i4 + 1;
        goto label10;

     label11:
        r10[i1] = r18;

     label12:
        staticinvoke <java.net.InetAddress: void cacheAddresses(java.lang.String,java.net.InetAddress[],boolean)>(r0, r10, z0);
        if z0 != 0 goto label13;

        if r2 == null goto label13;

        throw r2;

     label13:
        staticinvoke <java.net.InetAddress: void updateLookupTable(java.lang.String)>(r0);
        goto label17;

     label14:
        $r20 := @caughtexception;

     label15:
        r8 = $r20;

     label16:
        staticinvoke <java.net.InetAddress: void updateLookupTable(java.lang.String)>(r0);
        throw r8;

     label17:
        return r10;

        catch java.net.UnknownHostException from label2 to label3 with label4;
        catch java.lang.Throwable from label0 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private static java.net.InetAddress[] checkLookupTable(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashMap $r1, r2, $r6, $r7, $r9, $r10, $r14, r15, $r16;
        java.lang.InterruptedException r3, $r11;
        java.lang.Throwable r4, r5, $r12, $r18;
        boolean $z0, $z1;
        null_type $n0, $n1;
        java.net.InetAddress[] r13;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r6 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        $z0 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r0);
        if $z0 != 0 goto label2;

        $r7 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);
        $n0 = null;
        exitmonitor r2;

     label1:
        return $n0;

     label2:
        $r9 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        $z1 = virtualinvoke $r9.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r0);
        if $z1 == 0 goto label6;

     label3:
        $r10 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        virtualinvoke $r10.<java.lang.Object: void wait()>();

     label4:
        goto label2;

     label5:
        $r11 := @caughtexception;
        r3 = $r11;
        goto label2;

     label6:
        exitmonitor r2;

     label7:
        goto label11;

     label8:
        $r12 := @caughtexception;

     label9:
        r4 = $r12;
        exitmonitor r2;

     label10:
        throw r4;

     label11:
        r13 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getCachedAddresses(java.lang.String)>(r0);
        if r13 != null goto label17;

        $r14 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        r15 = $r14;
        entermonitor $r14;

     label12:
        $r16 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);
        $n1 = null;
        exitmonitor r15;

     label13:
        return $n1;

     label14:
        $r18 := @caughtexception;

     label15:
        r5 = $r18;
        exitmonitor r15;

     label16:
        throw r5;

     label17:
        return r13;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private static void updateLookupTable(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashMap $r1, r2, $r4, $r6;
        java.lang.Throwable r3, $r7;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r4 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r0);
        $r6 = <java.net.InetAddress: java.util.HashMap lookupTable>;
        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public static java.net.InetAddress getByAddress(byte[]) throws java.net.UnknownHostException
    {
        byte[] r0;
        java.net.InetAddress $r1;

        r0 := @parameter0: byte[];
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>(null, r0);
        return $r1;
    }

    public static java.net.InetAddress getLocalHost() throws java.net.UnknownHostException
    {
        java.lang.SecurityManager r0;
        java.lang.String r1, $r18, $r20;
        java.net.InetAddress r2, $r10, $r12, $r22, $r28;
        java.lang.Object r3, $r11;
        long l0, $l1, $l2;
        java.net.InetAddress[] r4;
        java.net.UnknownHostException r5, r6, $r13, $r14;
        java.lang.Throwable r7, $r23;
        java.net.InetAddressImpl $r8, $r9, $r27;
        boolean $z0;
        byte $b3;
        java.lang.StringBuilder $r15, $r16, $r17, $r19;
        java.lang.SecurityException $r25, r26;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

     label0:
        $r8 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        r1 = interfaceinvoke $r8.<java.net.InetAddressImpl: java.lang.String getLocalHostName()>();
        if r0 == null goto label1;

        virtualinvoke r0.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>(r1, -1);

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("localhost");
        if $z0 == 0 goto label3;

        $r9 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r10 = interfaceinvoke $r9.<java.net.InetAddressImpl: java.net.InetAddress loopbackAddress()>();

     label2:
        return $r10;

     label3:
        r2 = null;
        $r11 = <java.net.InetAddress: java.lang.Object cacheLock>;
        r3 = $r11;
        entermonitor $r11;

     label4:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r12 = <java.net.InetAddress: java.net.InetAddress cachedLocalHost>;
        if $r12 == null goto label6;

        $l1 = <java.net.InetAddress: long cacheTime>;
        $l2 = l0 - $l1;
        $b3 = $l2 cmp 5000L;
        if $b3 >= 0 goto label5;

        r2 = <java.net.InetAddress: java.net.InetAddress cachedLocalHost>;
        goto label6;

     label5:
        <java.net.InetAddress: java.net.InetAddress cachedLocalHost> = null;

     label6:
        if r2 != null goto label11;

     label7:
        r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAddressesFromNameService(java.lang.String,java.net.InetAddress)>(r1, null);

     label8:
        goto label10;

     label9:
        $r13 := @caughtexception;
        r5 = $r13;
        $r14 = new java.net.UnknownHostException;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r18 = virtualinvoke r5.<java.net.UnknownHostException: java.lang.String getMessage()>();
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r14.<java.net.UnknownHostException: void <init>(java.lang.String)>($r20);
        r6 = $r14;
        virtualinvoke r6.<java.net.UnknownHostException: java.lang.Throwable initCause(java.lang.Throwable)>(r5);
        throw r6;

     label10:
        $r22 = r4[0];
        <java.net.InetAddress: java.net.InetAddress cachedLocalHost> = $r22;
        <java.net.InetAddress: long cacheTime> = l0;
        r2 = r4[0];

     label11:
        exitmonitor r3;

     label12:
        goto label16;

     label13:
        $r23 := @caughtexception;

     label14:
        r7 = $r23;
        exitmonitor r3;

     label15:
        throw r7;

     label16:
        return r2;

     label17:
        $r25 := @caughtexception;
        r26 = $r25;
        $r27 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r28 = interfaceinvoke $r27.<java.net.InetAddressImpl: java.net.InetAddress loopbackAddress()>();
        return $r28;

        catch java.net.UnknownHostException from label7 to label8 with label9;
        catch java.lang.Throwable from label4 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.SecurityException from label0 to label2 with label17;
        catch java.lang.SecurityException from label3 to label16 with label17;
    }

    private static native void init();

    static java.net.InetAddress anyLocalAddress()
    {
        java.net.InetAddressImpl $r0;
        java.net.InetAddress $r1;

        $r0 = <java.net.InetAddress: java.net.InetAddressImpl impl>;
        $r1 = interfaceinvoke $r0.<java.net.InetAddressImpl: java.net.InetAddress anyLocalAddress()>();
        return $r1;
    }

    static java.net.InetAddressImpl loadImpl(java.lang.String)
    {
        java.lang.String r0, r2, $r10, $r20, $r30, $r40;
        java.lang.Object r1, $r5;
        java.lang.ClassNotFoundException r3, $r12;
        sun.security.action.GetPropertyAction $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r14, $r15, $r16, $r17, $r18, $r19, $r24, $r25, $r26, $r27, $r28, $r29, $r34, $r35, $r36, $r37, $r38, $r39;
        java.lang.Class $r11, $r41;
        java.io.PrintStream $r13, $r23, $r33;
        java.lang.InstantiationException $r21, r22;
        java.lang.IllegalAccessException $r31, r32;
        java.lang.Exception $r42, r43;
        java.lang.Error $r44;
        java.net.InetAddressImpl $r45;

        r0 := @parameter0: java.lang.String;
        r1 = null;
        $r4 = new sun.security.action.GetPropertyAction;
        specialinvoke $r4.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("impl.prefix", "");
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        r2 = (java.lang.String) $r5;

     label0:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.net.");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r10);
        r1 = virtualinvoke $r11.<java.lang.Class: java.lang.Object newInstance()>();

     label1:
        goto label5;

     label2:
        $r12 := @caughtexception;
        r3 = $r12;
        $r13 = <java.lang.System: java.io.PrintStream err>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found: java.net.");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\ncheck impl.prefix property ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in your properties file.");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r20);
        goto label5;

     label3:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = <java.lang.System: java.io.PrintStream err>;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate: java.net.");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\ncheck impl.prefix property ");
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in your properties file.");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r30);
        goto label5;

     label4:
        $r31 := @caughtexception;
        r32 = $r31;
        $r33 = <java.lang.System: java.io.PrintStream err>;
        $r34 = new java.lang.StringBuilder;
        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot access class: java.net.");
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\ncheck impl.prefix property ");
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in your properties file.");
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r40);

     label5:
        if r1 != null goto label9;

     label6:
        $r41 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);
        r1 = virtualinvoke $r41.<java.lang.Class: java.lang.Object newInstance()>();

     label7:
        goto label9;

     label8:
        $r42 := @caughtexception;
        r43 = $r42;
        $r44 = new java.lang.Error;
        specialinvoke $r44.<java.lang.Error: void <init>(java.lang.String)>("System property impl.prefix incorrect");
        throw $r44;

     label9:
        $r45 = (java.net.InetAddressImpl) r1;
        return $r45;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    private void readObjectNoData(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.net.InetAddress r0;
        java.io.ObjectInputStream r1;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        java.lang.SecurityException $r4;

        r0 := @this: java.net.InetAddress;
        r1 := @parameter0: java.io.ObjectInputStream;
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r3 == null goto label0;

        $r4 = new java.lang.SecurityException;
        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("invalid address type");
        throw $r4;

     label0:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.net.InetAddress r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.lang.String r3;
        int i0, i1;
        java.net.InetAddress$InetAddressHolder r4, $r9;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        java.lang.SecurityException $r7;
        java.lang.Object $r8;
        sun.misc.Unsafe $r10;
        long $l2;

        r0 := @this: java.net.InetAddress;
        r1 := @parameter0: java.io.ObjectInputStream;
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r6 == null goto label0;

        $r7 = new java.lang.SecurityException;
        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("invalid address type");
        throw $r7;

     label0:
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        $r8 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("hostName", null);
        r3 = (java.lang.String) $r8;
        i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("address", 0);
        i1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("family", 0);
        $r9 = new java.net.InetAddress$InetAddressHolder;
        specialinvoke $r9.<java.net.InetAddress$InetAddressHolder: void <init>(java.lang.String,int,int)>(r3, i0, i1);
        r4 = $r9;
        $r10 = <java.net.InetAddress: sun.misc.Unsafe UNSAFE>;
        $l2 = <java.net.InetAddress: long FIELDS_OFFSET>;
        virtualinvoke $r10.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l2, r4);
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.net.InetAddress r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.lang.SecurityException $r5;
        java.net.InetAddress$InetAddressHolder $r6, $r8, $r9;
        java.lang.String $r7;
        int $i0, $i1;

        r0 := @this: java.net.InetAddress;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r4 == null goto label0;

        $r5 = new java.lang.SecurityException;
        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("invalid address type");
        throw $r5;

     label0:
        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        $r6 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r7 = $r6.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("hostName", $r7);
        $r8 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = $r8.<java.net.InetAddress$InetAddressHolder: int address>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("address", $i0);
        $r9 = virtualinvoke r0.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $i1 = $r9.<java.net.InetAddress$InetAddressHolder: int family>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("family", $i1);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r34, $r42, $r44;
        null_type n0;
        java.lang.String r1, $r19, r21, $r27;
        int i0, $i1;
        sun.net.spi.nameservice.NameService r2, r30;
        boolean $z0, $z1, $z2;
        sun.security.action.GetBooleanAction $r3;
        java.lang.Object $r4, $r20, $r28, $r32;
        java.lang.Boolean $r5;
        sun.security.action.LoadLibraryAction $r6;
        java.net.InetAddress$Cache $r8, $r10;
        java.net.InetAddress$Cache$Type $r9, $r11;
        java.util.HashMap $r12;
        java.net.InetAddressImpl $r13;
        java.util.ArrayList $r14;
        sun.security.action.GetPropertyAction $r15, $r23;
        java.lang.StringBuilder $r16, $r17, $r18, $r24, $r25, $r26;
        java.util.List $r22, $r29, $r31;
        sun.misc.Unsafe r33;
        java.lang.reflect.Field $r35;
        long $l2;
        java.lang.ReflectiveOperationException $r36, r37;
        java.lang.Error $r38;
        java.io.ObjectStreamField[] $r39;
        java.io.ObjectStreamField $r40, $r41, $r43;

        $r0 = class "java/net/InetAddress";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.net.InetAddress: boolean $assertionsDisabled> = $z1;
        <java.net.InetAddress: boolean preferIPv6Address> = 0;
        <java.net.InetAddress: java.util.List nameServices> = null;
        $r3 = new sun.security.action.GetBooleanAction;
        specialinvoke $r3.<sun.security.action.GetBooleanAction: void <init>(java.lang.String)>("java.net.preferIPv6Addresses");
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        $r5 = (java.lang.Boolean) $r4;
        $z2 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();
        <java.net.InetAddress: boolean preferIPv6Address> = $z2;
        $r6 = new sun.security.action.LoadLibraryAction;
        specialinvoke $r6.<sun.security.action.LoadLibraryAction: void <init>(java.lang.String)>("net");
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);
        staticinvoke <java.net.InetAddress: void init()>();
        $r8 = new java.net.InetAddress$Cache;
        $r9 = <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type Positive>;
        specialinvoke $r8.<java.net.InetAddress$Cache: void <init>(java.net.InetAddress$Cache$Type)>($r9);
        <java.net.InetAddress: java.net.InetAddress$Cache addressCache> = $r8;
        $r10 = new java.net.InetAddress$Cache;
        $r11 = <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type Negative>;
        specialinvoke $r10.<java.net.InetAddress$Cache: void <init>(java.net.InetAddress$Cache$Type)>($r11);
        <java.net.InetAddress: java.net.InetAddress$Cache negativeCache> = $r10;
        <java.net.InetAddress: boolean addressCacheInit> = 0;
        $r12 = new java.util.HashMap;
        specialinvoke $r12.<java.util.HashMap: void <init>()>();
        <java.net.InetAddress: java.util.HashMap lookupTable> = $r12;
        $r13 = staticinvoke <java.net.InetAddressImplFactory: java.net.InetAddressImpl create()>();
        <java.net.InetAddress: java.net.InetAddressImpl impl> = $r13;
        n0 = null;
        r1 = "sun.net.spi.nameservice.provider.";
        i0 = 1;
        $r14 = new java.util.ArrayList;
        specialinvoke $r14.<java.util.ArrayList: void <init>()>();
        <java.net.InetAddress: java.util.List nameServices> = $r14;
        $r15 = new sun.security.action.GetPropertyAction;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>($r19);
        $r20 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r15);
        r21 = (java.lang.String) $r20;

     label2:
        if r21 == null goto label4;

        r2 = staticinvoke <java.net.InetAddress: sun.net.spi.nameservice.NameService createNSProvider(java.lang.String)>(r21);
        if r2 == null goto label3;

        $r22 = <java.net.InetAddress: java.util.List nameServices>;
        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>(r2);

     label3:
        i0 = i0 + 1;
        $r23 = new sun.security.action.GetPropertyAction;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r23.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>($r27);
        $r28 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r23);
        r21 = (java.lang.String) $r28;
        goto label2;

     label4:
        $r29 = <java.net.InetAddress: java.util.List nameServices>;
        $i1 = interfaceinvoke $r29.<java.util.List: int size()>();
        if $i1 != 0 goto label5;

        r30 = staticinvoke <java.net.InetAddress: sun.net.spi.nameservice.NameService createNSProvider(java.lang.String)>("default");
        $r31 = <java.net.InetAddress: java.util.List nameServices>;
        interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>(r30);

     label5:
        <java.net.InetAddress: java.net.InetAddress cachedLocalHost> = null;
        <java.net.InetAddress: long cacheTime> = 0L;
        $r32 = new java.lang.Object;
        specialinvoke $r32.<java.lang.Object: void <init>()>();
        <java.net.InetAddress: java.lang.Object cacheLock> = $r32;

     label6:
        r33 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        $r34 = class "java/net/InetAddress";
        $r35 = virtualinvoke $r34.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("holder");
        $l2 = virtualinvoke r33.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r35);
        <java.net.InetAddress: long FIELDS_OFFSET> = $l2;
        <java.net.InetAddress: sun.misc.Unsafe UNSAFE> = r33;

     label7:
        goto label9;

     label8:
        $r36 := @caughtexception;
        r37 = $r36;
        $r38 = new java.lang.Error;
        specialinvoke $r38.<java.lang.Error: void <init>(java.lang.Throwable)>(r37);
        throw $r38;

     label9:
        $r39 = newarray (java.io.ObjectStreamField)[3];
        $r40 = new java.io.ObjectStreamField;
        specialinvoke $r40.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("hostName", class "java/lang/String");
        $r39[0] = $r40;
        $r41 = new java.io.ObjectStreamField;
        $r42 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r41.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("address", $r42);
        $r39[1] = $r41;
        $r43 = new java.io.ObjectStreamField;
        $r44 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r43.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("family", $r44);
        $r39[2] = $r43;
        <java.net.InetAddress: java.io.ObjectStreamField[] serialPersistentFields> = $r39;
        return;

        catch java.lang.ReflectiveOperationException from label6 to label7 with label8;
    }
}
