public class java.util.logging.LogRecord extends java.lang.Object implements java.io.Serializable
{
    private static final java.util.concurrent.atomic.AtomicLong globalSequenceNumber;
    private static final int MIN_SEQUENTIAL_THREAD_ID;
    private static final java.util.concurrent.atomic.AtomicInteger nextThreadId;
    private static final java.lang.ThreadLocal threadIds;
    private java.util.logging.Level level;
    private long sequenceNumber;
    private java.lang.String sourceClassName;
    private java.lang.String sourceMethodName;
    private java.lang.String message;
    private int threadID;
    private long millis;
    private java.lang.Throwable thrown;
    private java.lang.String loggerName;
    private java.lang.String resourceBundleName;
    private transient boolean needToInferCaller;
    private transient java.lang.Object[] parameters;
    private transient java.util.ResourceBundle resourceBundle;
    private static final long serialVersionUID;

    private int defaultThreadID()
    {
        java.util.logging.LogRecord r0;
        java.lang.Thread $r1;
        long l0;
        java.lang.Integer r2;
        byte $b1;
        int $i2, $i3, $i4;
        java.lang.ThreadLocal $r3, $r6;
        java.lang.Object $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        l0 = virtualinvoke $r1.<java.lang.Thread: long getId()>();
        $b1 = l0 cmp 1073741823L;
        if $b1 >= 0 goto label0;

        $i2 = (int) l0;
        return $i2;

     label0:
        $r3 = <java.util.logging.LogRecord: java.lang.ThreadLocal threadIds>;
        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();
        r2 = (java.lang.Integer) $r4;
        if r2 != null goto label1;

        $r5 = <java.util.logging.LogRecord: java.util.concurrent.atomic.AtomicInteger nextThreadId>;
        $i3 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
        $r6 = <java.util.logging.LogRecord: java.lang.ThreadLocal threadIds>;
        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

     label1:
        $i4 = virtualinvoke r2.<java.lang.Integer: int intValue()>();
        return $i4;
    }

    public void <init>(java.util.logging.Level, java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.util.logging.Level r1;
        java.lang.String r2;
        java.util.concurrent.atomic.AtomicLong $r4;
        long $l0, $l2;
        int $i1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        r0.<java.util.logging.LogRecord: java.util.logging.Level level> = r1;
        r0.<java.util.logging.LogRecord: java.lang.String message> = r2;
        $r4 = <java.util.logging.LogRecord: java.util.concurrent.atomic.AtomicLong globalSequenceNumber>;
        $l0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
        r0.<java.util.logging.LogRecord: long sequenceNumber> = $l0;
        $i1 = specialinvoke r0.<java.util.logging.LogRecord: int defaultThreadID()>();
        r0.<java.util.logging.LogRecord: int threadID> = $i1;
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<java.util.logging.LogRecord: long millis> = $l2;
        r0.<java.util.logging.LogRecord: boolean needToInferCaller> = 1;
        return;
    }

    public java.lang.String getLoggerName()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = r0.<java.util.logging.LogRecord: java.lang.String loggerName>;
        return $r1;
    }

    public void setLoggerName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.String;
        r0.<java.util.logging.LogRecord: java.lang.String loggerName> = r1;
        return;
    }

    public java.util.ResourceBundle getResourceBundle()
    {
        java.util.logging.LogRecord r0;
        java.util.ResourceBundle $r1;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle>;
        return $r1;
    }

    public void setResourceBundle(java.util.ResourceBundle)
    {
        java.util.logging.LogRecord r0;
        java.util.ResourceBundle r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.util.ResourceBundle;
        r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle> = r1;
        return;
    }

    public java.lang.String getResourceBundleName()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName>;
        return $r1;
    }

    public void setResourceBundleName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.String;
        r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName> = r1;
        return;
    }

    public java.util.logging.Level getLevel()
    {
        java.util.logging.LogRecord r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = r0.<java.util.logging.LogRecord: java.util.logging.Level level>;
        return $r1;
    }

    public void setLevel(java.util.logging.Level)
    {
        java.util.logging.LogRecord r0;
        java.util.logging.Level r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.util.logging.Level;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.util.logging.LogRecord: java.util.logging.Level level> = r1;
        return;
    }

    public long getSequenceNumber()
    {
        java.util.logging.LogRecord r0;
        long $l0;

        r0 := @this: java.util.logging.LogRecord;
        $l0 = r0.<java.util.logging.LogRecord: long sequenceNumber>;
        return $l0;
    }

    public void setSequenceNumber(long)
    {
        java.util.logging.LogRecord r0;
        long l0;

        r0 := @this: java.util.logging.LogRecord;
        l0 := @parameter0: long;
        r0.<java.util.logging.LogRecord: long sequenceNumber> = l0;
        return;
    }

    public java.lang.String getSourceClassName()
    {
        java.util.logging.LogRecord r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;
        $z0 = r0.<java.util.logging.LogRecord: boolean needToInferCaller>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<java.util.logging.LogRecord: void inferCaller()>();

     label0:
        $r1 = r0.<java.util.logging.LogRecord: java.lang.String sourceClassName>;
        return $r1;
    }

    public void setSourceClassName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.String;
        r0.<java.util.logging.LogRecord: java.lang.String sourceClassName> = r1;
        r0.<java.util.logging.LogRecord: boolean needToInferCaller> = 0;
        return;
    }

    public java.lang.String getSourceMethodName()
    {
        java.util.logging.LogRecord r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;
        $z0 = r0.<java.util.logging.LogRecord: boolean needToInferCaller>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<java.util.logging.LogRecord: void inferCaller()>();

     label0:
        $r1 = r0.<java.util.logging.LogRecord: java.lang.String sourceMethodName>;
        return $r1;
    }

    public void setSourceMethodName(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.String;
        r0.<java.util.logging.LogRecord: java.lang.String sourceMethodName> = r1;
        r0.<java.util.logging.LogRecord: boolean needToInferCaller> = 0;
        return;
    }

    public java.lang.String getMessage()
    {
        java.util.logging.LogRecord r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = r0.<java.util.logging.LogRecord: java.lang.String message>;
        return $r1;
    }

    public void setMessage(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.String;
        r0.<java.util.logging.LogRecord: java.lang.String message> = r1;
        return;
    }

    public java.lang.Object[] getParameters()
    {
        java.util.logging.LogRecord r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        return $r1;
    }

    public void setParameters(java.lang.Object[])
    {
        java.util.logging.LogRecord r0;
        java.lang.Object[] r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.Object[];
        r0.<java.util.logging.LogRecord: java.lang.Object[] parameters> = r1;
        return;
    }

    public int getThreadID()
    {
        java.util.logging.LogRecord r0;
        int $i0;

        r0 := @this: java.util.logging.LogRecord;
        $i0 = r0.<java.util.logging.LogRecord: int threadID>;
        return $i0;
    }

    public void setThreadID(int)
    {
        java.util.logging.LogRecord r0;
        int i0;

        r0 := @this: java.util.logging.LogRecord;
        i0 := @parameter0: int;
        r0.<java.util.logging.LogRecord: int threadID> = i0;
        return;
    }

    public long getMillis()
    {
        java.util.logging.LogRecord r0;
        long $l0;

        r0 := @this: java.util.logging.LogRecord;
        $l0 = r0.<java.util.logging.LogRecord: long millis>;
        return $l0;
    }

    public void setMillis(long)
    {
        java.util.logging.LogRecord r0;
        long l0;

        r0 := @this: java.util.logging.LogRecord;
        l0 := @parameter0: long;
        r0.<java.util.logging.LogRecord: long millis> = l0;
        return;
    }

    public java.lang.Throwable getThrown()
    {
        java.util.logging.LogRecord r0;
        java.lang.Throwable $r1;

        r0 := @this: java.util.logging.LogRecord;
        $r1 = r0.<java.util.logging.LogRecord: java.lang.Throwable thrown>;
        return $r1;
    }

    public void setThrown(java.lang.Throwable)
    {
        java.util.logging.LogRecord r0;
        java.lang.Throwable r1;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.Throwable;
        r0.<java.util.logging.LogRecord: java.lang.Throwable thrown> = r1;
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.logging.LogRecord r0;
        java.io.ObjectOutputStream r1;
        int i0, $i1, $i2;
        java.lang.Object[] $r2, $r3, $r4, $r5, $r7;
        java.lang.Object $r6, $r8;
        java.lang.String $r9;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeByte(int)>(1);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeByte(int)>(0);
        $r2 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        if $r2 != null goto label0;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(-1);
        return;

     label0:
        $r3 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        $i1 = lengthof $r3;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);
        i0 = 0;

     label1:
        $r4 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        $i2 = lengthof $r4;
        if i0 >= $i2 goto label4;

        $r5 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        $r6 = $r5[i0];
        if $r6 != null goto label2;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);
        goto label3;

     label2:
        $r7 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        $r8 = $r7[i0];
        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);

     label3:
        i0 = i0 + 1;
        goto label1;

     label4:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.logging.LogRecord r0;
        java.io.ObjectInputStream r1;
        byte b0, b1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7;
        int i2, i3, $i4;
        java.io.IOException $r3;
        java.lang.String $r8, $r13, $r14;
        java.lang.Object[] $r9, $r10, $r11;
        java.lang.Object $r12;
        java.util.Locale $r15;
        java.lang.ClassLoader $r16;
        java.util.ResourceBundle r17;
        java.util.MissingResourceException $r18, r19;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        b0 = virtualinvoke r1.<java.io.ObjectInputStream: byte readByte()>();
        b1 = virtualinvoke r1.<java.io.ObjectInputStream: byte readByte()>();
        if b0 == 1 goto label0;

        $r3 = new java.io.IOException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LogRecord: bad version: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);
        throw $r3;

     label0:
        i2 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        if i2 != -1 goto label1;

        r0.<java.util.logging.LogRecord: java.lang.Object[] parameters> = null;
        goto label3;

     label1:
        $r9 = newarray (java.lang.Object)[i2];
        r0.<java.util.logging.LogRecord: java.lang.Object[] parameters> = $r9;
        i3 = 0;

     label2:
        $r10 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        $i4 = lengthof $r10;
        if i3 >= $i4 goto label3;

        $r11 = r0.<java.util.logging.LogRecord: java.lang.Object[] parameters>;
        $r12 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        $r11[i3] = $r12;
        i3 = i3 + 1;
        goto label2;

     label3:
        $r13 = r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName>;
        if $r13 == null goto label7;

     label4:
        $r14 = r0.<java.util.logging.LogRecord: java.lang.String resourceBundleName>;
        $r15 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r16 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r17 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>($r14, $r15, $r16);
        r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle> = r17;

     label5:
        goto label7;

     label6:
        $r18 := @caughtexception;
        r19 = $r18;
        r0.<java.util.logging.LogRecord: java.util.ResourceBundle resourceBundle> = null;

     label7:
        r0.<java.util.logging.LogRecord: boolean needToInferCaller> = 0;
        return;

        catch java.util.MissingResourceException from label4 to label5 with label6;
    }

    private void inferCaller()
    {
        java.util.logging.LogRecord r0;
        sun.misc.JavaLangAccess r1;
        java.lang.Throwable r2, $r5;
        int i0, i1;
        boolean z0, z1, $z2, $z3;
        java.lang.StackTraceElement r3;
        java.lang.String r4, $r6;

        r0 := @this: java.util.logging.LogRecord;
        r0.<java.util.logging.LogRecord: boolean needToInferCaller> = 0;
        r1 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        $r5 = new java.lang.Throwable;
        specialinvoke $r5.<java.lang.Throwable: void <init>()>();
        r2 = $r5;
        i0 = interfaceinvoke r1.<sun.misc.JavaLangAccess: int getStackTraceDepth(java.lang.Throwable)>(r2);
        z0 = 1;
        i1 = 0;

     label0:
        if i1 >= i0 goto label3;

        r3 = interfaceinvoke r1.<sun.misc.JavaLangAccess: java.lang.StackTraceElement getStackTraceElement(java.lang.Throwable,int)>(r2, i1);
        r4 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getClassName()>();
        z1 = specialinvoke r0.<java.util.logging.LogRecord: boolean isLoggerImplFrame(java.lang.String)>(r4);
        if z0 == 0 goto label1;

        if z1 == 0 goto label2;

        z0 = 0;
        goto label2;

     label1:
        if z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("java.lang.reflect.");
        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("sun.reflect.");
        if $z3 != 0 goto label2;

        virtualinvoke r0.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r4);
        $r6 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getMethodName()>();
        virtualinvoke r0.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>($r6);
        return;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        return;
    }

    private boolean isLoggerImplFrame(java.lang.String)
    {
        java.util.logging.LogRecord r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.logging.LogRecord;
        r1 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("java.util.logging.Logger");
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.logging.LoggingProxyImpl");
        if $z1 != 0 goto label0;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("sun.util.logging.");
        if $z2 == 0 goto label1;

     label0:
        $z3 = 1;
        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.ThreadLocal $r2;

        $r0 = new java.util.concurrent.atomic.AtomicLong;
        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);
        <java.util.logging.LogRecord: java.util.concurrent.atomic.AtomicLong globalSequenceNumber> = $r0;
        $r1 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1073741823);
        <java.util.logging.LogRecord: java.util.concurrent.atomic.AtomicInteger nextThreadId> = $r1;
        $r2 = new java.lang.ThreadLocal;
        specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>();
        <java.util.logging.LogRecord: java.lang.ThreadLocal threadIds> = $r2;
        return;
    }
}
