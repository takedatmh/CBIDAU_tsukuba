final class java.util.concurrent.ConcurrentHashMap$Segment extends java.util.concurrent.locks.ReentrantLock implements java.io.Serializable
{
    private static final long serialVersionUID;
    static final int MAX_SCAN_RETRIES;
    transient volatile java.util.concurrent.ConcurrentHashMap$HashEntry[] table;
    transient int count;
    transient int modCount;
    transient int threshold;
    final float loadFactor;

    void <init>(float, int, java.util.concurrent.ConcurrentHashMap$HashEntry[])
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        float f0;
        int i0;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        f0 := @parameter0: float;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap$HashEntry[];
        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor> = f0;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold> = i0;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table> = r1;
        return;
    }

    final java.lang.Object put(java.lang.Object, int, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r7, r8, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12;
        boolean z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap$HashEntry r3, r5, r6, $r10, $r13;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r4;
        java.lang.Throwable r9, $r15;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        z0 := @parameter3: boolean;
        $z1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();
        if $z1 == 0 goto label0;

        $r10 = null;
        goto label1;

     label0:
        $r10 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry scanAndLockForPut(java.lang.Object,int,java.lang.Object)>(r1, i0, r2);

     label1:
        r3 = $r10;

     label2:
        r4 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        $i2 = lengthof r4;
        $i3 = $i2 - 1;
        i1 = $i3 & i0;
        r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r4, i1);
        r6 = r5;

     label3:
        if r6 == null goto label6;

        $r11 = r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        r7 = $r11;
        if $r11 == r1 goto label4;

        $i4 = r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        if $i4 != i0 goto label5;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
        if $z2 == 0 goto label5;

     label4:
        r8 = r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        if z0 != 0 goto label11;

        r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value> = r2;
        $i5 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $i6 = $i5 + 1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i6;
        goto label11;

     label5:
        r6 = r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label3;

     label6:
        if r3 == null goto label7;

        virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)>(r5);
        goto label8;

     label7:
        $r13 = new java.util.concurrent.ConcurrentHashMap$HashEntry;
        specialinvoke $r13.<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)>(i0, r1, r2, r5);
        r3 = $r13;

     label8:
        $i7 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;
        i8 = $i7 + 1;
        $i9 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold>;
        if i8 <= $i9 goto label9;

        $i10 = lengthof r4;
        if $i10 >= 1073741824 goto label9;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void rehash(java.util.concurrent.ConcurrentHashMap$HashEntry)>(r3);
        goto label10;

     label9:
        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)>(r4, i1, r3);

     label10:
        $i11 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $i12 = $i11 + 1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i12;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count> = i8;
        r8 = null;
        goto label11;

     label11:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        goto label15;

     label12:
        $r15 := @caughtexception;

     label13:
        r9 = $r15;

     label14:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        throw r9;

     label15:
        return r8;

        catch java.lang.Throwable from label2 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void rehash(java.util.concurrent.ConcurrentHashMap$HashEntry)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.util.concurrent.ConcurrentHashMap$HashEntry r1, r4, r5, r6, r7, r8, r10, $r12, $r14;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r2, r3, $r9;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, i13;
        float $f0, $f1, $f2;
        java.lang.Object r11, $r13;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$HashEntry;
        r2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        i0 = lengthof r2;
        i1 = i0 << 1;
        $f0 = (float) i1;
        $f1 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor>;
        $f2 = $f0 * $f1;
        $i9 = (int) $f2;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold> = $i9;
        $r9 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[i1];
        r3 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r9;
        i2 = i1 - 1;
        i3 = 0;

     label0:
        if i3 >= i0 goto label7;

        r4 = r2[i3];
        if r4 == null goto label6;

        r5 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        $i10 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        i4 = $i10 & i2;
        if r5 != null goto label1;

        r3[i4] = r4;
        goto label6;

     label1:
        r6 = r4;
        i5 = i4;
        r7 = r5;

     label2:
        if r7 == null goto label4;

        $i11 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        i6 = $i11 & i2;
        if i6 == i5 goto label3;

        i5 = i6;
        r6 = r7;

     label3:
        r7 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label2;

     label4:
        r3[i5] = r6;
        r10 = r4;

     label5:
        if r10 == r6 goto label6;

        r11 = r10.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        i7 = r10.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        i8 = i7 & i2;
        r8 = r3[i8];
        $r12 = new java.util.concurrent.ConcurrentHashMap$HashEntry;
        $r13 = r10.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)>(i7, $r13, r11, r8);
        r3[i8] = $r12;
        r10 = r10.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label5;

     label6:
        i3 = i3 + 1;
        goto label0;

     label7:
        $i12 = r1.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        i13 = $i12 & i2;
        $r14 = r3[i13];
        virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)>($r14);
        r3[i13] = r1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table> = r3;
        return;
    }

    private java.util.concurrent.ConcurrentHashMap$HashEntry scanAndLockForPut(java.lang.Object, int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, $r8;
        int i0, i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r3, r4, r5, r6, $r7, $r9;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        r3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);
        r4 = r3;
        r5 = null;
        i1 = -1;

     label0:
        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();
        if $z0 != 0 goto label7;

        if i1 >= 0 goto label4;

        if r4 != null goto label2;

        if r5 != null goto label1;

        $r7 = new java.util.concurrent.ConcurrentHashMap$HashEntry;
        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)>(i0, r1, r2, null);
        r5 = $r7;

     label1:
        i1 = 0;
        goto label6;

     label2:
        $r8 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r8);
        if $z1 == 0 goto label3;

        i1 = 0;
        goto label6;

     label3:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label6;

     label4:
        i1 = i1 + 1;
        $i2 = <java.util.concurrent.ConcurrentHashMap$Segment: int MAX_SCAN_RETRIES>;
        if i1 <= $i2 goto label5;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();
        goto label7;

     label5:
        $i3 = i1 & 1;
        if $i3 != 0 goto label6;

        $r9 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);
        r6 = $r9;
        if $r9 == r3 goto label6;

        r3 = r6;
        r4 = r6;
        i1 = -1;

     label6:
        goto label0;

     label7:
        return r5;
    }

    private void scanAndLock(java.lang.Object, int)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, $r5;
        int i0, i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r2, r3, r4, $r6;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);
        r3 = r2;
        i1 = -1;

     label0:
        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();
        if $z0 != 0 goto label6;

        if i1 >= 0 goto label3;

        if r3 == null goto label1;

        $r5 = r3.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z1 == 0 goto label2;

     label1:
        i1 = 0;
        goto label5;

     label2:
        r3 = r3.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label5;

     label3:
        i1 = i1 + 1;
        $i2 = <java.util.concurrent.ConcurrentHashMap$Segment: int MAX_SCAN_RETRIES>;
        if i1 <= $i2 goto label4;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();
        goto label6;

     label4:
        $i3 = i1 & 1;
        if $i3 != 0 goto label5;

        $r6 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);
        r4 = $r6;
        if $r6 == r2 goto label5;

        r2 = r4;
        r3 = r4;
        i1 = -1;

     label5:
        goto label0;

     label6:
        return;
    }

    final java.lang.Object remove(java.lang.Object, int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r3, r8, r9, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r4;
        java.util.concurrent.ConcurrentHashMap$HashEntry r5, r6, r7;
        java.lang.Throwable r10, $r14;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();
        if $z0 != 0 goto label0;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void scanAndLock(java.lang.Object,int)>(r1, i0);

     label0:
        r3 = null;

     label1:
        r4 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        $i2 = lengthof r4;
        $i3 = $i2 - 1;
        i1 = $i3 & i0;
        r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r4, i1);
        r6 = null;

     label2:
        if r5 == null goto label8;

        r7 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        $r11 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        r8 = $r11;
        if $r11 == r1 goto label3;

        $i4 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        if $i4 != i0 goto label7;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r8);
        if $z1 == 0 goto label7;

     label3:
        r9 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        if r2 == null goto label4;

        if r2 == r9 goto label4;

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r9);
        if $z2 == 0 goto label8;

     label4:
        if r6 != null goto label5;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)>(r4, i1, r7);
        goto label6;

     label5:
        virtualinvoke r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)>(r7);

     label6:
        $i5 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $i6 = $i5 + 1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i6;
        $i7 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;
        $i8 = $i7 - 1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count> = $i8;
        r3 = r9;
        goto label8;

     label7:
        r6 = r5;
        r5 = r7;
        goto label2;

     label8:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        goto label12;

     label9:
        $r14 := @caughtexception;

     label10:
        r10 = $r14;

     label11:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        throw r10;

     label12:
        return r3;

        catch java.lang.Throwable from label1 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    final boolean replace(java.lang.Object, int, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r3, r5, $r7, $r8;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2, $z3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        java.lang.Throwable r6, $r10;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.lang.Object;
        $z1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();
        if $z1 != 0 goto label0;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void scanAndLock(java.lang.Object,int)>(r1, i0);

     label0:
        z0 = 0;

     label1:
        r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

     label2:
        if r4 == null goto label5;

        $r7 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        r5 = $r7;
        if $r7 == r1 goto label3;

        $i1 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        if $i1 != i0 goto label4;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z2 == 0 goto label4;

     label3:
        $r8 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        $z3 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r8);
        if $z3 == 0 goto label5;

        r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value> = r3;
        $i2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i3;
        z0 = 1;
        goto label5;

     label4:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label2;

     label5:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        goto label9;

     label6:
        $r10 := @caughtexception;

     label7:
        r6 = $r10;

     label8:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        throw r6;

     label9:
        return z0;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    final java.lang.Object replace(java.lang.Object, int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r3, r5, $r7;
        int i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        java.lang.Throwable r6, $r9;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();
        if $z0 != 0 goto label0;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void scanAndLock(java.lang.Object,int)>(r1, i0);

     label0:
        r3 = null;

     label1:
        r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

     label2:
        if r4 == null goto label5;

        $r7 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        r5 = $r7;
        if $r7 == r1 goto label3;

        $i1 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        if $i1 != i0 goto label4;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z1 == 0 goto label4;

     label3:
        r3 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value> = r2;
        $i2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i3;
        goto label5;

     label4:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label2;

     label5:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        goto label9;

     label6:
        $r9 := @caughtexception;

     label7:
        r6 = $r9;

     label8:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        throw r6;

     label9:
        return r3;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    final void clear()
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r1;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

     label0:
        r1 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        i0 = 0;

     label1:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label2;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)>(r1, i0, null);
        i0 = i0 + 1;
        goto label1;

     label2:
        $i2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i3;
        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count> = 0;

     label3:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;

     label6:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static void <clinit>()
    {
        java.lang.Runtime $r0;
        int $i0;
        byte $b1;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();
        if $i0 <= 1 goto label0;

        $b1 = 64;
        goto label1;

     label0:
        $b1 = 1;

     label1:
        <java.util.concurrent.ConcurrentHashMap$Segment: int MAX_SCAN_RETRIES> = $b1;
        return;
    }
}
