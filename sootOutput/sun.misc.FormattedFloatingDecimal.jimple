public class sun.misc.FormattedFloatingDecimal extends java.lang.Object
{
    boolean isExceptional;
    boolean isNegative;
    int decExponent;
    int decExponentRounded;
    char[] digits;
    int nDigits;
    int bigIntExp;
    int bigIntNBits;
    boolean mustSetRoundDir;
    boolean fromHex;
    int roundDir;
    int precision;
    private sun.misc.FormattedFloatingDecimal$Form form;
    static final long signMask;
    static final long expMask;
    static final long fractMask;
    static final int expShift;
    static final int expBias;
    static final long fractHOB;
    static final long expOne;
    static final int maxSmallBinExp;
    static final int minSmallBinExp;
    static final int maxDecimalDigits;
    static final int maxDecimalExponent;
    static final int minDecimalExponent;
    static final int bigDecimalExponent;
    static final long highbyte;
    static final long highbit;
    static final long lowbytes;
    static final int singleSignMask;
    static final int singleExpMask;
    static final int singleFractMask;
    static final int singleExpShift;
    static final int singleFractHOB;
    static final int singleExpBias;
    static final int singleMaxDecimalDigits;
    static final int singleMaxDecimalExponent;
    static final int singleMinDecimalExponent;
    static final int intDecimalDigits;
    private static sun.misc.FDBigInt[] b5p;
    private static java.lang.ThreadLocal perThreadBuffer;
    private static final double[] small10pow;
    private static final float[] singleSmall10pow;
    private static final double[] big10pow;
    private static final double[] tiny10pow;
    private static final int maxSmallTen;
    private static final int singleMaxSmallTen;
    private static final int[] small5pow;
    private static final long[] long5pow;
    private static final int[] n5bits;
    private static final char[] infinity;
    private static final char[] notANumber;
    private static final char[] zero;
    static final boolean $assertionsDisabled;

    private void <init>(boolean, int, char[], int, boolean, int, sun.misc.FormattedFloatingDecimal$Form)
    {
        sun.misc.FormattedFloatingDecimal r0;
        boolean z0, z1;
        int i0, i1, i2;
        char[] r1;
        sun.misc.FormattedFloatingDecimal$Form r2;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        z0 := @parameter0: boolean;
        i0 := @parameter1: int;
        r1 := @parameter2: char[];
        i1 := @parameter3: int;
        z1 := @parameter4: boolean;
        i2 := @parameter5: int;
        r2 := @parameter6: sun.misc.FormattedFloatingDecimal$Form;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir> = 0;
        r0.<sun.misc.FormattedFloatingDecimal: boolean fromHex> = 0;
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = 0;
        r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative> = z0;
        r0.<sun.misc.FormattedFloatingDecimal: boolean isExceptional> = z1;
        r0.<sun.misc.FormattedFloatingDecimal: int decExponent> = i0;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = r1;
        r0.<sun.misc.FormattedFloatingDecimal: int nDigits> = i1;
        r0.<sun.misc.FormattedFloatingDecimal: int precision> = i2;
        r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form> = r2;
        return;
    }

    private static int countBits(long)
    {
        long l0, $l3, $l6;
        int i1;
        byte $b2, $b4, $b5, $b7, $b8;

        l0 := @parameter0: long;
        $b2 = l0 cmp 0L;
        if $b2 != 0 goto label0;

        return 0;

     label0:
        $l3 = l0 & -72057594037927936L;
        $b4 = $l3 cmp 0L;
        if $b4 != 0 goto label1;

        l0 = l0 << 8;
        goto label0;

     label1:
        $b5 = l0 cmp 0L;
        if $b5 <= 0 goto label2;

        l0 = l0 << 1;
        goto label1;

     label2:
        i1 = 0;

     label3:
        $l6 = l0 & 72057594037927935L;
        $b7 = $l6 cmp 0L;
        if $b7 == 0 goto label4;

        l0 = l0 << 8;
        i1 = i1 + 8;
        goto label3;

     label4:
        $b8 = l0 cmp 0L;
        if $b8 == 0 goto label5;

        l0 = l0 << 1;
        i1 = i1 + 1;
        goto label4;

     label5:
        return i1;
    }

    private static synchronized sun.misc.FDBigInt big5pow(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, $i11, $i12;
        boolean $z0;
        sun.misc.FDBigInt[] r0, $r1, $r5, $r6, $r7, $r8, $r9, $r11, $r14, $r19, $r23, $r25, $r28, $r29;
        sun.misc.FDBigInt r2, r3, $r10, $r12, $r15, $r20, $r27, $r30;
        java.lang.AssertionError $r4;
        int[] $r13, $r16, $r24, $r26;
        long[] $r18, $r21;
        long $l9;

        i0 := @parameter0: int;
        $z0 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 >= 0 goto label0;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>(int)>(i0);
        throw $r4;

     label0:
        $r5 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        if $r5 != null goto label1;

        $i2 = i0 + 1;
        $r6 = newarray (sun.misc.FDBigInt)[$i2];
        <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p> = $r6;
        goto label2;

     label1:
        $r7 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $i3 = lengthof $r7;
        if $i3 > i0 goto label2;

        $i4 = i0 + 1;
        r0 = newarray (sun.misc.FDBigInt)[$i4];
        $r8 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $r1 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $i5 = lengthof $r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r0, 0, $i5);
        <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p> = r0;

     label2:
        $r9 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $r10 = $r9[i0];
        if $r10 == null goto label3;

        $r11 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $r12 = $r11[i0];
        return $r12;

     label3:
        $r13 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i6 = lengthof $r13;
        if i0 >= $i6 goto label4;

        $r14 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $r15 = new sun.misc.FDBigInt;
        $r16 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i7 = $r16[i0];
        specialinvoke $r15.<sun.misc.FDBigInt: void <init>(int)>($i7);
        $r14[i0] = $r15;
        return $r15;

     label4:
        $r18 = <sun.misc.FormattedFloatingDecimal: long[] long5pow>;
        $i8 = lengthof $r18;
        if i0 >= $i8 goto label5;

        $r19 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $r20 = new sun.misc.FDBigInt;
        $r21 = <sun.misc.FormattedFloatingDecimal: long[] long5pow>;
        $l9 = $r21[i0];
        specialinvoke $r20.<sun.misc.FDBigInt: void <init>(long)>($l9);
        $r19[i0] = $r20;
        return $r20;

     label5:
        i10 = i0 >> 1;
        i1 = i0 - i10;
        $r23 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        r2 = $r23[i10];
        if r2 != null goto label6;

        r2 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt big5pow(int)>(i10);

     label6:
        $r24 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i11 = lengthof $r24;
        if i1 >= $i11 goto label7;

        $r25 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $r26 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i12 = $r26[i1];
        $r27 = virtualinvoke r2.<sun.misc.FDBigInt: sun.misc.FDBigInt mult(int)>($i12);
        $r25[i0] = $r27;
        return $r27;

     label7:
        $r28 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        r3 = $r28[i1];
        if r3 != null goto label8;

        r3 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt big5pow(int)>(i1);

     label8:
        $r29 = <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt[] b5p>;
        $r30 = virtualinvoke r2.<sun.misc.FDBigInt: sun.misc.FDBigInt mult(sun.misc.FDBigInt)>(r3);
        $r29[i0] = $r30;
        return $r30;
    }

    private static sun.misc.FDBigInt multPow52(sun.misc.FDBigInt, int, int)
    {
        sun.misc.FDBigInt r0, $r3;
        int i0, i1, $i2, $i3;
        int[] $r1, $r2;

        r0 := @parameter0: sun.misc.FDBigInt;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 == 0 goto label1;

        $r1 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i2 = lengthof $r1;
        if i0 >= $i2 goto label0;

        $r2 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i3 = $r2[i0];
        r0 = virtualinvoke r0.<sun.misc.FDBigInt: sun.misc.FDBigInt mult(int)>($i3);
        goto label1;

     label0:
        $r3 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt big5pow(int)>(i0);
        r0 = virtualinvoke r0.<sun.misc.FDBigInt: sun.misc.FDBigInt mult(sun.misc.FDBigInt)>($r3);

     label1:
        if i1 == 0 goto label2;

        virtualinvoke r0.<sun.misc.FDBigInt: void lshiftMe(int)>(i1);

     label2:
        return r0;
    }

    private static sun.misc.FDBigInt constructPow52(int, int)
    {
        int i0, i1;
        sun.misc.FDBigInt $r0, r1, $r2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r0 = new sun.misc.FDBigInt;
        $r2 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt big5pow(int)>(i0);
        specialinvoke $r0.<sun.misc.FDBigInt: void <init>(sun.misc.FDBigInt)>($r2);
        r1 = $r0;
        if i1 == 0 goto label0;

        virtualinvoke r1.<sun.misc.FDBigInt: void lshiftMe(int)>(i1);

     label0:
        return r1;
    }

    private sun.misc.FDBigInt doubleToBigInt(double)
    {
        sun.misc.FormattedFloatingDecimal r0;
        double d0;
        long l0, $l4, $l5, l6, $l8, l11;
        int i1, i2, i3, i10, $i12, $i13;
        boolean $z0;
        byte $b7, $b9;
        java.lang.AssertionError $r1;
        sun.misc.FDBigInt $r2;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        d0 := @parameter0: double;
        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        l0 = $l4 & 9223372036854775807L;
        $l5 = l0 >>> 52;
        i1 = (int) $l5;
        l6 = l0 & 4503599627370495L;
        if i1 <= 0 goto label0;

        l6 = l6 | 4503599627370496L;
        goto label3;

     label0:
        $z0 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $b7 = l6 cmp 0L;
        if $b7 != 0 goto label1;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>(long)>(l6);
        throw $r1;

     label1:
        i1 = i1 + 1;

     label2:
        $l8 = l6 & 4503599627370496L;
        $b9 = $l8 cmp 0L;
        if $b9 != 0 goto label3;

        l6 = l6 << 1;
        i1 = i1 + -1;
        goto label2;

     label3:
        i10 = i1 + -1023;
        i2 = staticinvoke <sun.misc.FormattedFloatingDecimal: int countBits(long)>(l6);
        i3 = 53 - i2;
        l11 = l6 >>> i3;
        $i12 = i10 + 1;
        $i13 = $i12 - i2;
        r0.<sun.misc.FormattedFloatingDecimal: int bigIntExp> = $i13;
        r0.<sun.misc.FormattedFloatingDecimal: int bigIntNBits> = i2;
        $r2 = new sun.misc.FDBigInt;
        specialinvoke $r2.<sun.misc.FDBigInt: void <init>(long)>(l11);
        return $r2;
    }

    private static double ulp(double, boolean)
    {
        double d0, d1;
        boolean z0;
        long l0, $l2, $l3, $l4, $l7, $l8, $l10;
        int i1, $i6, $i9;
        byte $b5;

        d0 := @parameter0: double;
        z0 := @parameter1: boolean;
        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        l0 = $l2 & 9223372036854775807L;
        $l3 = l0 >>> 52;
        i1 = (int) $l3;
        if z0 == 0 goto label0;

        if i1 < 52 goto label0;

        $l4 = l0 & 4503599627370495L;
        $b5 = $l4 cmp 0L;
        if $b5 != 0 goto label0;

        i1 = i1 + -1;

     label0:
        if i1 <= 52 goto label1;

        $i6 = i1 - 52;
        $l7 = (long) $i6;
        $l8 = $l7 << 52;
        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l8);
        goto label3;

     label1:
        if i1 != 0 goto label2;

        d1 = 4.9E-324;
        goto label3;

     label2:
        $i9 = i1 - 1;
        $l10 = 1L << $i9;
        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l10);

     label3:
        if z0 == 0 goto label4;

        d1 = neg d1;

     label4:
        return d1;
    }

    float stickyRound(double)
    {
        sun.misc.FormattedFloatingDecimal r0;
        double d0, $d1;
        long l0, l1, $l5, l6;
        byte $b2, $b3;
        float $f0, $f1;
        int $i4;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        d0 := @parameter0: double;
        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        l1 = l0 & 9218868437227405312L;
        $b2 = l1 cmp 0L;
        if $b2 == 0 goto label0;

        $b3 = l1 cmp 9218868437227405312L;
        if $b3 != 0 goto label1;

     label0:
        $f0 = (float) d0;
        return $f0;

     label1:
        $i4 = r0.<sun.misc.FormattedFloatingDecimal: int roundDir>;
        $l5 = (long) $i4;
        l6 = l0 + $l5;
        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l6);
        $f1 = (float) $d1;
        return $f1;
    }

    private void developLongDigits(int, long, long)
    {
        sun.misc.FormattedFloatingDecimal r0;
        int i0, i3, i7, i8, i15, i16, $i17, $i18, $i20, i23, $i27, $i28, $i31, i33, $i34;
        long l1, l2, l4, l5, $l10, $l11, $l22, l24, $l25, $l30;
        byte b6, $b9, $b12, $b13, $b14, $b26;
        char[] r1, $r6, $r9, r10;
        long[] $r2;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.lang.ThreadLocal $r4, $r7;
        java.lang.Object $r5, $r8;
        char $c19, $c21, $c29, $c32;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        l2 := @parameter2: long;
        i3 = 0;

     label0:
        $b9 = l2 cmp 10L;
        if $b9 < 0 goto label1;

        l2 = l2 / 10L;
        i3 = i3 + 1;
        goto label0;

     label1:
        if i3 == 0 goto label2;

        $r2 = <sun.misc.FormattedFloatingDecimal: long[] long5pow>;
        $l10 = $r2[i3];
        l4 = $l10 << i3;
        l5 = l1 % l4;
        l1 = l1 / l4;
        i0 = i0 + i3;
        $l11 = l4 >> 1;
        $b12 = l5 cmp $l11;
        if $b12 < 0 goto label2;

        l1 = l1 + 1L;

     label2:
        $b13 = l1 cmp 2147483647L;
        if $b13 > 0 goto label7;

        $z0 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z0 != 0 goto label3;

        $b14 = l1 cmp 0L;
        if $b14 > 0 goto label3;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>(long)>(l1);
        throw $r3;

     label3:
        i15 = (int) l1;
        b6 = 10;
        $r4 = <sun.misc.FormattedFloatingDecimal: java.lang.ThreadLocal perThreadBuffer>;
        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();
        $r6 = (char[]) $r5;
        r1 = (char[]) $r6;
        i7 = b6 - 1;
        i8 = i15 % 10;
        i16 = i15 / 10;

     label4:
        if i8 != 0 goto label5;

        i0 = i0 + 1;
        i8 = i16 % 10;
        i16 = i16 / 10;
        goto label4;

     label5:
        if i16 == 0 goto label6;

        $i17 = i7;
        i7 = i7 + -1;
        $i18 = i8 + 48;
        $c19 = (char) $i18;
        r1[$i17] = $c19;
        i0 = i0 + 1;
        i8 = i16 % 10;
        i16 = i16 / 10;
        goto label5;

     label6:
        $i20 = i8 + 48;
        $c21 = (char) $i20;
        r1[i7] = $c21;
        goto label11;

     label7:
        b6 = 20;
        $r7 = <sun.misc.FormattedFloatingDecimal: java.lang.ThreadLocal perThreadBuffer>;
        $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>();
        $r9 = (char[]) $r8;
        r1 = (char[]) $r9;
        i7 = b6 - 1;
        $l22 = l1 % 10L;
        i23 = (int) $l22;
        l24 = l1 / 10L;

     label8:
        if i23 != 0 goto label9;

        i0 = i0 + 1;
        $l25 = l24 % 10L;
        i23 = (int) $l25;
        l24 = l24 / 10L;
        goto label8;

     label9:
        $b26 = l24 cmp 0L;
        if $b26 == 0 goto label10;

        $i27 = i7;
        i7 = i7 + -1;
        $i28 = i23 + 48;
        $c29 = (char) $i28;
        r1[$i27] = $c29;
        i0 = i0 + 1;
        $l30 = l24 % 10L;
        i23 = (int) $l30;
        l24 = l24 / 10L;
        goto label9;

     label10:
        $i31 = i23 + 48;
        $c32 = (char) $i31;
        r1[i7] = $c32;

     label11:
        i33 = b6 - i7;
        r10 = newarray (char)[i33];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i7, r10, 0, i33);
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = r10;
        $i34 = i0 + 1;
        r0.<sun.misc.FormattedFloatingDecimal: int decExponent> = $i34;
        r0.<sun.misc.FormattedFloatingDecimal: int nDigits> = i33;
        return;
    }

    private void roundup()
    {
        sun.misc.FormattedFloatingDecimal r0;
        int i0, $i2, $i3, $i4, $i5, $i6;
        char c1, $c7;
        char[] $r1, $r2, $r3, $r5, $r6;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        $r1 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i2 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i3 = $i2 - 1;
        i0 = $i3;
        c1 = $r1[$i3];
        if c1 != 57 goto label2;

     label0:
        if c1 != 57 goto label1;

        if i0 <= 0 goto label1;

        $r2 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r2[i0] = 48;
        $r3 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        i0 = i0 + -1;
        c1 = $r3[i0];
        goto label0;

     label1:
        if c1 != 57 goto label2;

        $i4 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i5 = $i4 + 1;
        r0.<sun.misc.FormattedFloatingDecimal: int decExponent> = $i5;
        $r5 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r5[0] = 49;
        return;

     label2:
        $r6 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i6 = c1 + 1;
        $c7 = (char) $i6;
        $r6[i0] = $c7;
        return;
    }

    private int checkExponent(int)
    {
        sun.misc.FormattedFloatingDecimal r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i9;
        char[] $r1, $r2;
        char $c4, $c7;
        byte $b8;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        i0 := @parameter0: int;
        $i2 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if i0 >= $i2 goto label0;

        if i0 >= 0 goto label1;

     label0:
        $i3 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        return $i3;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r1 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c4 = $r1[i1];
        if $c4 == 57 goto label3;

        $i5 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        return $i5;

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        $i6 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $r2 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c7 = $r2[i0];
        if $c7 < 53 goto label5;

        $b8 = 1;
        goto label6;

     label5:
        $b8 = 0;

     label6:
        $i9 = $i6 + $b8;
        return $i9;
    }

    private char[] applyPrecision(int)
    {
        sun.misc.FormattedFloatingDecimal r0;
        int i0, i1, $i3, $i4, $i5, $i6, i8, $i10;
        char[] r1, $r2, $r3, $r4, $r5, $r6, $r7;
        char c2, $c7, c9, $c11, $c12;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        i0 := @parameter0: int;
        $i3 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        r1 = newarray (char)[$i3];
        i1 = 0;

     label0:
        $i4 = lengthof r1;
        if i1 >= $i4 goto label1;

        r1[i1] = 48;
        i1 = i1 + 1;
        goto label0;

     label1:
        $i5 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if i0 >= $i5 goto label2;

        if i0 >= 0 goto label3;

     label2:
        $r2 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i6 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i6);
        return r1;

     label3:
        if i0 != 0 goto label5;

        $r3 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c7 = $r3[0];
        if $c7 < 53 goto label4;

        r1[0] = 49;

     label4:
        return r1;

     label5:
        i8 = i0;
        $r4 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        c2 = $r4[i8];
        if c2 < 53 goto label9;

        if i8 <= 0 goto label9;

        $r5 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        i8 = i8 + -1;
        c9 = $r5[i8];
        if c9 != 57 goto label8;

     label6:
        if c9 != 57 goto label7;

        if i8 <= 0 goto label7;

        $r6 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        i8 = i8 + -1;
        c9 = $r6[i8];
        goto label6;

     label7:
        if c9 != 57 goto label8;

        r1[0] = 49;
        return r1;

     label8:
        $i10 = c9 + 1;
        $c11 = (char) $i10;
        r1[i8] = $c11;

     label9:
        i8 = i8 + -1;
        if i8 < 0 goto label10;

        $r7 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c12 = $r7[i8];
        r1[i8] = $c12;
        goto label9;

     label10:
        return r1;
    }

    public void <init>(double)
    {
        sun.misc.FormattedFloatingDecimal r0;
        double d0;
        sun.misc.FormattedFloatingDecimal$Form $r1;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        d0 := @parameter0: double;
        $r1 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void <init>(double,int,sun.misc.FormattedFloatingDecimal$Form)>(d0, 2147483647, $r1);
        return;
    }

    public void <init>(double, int, sun.misc.FormattedFloatingDecimal$Form)
    {
        sun.misc.FormattedFloatingDecimal r0;
        double d0;
        int i0, i2, i4, $i10, $i14, i15;
        sun.misc.FormattedFloatingDecimal$Form r1;
        long l1, l3, $l5, $l7, $l8, $l12;
        byte $b6, $b9, $b11, $b13;
        char[] $r2, $r3, $r4, $r5;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        d0 := @parameter0: double;
        i0 := @parameter1: int;
        r1 := @parameter2: sun.misc.FormattedFloatingDecimal$Form;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir> = 0;
        r0.<sun.misc.FormattedFloatingDecimal: boolean fromHex> = 0;
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = 0;
        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        r0.<sun.misc.FormattedFloatingDecimal: int precision> = i0;
        r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form> = r1;
        $l5 = l1 & -9223372036854775808L;
        $b6 = $l5 cmp 0L;
        if $b6 == 0 goto label0;

        r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative> = 1;
        l1 = l1 ^ -9223372036854775808L;
        goto label1;

     label0:
        r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative> = 0;

     label1:
        $l7 = l1 & 9218868437227405312L;
        $l8 = $l7 >> 52;
        i2 = (int) $l8;
        l3 = l1 & 4503599627370495L;
        if i2 != 2047 goto label4;

        r0.<sun.misc.FormattedFloatingDecimal: boolean isExceptional> = 1;
        $b9 = l3 cmp 0L;
        if $b9 != 0 goto label2;

        $r2 = <sun.misc.FormattedFloatingDecimal: char[] infinity>;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = $r2;
        goto label3;

     label2:
        $r3 = <sun.misc.FormattedFloatingDecimal: char[] notANumber>;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = $r3;
        r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative> = 0;

     label3:
        $r4 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i10 = lengthof $r4;
        r0.<sun.misc.FormattedFloatingDecimal: int nDigits> = $i10;
        return;

     label4:
        r0.<sun.misc.FormattedFloatingDecimal: boolean isExceptional> = 0;
        if i2 != 0 goto label7;

        $b11 = l3 cmp 0L;
        if $b11 != 0 goto label5;

        r0.<sun.misc.FormattedFloatingDecimal: int decExponent> = 0;
        $r5 = <sun.misc.FormattedFloatingDecimal: char[] zero>;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = $r5;
        r0.<sun.misc.FormattedFloatingDecimal: int nDigits> = 1;
        return;

     label5:
        $l12 = l3 & 4503599627370496L;
        $b13 = $l12 cmp 0L;
        if $b13 != 0 goto label6;

        l3 = l3 << 1;
        i2 = i2 + -1;
        goto label5;

     label6:
        $i14 = 52 + i2;
        i4 = $i14 + 1;
        i2 = i2 + 1;
        goto label8;

     label7:
        l3 = l3 | 4503599627370496L;
        i4 = 53;

     label8:
        i15 = i2 + -1023;
        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void dtoa(int,long,int)>(i15, l3, i4);
        return;
    }

    public void <init>(float)
    {
        sun.misc.FormattedFloatingDecimal r0;
        float f0;
        sun.misc.FormattedFloatingDecimal$Form $r1;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        f0 := @parameter0: float;
        $r1 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void <init>(float,int,sun.misc.FormattedFloatingDecimal$Form)>(f0, 2147483647, $r1);
        return;
    }

    public void <init>(float, int, sun.misc.FormattedFloatingDecimal$Form)
    {
        sun.misc.FormattedFloatingDecimal r0;
        float f0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i9, $i10, $i11, i12;
        sun.misc.FormattedFloatingDecimal$Form r1;
        long $l7, $l13, $l14;
        byte $b8;
        char[] $r2, $r3, $r4, $r5;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        f0 := @parameter0: float;
        i0 := @parameter1: int;
        r1 := @parameter2: sun.misc.FormattedFloatingDecimal$Form;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir> = 0;
        r0.<sun.misc.FormattedFloatingDecimal: boolean fromHex> = 0;
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = 0;
        i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);
        r0.<sun.misc.FormattedFloatingDecimal: int precision> = i0;
        r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form> = r1;
        $i5 = i1 & -2147483648;
        if $i5 == 0 goto label0;

        r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative> = 1;
        i1 = i1 ^ -2147483648;
        goto label1;

     label0:
        r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative> = 0;

     label1:
        $i6 = i1 & 2139095040;
        i2 = $i6 >> 23;
        i3 = i1 & 8388607;
        if i2 != 255 goto label4;

        r0.<sun.misc.FormattedFloatingDecimal: boolean isExceptional> = 1;
        $l7 = (long) i3;
        $b8 = $l7 cmp 0L;
        if $b8 != 0 goto label2;

        $r2 = <sun.misc.FormattedFloatingDecimal: char[] infinity>;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = $r2;
        goto label3;

     label2:
        $r3 = <sun.misc.FormattedFloatingDecimal: char[] notANumber>;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = $r3;
        r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative> = 0;

     label3:
        $r4 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i9 = lengthof $r4;
        r0.<sun.misc.FormattedFloatingDecimal: int nDigits> = $i9;
        return;

     label4:
        r0.<sun.misc.FormattedFloatingDecimal: boolean isExceptional> = 0;
        if i2 != 0 goto label7;

        if i3 != 0 goto label5;

        r0.<sun.misc.FormattedFloatingDecimal: int decExponent> = 0;
        $r5 = <sun.misc.FormattedFloatingDecimal: char[] zero>;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = $r5;
        r0.<sun.misc.FormattedFloatingDecimal: int nDigits> = 1;
        return;

     label5:
        $i10 = i3 & 8388608;
        if $i10 != 0 goto label6;

        i3 = i3 << 1;
        i2 = i2 + -1;
        goto label5;

     label6:
        $i11 = 23 + i2;
        i4 = $i11 + 1;
        i2 = i2 + 1;
        goto label8;

     label7:
        i3 = i3 | 8388608;
        i4 = 24;

     label8:
        i12 = i2 + -127;
        $l13 = (long) i3;
        $l14 = $l13 << 29;
        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void dtoa(int,long,int)>(i12, $l14, i4);
        return;
    }

    private void dtoa(int, long, int)
    {
        sun.misc.FormattedFloatingDecimal r0;
        int i0, i2, i3, i4, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i36, $i37, $i38, $i40, i41, i42, i43, i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, i59, $i60, i61, i62, $i63, $i64, $i65, i67, $i68, $i71, $i72, $i73, $i75, $i76, i84, $i91, $i92, i95, $i101, $i102, $i105, i106, i107, $i108, $i109, $i110, $i111, i113, $i114, $i115, $i116, $i117, $i119, $i120, $i122, $i123;
        long l1, l5, l21, l22, l23, l32, $l34, $l35, l39, $l69, $l77, $l78, l79, $l80, l81, $l82, $l83, $l85, l86, l87, $l89, $l94, $l96, $l99, $l104;
        char[] r1, $r7;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        sun.misc.FDBigInt r2, r3, r4, $r26, r27, r28, $r29, $r34;
        long[] $r5, $r19, $r20, $r21;
        int[] $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.lang.AssertionError $r15, $r18, $r22, $r25, $r30, $r33;
        char $c66, $c74, $c93, $c103, $c112, $c118, $c124, $c125;
        sun.misc.FormattedFloatingDecimal$Form $r16, $r17, $r23, $r24, $r31, $r32;
        byte $b70, $b88, $b90, $b97, $b98, $b100, $b121, $b126;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        i2 := @parameter2: int;
        i3 = staticinvoke <sun.misc.FormattedFloatingDecimal: int countBits(long)>(l1);
        $i24 = i3 - i0;
        $i25 = $i24 - 1;
        i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i25);
        if i0 > 62 goto label4;

        if i0 < -21 goto label4;

        $r5 = <sun.misc.FormattedFloatingDecimal: long[] long5pow>;
        $i26 = lengthof $r5;
        if i4 >= $i26 goto label4;

        $r6 = <sun.misc.FormattedFloatingDecimal: int[] n5bits>;
        $i27 = $r6[i4];
        $i28 = i3 + $i27;
        if $i28 >= 64 goto label4;

        if i4 != 0 goto label4;

        if i0 <= i2 goto label0;

        $i29 = i0 - i2;
        $i30 = $i29 - 1;
        l5 = 1L << $i30;
        goto label1;

     label0:
        l5 = 0L;

     label1:
        if i0 < 52 goto label2;

        $i31 = i0 - 52;
        l32 = l1 << $i31;
        goto label3;

     label2:
        $i33 = 52 - i0;
        l32 = l1 >>> $i33;

     label3:
        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void developLongDigits(int,long,long)>(0, l32, l5);
        return;

     label4:
        $l34 = l1 & -4503599627370497L;
        $l35 = 4607182418800017408L | $l34;
        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l35);
        $d1 = d0 - 1.5;
        $d2 = $d1 * 0.289529654;
        $d3 = $d2 + 0.176091259;
        $d4 = (double) i0;
        $d5 = $d4 * 0.301029995663981;
        $d6 = $d3 + $d5;
        $d7 = staticinvoke <java.lang.Math: double floor(double)>($d6);
        i6 = (int) $d7;
        $i36 = neg i6;
        i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i36);
        $i37 = i7 + i4;
        i8 = $i37 + i0;
        i9 = staticinvoke <java.lang.Math: int max(int,int)>(0, i6);
        i10 = i9 + i4;
        i11 = i7;
        i12 = i8 - i2;
        $i38 = 53 - i3;
        l39 = l1 >>> $i38;
        $i40 = i3 - 1;
        i41 = i8 - $i40;
        i13 = staticinvoke <java.lang.Math: int min(int,int)>(i41, i10);
        i42 = i41 - i13;
        i43 = i10 - i13;
        i44 = i12 - i13;
        if i3 != 1 goto label5;

        i44 = i44 + -1;

     label5:
        if i44 >= 0 goto label6;

        i42 = i42 - i44;
        i43 = i43 - i44;
        i44 = 0;

     label6:
        $r7 = newarray (char)[18];
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = $r7;
        r1 = $r7;
        z0 = 0;
        $i45 = i3 + i42;
        $r8 = <sun.misc.FormattedFloatingDecimal: int[] n5bits>;
        $i46 = lengthof $r8;
        if i7 >= $i46 goto label7;

        $r9 = <sun.misc.FormattedFloatingDecimal: int[] n5bits>;
        $i47 = $r9[i7];
        goto label8;

     label7:
        $i47 = i7 * 3;

     label8:
        i14 = $i45 + $i47;
        $i48 = i43 + 1;
        $i49 = i9 + 1;
        $r10 = <sun.misc.FormattedFloatingDecimal: int[] n5bits>;
        $i50 = lengthof $r10;
        if $i49 >= $i50 goto label9;

        $r11 = <sun.misc.FormattedFloatingDecimal: int[] n5bits>;
        $i51 = i9 + 1;
        $i52 = $r11[$i51];
        goto label10;

     label9:
        $i53 = i9 + 1;
        $i52 = $i53 * 3;

     label10:
        i15 = $i48 + $i52;
        if i14 >= 64 goto label46;

        if i15 >= 64 goto label46;

        if i14 >= 32 goto label28;

        if i15 >= 32 goto label28;

        $i54 = (int) l39;
        $r12 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i55 = $r12[i7];
        $i56 = $i54 * $i55;
        i16 = $i56 << i42;
        $r13 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i57 = $r13[i9];
        i17 = $i57 << i43;
        $r14 = <sun.misc.FormattedFloatingDecimal: int[] small5pow>;
        $i58 = $r14[i11];
        i18 = $i58 << i44;
        i19 = i17 * 10;
        i59 = 0;
        i20 = i16 / i17;
        $i60 = i16 % i17;
        i61 = 10 * $i60;
        i62 = i18 * 10;
        if i61 >= i62 goto label11;

        $z3 = 1;
        goto label12;

     label11:
        $z3 = 0;

     label12:
        z1 = $z3;
        $i63 = i61 + i62;
        if $i63 <= i19 goto label13;

        $z4 = 1;
        goto label14;

     label13:
        $z4 = 0;

     label14:
        z2 = $z4;
        $z5 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z5 != 0 goto label15;

        if i20 < 10 goto label15;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>(int)>(i20);
        throw $r15;

     label15:
        if i20 != 0 goto label16;

        if z2 != 0 goto label16;

        i6 = i6 + -1;
        goto label17;

     label16:
        $i64 = i59;
        i59 = i59 + 1;
        $i65 = 48 + i20;
        $c66 = (char) $i65;
        r1[$i64] = $c66;

     label17:
        $r16 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r17 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r16 != $r17 goto label18;

        if -3 >= i6 goto label18;

        if i6 < 8 goto label19;

     label18:
        $z6 = 0;
        z1 = $z6;
        z2 = $z6;

     label19:
        if z1 != 0 goto label27;

        if z2 != 0 goto label27;

        i67 = i61 / i17;
        $i68 = i61 % i17;
        i61 = 10 * $i68;
        i62 = i62 * 10;
        $z7 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z7 != 0 goto label20;

        if i67 < 10 goto label20;

        $r18 = new java.lang.AssertionError;
        specialinvoke $r18.<java.lang.AssertionError: void <init>(int)>(i67);
        throw $r18;

     label20:
        $l69 = (long) i62;
        $b70 = $l69 cmp 0L;
        if $b70 <= 0 goto label25;

        if i61 >= i62 goto label21;

        $z8 = 1;
        goto label22;

     label21:
        $z8 = 0;

     label22:
        z1 = $z8;
        $i71 = i61 + i62;
        if $i71 <= i19 goto label23;

        $z9 = 1;
        goto label24;

     label23:
        $z9 = 0;

     label24:
        z2 = $z9;
        goto label26;

     label25:
        z1 = 1;
        z2 = 1;

     label26:
        $i72 = i59;
        i59 = i59 + 1;
        $i73 = 48 + i67;
        $c74 = (char) $i73;
        r1[$i72] = $c74;
        goto label19;

     label27:
        $i75 = i61 << 1;
        $i76 = $i75 - i19;
        l21 = (long) $i76;
        goto label63;

     label28:
        $r19 = <sun.misc.FormattedFloatingDecimal: long[] long5pow>;
        $l77 = $r19[i7];
        $l78 = l39 * $l77;
        l79 = $l78 << i42;
        $r20 = <sun.misc.FormattedFloatingDecimal: long[] long5pow>;
        $l80 = $r20[i9];
        l81 = $l80 << i43;
        $r21 = <sun.misc.FormattedFloatingDecimal: long[] long5pow>;
        $l82 = $r21[i11];
        l22 = $l82 << i44;
        l23 = l81 * 10L;
        i59 = 0;
        $l83 = l79 / l81;
        i84 = (int) $l83;
        $l85 = l79 % l81;
        l86 = 10L * $l85;
        l87 = l22 * 10L;
        $b88 = l86 cmp l87;
        if $b88 >= 0 goto label29;

        $z10 = 1;
        goto label30;

     label29:
        $z10 = 0;

     label30:
        z1 = $z10;
        $l89 = l86 + l87;
        $b90 = $l89 cmp l23;
        if $b90 <= 0 goto label31;

        $z11 = 1;
        goto label32;

     label31:
        $z11 = 0;

     label32:
        z2 = $z11;
        $z12 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z12 != 0 goto label33;

        if i84 < 10 goto label33;

        $r22 = new java.lang.AssertionError;
        specialinvoke $r22.<java.lang.AssertionError: void <init>(int)>(i84);
        throw $r22;

     label33:
        if i84 != 0 goto label34;

        if z2 != 0 goto label34;

        i6 = i6 + -1;
        goto label35;

     label34:
        $i91 = i59;
        i59 = i59 + 1;
        $i92 = 48 + i84;
        $c93 = (char) $i92;
        r1[$i91] = $c93;

     label35:
        $r23 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r24 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r23 != $r24 goto label36;

        if -3 >= i6 goto label36;

        if i6 < 8 goto label37;

     label36:
        $z13 = 0;
        z1 = $z13;
        z2 = $z13;

     label37:
        if z1 != 0 goto label45;

        if z2 != 0 goto label45;

        $l94 = l86 / l81;
        i95 = (int) $l94;
        $l96 = l86 % l81;
        l86 = 10L * $l96;
        l87 = l87 * 10L;
        $z14 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z14 != 0 goto label38;

        if i95 < 10 goto label38;

        $r25 = new java.lang.AssertionError;
        specialinvoke $r25.<java.lang.AssertionError: void <init>(int)>(i95);
        throw $r25;

     label38:
        $b97 = l87 cmp 0L;
        if $b97 <= 0 goto label43;

        $b98 = l86 cmp l87;
        if $b98 >= 0 goto label39;

        $z15 = 1;
        goto label40;

     label39:
        $z15 = 0;

     label40:
        z1 = $z15;
        $l99 = l86 + l87;
        $b100 = $l99 cmp l23;
        if $b100 <= 0 goto label41;

        $z16 = 1;
        goto label42;

     label41:
        $z16 = 0;

     label42:
        z2 = $z16;
        goto label44;

     label43:
        z1 = 1;
        z2 = 1;

     label44:
        $i101 = i59;
        i59 = i59 + 1;
        $i102 = 48 + i95;
        $c103 = (char) $i102;
        r1[$i101] = $c103;
        goto label37;

     label45:
        $l104 = l86 << 1;
        l21 = $l104 - l23;
        goto label63;

     label46:
        $r26 = new sun.misc.FDBigInt;
        specialinvoke $r26.<sun.misc.FDBigInt: void <init>(long)>(l39);
        r2 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt multPow52(sun.misc.FDBigInt,int,int)>($r26, i7, i42);
        r3 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt constructPow52(int,int)>(i9, i43);
        r4 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt constructPow52(int,int)>(i11, i44);
        $i105 = virtualinvoke r3.<sun.misc.FDBigInt: int normalizeMe()>();
        i106 = $i105;
        virtualinvoke r2.<sun.misc.FDBigInt: void lshiftMe(int)>($i105);
        virtualinvoke r4.<sun.misc.FDBigInt: void lshiftMe(int)>(i106);
        r27 = virtualinvoke r3.<sun.misc.FDBigInt: sun.misc.FDBigInt mult(int)>(10);
        i59 = 0;
        i107 = virtualinvoke r2.<sun.misc.FDBigInt: int quoRemIteration(sun.misc.FDBigInt)>(r3);
        r28 = virtualinvoke r4.<sun.misc.FDBigInt: sun.misc.FDBigInt mult(int)>(10);
        $i108 = virtualinvoke r2.<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>(r28);
        if $i108 >= 0 goto label47;

        $z17 = 1;
        goto label48;

     label47:
        $z17 = 0;

     label48:
        z1 = $z17;
        $r29 = virtualinvoke r2.<sun.misc.FDBigInt: sun.misc.FDBigInt add(sun.misc.FDBigInt)>(r28);
        $i109 = virtualinvoke $r29.<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>(r27);
        if $i109 <= 0 goto label49;

        $z18 = 1;
        goto label50;

     label49:
        $z18 = 0;

     label50:
        z2 = $z18;
        $z19 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z19 != 0 goto label51;

        if i107 < 10 goto label51;

        $r30 = new java.lang.AssertionError;
        specialinvoke $r30.<java.lang.AssertionError: void <init>(int)>(i107);
        throw $r30;

     label51:
        if i107 != 0 goto label52;

        if z2 != 0 goto label52;

        i6 = i6 + -1;
        goto label53;

     label52:
        $i110 = i59;
        i59 = i59 + 1;
        $i111 = 48 + i107;
        $c112 = (char) $i111;
        r1[$i110] = $c112;

     label53:
        $r31 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r32 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r31 != $r32 goto label54;

        if -3 >= i6 goto label54;

        if i6 < 8 goto label55;

     label54:
        $z20 = 0;
        z1 = $z20;
        z2 = $z20;

     label55:
        if z1 != 0 goto label61;

        if z2 != 0 goto label61;

        i113 = virtualinvoke r2.<sun.misc.FDBigInt: int quoRemIteration(sun.misc.FDBigInt)>(r3);
        r28 = virtualinvoke r28.<sun.misc.FDBigInt: sun.misc.FDBigInt mult(int)>(10);
        $z21 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z21 != 0 goto label56;

        if i113 < 10 goto label56;

        $r33 = new java.lang.AssertionError;
        specialinvoke $r33.<java.lang.AssertionError: void <init>(int)>(i113);
        throw $r33;

     label56:
        $i114 = virtualinvoke r2.<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>(r28);
        if $i114 >= 0 goto label57;

        $z22 = 1;
        goto label58;

     label57:
        $z22 = 0;

     label58:
        z1 = $z22;
        $r34 = virtualinvoke r2.<sun.misc.FDBigInt: sun.misc.FDBigInt add(sun.misc.FDBigInt)>(r28);
        $i115 = virtualinvoke $r34.<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>(r27);
        if $i115 <= 0 goto label59;

        $z23 = 1;
        goto label60;

     label59:
        $z23 = 0;

     label60:
        z2 = $z23;
        $i116 = i59;
        i59 = i59 + 1;
        $i117 = 48 + i113;
        $c118 = (char) $i117;
        r1[$i116] = $c118;
        goto label55;

     label61:
        if z2 == 0 goto label62;

        if z1 == 0 goto label62;

        virtualinvoke r2.<sun.misc.FDBigInt: void lshiftMe(int)>(1);
        $i119 = virtualinvoke r2.<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>(r27);
        l21 = (long) $i119;
        goto label63;

     label62:
        l21 = 0L;

     label63:
        $i120 = i6 + 1;
        r0.<sun.misc.FormattedFloatingDecimal: int decExponent> = $i120;
        r0.<sun.misc.FormattedFloatingDecimal: char[] digits> = r1;
        r0.<sun.misc.FormattedFloatingDecimal: int nDigits> = i59;
        if z2 == 0 goto label66;

        if z1 == 0 goto label65;

        $b121 = l21 cmp 0L;
        if $b121 != 0 goto label64;

        $i122 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i123 = $i122 - 1;
        $c124 = r1[$i123];
        $c125 = $c124 & 1;
        if $c125 == 0 goto label66;

        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void roundup()>();
        goto label66;

     label64:
        $b126 = l21 cmp 0L;
        if $b126 <= 0 goto label66;

        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void roundup()>();
        goto label66;

     label65:
        specialinvoke r0.<sun.misc.FormattedFloatingDecimal: void roundup()>();

     label66:
        return;
    }

    public java.lang.String toString()
    {
        sun.misc.FormattedFloatingDecimal r0;
        java.lang.StringBuffer $r1, r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        char[] $r4, $r7;
        java.lang.String $r11;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        $r1 = new java.lang.StringBuffer;
        $i0 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i1 = $i0 + 8;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i1);
        r2 = $r1;
        $z0 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z0 == 0 goto label0;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label0:
        $z1 = r0.<sun.misc.FormattedFloatingDecimal: boolean isExceptional>;
        if $z1 == 0 goto label1;

        $r4 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i2 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r4, 0, $i2);
        goto label2;

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0.");
        $r7 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i3 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r7, 0, $i3);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(101);
        $i4 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

     label2:
        $r11 = new java.lang.String;
        specialinvoke $r11.<java.lang.String: void <init>(java.lang.StringBuffer)>(r2);
        return $r11;
    }

    public int getExponent()
    {
        sun.misc.FormattedFloatingDecimal r0;
        int $i0, $i1;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        $i0 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public int getExponentRounded()
    {
        sun.misc.FormattedFloatingDecimal r0;
        int $i0, $i1;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        $i0 = r0.<sun.misc.FormattedFloatingDecimal: int decExponentRounded>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public int getChars(char[])
    {
        sun.misc.FormattedFloatingDecimal r0;
        char[] r1, r2, $r4;
        boolean $z0, $z1, $z2, $z3;
        byte b0;
        int i1, i2, i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, $i32, i33, i34, $i35, $i36, $i37, $i38, i39, $i40, $i41, $i42, i43, i44, $i45, $i46, i47, $i48, i49, $i50, $i51, $i52, $i53, i54, $i55, i56, i58, $i59, $i60, $i61, $i62, $i63, i64, i65, $i66, $i67, $i68, $i69, i70, i71, $i72, $i73, i74, $i75, $i76, $i77, i79, $i80, $i81, $i83, $i84, i86, $i87, $i88, i90, i91, $i92, $i93, $i95, $i96;
        java.lang.AssertionError $r3, $r10;
        int[] $r5;
        sun.misc.FormattedFloatingDecimal$Form $r6, $r7, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        char $c57, $c78, $c82, $c85, $c89, $c94, $c97;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        r1 := @parameter0: char[];
        $z0 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i4 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if $i4 <= 19 goto label0;

        $r3 = new java.lang.AssertionError;
        $i5 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        specialinvoke $r3.<java.lang.AssertionError: void <init>(int)>($i5);
        throw $r3;

     label0:
        b0 = 0;
        $z1 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z1 == 0 goto label1;

        r1[0] = 45;
        b0 = 1;

     label1:
        $z2 = r0.<sun.misc.FormattedFloatingDecimal: boolean isExceptional>;
        if $z2 == 0 goto label2;

        $r4 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i6 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, b0, $i6);
        $i7 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        i8 = b0 + $i7;
        goto label38;

     label2:
        r2 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        i1 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $r5 = <sun.misc.FormattedFloatingDecimal$2: int[] $SwitchMap$sun$misc$FormattedFloatingDecimal$Form>;
        $r6 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $i9 = virtualinvoke $r6.<sun.misc.FormattedFloatingDecimal$Form: int ordinal()>();
        $i10 = $r5[$i9];
        tableswitch($i10)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label9;
        };

     label3:
        goto label10;

     label4:
        $i11 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i12 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        $i13 = $i11 + $i12;
        i1 = specialinvoke r0.<sun.misc.FormattedFloatingDecimal: int checkExponent(int)>($i13);
        $i14 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i15 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        $i16 = $i14 + $i15;
        r2 = specialinvoke r0.<sun.misc.FormattedFloatingDecimal: char[] applyPrecision(int)>($i16);
        goto label10;

     label5:
        $i17 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        $i18 = $i17 + 1;
        i1 = specialinvoke r0.<sun.misc.FormattedFloatingDecimal: int checkExponent(int)>($i18);
        $i19 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        $i20 = $i19 + 1;
        r2 = specialinvoke r0.<sun.misc.FormattedFloatingDecimal: char[] applyPrecision(int)>($i20);
        goto label10;

     label6:
        $i21 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        i1 = specialinvoke r0.<sun.misc.FormattedFloatingDecimal: int checkExponent(int)>($i21);
        $i22 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        r2 = specialinvoke r0.<sun.misc.FormattedFloatingDecimal: char[] applyPrecision(int)>($i22);
        $i23 = i1 - 1;
        if $i23 < -4 goto label7;

        $i24 = i1 - 1;
        $i25 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        if $i24 < $i25 goto label8;

     label7:
        $r7 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form SCIENTIFIC>;
        r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form> = $r7;
        $i26 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        $i27 = $i26 - 1;
        r0.<sun.misc.FormattedFloatingDecimal: int precision> = $i27;
        goto label10;

     label8:
        $r9 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form DECIMAL_FLOAT>;
        r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form> = $r9;
        $i28 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        $i29 = $i28 - i1;
        r0.<sun.misc.FormattedFloatingDecimal: int precision> = $i29;
        goto label10;

     label9:
        $z3 = <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled>;
        if $z3 != 0 goto label10;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label10:
        r0.<sun.misc.FormattedFloatingDecimal: int decExponentRounded> = i1;
        if i1 <= 0 goto label19;

        $r11 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r12 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r11 != $r12 goto label11;

        if i1 < 8 goto label12;

     label11:
        $r13 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r14 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form DECIMAL_FLOAT>;
        if $r13 != $r14 goto label19;

     label12:
        $i30 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i30, i1);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, b0, i2);
        i8 = b0 + i2;
        if i2 >= i1 goto label15;

        i31 = i1 - i2;
        i3 = 0;

     label13:
        if i3 >= i31 goto label14;

        $i32 = i8;
        i8 = i8 + 1;
        r1[$i32] = 48;
        i3 = i3 + 1;
        goto label13;

     label14:
        $r15 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r16 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r15 != $r16 goto label18;

        i33 = i8 + 1;
        r1[i8] = 46;
        i8 = i33 + 1;
        r1[i33] = 48;
        goto label18;

     label15:
        $r17 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r18 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r17 != $r18 goto label17;

        i34 = i8 + 1;
        r1[i8] = 46;
        $i35 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if i2 >= $i35 goto label16;

        $i36 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i37 = $i36 - i2;
        $i38 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        i39 = staticinvoke <java.lang.Math: int min(int,int)>($i37, $i38);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i2, r1, i34, i39);
        i8 = i34 + i39;
        goto label18;

     label16:
        i8 = i34 + 1;
        r1[i34] = 48;
        goto label18;

     label17:
        $i40 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i41 = $i40 - i2;
        $i42 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        i43 = staticinvoke <java.lang.Math: int min(int,int)>($i41, $i42);
        if i43 <= 0 goto label18;

        i44 = i8 + 1;
        r1[i8] = 46;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i2, r1, i44, i43);
        i8 = i44 + i43;

     label18:
        goto label38;

     label19:
        if i1 > 0 goto label26;

        $r19 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r20 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r19 != $r20 goto label20;

        if i1 > -3 goto label21;

     label20:
        $r21 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r22 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form DECIMAL_FLOAT>;
        if $r21 != $r22 goto label26;

     label21:
        i8 = b0 + 1;
        r1[b0] = 48;
        if i1 == 0 goto label23;

        $i45 = neg i1;
        $i46 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        i47 = staticinvoke <java.lang.Math: int min(int,int)>($i45, $i46);
        if i47 <= 0 goto label23;

        $i48 = i8;
        i8 = i8 + 1;
        r1[$i48] = 46;
        i49 = 0;

     label22:
        if i49 >= i47 goto label23;

        $i50 = i8;
        i8 = i8 + 1;
        r1[$i50] = 48;
        i49 = i49 + 1;
        goto label22;

     label23:
        $i51 = lengthof r2;
        $i52 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        $i53 = $i52 + i1;
        i54 = staticinvoke <java.lang.Math: int min(int,int)>($i51, $i53);
        if i54 <= 0 goto label25;

        if i8 != 1 goto label24;

        $i55 = i8;
        i8 = i8 + 1;
        r1[$i55] = 46;

     label24:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i8, i54);
        i8 = i8 + i54;

     label25:
        goto label38;

     label26:
        i56 = b0 + 1;
        $c57 = r2[0];
        r1[b0] = $c57;
        $r23 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r24 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r23 != $r24 goto label29;

        i58 = i56 + 1;
        r1[i56] = 46;
        $i59 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if $i59 <= 1 goto label27;

        $i60 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i61 = $i60 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, r1, i58, $i61);
        $i62 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i63 = $i62 - 1;
        i64 = i58 + $i63;
        goto label28;

     label27:
        i64 = i58 + 1;
        r1[i58] = 48;

     label28:
        i65 = i64 + 1;
        r1[i64] = 69;
        goto label31;

     label29:
        $i66 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if $i66 <= 1 goto label30;

        $i67 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i68 = $i67 - 1;
        $i69 = r0.<sun.misc.FormattedFloatingDecimal: int precision>;
        i70 = staticinvoke <java.lang.Math: int min(int,int)>($i68, $i69);
        if i70 <= 0 goto label30;

        i71 = i56 + 1;
        r1[i56] = 46;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, r1, i71, i70);
        i56 = i71 + i70;

     label30:
        i65 = i56 + 1;
        r1[i56] = 101;

     label31:
        if i1 > 0 goto label32;

        $i72 = i65;
        i65 = i65 + 1;
        r1[$i72] = 45;
        $i73 = neg i1;
        i74 = $i73 + 1;
        goto label34;

     label32:
        $r25 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r26 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r25 == $r26 goto label33;

        $i75 = i65;
        i65 = i65 + 1;
        r1[$i75] = 43;

     label33:
        i74 = i1 - 1;

     label34:
        if i74 > 9 goto label36;

        $r27 = r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FormattedFloatingDecimal$Form form>;
        $r28 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form COMPATIBLE>;
        if $r27 == $r28 goto label35;

        $i76 = i65;
        i65 = i65 + 1;
        r1[$i76] = 48;

     label35:
        i8 = i65 + 1;
        $i77 = i74 + 48;
        $c78 = (char) $i77;
        r1[i65] = $c78;
        goto label38;

     label36:
        if i74 > 99 goto label37;

        i79 = i65 + 1;
        $i80 = i74 / 10;
        $i81 = $i80 + 48;
        $c82 = (char) $i81;
        r1[i65] = $c82;
        i8 = i79 + 1;
        $i83 = i74 % 10;
        $i84 = $i83 + 48;
        $c85 = (char) $i84;
        r1[i79] = $c85;
        goto label38;

     label37:
        i86 = i65 + 1;
        $i87 = i74 / 100;
        $i88 = $i87 + 48;
        $c89 = (char) $i88;
        r1[i65] = $c89;
        i90 = i74 % 100;
        i91 = i86 + 1;
        $i92 = i90 / 10;
        $i93 = $i92 + 48;
        $c94 = (char) $i93;
        r1[i86] = $c94;
        i8 = i91 + 1;
        $i95 = i90 % 10;
        $i96 = $i95 + 48;
        $c97 = (char) $i96;
        r1[i91] = $c97;

     label38:
        return i8;
    }

    public strictfp double doubleValue()
    {
        sun.misc.FormattedFloatingDecimal r0;
        int i0, i1, i2, i3, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i14, $i16, $i18, i19, $i22, $i24, i25, $i26, $i28, $i32, $i33, $i34, $i35, $i39, $i40, $i41, $i42, $i46, $i47, $i48, $i49, i50, i51, $i52, i53, $i54, $i55, $i56, $i57, i58, i59, $i60, $i63, $i64, $i65, i66, $i69, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, i80, i81, $i82, i83, i84, i85, $i86, $i87, $i88, $i89, i90;
        long l4, $l20, $l23;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, $d11, d12, $d13, d14, $d15, $d16, d17, $d18, d19, $d20, $d21, $d22, $d23, $d24, d25, $d26, d27, $d28, $d29, $d30, $d31, $d32, d33, d34, $d35, d36, $d37, $d38, $d39, $d40, $d41;
        sun.misc.FDBigInt r1, r2, r3, $r31, r33, r34, r35, $r36;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        char[] $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r32;
        char $c15, $c17, $c21;
        byte $b27, $b29, $b30, $b31, $b36, $b37, $b38, $b43, $b44, $b45, $b61, $b62, $b67, $b70, $b91, $b92, $b93, $b94;
        double[] $r13, $r14, $r16, $r17, $r18, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        $i14 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i14, 16);
        $r4 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r5 = <sun.misc.FormattedFloatingDecimal: char[] infinity>;
        if $r4 == $r5 goto label0;

        $r6 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r7 = <sun.misc.FormattedFloatingDecimal: char[] notANumber>;
        if $r6 != $r7 goto label4;

     label0:
        $r8 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r9 = <sun.misc.FormattedFloatingDecimal: char[] notANumber>;
        if $r8 != $r9 goto label1;

        return #NaN;

     label1:
        $z1 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z1 == 0 goto label2;

        $d4 = #-Infinity;
        goto label3;

     label2:
        $d4 = #Infinity;

     label3:
        return $d4;

     label4:
        $z2 = r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir>;
        if $z2 == 0 goto label5;

        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = 0;

     label5:
        $r10 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c15 = $r10[0];
        i1 = $c15 - 48;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 9);
        i3 = 1;

     label6:
        if i3 >= i2 goto label7;

        $i16 = i1 * 10;
        $r11 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c17 = $r11[i3];
        $i18 = $i16 + $c17;
        i1 = $i18 - 48;
        i3 = i3 + 1;
        goto label6;

     label7:
        l4 = (long) i1;
        i19 = i2;

     label8:
        if i19 >= i0 goto label9;

        $l20 = l4 * 10L;
        $r12 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c21 = $r12[i19];
        $i22 = $c21 - 48;
        $l23 = (long) $i22;
        l4 = $l20 + $l23;
        i19 = i19 + 1;
        goto label8;

     label9:
        d0 = (double) l4;
        $i24 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        i25 = $i24 - i0;
        $i26 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if $i26 > 15 goto label35;

        if i25 == 0 goto label10;

        $b27 = d0 cmpl 0.0;
        if $b27 != 0 goto label13;

     label10:
        $z3 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z3 == 0 goto label11;

        $d5 = neg d0;
        goto label12;

     label11:
        $d5 = d0;

     label12:
        return $d5;

     label13:
        if i25 < 0 goto label28;

        $i28 = <sun.misc.FormattedFloatingDecimal: int maxSmallTen>;
        if i25 > $i28 goto label20;

        $r13 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $d6 = $r13[i25];
        d1 = d0 * $d6;
        $z4 = r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir>;
        if $z4 == 0 goto label17;

        $r14 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $d7 = $r14[i25];
        d2 = d1 / $d7;
        $b29 = d2 cmpl d0;
        if $b29 != 0 goto label14;

        $b30 = 0;
        goto label16;

     label14:
        $b31 = d2 cmpg d0;
        if $b31 >= 0 goto label15;

        $b30 = 1;
        goto label16;

     label15:
        $b30 = -1;

     label16:
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = $b30;

     label17:
        $z5 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z5 == 0 goto label18;

        $d8 = neg d1;
        goto label19;

     label18:
        $d8 = d1;

     label19:
        return $d8;

     label20:
        i5 = 15 - i0;
        $i32 = <sun.misc.FormattedFloatingDecimal: int maxSmallTen>;
        $i33 = $i32 + i5;
        if i25 > $i33 goto label27;

        $r16 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $d9 = $r16[i5];
        d10 = d0 * $d9;
        $r17 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $i34 = i25 - i5;
        $d11 = $r17[$i34];
        d12 = d10 * $d11;
        $z6 = r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir>;
        if $z6 == 0 goto label24;

        $r18 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $i35 = i25 - i5;
        $d13 = $r18[$i35];
        d14 = d12 / $d13;
        $b36 = d14 cmpl d10;
        if $b36 != 0 goto label21;

        $b37 = 0;
        goto label23;

     label21:
        $b38 = d14 cmpg d10;
        if $b38 >= 0 goto label22;

        $b37 = 1;
        goto label23;

     label22:
        $b37 = -1;

     label23:
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = $b37;

     label24:
        $z7 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z7 == 0 goto label25;

        $d15 = neg d12;
        goto label26;

     label25:
        $d15 = d12;

     label26:
        return $d15;

     label27:
        goto label35;

     label28:
        $i39 = <sun.misc.FormattedFloatingDecimal: int maxSmallTen>;
        $i40 = neg $i39;
        if i25 < $i40 goto label35;

        $r20 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $i41 = neg i25;
        $d16 = $r20[$i41];
        d17 = d0 / $d16;
        $r21 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $i42 = neg i25;
        $d18 = $r21[$i42];
        d19 = d17 * $d18;
        $z8 = r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir>;
        if $z8 == 0 goto label32;

        $b43 = d19 cmpl d0;
        if $b43 != 0 goto label29;

        $b44 = 0;
        goto label31;

     label29:
        $b45 = d19 cmpg d0;
        if $b45 >= 0 goto label30;

        $b44 = 1;
        goto label31;

     label30:
        $b44 = -1;

     label31:
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = $b44;

     label32:
        $z9 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z9 == 0 goto label33;

        $d20 = neg d17;
        goto label34;

     label33:
        $d20 = d17;

     label34:
        return $d20;

     label35:
        if i25 <= 0 goto label47;

        $i46 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        if $i46 <= 309 goto label38;

        $z10 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z10 == 0 goto label36;

        $d21 = #-Infinity;
        goto label37;

     label36:
        $d21 = #Infinity;

     label37:
        return $d21;

     label38:
        $i47 = i25 & 15;
        if $i47 == 0 goto label39;

        $r23 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $i48 = i25 & 15;
        $d22 = $r23[$i48];
        d0 = d0 * $d22;

     label39:
        $i49 = i25 >> 4;
        i50 = $i49;
        if $i49 == 0 goto label59;

        i51 = 0;

     label40:
        if i50 <= 1 goto label42;

        $i52 = i50 & 1;
        if $i52 == 0 goto label41;

        $r24 = <sun.misc.FormattedFloatingDecimal: double[] big10pow>;
        $d23 = $r24[i51];
        d0 = d0 * $d23;

     label41:
        i51 = i51 + 1;
        i50 = i50 >> 1;
        goto label40;

     label42:
        $r25 = <sun.misc.FormattedFloatingDecimal: double[] big10pow>;
        $d24 = $r25[i51];
        d3 = d0 * $d24;
        $z11 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d3);
        if $z11 == 0 goto label46;

        d25 = d0 / 2.0;
        $r26 = <sun.misc.FormattedFloatingDecimal: double[] big10pow>;
        $d26 = $r26[i51];
        d27 = d25 * $d26;
        $z12 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d27);
        if $z12 == 0 goto label45;

        $z13 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z13 == 0 goto label43;

        $d28 = #-Infinity;
        goto label44;

     label43:
        $d28 = #Infinity;

     label44:
        return $d28;

     label45:
        d3 = 1.7976931348623157E308;

     label46:
        d0 = d3;
        goto label59;

     label47:
        if i25 >= 0 goto label59;

        i53 = neg i25;
        $i54 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        if $i54 >= -325 goto label50;

        $z14 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z14 == 0 goto label48;

        $d29 = -0.0;
        goto label49;

     label48:
        $d29 = 0.0;

     label49:
        return $d29;

     label50:
        $i55 = i53 & 15;
        if $i55 == 0 goto label51;

        $r27 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $i56 = i53 & 15;
        $d30 = $r27[$i56];
        d0 = d0 / $d30;

     label51:
        $i57 = i53 >> 4;
        i58 = $i57;
        if $i57 == 0 goto label59;

        i59 = 0;

     label52:
        if i58 <= 1 goto label54;

        $i60 = i58 & 1;
        if $i60 == 0 goto label53;

        $r28 = <sun.misc.FormattedFloatingDecimal: double[] tiny10pow>;
        $d31 = $r28[i59];
        d0 = d0 * $d31;

     label53:
        i59 = i59 + 1;
        i58 = i58 >> 1;
        goto label52;

     label54:
        $r29 = <sun.misc.FormattedFloatingDecimal: double[] tiny10pow>;
        $d32 = $r29[i59];
        d33 = d0 * $d32;
        $b61 = d33 cmpl 0.0;
        if $b61 != 0 goto label58;

        d34 = d0 * 2.0;
        $r30 = <sun.misc.FormattedFloatingDecimal: double[] tiny10pow>;
        $d35 = $r30[i59];
        d36 = d34 * $d35;
        $b62 = d36 cmpl 0.0;
        if $b62 != 0 goto label57;

        $z15 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z15 == 0 goto label55;

        $d37 = -0.0;
        goto label56;

     label55:
        $d37 = 0.0;

     label56:
        return $d37;

     label57:
        d33 = 4.9E-324;

     label58:
        d0 = d33;

     label59:
        $r31 = new sun.misc.FDBigInt;
        $r32 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $i63 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        specialinvoke $r31.<sun.misc.FDBigInt: void <init>(long,char[],int,int)>(l4, $r32, i0, $i63);
        r33 = $r31;
        $i64 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i65 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        i66 = $i64 - $i65;

     label60:
        r34 = specialinvoke r0.<sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt doubleToBigInt(double)>(d0);
        if i66 < 0 goto label61;

        $b67 = 0;
        i6 = $b67;
        i7 = $b67;
        i8 = i66;
        i9 = i66;
        goto label62;

     label61:
        $i69 = neg i66;
        i6 = $i69;
        i7 = $i69;
        $b70 = 0;
        i8 = $b70;
        i9 = $b70;

     label62:
        $i71 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntExp>;
        if $i71 < 0 goto label63;

        $i72 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntExp>;
        i7 = i7 + $i72;
        goto label64;

     label63:
        $i73 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntExp>;
        i9 = i9 - $i73;

     label64:
        i10 = i7;
        $i74 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntExp>;
        $i75 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntNBits>;
        $i76 = $i74 + $i75;
        if $i76 > -1022 goto label65;

        $i77 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntExp>;
        $i78 = $i77 + 1023;
        i11 = $i78 + 52;
        goto label66;

     label65:
        $i79 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntNBits>;
        i11 = 54 - $i79;

     label66:
        i80 = i7 + i11;
        i81 = i9 + i11;
        $i82 = staticinvoke <java.lang.Math: int min(int,int)>(i81, i10);
        i12 = staticinvoke <java.lang.Math: int min(int,int)>(i80, $i82);
        i83 = i80 - i12;
        i84 = i81 - i12;
        i85 = i10 - i12;
        r35 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt multPow52(sun.misc.FDBigInt,int,int)>(r34, i6, i83);
        $r36 = new sun.misc.FDBigInt;
        specialinvoke $r36.<sun.misc.FDBigInt: void <init>(sun.misc.FDBigInt)>(r33);
        r1 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt multPow52(sun.misc.FDBigInt,int,int)>($r36, i8, i84);
        $i86 = virtualinvoke r35.<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>(r1);
        i13 = $i86;
        if $i86 <= 0 goto label67;

        z0 = 1;
        r2 = virtualinvoke r35.<sun.misc.FDBigInt: sun.misc.FDBigInt sub(sun.misc.FDBigInt)>(r1);
        $i87 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntNBits>;
        if $i87 != 1 goto label68;

        $i88 = r0.<sun.misc.FormattedFloatingDecimal: int bigIntExp>;
        if $i88 <= -1023 goto label68;

        i85 = i85 + -1;
        if i85 >= 0 goto label68;

        i85 = 0;
        virtualinvoke r2.<sun.misc.FDBigInt: void lshiftMe(int)>(1);
        goto label68;

     label67:
        if i13 >= 0 goto label75;

        z0 = 0;
        r2 = virtualinvoke r1.<sun.misc.FDBigInt: sun.misc.FDBigInt sub(sun.misc.FDBigInt)>(r35);

     label68:
        r3 = staticinvoke <sun.misc.FormattedFloatingDecimal: sun.misc.FDBigInt constructPow52(int,int)>(i6, i85);
        $i89 = virtualinvoke r2.<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>(r3);
        i90 = $i89;
        if $i89 >= 0 goto label71;

        $z16 = r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir>;
        if $z16 == 0 goto label75;

        if z0 == 0 goto label69;

        $b91 = -1;
        goto label70;

     label69:
        $b91 = 1;

     label70:
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = $b91;
        goto label75;

     label71:
        if i90 != 0 goto label74;

        $d38 = staticinvoke <sun.misc.FormattedFloatingDecimal: double ulp(double,boolean)>(d0, z0);
        $d39 = 0.5 * $d38;
        d0 = d0 + $d39;
        $z17 = r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir>;
        if $z17 == 0 goto label75;

        if z0 == 0 goto label72;

        $b92 = -1;
        goto label73;

     label72:
        $b92 = 1;

     label73:
        r0.<sun.misc.FormattedFloatingDecimal: int roundDir> = $b92;
        goto label75;

     label74:
        $d40 = staticinvoke <sun.misc.FormattedFloatingDecimal: double ulp(double,boolean)>(d0, z0);
        d0 = d0 + $d40;
        $b93 = d0 cmpl 0.0;
        if $b93 == 0 goto label75;

        $b94 = d0 cmpl #Infinity;
        if $b94 != 0 goto label60;

        goto label75;

     label75:
        $z18 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z18 == 0 goto label76;

        $d41 = neg d0;
        goto label77;

     label76:
        $d41 = d0;

     label77:
        return $d41;
    }

    public strictfp float floatValue()
    {
        sun.misc.FormattedFloatingDecimal r0;
        int i0, i1, i2, i3, i4, $i5, $i7, $i9, $i10, i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i30, $i32, $i33, i34, $i35, $i36;
        float f0, $f1, $f2, $f3, f4, $f5, $f6, f7, $f8, f9, $f10, $f11, f12, $f13, f14, $f15, $f16, $f17, $f18;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        char $c6, $c8, $c29;
        byte $b13;
        float[] $r9, $r10, $r11, $r12;
        long l26, $l28, $l31;
        double d0, $d1, d2, d3;
        double[] $r14;

        r0 := @this: sun.misc.FormattedFloatingDecimal;
        $i5 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i5, 8);
        $r1 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r2 = <sun.misc.FormattedFloatingDecimal: char[] infinity>;
        if $r1 == $r2 goto label0;

        $r3 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r4 = <sun.misc.FormattedFloatingDecimal: char[] notANumber>;
        if $r3 != $r4 goto label4;

     label0:
        $r5 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $r6 = <sun.misc.FormattedFloatingDecimal: char[] notANumber>;
        if $r5 != $r6 goto label1;

        return #NaNF;

     label1:
        $z0 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z0 == 0 goto label2;

        $f1 = #-InfinityF;
        goto label3;

     label2:
        $f1 = #InfinityF;

     label3:
        return $f1;

     label4:
        $r7 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c6 = $r7[0];
        i1 = $c6 - 48;
        i2 = 1;

     label5:
        if i2 >= i0 goto label6;

        $i7 = i1 * 10;
        $r8 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c8 = $r8[i2];
        $i9 = $i7 + $c8;
        i1 = $i9 - 48;
        i2 = i2 + 1;
        goto label5;

     label6:
        f0 = (float) i1;
        $i10 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        i11 = $i10 - i0;
        $i12 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if $i12 > 7 goto label20;

        if i11 == 0 goto label7;

        $b13 = f0 cmpl 0.0F;
        if $b13 != 0 goto label10;

     label7:
        $z1 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z1 == 0 goto label8;

        $f2 = neg f0;
        goto label9;

     label8:
        $f2 = f0;

     label9:
        return $f2;

     label10:
        if i11 < 0 goto label17;

        $i14 = <sun.misc.FormattedFloatingDecimal: int singleMaxSmallTen>;
        if i11 > $i14 goto label13;

        $r9 = <sun.misc.FormattedFloatingDecimal: float[] singleSmall10pow>;
        $f3 = $r9[i11];
        f4 = f0 * $f3;
        $z2 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z2 == 0 goto label11;

        $f5 = neg f4;
        goto label12;

     label11:
        $f5 = f4;

     label12:
        return $f5;

     label13:
        i3 = 7 - i0;
        $i15 = <sun.misc.FormattedFloatingDecimal: int singleMaxSmallTen>;
        $i16 = $i15 + i3;
        if i11 > $i16 goto label16;

        $r10 = <sun.misc.FormattedFloatingDecimal: float[] singleSmall10pow>;
        $f6 = $r10[i3];
        f7 = f0 * $f6;
        $r11 = <sun.misc.FormattedFloatingDecimal: float[] singleSmall10pow>;
        $i17 = i11 - i3;
        $f8 = $r11[$i17];
        f9 = f7 * $f8;
        $z3 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z3 == 0 goto label14;

        $f10 = neg f9;
        goto label15;

     label14:
        $f10 = f9;

     label15:
        return $f10;

     label16:
        goto label25;

     label17:
        $i18 = <sun.misc.FormattedFloatingDecimal: int singleMaxSmallTen>;
        $i19 = neg $i18;
        if i11 < $i19 goto label25;

        $r12 = <sun.misc.FormattedFloatingDecimal: float[] singleSmall10pow>;
        $i20 = neg i11;
        $f11 = $r12[$i20];
        f12 = f0 / $f11;
        $z4 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z4 == 0 goto label18;

        $f13 = neg f12;
        goto label19;

     label18:
        $f13 = f12;

     label19:
        return $f13;

     label20:
        $i21 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i22 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if $i21 < $i22 goto label25;

        $i23 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        $i24 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i25 = $i23 + $i24;
        if $i25 > 15 goto label25;

        l26 = (long) i1;
        i4 = i0;

     label21:
        $i27 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        if i4 >= $i27 goto label22;

        $l28 = l26 * 10L;
        $r13 = r0.<sun.misc.FormattedFloatingDecimal: char[] digits>;
        $c29 = $r13[i4];
        $i30 = $c29 - 48;
        $l31 = (long) $i30;
        l26 = $l28 + $l31;
        i4 = i4 + 1;
        goto label21;

     label22:
        d0 = (double) l26;
        $i32 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        $i33 = r0.<sun.misc.FormattedFloatingDecimal: int nDigits>;
        i34 = $i32 - $i33;
        $r14 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $d1 = $r14[i34];
        d2 = d0 * $d1;
        f14 = (float) d2;
        $z5 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z5 == 0 goto label23;

        $f15 = neg f14;
        goto label24;

     label23:
        $f15 = f14;

     label24:
        return $f15;

     label25:
        $i35 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        if $i35 <= 39 goto label28;

        $z6 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z6 == 0 goto label26;

        $f16 = #-InfinityF;
        goto label27;

     label26:
        $f16 = #InfinityF;

     label27:
        return $f16;

     label28:
        $i36 = r0.<sun.misc.FormattedFloatingDecimal: int decExponent>;
        if $i36 >= -46 goto label31;

        $z7 = r0.<sun.misc.FormattedFloatingDecimal: boolean isNegative>;
        if $z7 == 0 goto label29;

        $f17 = -0.0F;
        goto label30;

     label29:
        $f17 = 0.0F;

     label30:
        return $f17;

     label31:
        $z8 = r0.<sun.misc.FormattedFloatingDecimal: boolean fromHex>;
        if $z8 != 0 goto label32;

        $z9 = 1;
        goto label33;

     label32:
        $z9 = 0;

     label33:
        r0.<sun.misc.FormattedFloatingDecimal: boolean mustSetRoundDir> = $z9;
        d3 = virtualinvoke r0.<sun.misc.FormattedFloatingDecimal: double doubleValue()>();
        $f18 = virtualinvoke r0.<sun.misc.FormattedFloatingDecimal: float stickyRound(double)>(d3);
        return $f18;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.misc.FormattedFloatingDecimal$1 $r1;
        double[] $r2, $r4, $r5, $r6;
        float[] $r3, $r7;
        int $i0, $i1, $i2, $i3;
        int[] $r8, $r10;
        long[] $r9;
        char[] $r11, $r12, $r13;

        $r0 = class "sun/misc/FormattedFloatingDecimal";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.misc.FormattedFloatingDecimal: boolean $assertionsDisabled> = $z1;
        $r1 = new sun.misc.FormattedFloatingDecimal$1;
        specialinvoke $r1.<sun.misc.FormattedFloatingDecimal$1: void <init>()>();
        <sun.misc.FormattedFloatingDecimal: java.lang.ThreadLocal perThreadBuffer> = $r1;
        $r2 = newarray (double)[23];
        $r2[0] = 1.0;
        $r2[1] = 10.0;
        $r2[2] = 100.0;
        $r2[3] = 1000.0;
        $r2[4] = 10000.0;
        $r2[5] = 100000.0;
        $r2[6] = 1000000.0;
        $r2[7] = 1.0E7;
        $r2[8] = 1.0E8;
        $r2[9] = 1.0E9;
        $r2[10] = 1.0E10;
        $r2[11] = 1.0E11;
        $r2[12] = 1.0E12;
        $r2[13] = 1.0E13;
        $r2[14] = 1.0E14;
        $r2[15] = 1.0E15;
        $r2[16] = 1.0E16;
        $r2[17] = 1.0E17;
        $r2[18] = 1.0E18;
        $r2[19] = 1.0E19;
        $r2[20] = 1.0E20;
        $r2[21] = 1.0E21;
        $r2[22] = 1.0E22;
        <sun.misc.FormattedFloatingDecimal: double[] small10pow> = $r2;
        $r3 = newarray (float)[11];
        $r3[0] = 1.0F;
        $r3[1] = 10.0F;
        $r3[2] = 100.0F;
        $r3[3] = 1000.0F;
        $r3[4] = 10000.0F;
        $r3[5] = 100000.0F;
        $r3[6] = 1000000.0F;
        $r3[7] = 1.0E7F;
        $r3[8] = 1.0E8F;
        $r3[9] = 1.0E9F;
        $r3[10] = 1.0E10F;
        <sun.misc.FormattedFloatingDecimal: float[] singleSmall10pow> = $r3;
        $r4 = newarray (double)[5];
        $r4[0] = 1.0E16;
        $r4[1] = 1.0E32;
        $r4[2] = 1.0E64;
        $r4[3] = 1.0E128;
        $r4[4] = 1.0E256;
        <sun.misc.FormattedFloatingDecimal: double[] big10pow> = $r4;
        $r5 = newarray (double)[5];
        $r5[0] = 1.0E-16;
        $r5[1] = 1.0E-32;
        $r5[2] = 1.0E-64;
        $r5[3] = 1.0E-128;
        $r5[4] = 1.0E-256;
        <sun.misc.FormattedFloatingDecimal: double[] tiny10pow> = $r5;
        $r6 = <sun.misc.FormattedFloatingDecimal: double[] small10pow>;
        $i0 = lengthof $r6;
        $i1 = $i0 - 1;
        <sun.misc.FormattedFloatingDecimal: int maxSmallTen> = $i1;
        $r7 = <sun.misc.FormattedFloatingDecimal: float[] singleSmall10pow>;
        $i2 = lengthof $r7;
        $i3 = $i2 - 1;
        <sun.misc.FormattedFloatingDecimal: int singleMaxSmallTen> = $i3;
        $r8 = newarray (int)[14];
        $r8[0] = 1;
        $r8[1] = 5;
        $r8[2] = 25;
        $r8[3] = 125;
        $r8[4] = 625;
        $r8[5] = 3125;
        $r8[6] = 15625;
        $r8[7] = 78125;
        $r8[8] = 390625;
        $r8[9] = 1953125;
        $r8[10] = 9765625;
        $r8[11] = 48828125;
        $r8[12] = 244140625;
        $r8[13] = 1220703125;
        <sun.misc.FormattedFloatingDecimal: int[] small5pow> = $r8;
        $r9 = newarray (long)[27];
        $r9[0] = 1L;
        $r9[1] = 5L;
        $r9[2] = 25L;
        $r9[3] = 125L;
        $r9[4] = 625L;
        $r9[5] = 3125L;
        $r9[6] = 15625L;
        $r9[7] = 78125L;
        $r9[8] = 390625L;
        $r9[9] = 1953125L;
        $r9[10] = 9765625L;
        $r9[11] = 48828125L;
        $r9[12] = 244140625L;
        $r9[13] = 1220703125L;
        $r9[14] = 6103515625L;
        $r9[15] = 30517578125L;
        $r9[16] = 152587890625L;
        $r9[17] = 762939453125L;
        $r9[18] = 3814697265625L;
        $r9[19] = 19073486328125L;
        $r9[20] = 95367431640625L;
        $r9[21] = 476837158203125L;
        $r9[22] = 2384185791015625L;
        $r9[23] = 11920928955078125L;
        $r9[24] = 59604644775390625L;
        $r9[25] = 298023223876953125L;
        $r9[26] = 1490116119384765625L;
        <sun.misc.FormattedFloatingDecimal: long[] long5pow> = $r9;
        $r10 = newarray (int)[27];
        $r10[0] = 0;
        $r10[1] = 3;
        $r10[2] = 5;
        $r10[3] = 7;
        $r10[4] = 10;
        $r10[5] = 12;
        $r10[6] = 14;
        $r10[7] = 17;
        $r10[8] = 19;
        $r10[9] = 21;
        $r10[10] = 24;
        $r10[11] = 26;
        $r10[12] = 28;
        $r10[13] = 31;
        $r10[14] = 33;
        $r10[15] = 35;
        $r10[16] = 38;
        $r10[17] = 40;
        $r10[18] = 42;
        $r10[19] = 45;
        $r10[20] = 47;
        $r10[21] = 49;
        $r10[22] = 52;
        $r10[23] = 54;
        $r10[24] = 56;
        $r10[25] = 59;
        $r10[26] = 61;
        <sun.misc.FormattedFloatingDecimal: int[] n5bits> = $r10;
        $r11 = newarray (char)[8];
        $r11[0] = 73;
        $r11[1] = 110;
        $r11[2] = 102;
        $r11[3] = 105;
        $r11[4] = 110;
        $r11[5] = 105;
        $r11[6] = 116;
        $r11[7] = 121;
        <sun.misc.FormattedFloatingDecimal: char[] infinity> = $r11;
        $r12 = newarray (char)[3];
        $r12[0] = 78;
        $r12[1] = 97;
        $r12[2] = 78;
        <sun.misc.FormattedFloatingDecimal: char[] notANumber> = $r12;
        $r13 = newarray (char)[8];
        $r13[0] = 48;
        $r13[1] = 48;
        $r13[2] = 48;
        $r13[3] = 48;
        $r13[4] = 48;
        $r13[5] = 48;
        $r13[6] = 48;
        $r13[7] = 48;
        <sun.misc.FormattedFloatingDecimal: char[] zero> = $r13;
        return;
    }
}
