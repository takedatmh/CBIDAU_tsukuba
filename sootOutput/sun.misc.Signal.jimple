public final class sun.misc.Signal extends java.lang.Object
{
    private static java.util.Hashtable handlers;
    private static java.util.Hashtable signals;
    private int number;
    private java.lang.String name;

    public int getNumber()
    {
        sun.misc.Signal r0;
        int $i0;

        r0 := @this: sun.misc.Signal;
        $i0 = r0.<sun.misc.Signal: int number>;
        return $i0;
    }

    public java.lang.String getName()
    {
        sun.misc.Signal r0;
        java.lang.String $r1;

        r0 := @this: sun.misc.Signal;
        $r1 = r0.<sun.misc.Signal: java.lang.String name>;
        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        sun.misc.Signal r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;
        int $i0, $i1;

        r0 := @this: sun.misc.Signal;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r1 == null goto label1;

        $z0 = r1 instanceof sun.misc.Signal;
        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (sun.misc.Signal) r1;
        $r3 = r0.<sun.misc.Signal: java.lang.String name>;
        $r4 = r2.<sun.misc.Signal: java.lang.String name>;
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label3;

        $i0 = r0.<sun.misc.Signal: int number>;
        $i1 = r2.<sun.misc.Signal: int number>;
        if $i0 != $i1 goto label3;

        $z2 = 1;
        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        sun.misc.Signal r0;
        int $i0;

        r0 := @this: sun.misc.Signal;
        $i0 = r0.<sun.misc.Signal: int number>;
        return $i0;
    }

    public java.lang.String toString()
    {
        sun.misc.Signal r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: sun.misc.Signal;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIG");
        $r3 = r0.<sun.misc.Signal: java.lang.String name>;
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r5;
    }

    public void <init>(java.lang.String)
    {
        sun.misc.Signal r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: sun.misc.Signal;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0 = staticinvoke <sun.misc.Signal: int findSignal(java.lang.String)>(r1);
        r0.<sun.misc.Signal: int number> = $i0;
        r0.<sun.misc.Signal: java.lang.String name> = r1;
        $i1 = r0.<sun.misc.Signal: int number>;
        if $i1 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown signal: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label0:
        return;
    }

    public static synchronized sun.misc.SignalHandler handle(sun.misc.Signal, sun.misc.SignalHandler) throws java.lang.IllegalArgumentException
    {
        sun.misc.Signal r0;
        sun.misc.SignalHandler r1, r3, $r21, $r22;
        long l0, l1, $l2;
        java.util.Hashtable r2, $r11, $r14, $r15, $r17, $r19;
        java.lang.Throwable r4, $r25;
        boolean $z0;
        sun.misc.NativeSignalHandler $r5, $r24;
        int $i3, $i5;
        byte $b4, $b6, $b7, $b8, $b9;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.Integer $r12;
        java.lang.Object $r16;

        r0 := @parameter0: sun.misc.Signal;
        r1 := @parameter1: sun.misc.SignalHandler;
        $z0 = r1 instanceof sun.misc.NativeSignalHandler;
        if $z0 == 0 goto label0;

        $r5 = (sun.misc.NativeSignalHandler) r1;
        $l2 = virtualinvoke $r5.<sun.misc.NativeSignalHandler: long getHandler()>();
        goto label1;

     label0:
        $l2 = 2L;

     label1:
        l0 = $l2;
        $i3 = r0.<sun.misc.Signal: int number>;
        l1 = staticinvoke <sun.misc.Signal: long handle0(int,long)>($i3, l0);
        $b4 = l1 cmp -1L;
        if $b4 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signal already used by VM or OS: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label2:
        $r11 = <sun.misc.Signal: java.util.Hashtable signals>;
        $r12 = new java.lang.Integer;
        $i5 = r0.<sun.misc.Signal: int number>;
        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i5);
        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r0);
        $r14 = <sun.misc.Signal: java.util.Hashtable handlers>;
        r2 = $r14;
        entermonitor $r14;

     label3:
        $r15 = <sun.misc.Signal: java.util.Hashtable handlers>;
        $r16 = virtualinvoke $r15.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (sun.misc.SignalHandler) $r16;
        $r17 = <sun.misc.Signal: java.util.Hashtable handlers>;
        virtualinvoke $r17.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);
        $b6 = l0 cmp 2L;
        if $b6 != 0 goto label4;

        $r19 = <sun.misc.Signal: java.util.Hashtable handlers>;
        virtualinvoke $r19.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label4:
        $b7 = l1 cmp 0L;
        if $b7 != 0 goto label6;

        $r21 = <sun.misc.SignalHandler: sun.misc.SignalHandler SIG_DFL>;
        exitmonitor r2;

     label5:
        return $r21;

     label6:
        $b8 = l1 cmp 1L;
        if $b8 != 0 goto label8;

        $r22 = <sun.misc.SignalHandler: sun.misc.SignalHandler SIG_IGN>;
        exitmonitor r2;

     label7:
        return $r22;

     label8:
        $b9 = l1 cmp 2L;
        if $b9 != 0 goto label10;

        exitmonitor r2;

     label9:
        return r3;

     label10:
        $r24 = new sun.misc.NativeSignalHandler;
        specialinvoke $r24.<sun.misc.NativeSignalHandler: void <init>(long)>(l1);
        exitmonitor r2;

     label11:
        return $r24;

     label12:
        $r25 := @caughtexception;

     label13:
        r4 = $r25;
        exitmonitor r2;

     label14:
        throw r4;

        catch java.lang.Throwable from label3 to label5 with label12;
        catch java.lang.Throwable from label6 to label7 with label12;
        catch java.lang.Throwable from label8 to label9 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public static void raise(sun.misc.Signal) throws java.lang.IllegalArgumentException
    {
        sun.misc.Signal r0;
        java.util.Hashtable $r1;
        java.lang.StringBuilder $r2, $r5, $r6;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r7;
        int $i0;

        r0 := @parameter0: sun.misc.Signal;
        $r1 = <sun.misc.Signal: java.util.Hashtable handlers>;
        $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);
        if $r3 != null goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled signal: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label0:
        $i0 = r0.<sun.misc.Signal: int number>;
        staticinvoke <sun.misc.Signal: void raise0(int)>($i0);
        return;
    }

    private static void dispatch(int)
    {
        int i0;
        java.util.Hashtable $r0, $r6;
        java.lang.Integer $r1;
        sun.misc.Signal r2;
        sun.misc.SignalHandler r3;
        sun.misc.Signal$1 r4, $r8;
        java.lang.Object $r5, $r7;
        java.lang.Thread $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        i0 := @parameter0: int;
        $r0 = <sun.misc.Signal: java.util.Hashtable signals>;
        $r1 = new java.lang.Integer;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);
        $r5 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);
        r2 = (sun.misc.Signal) $r5;
        $r6 = <sun.misc.Signal: java.util.Hashtable handlers>;
        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (sun.misc.SignalHandler) $r7;
        $r8 = new sun.misc.Signal$1;
        specialinvoke $r8.<sun.misc.Signal$1: void <init>(sun.misc.SignalHandler,sun.misc.Signal)>(r3, r2);
        r4 = $r8;
        if r3 == null goto label0;

        $r9 = new java.lang.Thread;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handler");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r4, $r13);
        virtualinvoke $r9.<java.lang.Thread: void start()>();

     label0:
        return;
    }

    private static native int findSignal(java.lang.String);

    private static native long handle0(int, long);

    private static native void raise0(int);

    static void <clinit>()
    {
        java.util.Hashtable $r0, $r1;

        $r0 = new java.util.Hashtable;
        specialinvoke $r0.<java.util.Hashtable: void <init>(int)>(4);
        <sun.misc.Signal: java.util.Hashtable handlers> = $r0;
        $r1 = new java.util.Hashtable;
        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(4);
        <sun.misc.Signal: java.util.Hashtable signals> = $r1;
        return;
    }
}
