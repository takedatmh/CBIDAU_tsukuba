final class java.util.regex.Pattern$GroupCurly extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node atom;
    int type;
    int cmin;
    int cmax;
    int localIndex;
    int groupIndex;
    boolean capture;

    void <init>(java.util.regex.Pattern$Node, int, int, int, int, int, boolean)
    {
        java.util.regex.Pattern$GroupCurly r0;
        java.util.regex.Pattern$Node r1;
        int i0, i1, i2, i3, i4;
        boolean z0;

        r0 := @this: java.util.regex.Pattern$GroupCurly;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        z0 := @parameter6: boolean;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node atom> = r1;
        r0.<java.util.regex.Pattern$GroupCurly: int type> = i2;
        r0.<java.util.regex.Pattern$GroupCurly: int cmin> = i0;
        r0.<java.util.regex.Pattern$GroupCurly: int cmax> = i1;
        r0.<java.util.regex.Pattern$GroupCurly: int localIndex> = i3;
        r0.<java.util.regex.Pattern$GroupCurly: int groupIndex> = i4;
        r0.<java.util.regex.Pattern$GroupCurly: boolean capture> = z0;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupCurly r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        java.lang.CharSequence r2;
        int[] r3, r4;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.regex.Pattern$Node $r5;

        r0 := @this: java.util.regex.Pattern$GroupCurly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        r3 = r1.<java.util.regex.Matcher: int[] groups>;
        r4 = r1.<java.util.regex.Matcher: int[] locals>;
        $i5 = r0.<java.util.regex.Pattern$GroupCurly: int localIndex>;
        i1 = r4[$i5];
        i2 = 0;
        i3 = 0;
        $z1 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z1 == 0 goto label0;

        $i6 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        i2 = r3[$i6];
        $i7 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i8 = $i7 + 1;
        i3 = r3[$i8];

     label0:
        $i9 = r0.<java.util.regex.Pattern$GroupCurly: int localIndex>;
        r4[$i9] = -1;
        z0 = 1;
        i4 = 0;

     label1:
        $i10 = r0.<java.util.regex.Pattern$GroupCurly: int cmin>;
        if i4 >= $i10 goto label5;

        $r5 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node atom>;
        $z2 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z2 == 0 goto label3;

        $z3 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z3 == 0 goto label2;

        $i11 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        r3[$i11] = i0;
        $i12 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i13 = $i12 + 1;
        $i14 = r1.<java.util.regex.Matcher: int last>;
        r3[$i13] = $i14;

     label2:
        i0 = r1.<java.util.regex.Matcher: int last>;
        goto label4;

     label3:
        z0 = 0;
        goto label5;

     label4:
        i4 = i4 + 1;
        goto label1;

     label5:
        if z0 == 0 goto label8;

        $i15 = r0.<java.util.regex.Pattern$GroupCurly: int type>;
        if $i15 != 0 goto label6;

        $i16 = r0.<java.util.regex.Pattern$GroupCurly: int cmin>;
        z0 = virtualinvoke r0.<java.util.regex.Pattern$GroupCurly: boolean match0(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, i0, $i16, r2);
        goto label8;

     label6:
        $i17 = r0.<java.util.regex.Pattern$GroupCurly: int type>;
        if $i17 != 1 goto label7;

        $i18 = r0.<java.util.regex.Pattern$GroupCurly: int cmin>;
        z0 = virtualinvoke r0.<java.util.regex.Pattern$GroupCurly: boolean match1(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, i0, $i18, r2);
        goto label8;

     label7:
        $i19 = r0.<java.util.regex.Pattern$GroupCurly: int cmin>;
        z0 = virtualinvoke r0.<java.util.regex.Pattern$GroupCurly: boolean match2(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, i0, $i19, r2);

     label8:
        if z0 != 0 goto label9;

        $i20 = r0.<java.util.regex.Pattern$GroupCurly: int localIndex>;
        r4[$i20] = i1;
        $z4 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z4 == 0 goto label9;

        $i21 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        r3[$i21] = i2;
        $i22 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i23 = $i22 + 1;
        r3[$i23] = i3;

     label9:
        return z0;
    }

    boolean match0(java.util.regex.Matcher, int, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupCurly r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        java.lang.CharSequence r2;
        int[] r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.regex.Pattern$Node $r4, $r5, $r6, $r7;

        r0 := @this: java.util.regex.Pattern$GroupCurly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.CharSequence;
        r3 = r1.<java.util.regex.Matcher: int[] groups>;
        i2 = 0;
        i3 = 0;
        $z0 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z0 == 0 goto label0;

        $i5 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        i2 = r3[$i5];
        $i6 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i7 = $i6 + 1;
        i3 = r3[$i7];

     label0:
        $i8 = r0.<java.util.regex.Pattern$GroupCurly: int cmax>;
        if i1 < $i8 goto label1;

        goto label12;

     label1:
        $r4 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node atom>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 != 0 goto label2;

        goto label12;

     label2:
        $i9 = r1.<java.util.regex.Matcher: int last>;
        i4 = $i9 - i0;
        if i4 > 0 goto label4;

        $z2 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z2 == 0 goto label3;

        $i10 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        r3[$i10] = i0;
        $i11 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i12 = $i11 + 1;
        $i13 = i0 + i4;
        r3[$i12] = $i13;

     label3:
        i0 = i0 + i4;
        goto label12;

     label4:
        $z3 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z3 == 0 goto label5;

        $i14 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        r3[$i14] = i0;
        $i15 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i16 = $i15 + 1;
        $i17 = i0 + i4;
        r3[$i16] = $i17;

     label5:
        i0 = i0 + i4;
        i1 = i1 + 1;
        $i18 = r0.<java.util.regex.Pattern$GroupCurly: int cmax>;
        if i1 < $i18 goto label6;

        goto label8;

     label6:
        $r5 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node atom>;
        $z4 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z4 != 0 goto label7;

        goto label8;

     label7:
        $i19 = i0 + i4;
        $i20 = r1.<java.util.regex.Matcher: int last>;
        if $i19 == $i20 goto label4;

        $z5 = virtualinvoke r0.<java.util.regex.Pattern$GroupCurly: boolean match0(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, i0, i1, r2);
        if $z5 == 0 goto label8;

        return 1;

     label8:
        $i21 = r0.<java.util.regex.Pattern$GroupCurly: int cmin>;
        if i1 <= $i21 goto label12;

        $r6 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node next>;
        $z6 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z6 == 0 goto label10;

        $z7 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z7 == 0 goto label9;

        $i22 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i23 = $i22 + 1;
        r3[$i23] = i0;
        $i24 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i25 = i0 - i4;
        r3[$i24] = $i25;

     label9:
        i26 = i0 - i4;
        return 1;

     label10:
        $z8 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z8 == 0 goto label11;

        $i27 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i28 = $i27 + 1;
        r3[$i28] = i0;
        $i29 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i30 = i0 - i4;
        r3[$i29] = $i30;

     label11:
        i0 = i0 - i4;
        i1 = i1 + -1;
        goto label8;

     label12:
        $z9 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z9 == 0 goto label13;

        $i31 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        r3[$i31] = i2;
        $i32 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i33 = $i32 + 1;
        r3[$i33] = i3;

     label13:
        $r7 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node next>;
        $z10 = virtualinvoke $r7.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z10;
    }

    boolean match1(java.util.regex.Matcher, int, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupCurly r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r4;
        boolean $z0, $z1, $z2;
        int[] $r5, $r6;

        r0 := @this: java.util.regex.Pattern$GroupCurly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.CharSequence;

     label0:
        $r3 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i2 = r0.<java.util.regex.Pattern$GroupCurly: int cmax>;
        if i1 < $i2 goto label2;

        return 0;

     label2:
        $r4 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node atom>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i3 = r1.<java.util.regex.Matcher: int last>;
        if i0 != $i3 goto label4;

        return 0;

     label4:
        $z2 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z2 == 0 goto label5;

        $r5 = r1.<java.util.regex.Matcher: int[] groups>;
        $i4 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $r5[$i4] = i0;
        $r6 = r1.<java.util.regex.Matcher: int[] groups>;
        $i5 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i6 = $i5 + 1;
        $i7 = r1.<java.util.regex.Matcher: int last>;
        $r6[$i6] = $i7;

     label5:
        i0 = r1.<java.util.regex.Matcher: int last>;
        i1 = i1 + 1;
        goto label0;
    }

    boolean match2(java.util.regex.Matcher, int, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupCurly r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r6;
        boolean $z0, $z1, $z2;
        int[] $r4, $r5;

        r0 := @this: java.util.regex.Pattern$GroupCurly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.CharSequence;

     label0:
        $i2 = r0.<java.util.regex.Pattern$GroupCurly: int cmax>;
        if i1 >= $i2 goto label4;

        $r3 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node atom>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 != 0 goto label1;

        goto label4;

     label1:
        $z1 = r0.<java.util.regex.Pattern$GroupCurly: boolean capture>;
        if $z1 == 0 goto label2;

        $r4 = r1.<java.util.regex.Matcher: int[] groups>;
        $i3 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $r4[$i3] = i0;
        $r5 = r1.<java.util.regex.Matcher: int[] groups>;
        $i4 = r0.<java.util.regex.Pattern$GroupCurly: int groupIndex>;
        $i5 = $i4 + 1;
        $i6 = r1.<java.util.regex.Matcher: int last>;
        $r5[$i5] = $i6;

     label2:
        $i7 = r1.<java.util.regex.Matcher: int last>;
        if i0 != $i7 goto label3;

        goto label4;

     label3:
        i0 = r1.<java.util.regex.Matcher: int last>;
        i1 = i1 + 1;
        goto label0;

     label4:
        $r6 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node next>;
        $z2 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z2;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$GroupCurly r0;
        java.util.regex.Pattern$TreeInfo r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11;
        boolean z0, z1, $z3, $z4, $z5, $z6;
        java.util.regex.Pattern$Node $r2, $r3;

        r0 := @this: java.util.regex.Pattern$GroupCurly;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        i1 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        z0 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        z1 = r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic>;
        virtualinvoke r1.<java.util.regex.Pattern$TreeInfo: void reset()>();
        $r2 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node atom>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        $i3 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $i4 = r0.<java.util.regex.Pattern$GroupCurly: int cmin>;
        $i5 = $i3 * $i4;
        i2 = $i5 + i0;
        if i2 >= i0 goto label0;

        i2 = 268435455;

     label0:
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = i2;
        $z3 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        $z4 = z0 & $z3;
        if $z4 == 0 goto label1;

        $i6 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        $i7 = r0.<java.util.regex.Pattern$GroupCurly: int cmax>;
        $i8 = $i6 * $i7;
        i9 = $i8 + i1;
        r1.<java.util.regex.Pattern$TreeInfo: int maxLength> = i9;
        if i9 >= i1 goto label2;

        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        goto label2;

     label1:
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;

     label2:
        $z5 = r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic>;
        if $z5 == 0 goto label3;

        $i10 = r0.<java.util.regex.Pattern$GroupCurly: int cmin>;
        $i11 = r0.<java.util.regex.Pattern$GroupCurly: int cmax>;
        if $i10 != $i11 goto label3;

        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = z1;
        goto label4;

     label3:
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;

     label4:
        $r3 = r0.<java.util.regex.Pattern$GroupCurly: java.util.regex.Pattern$Node next>;
        $z6 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z6;
    }
}
