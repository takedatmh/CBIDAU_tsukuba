final class java.util.regex.Pattern$Branch extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node[] atoms;
    int size;
    java.util.regex.Pattern$Node conn;

    void <init>(java.util.regex.Pattern$Node, java.util.regex.Pattern$Node, java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$Branch r0;
        java.util.regex.Pattern$Node r1, r2, r3;
        java.util.regex.Pattern$Node[] $r4, $r5, $r6;

        r0 := @this: java.util.regex.Pattern$Branch;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        r2 := @parameter1: java.util.regex.Pattern$Node;
        r3 := @parameter2: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        $r4 = newarray (java.util.regex.Pattern$Node)[2];
        r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms> = $r4;
        r0.<java.util.regex.Pattern$Branch: int size> = 2;
        r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node conn> = r3;
        $r5 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $r5[0] = r1;
        $r6 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $r6[1] = r2;
        return;
    }

    void add(java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$Branch r0;
        java.util.regex.Pattern$Node r1;
        java.util.regex.Pattern$Node[] r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.util.regex.Pattern$Branch;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        $i0 = r0.<java.util.regex.Pattern$Branch: int size>;
        $r3 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $i1 = lengthof $r3;
        if $i0 < $i1 goto label0;

        $r4 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $i2 = lengthof $r4;
        $i3 = $i2 * 2;
        r2 = newarray (java.util.regex.Pattern$Node)[$i3];
        $r5 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $r6 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $i4 = lengthof $r6;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i4);
        r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms> = r2;

     label0:
        $r7 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $i5 = r0.<java.util.regex.Pattern$Branch: int size>;
        $i6 = $i5 + 1;
        r0.<java.util.regex.Pattern$Branch: int size> = $i6;
        $r7[$i5] = r1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Branch r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node[] $r3, $r7;
        java.util.regex.Pattern$Node $r4, $r5, $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Pattern$Branch;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        i1 = 0;

     label0:
        $i2 = r0.<java.util.regex.Pattern$Branch: int size>;
        if i1 >= $i2 goto label3;

        $r3 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $r4 = $r3[i1];
        if $r4 != null goto label1;

        $r5 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node conn>;
        $r6 = $r5.<java.util.regex.Pattern$Node: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label2;

        return 1;

     label1:
        $r7 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $r8 = $r7[i1];
        $z1 = virtualinvoke $r8.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        return 0;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Branch r0;
        java.util.regex.Pattern$TreeInfo r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13;
        boolean z0, $z2, $z4, $z5;
        java.util.regex.Pattern$Node[] $r2, $r4;
        java.util.regex.Pattern$Node $r3, $r5, $r6, $r7;

        r0 := @this: java.util.regex.Pattern$Branch;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        i1 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        z0 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        i2 = 2147483647;
        i3 = -1;
        i4 = 0;

     label0:
        $i5 = r0.<java.util.regex.Pattern$Branch: int size>;
        if i4 >= $i5 goto label2;

        virtualinvoke r1.<java.util.regex.Pattern$TreeInfo: void reset()>();
        $r2 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $r3 = $r2[i4];
        if $r3 == null goto label1;

        $r4 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node[] atoms>;
        $r5 = $r4[i4];
        virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);

     label1:
        $i6 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i6);
        $i7 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i7);
        $z2 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        z0 = z0 & $z2;
        i4 = i4 + 1;
        goto label0;

     label2:
        i8 = i0 + i2;
        i9 = i1 + i3;
        virtualinvoke r1.<java.util.regex.Pattern$TreeInfo: void reset()>();
        $r6 = r0.<java.util.regex.Pattern$Branch: java.util.regex.Pattern$Node conn>;
        $r7 = $r6.<java.util.regex.Pattern$Node: java.util.regex.Pattern$Node next>;
        virtualinvoke $r7.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        $i10 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $i11 = $i10 + i8;
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = $i11;
        $i12 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        $i13 = $i12 + i9;
        r1.<java.util.regex.Pattern$TreeInfo: int maxLength> = $i13;
        $z4 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        $z5 = $z4 & z0;
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = $z5;
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;
        return 0;
    }
}
