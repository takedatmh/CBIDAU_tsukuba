public class java.io.FileOutputStream extends java.io.OutputStream
{
    private final java.io.FileDescriptor fd;
    private final java.lang.String path;
    private final boolean append;
    private java.nio.channels.FileChannel channel;
    private final java.lang.Object closeLock;
    private volatile boolean closed;
    private static final java.lang.ThreadLocal runningFinalize;

    private static boolean isRunningFinalize()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Boolean r1, $r3;
        java.lang.Object $r2;
        boolean $z0;

        $r0 = <java.io.FileOutputStream: java.lang.ThreadLocal runningFinalize>;
        $r2 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        $r3 = (java.lang.Boolean) $r2;
        r1 = $r3;
        if $r3 == null goto label0;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;

     label0:
        return 0;
    }

    public void <init>(java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.lang.String r1;
        java.io.File $r3;

        r0 := @this: java.io.FileOutputStream;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $r3 = new java.io.File;
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);
        goto label1;

     label0:
        $r3 = null;

     label1:
        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r3, 0);
        return;
    }

    public void <init>(java.lang.String, boolean) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.lang.String r1;
        boolean z0;
        java.io.File $r3;

        r0 := @this: java.io.FileOutputStream;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        if r1 == null goto label0;

        $r3 = new java.io.File;
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);
        goto label1;

     label0:
        $r3 = null;

     label1:
        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r3, z0);
        return;
    }

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.io.File r1;

        r0 := @this: java.io.FileOutputStream;
        r1 := @parameter0: java.io.File;
        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r1, 0);
        return;
    }

    public void <init>(java.io.File, boolean) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.io.File r1;
        boolean z0, $z1;
        java.lang.Object $r2;
        java.lang.String r3, $r5;
        java.lang.SecurityManager r4;
        java.lang.NullPointerException $r6;
        java.io.FileNotFoundException $r7;
        java.io.FileDescriptor $r8, $r9;

        r0 := @this: java.io.FileOutputStream;
        r1 := @parameter0: java.io.File;
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.io.FileOutputStream: java.lang.Object closeLock> = $r2;
        r0.<java.io.FileOutputStream: boolean closed> = 0;
        if r1 == null goto label0;

        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();
        goto label1;

     label0:
        $r5 = null;

     label1:
        r3 = $r5;
        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label2;

        virtualinvoke r4.<java.lang.SecurityManager: void checkWrite(java.lang.String)>(r3);

     label2:
        if r3 != null goto label3;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label3:
        $z1 = virtualinvoke r1.<java.io.File: boolean isInvalid()>();
        if $z1 == 0 goto label4;

        $r7 = new java.io.FileNotFoundException;
        specialinvoke $r7.<java.io.FileNotFoundException: void <init>(java.lang.String)>("Invalid file path");
        throw $r7;

     label4:
        $r8 = new java.io.FileDescriptor;
        specialinvoke $r8.<java.io.FileDescriptor: void <init>()>();
        r0.<java.io.FileOutputStream: java.io.FileDescriptor fd> = $r8;
        r0.<java.io.FileOutputStream: boolean append> = z0;
        r0.<java.io.FileOutputStream: java.lang.String path> = r3;
        $r9 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        virtualinvoke $r9.<java.io.FileDescriptor: int incrementAndGetUseCount()>();
        specialinvoke r0.<java.io.FileOutputStream: void open(java.lang.String,boolean)>(r3, z0);
        return;
    }

    public void <init>(java.io.FileDescriptor)
    {
        java.io.FileOutputStream r0;
        java.io.FileDescriptor r1, $r5;
        java.lang.Object $r2;
        java.lang.SecurityManager r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.io.FileOutputStream;
        r1 := @parameter0: java.io.FileDescriptor;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.io.FileOutputStream: java.lang.Object closeLock> = $r2;
        r0.<java.io.FileOutputStream: boolean closed> = 0;
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        if r3 == null goto label1;

        virtualinvoke r3.<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>(r1);

     label1:
        r0.<java.io.FileOutputStream: java.io.FileDescriptor fd> = r1;
        r0.<java.io.FileOutputStream: java.lang.String path> = null;
        r0.<java.io.FileOutputStream: boolean append> = 0;
        $r5 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        virtualinvoke $r5.<java.io.FileDescriptor: int incrementAndGetUseCount()>();
        return;
    }

    private native void open(java.lang.String, boolean) throws java.io.FileNotFoundException;

    private native void write(int, boolean) throws java.io.IOException;

    public void write(int) throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        int i0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.Throwable r2, $r4;
        java.lang.String $r3;
        long $l1, $l2;

        r0 := @this: java.io.FileOutputStream;
        i0 := @parameter0: int;
        $r3 = r0.<java.io.FileOutputStream: java.lang.String path>;
        r1 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileWriteBegin(java.lang.String)>($r3);
        z0 = 0;

     label0:
        $z1 = r0.<java.io.FileOutputStream: boolean append>;
        specialinvoke r0.<java.io.FileOutputStream: void write(int,boolean)>(i0, $z1);
        z0 = 1;

     label1:
        $l1 = (long) z0;
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r1, $l1);
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;

     label4:
        $l2 = (long) z0;
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r1, $l2);
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private native void writeBytes(byte[], int, int, boolean) throws java.io.IOException;

    public void write(byte[]) throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        byte[] r1;
        java.lang.Object r2;
        int i0, $i1;
        java.lang.Throwable r3, $r5;
        java.lang.String $r4;
        boolean $z0;
        long $l2, $l3;

        r0 := @this: java.io.FileOutputStream;
        r1 := @parameter0: byte[];
        $r4 = r0.<java.io.FileOutputStream: java.lang.String path>;
        r2 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileWriteBegin(java.lang.String)>($r4);
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        $z0 = r0.<java.io.FileOutputStream: boolean append>;
        specialinvoke r0.<java.io.FileOutputStream: void writeBytes(byte[],int,int,boolean)>(r1, 0, $i1, $z0);
        i0 = lengthof r1;

     label1:
        $l2 = (long) i0;
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r2, $l2);
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;

     label4:
        $l3 = (long) i0;
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r2, $l3);
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        java.lang.String $r4;
        boolean $z0;
        long $l3, $l4;

        r0 := @this: java.io.FileOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r4 = r0.<java.io.FileOutputStream: java.lang.String path>;
        r2 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileWriteBegin(java.lang.String)>($r4);
        i2 = 0;

     label0:
        $z0 = r0.<java.io.FileOutputStream: boolean append>;
        specialinvoke r0.<java.io.FileOutputStream: void writeBytes(byte[],int,int,boolean)>(r1, i0, i1, $z0);
        i2 = i1;

     label1:
        $l3 = (long) i2;
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r2, $l3);
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;

     label4:
        $l4 = (long) i2;
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r2, $l4);
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void close() throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1;
        java.nio.channels.FileChannel $r5, $r7;
        java.io.FileDescriptor $r6, $r8;
        int i1;

        r0 := @this: java.io.FileOutputStream;
        $r3 = r0.<java.io.FileOutputStream: java.lang.Object closeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<java.io.FileOutputStream: boolean closed>;
        if $z0 == 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        r0.<java.io.FileOutputStream: boolean closed> = 1;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r5 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;
        if $r5 == null goto label8;

        $r6 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        virtualinvoke $r6.<java.io.FileDescriptor: int decrementAndGetUseCount()>();
        $r7 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;
        virtualinvoke $r7.<java.nio.channels.FileChannel: void close()>();

     label8:
        $r8 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        i1 = virtualinvoke $r8.<java.io.FileDescriptor: int decrementAndGetUseCount()>();
        if i1 <= 0 goto label9;

        $z1 = staticinvoke <java.io.FileOutputStream: boolean isRunningFinalize()>();
        if $z1 != 0 goto label10;

     label9:
        specialinvoke r0.<java.io.FileOutputStream: void close0()>();

     label10:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public final java.io.FileDescriptor getFD() throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        java.io.FileDescriptor $r1, $r2;
        java.io.IOException $r3;

        r0 := @this: java.io.FileOutputStream;
        $r1 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        if $r1 == null goto label0;

        $r2 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        return $r2;

     label0:
        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>()>();
        throw $r3;
    }

    public java.nio.channels.FileChannel getChannel()
    {
        java.io.FileOutputStream r0, r2;
        java.lang.Throwable r3, $r10;
        java.nio.channels.FileChannel $r4, $r7, $r9;
        java.io.FileDescriptor $r5, $r8;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: java.io.FileOutputStream;
        r2 = r0;
        entermonitor r0;

     label0:
        $r4 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;
        if $r4 != null goto label1;

        $r5 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        $r6 = r0.<java.io.FileOutputStream: java.lang.String path>;
        $z0 = r0.<java.io.FileOutputStream: boolean append>;
        $r7 = staticinvoke <sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel open(java.io.FileDescriptor,java.lang.String,boolean,boolean,boolean,java.lang.Object)>($r5, $r6, 0, 1, $z0, r0);
        r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel> = $r7;
        $r8 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        virtualinvoke $r8.<java.io.FileDescriptor: int incrementAndGetUseCount()>();

     label1:
        $r9 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;
        exitmonitor r2;

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

     label4:
        r3 = $r10;
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void finalize() throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        java.io.FileDescriptor $r1, $r3, $r4, $r5, $r6;
        java.lang.Throwable r2, $r11;
        java.lang.ThreadLocal $r7, $r9, $r12;
        java.lang.Boolean $r8, $r10, $r13;

        r0 := @this: java.io.FileOutputStream;
        $r3 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        if $r3 == null goto label7;

        $r4 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        $r1 = <java.io.FileDescriptor: java.io.FileDescriptor out>;
        if $r4 == $r1 goto label0;

        $r5 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;
        $r6 = <java.io.FileDescriptor: java.io.FileDescriptor err>;
        if $r5 != $r6 goto label1;

     label0:
        virtualinvoke r0.<java.io.FileOutputStream: void flush()>();
        goto label7;

     label1:
        $r7 = <java.io.FileOutputStream: java.lang.ThreadLocal runningFinalize>;
        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>($r8);

     label2:
        virtualinvoke r0.<java.io.FileOutputStream: void close()>();

     label3:
        $r9 = <java.io.FileOutputStream: java.lang.ThreadLocal runningFinalize>;
        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        virtualinvoke $r9.<java.lang.ThreadLocal: void set(java.lang.Object)>($r10);
        goto label7;

     label4:
        $r11 := @caughtexception;

     label5:
        r2 = $r11;

     label6:
        $r12 = <java.io.FileOutputStream: java.lang.ThreadLocal runningFinalize>;
        $r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        virtualinvoke $r12.<java.lang.ThreadLocal: void set(java.lang.Object)>($r13);
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private native void close0() throws java.io.IOException;

    private static native void initIDs();

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        $r0 = new java.lang.ThreadLocal;
        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();
        <java.io.FileOutputStream: java.lang.ThreadLocal runningFinalize> = $r0;
        staticinvoke <java.io.FileOutputStream: void initIDs()>();
        return;
    }
}
