public final class java.nio.file.attribute.PosixFilePermissions extends java.lang.Object
{

    private void <init>()
    {
        java.nio.file.attribute.PosixFilePermissions r0;

        r0 := @this: java.nio.file.attribute.PosixFilePermissions;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static void writeBits(java.lang.StringBuilder, boolean, boolean, boolean)
    {
        java.lang.StringBuilder r0;
        boolean z0, z1, z2;

        r0 := @parameter0: java.lang.StringBuilder;
        z0 := @parameter1: boolean;
        z1 := @parameter2: boolean;
        z2 := @parameter3: boolean;
        if z0 == 0 goto label0;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(114);
        goto label1;

     label0:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label1:
        if z1 == 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(119);
        goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label3:
        if z2 == 0 goto label4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(120);
        goto label5;

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label5:
        return;
    }

    public static java.lang.String toString(java.util.Set)
    {
        java.util.Set r0;
        java.lang.StringBuilder $r1, r2;
        java.nio.file.attribute.PosixFilePermission $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String $r12;

        r0 := @parameter0: java.util.Set;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(9);
        r2 = $r1;
        $r5 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ>;
        $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r5);
        $r3 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE>;
        $z1 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r3);
        $r4 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_EXECUTE>;
        $z2 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r4);
        staticinvoke <java.nio.file.attribute.PosixFilePermissions: void writeBits(java.lang.StringBuilder,boolean,boolean,boolean)>(r2, $z0, $z1, $z2);
        $r6 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_READ>;
        $z3 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r6);
        $r7 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_WRITE>;
        $z4 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r7);
        $r8 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_EXECUTE>;
        $z5 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r8);
        staticinvoke <java.nio.file.attribute.PosixFilePermissions: void writeBits(java.lang.StringBuilder,boolean,boolean,boolean)>(r2, $z3, $z4, $z5);
        $r9 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_READ>;
        $z6 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r9);
        $r10 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_WRITE>;
        $z7 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r10);
        $r11 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_EXECUTE>;
        $z8 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r11);
        staticinvoke <java.nio.file.attribute.PosixFilePermissions: void writeBits(java.lang.StringBuilder,boolean,boolean,boolean)>(r2, $z6, $z7, $z8);
        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r12;
    }

    private static boolean isSet(char, char)
    {
        char c0, c1;
        java.lang.IllegalArgumentException $r0;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        if c0 != c1 goto label0;

        return 1;

     label0:
        if c0 != 45 goto label1;

        return 0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;
        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mode");
        throw $r0;
    }

    private static boolean isR(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isSet(char,char)>(c0, 114);
        return $z0;
    }

    private static boolean isW(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isSet(char,char)>(c0, 119);
        return $z0;
    }

    private static boolean isX(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isSet(char,char)>(c0, 120);
        return $z0;
    }

    public static java.util.Set fromString(java.lang.String)
    {
        java.lang.String r0;
        java.util.EnumSet r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9;
        boolean $z0, $z2, $z4, $z6, $z8, $z10, $z12, $z14, $z16;
        java.nio.file.attribute.PosixFilePermission $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i0 == 9 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mode");
        throw $r2;

     label0:
        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "java/nio/file/attribute/PosixFilePermission");
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        $z0 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isR(char)>($c1);
        if $z0 == 0 goto label1;

        $r3 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);
        $z2 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isW(char)>($c2);
        if $z2 == 0 goto label2;

        $r4 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2);
        $z4 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isX(char)>($c3);
        if $z4 == 0 goto label3;

        $r5 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_EXECUTE>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r5);

     label3:
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);
        $z6 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isR(char)>($c4);
        if $z6 == 0 goto label4;

        $r6 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_READ>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label4:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(4);
        $z8 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isW(char)>($c5);
        if $z8 == 0 goto label5;

        $r7 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_WRITE>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label5:
        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(5);
        $z10 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isX(char)>($c6);
        if $z10 == 0 goto label6;

        $r8 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_EXECUTE>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label6:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(6);
        $z12 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isR(char)>($c7);
        if $z12 == 0 goto label7;

        $r9 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_READ>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label7:
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(7);
        $z14 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isW(char)>($c8);
        if $z14 == 0 goto label8;

        $r10 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_WRITE>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label8:
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(8);
        $z16 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: boolean isX(char)>($c9);
        if $z16 == 0 goto label9;

        $r11 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_EXECUTE>;
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label9:
        return r1;
    }

    public static java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)
    {
        java.util.Set r0;
        java.util.HashSet $r1, r4, r7;
        java.util.Iterator r2;
        java.nio.file.attribute.PosixFilePermission r3;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.NullPointerException $r6;
        java.nio.file.attribute.PosixFilePermissions$1 $r8;

        r0 := @parameter0: java.util.Set;
        $r1 = new java.util.HashSet;
        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>(r0);
        r4 = $r1;
        r2 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.nio.file.attribute.PosixFilePermission) $r5;
        if r3 != null goto label1;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label1:
        goto label0;

     label2:
        r7 = r4;
        $r8 = new java.nio.file.attribute.PosixFilePermissions$1;
        specialinvoke $r8.<java.nio.file.attribute.PosixFilePermissions$1: void <init>(java.util.Set)>(r7);
        return $r8;
    }
}
