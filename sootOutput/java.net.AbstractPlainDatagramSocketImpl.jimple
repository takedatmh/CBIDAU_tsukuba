abstract class java.net.AbstractPlainDatagramSocketImpl extends java.net.DatagramSocketImpl
{
    int timeout;
    boolean connected;
    private int trafficClass;
    private java.net.InetAddress connectedAddress;
    private int connectedPort;
    private int multicastInterface;
    private boolean loopbackMode;
    private int ttl;
    private static final java.lang.String os;
    private static final boolean connectDisabled;

    void <init>()
    {
        java.net.AbstractPlainDatagramSocketImpl r0;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        specialinvoke r0.<java.net.DatagramSocketImpl: void <init>()>();
        r0.<java.net.AbstractPlainDatagramSocketImpl: int timeout> = 0;
        r0.<java.net.AbstractPlainDatagramSocketImpl: boolean connected> = 0;
        r0.<java.net.AbstractPlainDatagramSocketImpl: int trafficClass> = 0;
        r0.<java.net.AbstractPlainDatagramSocketImpl: java.net.InetAddress connectedAddress> = null;
        r0.<java.net.AbstractPlainDatagramSocketImpl: int connectedPort> = -1;
        r0.<java.net.AbstractPlainDatagramSocketImpl: int multicastInterface> = 0;
        r0.<java.net.AbstractPlainDatagramSocketImpl: boolean loopbackMode> = 1;
        r0.<java.net.AbstractPlainDatagramSocketImpl: int ttl> = -1;
        return;
    }

    protected synchronized void create() throws java.net.SocketException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.io.FileDescriptor $r1;
        java.net.SocketException r2, $r3;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        staticinvoke <sun.net.ResourceManager: void beforeUdpCreate()>();
        $r1 = new java.io.FileDescriptor;
        specialinvoke $r1.<java.io.FileDescriptor: void <init>()>();
        r0.<java.net.AbstractPlainDatagramSocketImpl: java.io.FileDescriptor fd> = $r1;

     label0:
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void datagramSocketCreate()>();

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        staticinvoke <sun.net.ResourceManager: void afterUdpClose()>();
        r0.<java.net.AbstractPlainDatagramSocketImpl: java.io.FileDescriptor fd> = null;
        throw r2;

     label3:
        return;

        catch java.net.SocketException from label0 to label1 with label2;
    }

    protected synchronized void bind(int, java.net.InetAddress) throws java.net.SocketException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        int i0;
        java.net.InetAddress r1;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: java.net.InetAddress;
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void bind0(int,java.net.InetAddress)>(i0, r1);
        return;
    }

    protected abstract void bind0(int, java.net.InetAddress) throws java.net.SocketException;

    protected abstract void send(java.net.DatagramPacket) throws java.io.IOException;

    protected void connect(java.net.InetAddress, int) throws java.net.SocketException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        r1 := @parameter0: java.net.InetAddress;
        i0 := @parameter1: int;
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void connect0(java.net.InetAddress,int)>(r1, i0);
        r0.<java.net.AbstractPlainDatagramSocketImpl: java.net.InetAddress connectedAddress> = r1;
        r0.<java.net.AbstractPlainDatagramSocketImpl: int connectedPort> = i0;
        r0.<java.net.AbstractPlainDatagramSocketImpl: boolean connected> = 1;
        return;
    }

    protected void disconnect()
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.net.InetAddress $r1;
        java.net.InetAddress$InetAddressHolder $r2;
        int $i0;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        $r1 = r0.<java.net.AbstractPlainDatagramSocketImpl: java.net.InetAddress connectedAddress>;
        $r2 = virtualinvoke $r1.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = virtualinvoke $r2.<java.net.InetAddress$InetAddressHolder: int getFamily()>();
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void disconnect0(int)>($i0);
        r0.<java.net.AbstractPlainDatagramSocketImpl: boolean connected> = 0;
        r0.<java.net.AbstractPlainDatagramSocketImpl: java.net.InetAddress connectedAddress> = null;
        r0.<java.net.AbstractPlainDatagramSocketImpl: int connectedPort> = -1;
        return;
    }

    protected abstract int peek(java.net.InetAddress) throws java.io.IOException;

    protected abstract int peekData(java.net.DatagramPacket) throws java.io.IOException;

    protected synchronized void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.net.DatagramPacket r1;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        r1 := @parameter0: java.net.DatagramPacket;
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void receive0(java.net.DatagramPacket)>(r1);
        return;
    }

    protected abstract void receive0(java.net.DatagramPacket) throws java.io.IOException;

    protected abstract void setTimeToLive(int) throws java.io.IOException;

    protected abstract int getTimeToLive() throws java.io.IOException;

    protected abstract void setTTL(byte) throws java.io.IOException;

    protected abstract byte getTTL() throws java.io.IOException;

    protected void join(java.net.InetAddress) throws java.io.IOException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.net.InetAddress r1;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        r1 := @parameter0: java.net.InetAddress;
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void join(java.net.InetAddress,java.net.NetworkInterface)>(r1, null);
        return;
    }

    protected void leave(java.net.InetAddress) throws java.io.IOException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.net.InetAddress r1;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        r1 := @parameter0: java.net.InetAddress;
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void leave(java.net.InetAddress,java.net.NetworkInterface)>(r1, null);
        return;
    }

    protected void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.net.InetSocketAddress $r4;
        java.net.InetAddress $r5;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        r1 := @parameter0: java.net.SocketAddress;
        r2 := @parameter1: java.net.NetworkInterface;
        if r1 == null goto label0;

        $z0 = r1 instanceof java.net.InetSocketAddress;
        if $z0 != 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported address type");
        throw $r3;

     label1:
        $r4 = (java.net.InetSocketAddress) r1;
        $r5 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void join(java.net.InetAddress,java.net.NetworkInterface)>($r5, r2);
        return;
    }

    protected abstract void join(java.net.InetAddress, java.net.NetworkInterface) throws java.io.IOException;

    protected void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.net.InetSocketAddress $r4;
        java.net.InetAddress $r5;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        r1 := @parameter0: java.net.SocketAddress;
        r2 := @parameter1: java.net.NetworkInterface;
        if r1 == null goto label0;

        $z0 = r1 instanceof java.net.InetSocketAddress;
        if $z0 != 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported address type");
        throw $r3;

     label1:
        $r4 = (java.net.InetSocketAddress) r1;
        $r5 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void leave(java.net.InetAddress,java.net.NetworkInterface)>($r5, r2);
        return;
    }

    protected abstract void leave(java.net.InetAddress, java.net.NetworkInterface) throws java.io.IOException;

    protected void close()
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        $r1 = r0.<java.net.AbstractPlainDatagramSocketImpl: java.io.FileDescriptor fd>;
        if $r1 == null goto label0;

        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void datagramSocketClose()>();
        staticinvoke <sun.net.ResourceManager: void afterUdpClose()>();
        r0.<java.net.AbstractPlainDatagramSocketImpl: java.io.FileDescriptor fd> = null;

     label0:
        return;
    }

    protected boolean isClosed()
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        java.io.FileDescriptor $r1;
        boolean $z0;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        $r1 = r0.<java.net.AbstractPlainDatagramSocketImpl: java.io.FileDescriptor fd>;
        if $r1 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    protected void finalize()
    {
        java.net.AbstractPlainDatagramSocketImpl r0;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void close()>();
        return;
    }

    public void setOption(int, java.lang.Object) throws java.net.SocketException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.net.SocketException $r2, $r3, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16;
        java.lang.Integer $r4, $r7, $r11;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r17, $r18, $r19;
        java.lang.String $r20;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        $z0 = virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket Closed");
        throw $r2;

     label0:
        lookupswitch(i0)
        {
            case 3: goto label5;
            case 4: goto label8;
            case 15: goto label12;
            case 16: goto label15;
            case 18: goto label19;
            case 31: goto label17;
            case 32: goto label10;
            case 4097: goto label13;
            case 4098: goto label13;
            case 4102: goto label1;
            default: goto label21;
        };

     label1:
        if r1 == null goto label2;

        $z1 = r1 instanceof java.lang.Integer;
        if $z1 != 0 goto label3;

     label2:
        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for SO_TIMEOUT");
        throw $r3;

     label3:
        $r4 = (java.lang.Integer) r1;
        i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();
        if i1 >= 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");
        throw $r5;

     label4:
        r0.<java.net.AbstractPlainDatagramSocketImpl: int timeout> = i1;
        return;

     label5:
        if r1 == null goto label6;

        $z2 = r1 instanceof java.lang.Integer;
        if $z2 != 0 goto label7;

     label6:
        $r6 = new java.net.SocketException;
        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for IP_TOS");
        throw $r6;

     label7:
        $r7 = (java.lang.Integer) r1;
        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();
        r0.<java.net.AbstractPlainDatagramSocketImpl: int trafficClass> = $i2;
        goto label22;

     label8:
        if r1 == null goto label9;

        $z3 = r1 instanceof java.lang.Boolean;
        if $z3 != 0 goto label22;

     label9:
        $r8 = new java.net.SocketException;
        specialinvoke $r8.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for SO_REUSEADDR");
        throw $r8;

     label10:
        if r1 == null goto label11;

        $z4 = r1 instanceof java.lang.Boolean;
        if $z4 != 0 goto label22;

     label11:
        $r9 = new java.net.SocketException;
        specialinvoke $r9.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for SO_BROADCAST");
        throw $r9;

     label12:
        $r10 = new java.net.SocketException;
        specialinvoke $r10.<java.net.SocketException: void <init>(java.lang.String)>("Cannot re-bind Socket");
        throw $r10;

     label13:
        if r1 == null goto label14;

        $z5 = r1 instanceof java.lang.Integer;
        if $z5 == 0 goto label14;

        $r11 = (java.lang.Integer) r1;
        $i3 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();
        if $i3 >= 0 goto label22;

     label14:
        $r12 = new java.net.SocketException;
        specialinvoke $r12.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for SO_SNDBUF or SO_RCVBUF");
        throw $r12;

     label15:
        if r1 == null goto label16;

        $z6 = r1 instanceof java.net.InetAddress;
        if $z6 != 0 goto label22;

     label16:
        $r13 = new java.net.SocketException;
        specialinvoke $r13.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for IP_MULTICAST_IF");
        throw $r13;

     label17:
        if r1 == null goto label18;

        $z7 = r1 instanceof java.net.NetworkInterface;
        if $z7 != 0 goto label22;

     label18:
        $r14 = new java.net.SocketException;
        specialinvoke $r14.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for IP_MULTICAST_IF2");
        throw $r14;

     label19:
        if r1 == null goto label20;

        $z8 = r1 instanceof java.lang.Boolean;
        if $z8 != 0 goto label22;

     label20:
        $r15 = new java.net.SocketException;
        specialinvoke $r15.<java.net.SocketException: void <init>(java.lang.String)>("bad argument for IP_MULTICAST_LOOP");
        throw $r15;

     label21:
        $r16 = new java.net.SocketException;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid option: ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r16.<java.net.SocketException: void <init>(java.lang.String)>($r20);
        throw $r16;

     label22:
        virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: void socketSetOption(int,java.lang.Object)>(i0, r1);
        return;
    }

    public java.lang.Object getOption(int) throws java.net.SocketException
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        boolean $z0;
        java.net.SocketException $r2, $r6;
        java.lang.Integer $r3, $r4, $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        i0 := @parameter0: int;
        $z0 = virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket Closed");
        throw $r2;

     label0:
        lookupswitch(i0)
        {
            case 3: goto label2;
            case 4: goto label3;
            case 15: goto label3;
            case 16: goto label3;
            case 18: goto label3;
            case 31: goto label3;
            case 32: goto label3;
            case 4097: goto label3;
            case 4098: goto label3;
            case 4102: goto label1;
            default: goto label4;
        };

     label1:
        $r3 = new java.lang.Integer;
        $i1 = r0.<java.net.AbstractPlainDatagramSocketImpl: int timeout>;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i1);
        r1 = $r3;
        goto label5;

     label2:
        r1 = virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: java.lang.Object socketGetOption(int)>(i0);
        $r4 = (java.lang.Integer) r1;
        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();
        if $i2 != -1 goto label5;

        $r5 = new java.lang.Integer;
        $i3 = r0.<java.net.AbstractPlainDatagramSocketImpl: int trafficClass>;
        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i3);
        r1 = $r5;
        goto label5;

     label3:
        r1 = virtualinvoke r0.<java.net.AbstractPlainDatagramSocketImpl: java.lang.Object socketGetOption(int)>(i0);
        goto label5;

     label4:
        $r6 = new java.net.SocketException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid option: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label5:
        return r1;
    }

    protected abstract void datagramSocketCreate() throws java.net.SocketException;

    protected abstract void datagramSocketClose();

    protected abstract void socketSetOption(int, java.lang.Object) throws java.net.SocketException;

    protected abstract java.lang.Object socketGetOption(int) throws java.net.SocketException;

    protected abstract void connect0(java.net.InetAddress, int) throws java.net.SocketException;

    protected abstract void disconnect0(int);

    protected boolean nativeConnectDisabled()
    {
        java.net.AbstractPlainDatagramSocketImpl r0;
        boolean $z0;

        r0 := @this: java.net.AbstractPlainDatagramSocketImpl;
        $z0 = <java.net.AbstractPlainDatagramSocketImpl: boolean connectDisabled>;
        return $z0;
    }

    native int dataAvailable();

    private static native void init();

    static void <clinit>()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        sun.security.action.LoadLibraryAction $r4;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("os.name");
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.lang.String) $r1;
        <java.net.AbstractPlainDatagramSocketImpl: java.lang.String os> = $r2;
        $r3 = <java.net.AbstractPlainDatagramSocketImpl: java.lang.String os>;
        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("OS X");
        <java.net.AbstractPlainDatagramSocketImpl: boolean connectDisabled> = $z0;
        $r4 = new sun.security.action.LoadLibraryAction;
        specialinvoke $r4.<sun.security.action.LoadLibraryAction: void <init>(java.lang.String)>("net");
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        staticinvoke <java.net.AbstractPlainDatagramSocketImpl: void init()>();
        return;
    }
}
