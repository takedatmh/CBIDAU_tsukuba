public class sun.security.provider.certpath.X509CertificatePair extends java.lang.Object
{
    private static final byte TAG_FORWARD;
    private static final byte TAG_REVERSE;
    private java.security.cert.X509Certificate forward;
    private java.security.cert.X509Certificate reverse;
    private byte[] encoded;
    private static final sun.security.util.Cache cache;

    public void <init>()
    {
        sun.security.provider.certpath.X509CertificatePair r0;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void <init>(java.security.cert.X509Certificate, java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        java.security.cert.X509Certificate r1, r2;
        java.security.cert.CertificateException $r3;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        r1 := @parameter0: java.security.cert.X509Certificate;
        r2 := @parameter1: java.security.cert.X509Certificate;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        if r2 != null goto label0;

        $r3 = new java.security.cert.CertificateException;
        specialinvoke $r3.<java.security.cert.CertificateException: void <init>(java.lang.String)>("at least one of certificate pair must be non-null");
        throw $r3;

     label0:
        r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward> = r1;
        r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse> = r2;
        specialinvoke r0.<sun.security.provider.certpath.X509CertificatePair: void checkPair()>();
        return;
    }

    private void <init>(byte[]) throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        byte[] r1;
        sun.security.util.DerValue $r2;
        java.io.IOException r3, $r4;
        java.security.cert.CertificateException $r5;
        java.lang.String $r6;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        r1 := @parameter0: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();

     label0:
        $r2 = new sun.security.util.DerValue;
        specialinvoke $r2.<sun.security.util.DerValue: void <init>(byte[])>(r1);
        specialinvoke r0.<sun.security.provider.certpath.X509CertificatePair: void parse(sun.security.util.DerValue)>($r2);
        r0.<sun.security.provider.certpath.X509CertificatePair: byte[] encoded> = r1;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        $r5 = new java.security.cert.CertificateException;
        $r6 = virtualinvoke r3.<java.io.IOException: java.lang.String toString()>();
        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r6);
        throw $r5;

     label3:
        specialinvoke r0.<sun.security.provider.certpath.X509CertificatePair: void checkPair()>();
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public static synchronized void clearCache()
    {
        sun.security.util.Cache $r0;

        $r0 = <sun.security.provider.certpath.X509CertificatePair: sun.security.util.Cache cache>;
        virtualinvoke $r0.<sun.security.util.Cache: void clear()>();
        return;
    }

    public static synchronized sun.security.provider.certpath.X509CertificatePair generateCertificatePair(byte[]) throws java.security.cert.CertificateException
    {
        byte[] r0, $r9;
        sun.security.util.Cache$EqualByteArray $r1, r2, $r8, r10;
        sun.security.provider.certpath.X509CertificatePair r3, $r6, r7;
        sun.security.util.Cache $r4, $r11;
        java.lang.Object $r5;

        r0 := @parameter0: byte[];
        $r1 = new sun.security.util.Cache$EqualByteArray;
        specialinvoke $r1.<sun.security.util.Cache$EqualByteArray: void <init>(byte[])>(r0);
        r2 = $r1;
        $r4 = <sun.security.provider.certpath.X509CertificatePair: sun.security.util.Cache cache>;
        $r5 = virtualinvoke $r4.<sun.security.util.Cache: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (sun.security.provider.certpath.X509CertificatePair) $r5;
        if r3 == null goto label0;

        return r3;

     label0:
        $r6 = new sun.security.provider.certpath.X509CertificatePair;
        specialinvoke $r6.<sun.security.provider.certpath.X509CertificatePair: void <init>(byte[])>(r0);
        r7 = $r6;
        $r8 = new sun.security.util.Cache$EqualByteArray;
        $r9 = r7.<sun.security.provider.certpath.X509CertificatePair: byte[] encoded>;
        specialinvoke $r8.<sun.security.util.Cache$EqualByteArray: void <init>(byte[])>($r9);
        r10 = $r8;
        $r11 = <sun.security.provider.certpath.X509CertificatePair: sun.security.util.Cache cache>;
        virtualinvoke $r11.<sun.security.util.Cache: void put(java.lang.Object,java.lang.Object)>(r10, r7);
        return r7;
    }

    public void setForward(java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        java.security.cert.X509Certificate r1;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        r1 := @parameter0: java.security.cert.X509Certificate;
        specialinvoke r0.<sun.security.provider.certpath.X509CertificatePair: void checkPair()>();
        r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward> = r1;
        return;
    }

    public void setReverse(java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        java.security.cert.X509Certificate r1;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        r1 := @parameter0: java.security.cert.X509Certificate;
        specialinvoke r0.<sun.security.provider.certpath.X509CertificatePair: void checkPair()>();
        r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse> = r1;
        return;
    }

    public java.security.cert.X509Certificate getForward()
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        $r1 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        return $r1;
    }

    public java.security.cert.X509Certificate getReverse()
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        $r1 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        return $r1;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        sun.security.util.DerOutputStream r1, $r3;
        byte[] $r2, $r4, $r9;
        java.io.IOException $r5, r6;
        java.security.cert.CertificateEncodingException $r7;
        java.lang.String $r8;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;

     label0:
        $r2 = r0.<sun.security.provider.certpath.X509CertificatePair: byte[] encoded>;
        if $r2 != null goto label1;

        $r3 = new sun.security.util.DerOutputStream;
        specialinvoke $r3.<sun.security.util.DerOutputStream: void <init>()>();
        r1 = $r3;
        specialinvoke r0.<sun.security.provider.certpath.X509CertificatePair: void emit(sun.security.util.DerOutputStream)>(r1);
        $r4 = virtualinvoke r1.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        r0.<sun.security.provider.certpath.X509CertificatePair: byte[] encoded> = $r4;

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.security.cert.CertificateEncodingException;
        $r8 = virtualinvoke r6.<java.io.IOException: java.lang.String toString()>();
        specialinvoke $r7.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r8);
        throw $r7;

     label3:
        $r9 = r0.<sun.security.provider.certpath.X509CertificatePair: byte[] encoded>;
        return $r9;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public java.lang.String toString()
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        java.lang.StringBuffer $r1, r2;
        java.security.cert.X509Certificate $r4, $r7, $r12, $r15;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r13, $r14, $r16, $r17;
        java.lang.String $r10, $r18, $r21;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("X.509 Certificate Pair: [\n");
        $r4 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        if $r4 == null goto label0;

        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Forward: ");
        $r7 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

     label0:
        $r12 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        if $r12 == null goto label1;

        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Reverse: ");
        $r15 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");
        $r21 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r21;
    }

    private void parse(sun.security.util.DerValue) throws java.io.IOException, java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        sun.security.util.DerValue r1, r2, r10, r17;
        short s0;
        byte $b1, $b3, $b4, $b5;
        java.io.IOException $r3, $r8, $r15, $r21;
        sun.security.util.DerInputStream $r4, $r5, $r6, $r9, $r16;
        int $i2;
        boolean $z0, $z1, $z2, $z3;
        java.security.cert.X509Certificate $r7, $r14, $r22, $r23;
        sun.security.x509.X509CertImpl $r11, $r13, $r18, $r20;
        byte[] $r12, $r19;
        java.security.cert.CertificateException $r24;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        r1 := @parameter0: sun.security.util.DerValue;
        $b1 = r1.<sun.security.util.DerValue: byte tag>;
        if $b1 == 48 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Sequence tag missing for X509CertificatePair");
        throw $r3;

     label0:
        $r4 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        if $r4 == null goto label7;

        $r5 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i2 = virtualinvoke $r5.<sun.security.util.DerInputStream: int available()>();
        if $i2 == 0 goto label7;

        $r6 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r2 = virtualinvoke $r6.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b3 = r2.<sun.security.util.DerValue: byte tag>;
        $b4 = $b3 & 31;
        $b5 = (byte) $b4;
        s0 = (short) $b5;
        lookupswitch(s0)
        {
            case 0: goto label1;
            case 1: goto label3;
            default: goto label5;
        };

     label1:
        $z0 = virtualinvoke r2.<sun.security.util.DerValue: boolean isContextSpecific()>();
        if $z0 == 0 goto label6;

        $z1 = virtualinvoke r2.<sun.security.util.DerValue: boolean isConstructed()>();
        if $z1 == 0 goto label6;

        $r7 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        if $r7 == null goto label2;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Duplicate forward certificate in X509CertificatePair");
        throw $r8;

     label2:
        $r9 = r2.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r10 = virtualinvoke $r9.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $r11 = new sun.security.x509.X509CertImpl;
        $r12 = virtualinvoke r10.<sun.security.util.DerValue: byte[] toByteArray()>();
        specialinvoke $r11.<sun.security.x509.X509CertImpl: void <init>(byte[])>($r12);
        $r13 = staticinvoke <sun.security.provider.X509Factory: sun.security.x509.X509CertImpl intern(java.security.cert.X509Certificate)>($r11);
        r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward> = $r13;
        goto label6;

     label3:
        $z2 = virtualinvoke r2.<sun.security.util.DerValue: boolean isContextSpecific()>();
        if $z2 == 0 goto label6;

        $z3 = virtualinvoke r2.<sun.security.util.DerValue: boolean isConstructed()>();
        if $z3 == 0 goto label6;

        $r14 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        if $r14 == null goto label4;

        $r15 = new java.io.IOException;
        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Duplicate reverse certificate in X509CertificatePair");
        throw $r15;

     label4:
        $r16 = r2.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r17 = virtualinvoke $r16.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $r18 = new sun.security.x509.X509CertImpl;
        $r19 = virtualinvoke r17.<sun.security.util.DerValue: byte[] toByteArray()>();
        specialinvoke $r18.<sun.security.x509.X509CertImpl: void <init>(byte[])>($r19);
        $r20 = staticinvoke <sun.security.provider.X509Factory: sun.security.x509.X509CertImpl intern(java.security.cert.X509Certificate)>($r18);
        r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse> = $r20;
        goto label6;

     label5:
        $r21 = new java.io.IOException;
        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding of X509CertificatePair");
        throw $r21;

     label6:
        goto label0;

     label7:
        $r22 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        if $r22 != null goto label8;

        $r23 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        if $r23 != null goto label8;

        $r24 = new java.security.cert.CertificateException;
        specialinvoke $r24.<java.security.cert.CertificateException: void <init>(java.lang.String)>("at least one of certificate pair must be non-null");
        throw $r24;

     label8:
        return;
    }

    private void emit(sun.security.util.DerOutputStream) throws java.io.IOException, java.security.cert.CertificateEncodingException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        sun.security.util.DerOutputStream r1, $r2, r3, r4, $r6, $r11, r12;
        java.security.cert.X509Certificate $r5, $r8, $r10, $r14;
        sun.security.util.DerValue $r7, $r13;
        byte[] $r9, $r15;
        byte $b0, $b1;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        r1 := @parameter0: sun.security.util.DerOutputStream;
        $r2 = new sun.security.util.DerOutputStream;
        specialinvoke $r2.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r2;
        $r5 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        if $r5 == null goto label0;

        $r6 = new sun.security.util.DerOutputStream;
        specialinvoke $r6.<sun.security.util.DerOutputStream: void <init>()>();
        r4 = $r6;
        $r7 = new sun.security.util.DerValue;
        $r8 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        $r9 = virtualinvoke $r8.<java.security.cert.X509Certificate: byte[] getEncoded()>();
        specialinvoke $r7.<sun.security.util.DerValue: void <init>(byte[])>($r9);
        virtualinvoke r4.<sun.security.util.DerOutputStream: void putDerValue(sun.security.util.DerValue)>($r7);
        $b0 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 0);
        virtualinvoke r3.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>($b0, r4);

     label0:
        $r10 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        if $r10 == null goto label1;

        $r11 = new sun.security.util.DerOutputStream;
        specialinvoke $r11.<sun.security.util.DerOutputStream: void <init>()>();
        r12 = $r11;
        $r13 = new sun.security.util.DerValue;
        $r14 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        $r15 = virtualinvoke $r14.<java.security.cert.X509Certificate: byte[] getEncoded()>();
        specialinvoke $r13.<sun.security.util.DerValue: void <init>(byte[])>($r15);
        virtualinvoke r12.<sun.security.util.DerOutputStream: void putDerValue(sun.security.util.DerValue)>($r13);
        $b1 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 1);
        virtualinvoke r3.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>($b1, r12);

     label1:
        virtualinvoke r1.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r3);
        return;
    }

    private void checkPair() throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertificatePair r0;
        javax.security.auth.x500.X500Principal r1, r2, r3, r4;
        java.security.PublicKey r5, r18;
        java.security.cert.X509Certificate $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.security.cert.CertificateException $r12, $r24;
        java.security.interfaces.DSAPublicKey $r14, $r19;
        java.security.interfaces.DSAParams $r15, $r20;
        java.security.GeneralSecurityException $r22, r23;
        java.lang.StringBuilder $r25, $r26, $r28;
        java.lang.String $r27, $r29;

        r0 := @this: sun.security.provider.certpath.X509CertificatePair;
        $r6 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        if $r6 == null goto label0;

        $r7 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        if $r7 != null goto label1;

     label0:
        return;

     label1:
        $r8 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        r1 = virtualinvoke $r8.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        $r9 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        r2 = virtualinvoke $r9.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        $r10 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        r3 = virtualinvoke $r10.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        $r11 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        r4 = virtualinvoke $r11.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        $z0 = virtualinvoke r2.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(r3);
        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r4.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(r1);
        if $z1 != 0 goto label3;

     label2:
        $r12 = new java.security.cert.CertificateException;
        specialinvoke $r12.<java.security.cert.CertificateException: void <init>(java.lang.String)>("subject and issuer names in forward and reverse certificates do not match");
        throw $r12;

     label3:
        $r13 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        r5 = virtualinvoke $r13.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        $z2 = r5 instanceof java.security.interfaces.DSAPublicKey;
        if $z2 == 0 goto label4;

        $r14 = (java.security.interfaces.DSAPublicKey) r5;
        $r15 = interfaceinvoke $r14.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();
        if $r15 == null goto label5;

     label4:
        $r16 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        virtualinvoke $r16.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(r5);

     label5:
        $r17 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate forward>;
        r18 = virtualinvoke $r17.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        $z3 = r18 instanceof java.security.interfaces.DSAPublicKey;
        if $z3 == 0 goto label6;

        $r19 = (java.security.interfaces.DSAPublicKey) r18;
        $r20 = interfaceinvoke $r19.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();
        if $r20 == null goto label7;

     label6:
        $r21 = r0.<sun.security.provider.certpath.X509CertificatePair: java.security.cert.X509Certificate reverse>;
        virtualinvoke $r21.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(r18);

     label7:
        goto label9;

     label8:
        $r22 := @caughtexception;
        r23 = $r22;
        $r24 = new java.security.cert.CertificateException;
        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid signature: ");
        $r27 = virtualinvoke r23.<java.security.GeneralSecurityException: java.lang.String getMessage()>();
        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r24.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r29);
        throw $r24;

     label9:
        return;

        catch java.security.GeneralSecurityException from label3 to label7 with label8;
    }

    static void <clinit>()
    {
        sun.security.util.Cache $r0;

        $r0 = staticinvoke <sun.security.util.Cache: sun.security.util.Cache newSoftMemoryCache(int)>(750);
        <sun.security.provider.certpath.X509CertificatePair: sun.security.util.Cache cache> = $r0;
        return;
    }
}
