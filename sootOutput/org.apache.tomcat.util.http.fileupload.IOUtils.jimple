public class org.apache.tomcat.util.http.fileupload.IOUtils extends java.lang.Object
{
    private static final int EOF;
    private static final int DEFAULT_BUFFER_SIZE;

    public void <init>()
    {
        org.apache.tomcat.util.http.fileupload.IOUtils r0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.IOUtils;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException r1, $r2;

        r0 := @parameter0: java.io.Closeable;

     label0:
        if r0 == null goto label3;

        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        long l0;
        byte $b1;
        int $i2;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.io.OutputStream;
        l0 = staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r0, r1);
        $b1 = l0 cmp 2147483647L;
        if $b1 <= 0 goto label0;

        return -1;

     label0:
        $i2 = (int) l0;
        return $i2;
    }

    public static long copyLarge(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        byte[] r2;
        long l0, $l1;
        boolean z0;
        int $i2, i3;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.io.OutputStream;
        r2 = newarray (byte)[4096];
        l0 = 0L;
        z0 = 0;
        goto label1;

     label0:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i3);
        $l1 = (long) i3;
        l0 = l0 + $l1;

     label1:
        $i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);
        i3 = $i2;
        if -1 != $i2 goto label0;

        return l0;
    }

    public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6;
        java.lang.StringBuilder $r2, $r4;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r5;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        if i1 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Length must not be negative: ");
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r3;

     label0:
        i2 = i1;
        goto label3;

     label1:
        i3 = i1 - i2;
        $i5 = i0 + i3;
        i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, $i5, i2);
        if -1 != i4 goto label2;

        goto label4;

     label2:
        i2 = i2 - i4;

     label3:
        if i2 > 0 goto label1;

     label4:
        $i6 = i1 - i2;
        return $i6;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.EOFException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 = staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: int read(java.io.InputStream,byte[],int,int)>(r0, r1, i0, i1);
        if i2 == i1 goto label0;

        $r2 = new java.io.EOFException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Length to read: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>($r7);
        throw $r2;

     label0:
        return;
    }

    public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: byte[];
        $i0 = lengthof r1;
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);
        return;
    }
}
