public abstract class java.lang.ClassValue extends java.lang.Object
{
    private static final java.lang.ClassValue$Entry[] EMPTY_CACHE;
    final int hashCodeForCache;
    private static final java.util.concurrent.atomic.AtomicInteger nextHashCode;
    private static final int HASH_INCREMENT;
    static final int HASH_MASK;
    final java.lang.ClassValue$Identity identity;
    private volatile java.lang.ClassValue$Version version;
    private static final java.lang.Object CRITICAL_SECTION;

    protected void <init>()
    {
        java.lang.ClassValue r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1;
        java.lang.ClassValue$Identity $r2;
        java.lang.ClassValue$Version $r3;

        r0 := @this: java.lang.ClassValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = <java.lang.ClassValue: java.util.concurrent.atomic.AtomicInteger nextHashCode>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>(1640531527);
        $i1 = $i0 & 1073741823;
        r0.<java.lang.ClassValue: int hashCodeForCache> = $i1;
        $r2 = new java.lang.ClassValue$Identity;
        specialinvoke $r2.<java.lang.ClassValue$Identity: void <init>()>();
        r0.<java.lang.ClassValue: java.lang.ClassValue$Identity identity> = $r2;
        $r3 = new java.lang.ClassValue$Version;
        specialinvoke $r3.<java.lang.ClassValue$Version: void <init>(java.lang.ClassValue)>(r0);
        r0.<java.lang.ClassValue: java.lang.ClassValue$Version version> = $r3;
        return;
    }

    protected abstract java.lang.Object computeValue(java.lang.Class);

    public java.lang.Object get(java.lang.Class)
    {
        java.lang.ClassValue r0;
        java.lang.Class r1;
        java.lang.ClassValue$Entry[] r2, $r4;
        java.lang.ClassValue$Entry r3;
        boolean $z0;
        java.lang.Object $r5, $r6;

        r0 := @this: java.lang.ClassValue;
        r1 := @parameter0: java.lang.Class;
        $r4 = staticinvoke <java.lang.ClassValue: java.lang.ClassValue$Entry[] getCacheCarefully(java.lang.Class)>(r1);
        r2 = $r4;
        r3 = staticinvoke <java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry probeHomeLocation(java.lang.ClassValue$Entry[],java.lang.ClassValue)>($r4, r0);
        $z0 = virtualinvoke r0.<java.lang.ClassValue: boolean match(java.lang.ClassValue$Entry)>(r3);
        if $z0 == 0 goto label0;

        $r5 = virtualinvoke r3.<java.lang.ClassValue$Entry: java.lang.Object value()>();
        return $r5;

     label0:
        $r6 = specialinvoke r0.<java.lang.ClassValue: java.lang.Object getFromBackup(java.lang.ClassValue$Entry[],java.lang.Class)>(r2, r1);
        return $r6;
    }

    public void remove(java.lang.Class)
    {
        java.lang.ClassValue r0;
        java.lang.Class r1;
        java.lang.ClassValue$ClassValueMap r2;

        r0 := @this: java.lang.ClassValue;
        r1 := @parameter0: java.lang.Class;
        r2 = staticinvoke <java.lang.ClassValue: java.lang.ClassValue$ClassValueMap getMap(java.lang.Class)>(r1);
        virtualinvoke r2.<java.lang.ClassValue$ClassValueMap: void removeEntry(java.lang.ClassValue)>(r0);
        return;
    }

    void put(java.lang.Class, java.lang.Object)
    {
        java.lang.ClassValue r0;
        java.lang.Class r1;
        java.lang.Object r2;
        java.lang.ClassValue$ClassValueMap r3;

        r0 := @this: java.lang.ClassValue;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Object;
        r3 = staticinvoke <java.lang.ClassValue: java.lang.ClassValue$ClassValueMap getMap(java.lang.Class)>(r1);
        virtualinvoke r3.<java.lang.ClassValue$ClassValueMap: void changeEntry(java.lang.ClassValue,java.lang.Object)>(r0, r2);
        return;
    }

    private static java.lang.ClassValue$Entry[] getCacheCarefully(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassValue$ClassValueMap r1;
        java.lang.ClassValue$Entry[] r2, $r3;

        r0 := @parameter0: java.lang.Class;
        r1 = r0.<java.lang.Class: java.lang.ClassValue$ClassValueMap classValueMap>;
        if r1 != null goto label0;

        $r3 = <java.lang.ClassValue: java.lang.ClassValue$Entry[] EMPTY_CACHE>;
        return $r3;

     label0:
        r2 = virtualinvoke r1.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry[] getCache()>();
        return r2;
    }

    private java.lang.Object getFromBackup(java.lang.ClassValue$Entry[], java.lang.Class)
    {
        java.lang.ClassValue r0;
        java.lang.ClassValue$Entry[] r1;
        java.lang.Class r2;
        java.lang.ClassValue$Entry r3;
        java.lang.Object $r4, $r5;

        r0 := @this: java.lang.ClassValue;
        r1 := @parameter0: java.lang.ClassValue$Entry[];
        r2 := @parameter1: java.lang.Class;
        r3 = staticinvoke <java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry probeBackupLocations(java.lang.ClassValue$Entry[],java.lang.ClassValue)>(r1, r0);
        if r3 == null goto label0;

        $r4 = virtualinvoke r3.<java.lang.ClassValue$Entry: java.lang.Object value()>();
        return $r4;

     label0:
        $r5 = specialinvoke r0.<java.lang.ClassValue: java.lang.Object getFromHashMap(java.lang.Class)>(r2);
        return $r5;
    }

    java.lang.ClassValue$Entry castEntry(java.lang.ClassValue$Entry)
    {
        java.lang.ClassValue r0;
        java.lang.ClassValue$Entry r1;

        r0 := @this: java.lang.ClassValue;
        r1 := @parameter0: java.lang.ClassValue$Entry;
        return r1;
    }

    private java.lang.Object getFromHashMap(java.lang.Class)
    {
        java.lang.ClassValue r0;
        java.lang.Class r1;
        java.lang.ClassValue$ClassValueMap r2;
        java.lang.ClassValue$Entry r3, r8;
        java.lang.Throwable r4, $r9;
        boolean $z0;
        java.lang.Object $r5, $r7, $r11;
        java.lang.ClassValue$Version $r6;

        r0 := @this: java.lang.ClassValue;
        r1 := @parameter0: java.lang.Class;
        r2 = staticinvoke <java.lang.ClassValue: java.lang.ClassValue$ClassValueMap getMap(java.lang.Class)>(r1);

     label0:
        r3 = virtualinvoke r2.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry startEntry(java.lang.ClassValue)>(r0);
        $z0 = virtualinvoke r3.<java.lang.ClassValue$Entry: boolean isPromise()>();
        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r3.<java.lang.ClassValue$Entry: java.lang.Object value()>();
        return $r5;

     label1:
        $r6 = virtualinvoke r3.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        $r7 = virtualinvoke r0.<java.lang.ClassValue: java.lang.Object computeValue(java.lang.Class)>(r1);
        r3 = staticinvoke <java.lang.ClassValue: java.lang.ClassValue$Entry makeEntry(java.lang.ClassValue$Version,java.lang.Object)>($r6, $r7);

     label2:
        r8 = virtualinvoke r2.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry finishEntry(java.lang.ClassValue,java.lang.ClassValue$Entry)>(r0, r3);
        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        r4 = $r9;

     label5:
        virtualinvoke r2.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry finishEntry(java.lang.ClassValue,java.lang.ClassValue$Entry)>(r0, r3);
        throw r4;

     label6:
        if r8 == null goto label7;

        $r11 = virtualinvoke r8.<java.lang.ClassValue$Entry: java.lang.Object value()>();
        return $r11;

     label7:
        goto label0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean match(java.lang.ClassValue$Entry)
    {
        java.lang.ClassValue r0;
        java.lang.ClassValue$Entry r1;
        java.lang.Object $r2;
        java.lang.ClassValue$Version $r3;
        boolean $z0;

        r0 := @this: java.lang.ClassValue;
        r1 := @parameter0: java.lang.ClassValue$Entry;
        if r1 == null goto label0;

        $r2 = virtualinvoke r1.<java.lang.ClassValue$Entry: java.lang.Object get()>();
        $r3 = r0.<java.lang.ClassValue: java.lang.ClassValue$Version version>;
        if $r2 != $r3 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    java.lang.ClassValue$Version version()
    {
        java.lang.ClassValue r0;
        java.lang.ClassValue$Version $r1;

        r0 := @this: java.lang.ClassValue;
        $r1 = r0.<java.lang.ClassValue: java.lang.ClassValue$Version version>;
        return $r1;
    }

    void bumpVersion()
    {
        java.lang.ClassValue r0;
        java.lang.ClassValue$Version $r1;

        r0 := @this: java.lang.ClassValue;
        $r1 = new java.lang.ClassValue$Version;
        specialinvoke $r1.<java.lang.ClassValue$Version: void <init>(java.lang.ClassValue)>(r0);
        r0.<java.lang.ClassValue: java.lang.ClassValue$Version version> = $r1;
        return;
    }

    private static java.lang.ClassValue$ClassValueMap getMap(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassValue$ClassValueMap r1, $r2;

        r0 := @parameter0: java.lang.Class;
        r1 = r0.<java.lang.Class: java.lang.ClassValue$ClassValueMap classValueMap>;
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = staticinvoke <java.lang.ClassValue: java.lang.ClassValue$ClassValueMap initializeMap(java.lang.Class)>(r0);
        return $r2;
    }

    private static java.lang.ClassValue$ClassValueMap initializeMap(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r1, r2;
        java.lang.ClassValue$ClassValueMap r3, $r5, $r6;
        java.lang.Throwable r4, $r7;

        r0 := @parameter0: java.lang.Class;
        $r1 = <java.lang.ClassValue: java.lang.Object CRITICAL_SECTION>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r5 = r0.<java.lang.Class: java.lang.ClassValue$ClassValueMap classValueMap>;
        r3 = $r5;
        if $r5 != null goto label1;

        $r6 = new java.lang.ClassValue$ClassValueMap;
        specialinvoke $r6.<java.lang.ClassValue$ClassValueMap: void <init>(java.lang.Class)>(r0);
        r3 = $r6;
        r0.<java.lang.Class: java.lang.ClassValue$ClassValueMap classValueMap> = $r6;

     label1:
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r4 = $r7;
        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return r3;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static java.lang.ClassValue$Entry makeEntry(java.lang.ClassValue$Version, java.lang.Object)
    {
        java.lang.ClassValue$Version r0;
        java.lang.Object r1;
        java.lang.ClassValue$Entry $r2;

        r0 := @parameter0: java.lang.ClassValue$Version;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.lang.ClassValue$Entry;
        specialinvoke $r2.<java.lang.ClassValue$Entry: void <init>(java.lang.ClassValue$Version,java.lang.Object)>(r0, r1);
        return $r2;
    }

    static void <clinit>()
    {
        java.lang.ClassValue$Entry[] $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.Object $r2;

        $r0 = newarray (java.lang.ClassValue$Entry)[1];
        $r0[0] = null;
        <java.lang.ClassValue: java.lang.ClassValue$Entry[] EMPTY_CACHE> = $r0;
        $r1 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
        <java.lang.ClassValue: java.util.concurrent.atomic.AtomicInteger nextHashCode> = $r1;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        <java.lang.ClassValue: java.lang.Object CRITICAL_SECTION> = $r2;
        return;
    }
}
