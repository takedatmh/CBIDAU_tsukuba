final class javax.crypto.JarVerifier extends java.lang.Object
{
    private static final java.lang.String PLUGIN_IMPL_NAME;
    private static java.security.cert.X509Certificate frameworkCertificate;
    private static sun.security.validator.Validator providerValidator;
    private static sun.security.validator.Validator exemptValidator;
    private java.util.Vector verifiedSignerCache;
    private java.net.URL jarURL;
    private sun.security.validator.Validator validator;
    private boolean savePerms;
    private javax.crypto.CryptoPermissions appPerms;

    private static java.security.cert.X509Certificate parseCertificate(java.lang.String, java.security.cert.CertificateFactory) throws java.lang.Exception
    {
        java.lang.String r0;
        java.security.cert.CertificateFactory r1;
        java.io.ByteArrayInputStream $r2, r3;
        byte[] $r4;
        java.security.cert.Certificate $r5;
        java.security.cert.X509Certificate $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.cert.CertificateFactory;
        $r2 = new java.io.ByteArrayInputStream;
        $r4 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);
        r3 = $r2;
        $r5 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r3);
        $r6 = (java.security.cert.X509Certificate) $r5;
        return $r6;
    }

    void <init>(java.net.URL, boolean)
    {
        javax.crypto.JarVerifier r0;
        java.net.URL r1;
        boolean z0;
        sun.security.validator.Validator $r3;
        java.util.Vector $r4;

        r0 := @this: javax.crypto.JarVerifier;
        r1 := @parameter0: java.net.URL;
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache> = null;
        r0.<javax.crypto.JarVerifier: javax.crypto.CryptoPermissions appPerms> = null;
        r0.<javax.crypto.JarVerifier: java.net.URL jarURL> = r1;
        r0.<javax.crypto.JarVerifier: boolean savePerms> = z0;
        if z0 == 0 goto label0;

        $r3 = <javax.crypto.JarVerifier: sun.security.validator.Validator providerValidator>;
        goto label1;

     label0:
        $r3 = <javax.crypto.JarVerifier: sun.security.validator.Validator exemptValidator>;

     label1:
        r0.<javax.crypto.JarVerifier: sun.security.validator.Validator validator> = $r3;
        $r4 = new java.util.Vector;
        specialinvoke $r4.<java.util.Vector: void <init>(int)>(2);
        r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache> = $r4;
        return;
    }

    void verify() throws java.util.jar.JarException, java.io.IOException
    {
        javax.crypto.JarVerifier r0;
        java.security.NoSuchProviderException r1, $r8;
        java.lang.Throwable r2, $r34;
        java.net.URL $r3, $r5, $r12, $r21, $r30;
        java.util.jar.JarException $r4, $r9, $r18, $r27;
        java.util.Vector $r6, $r7, $r35, $r36;
        java.lang.StringBuilder $r10, $r11, $r14, $r19, $r20, $r23, $r28, $r29, $r32;
        java.lang.String $r13, $r15, $r22, $r24, $r31, $r33;
        java.security.cert.CertificateException $r16, r17;
        javax.crypto.CryptoPolicyParser$ParsingException $r25, r26;

        r0 := @this: javax.crypto.JarVerifier;
        $r3 = r0.<javax.crypto.JarVerifier: java.net.URL jarURL>;
        if $r3 != null goto label0;

        $r4 = new java.util.jar.JarException;
        specialinvoke $r4.<java.util.jar.JarException: void <init>(java.lang.String)>("Class is on the bootclasspath");
        throw $r4;

     label0:
        $r5 = r0.<javax.crypto.JarVerifier: java.net.URL jarURL>;
        specialinvoke r0.<javax.crypto.JarVerifier: void verifyJars(java.net.URL,java.util.Vector)>($r5, null);

     label1:
        $r6 = r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache>;
        if $r6 == null goto label9;

        $r7 = r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache>;
        virtualinvoke $r7.<java.util.Vector: void clear()>();
        goto label9;

     label2:
        $r8 := @caughtexception;

     label3:
        r1 = $r8;
        $r9 = new java.util.jar.JarException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot verify ");
        $r12 = r0.<javax.crypto.JarVerifier: java.net.URL jarURL>;
        $r13 = virtualinvoke $r12.<java.net.URL: java.lang.String toString()>();
        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.util.jar.JarException: void <init>(java.lang.String)>($r15);
        throw $r9;

     label4:
        $r16 := @caughtexception;
        r17 = $r16;
        $r18 = new java.util.jar.JarException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot verify ");
        $r21 = r0.<javax.crypto.JarVerifier: java.net.URL jarURL>;
        $r22 = virtualinvoke $r21.<java.net.URL: java.lang.String toString()>();
        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.util.jar.JarException: void <init>(java.lang.String)>($r24);
        throw $r18;

     label5:
        $r25 := @caughtexception;
        r26 = $r25;
        $r27 = new java.util.jar.JarException;
        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse ");
        $r30 = r0.<javax.crypto.JarVerifier: java.net.URL jarURL>;
        $r31 = virtualinvoke $r30.<java.net.URL: java.lang.String toString()>();
        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r27.<java.util.jar.JarException: void <init>(java.lang.String)>($r33);
        throw $r27;

     label6:
        $r34 := @caughtexception;
        r2 = $r34;

     label7:
        $r35 = r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache>;
        if $r35 == null goto label8;

        $r36 = r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache>;
        virtualinvoke $r36.<java.util.Vector: void clear()>();

     label8:
        throw r2;

     label9:
        return;

        catch java.security.NoSuchProviderException from label0 to label1 with label2;
        catch java.security.cert.CertificateException from label0 to label1 with label4;
        catch javax.crypto.CryptoPolicyParser$ParsingException from label0 to label1 with label5;
        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label3 to label7 with label6;
    }

    static void verifyPolicySigned(java.security.cert.Certificate[]) throws java.lang.Exception
    {
        java.security.cert.Certificate[] r0;
        java.util.List r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.security.cert.X509Certificate[] r3, $r6;
        java.security.cert.X509Certificate r4, $r7;
        java.lang.Object $r5;
        java.lang.SecurityException $r8;

        r0 := @parameter0: java.security.cert.Certificate[];
        r1 = staticinvoke <javax.crypto.JarVerifier: java.util.List convertCertsToChains(java.security.cert.Certificate[])>(r0);
        z0 = 0;
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $r6 = (java.security.cert.X509Certificate[]) $r5;
        r3 = (java.security.cert.X509Certificate[]) $r6;
        r4 = r3[0];
        $r7 = <javax.crypto.JarVerifier: java.security.cert.X509Certificate frameworkCertificate>;
        $z2 = virtualinvoke r4.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>($r7);
        if $z2 == 0 goto label1;

        z0 = 1;
        goto label2;

     label1:
        goto label0;

     label2:
        if z0 != 0 goto label3;

        $r8 = new java.lang.SecurityException;
        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("The jurisdiction policy files are not signed by a trusted signer!");
        throw $r8;

     label3:
        return;
    }

    javax.crypto.CryptoPermissions getPermissions()
    {
        javax.crypto.JarVerifier r0;
        javax.crypto.CryptoPermissions $r1;

        r0 := @this: javax.crypto.JarVerifier;
        $r1 = r0.<javax.crypto.JarVerifier: javax.crypto.CryptoPermissions appPerms>;
        return $r1;
    }

    private void verifyJars(java.net.URL, java.util.Vector) throws java.security.NoSuchProviderException, java.security.cert.CertificateException, java.io.IOException, javax.crypto.CryptoPolicyParser$ParsingException
    {
        javax.crypto.JarVerifier r0;
        java.net.URL r1;
        java.util.Vector r2, $r5;
        java.lang.String r3, r4;
        boolean $z0;

        r0 := @this: javax.crypto.JarVerifier;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.util.Vector;
        r3 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();
        if r2 == null goto label0;

        $z0 = virtualinvoke r2.<java.util.Vector: boolean contains(java.lang.Object)>(r3);
        if $z0 != 0 goto label3;

     label0:
        r4 = specialinvoke r0.<javax.crypto.JarVerifier: java.lang.String verifySingleJar(java.net.URL)>(r1);
        if r2 == null goto label1;

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>(r3);

     label1:
        if r4 == null goto label3;

        if r2 != null goto label2;

        $r5 = new java.util.Vector;
        specialinvoke $r5.<java.util.Vector: void <init>()>();
        r2 = $r5;
        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>(r3);

     label2:
        specialinvoke r0.<javax.crypto.JarVerifier: void verifyManifestClassPathJars(java.net.URL,java.lang.String,java.util.Vector)>(r1, r4, r2);

     label3:
        return;
    }

    private void verifyManifestClassPathJars(java.net.URL, java.lang.String, java.util.Vector) throws java.security.NoSuchProviderException, java.security.cert.CertificateException, java.io.IOException, javax.crypto.CryptoPolicyParser$ParsingException
    {
        javax.crypto.JarVerifier r0;
        java.net.URL r1, r5, $r6;
        java.lang.String r2, $r7, $r13, $r16;
        java.util.Vector r3;
        java.lang.String[] r4;
        int i0, $i1;
        java.net.MalformedURLException $r8, r9, $r10, r17;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;

        r0 := @this: javax.crypto.JarVerifier;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Vector;
        r4 = staticinvoke <javax.crypto.JarVerifier: java.lang.String[] parseAttrClasspath(java.lang.String)>(r2);

     label0:
        i0 = 0;

     label1:
        $i1 = lengthof r4;
        if i0 >= $i1 goto label2;

        $r6 = new java.net.URL;
        $r7 = r4[i0];
        specialinvoke $r6.<java.net.URL: void <init>(java.net.URL,java.lang.String)>(r1, $r7);
        r5 = $r6;
        specialinvoke r0.<javax.crypto.JarVerifier: void verifyJars(java.net.URL,java.util.Vector)>(r5, r3);
        i0 = i0 + 1;
        goto label1;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.net.MalformedURLException;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The JAR file ");
        $r13 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains invalid URLs in its Class-Path attribute");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.net.MalformedURLException: void <init>(java.lang.String)>($r16);
        r17 = $r10;
        virtualinvoke r17.<java.net.MalformedURLException: java.lang.Throwable initCause(java.lang.Throwable)>(r9);
        throw r17;

     label4:
        return;

        catch java.net.MalformedURLException from label0 to label2 with label3;
    }

    private java.lang.String verifySingleJar(java.net.URL) throws java.security.NoSuchProviderException, java.security.cert.CertificateException, java.io.IOException, javax.crypto.CryptoPolicyParser$ParsingException
    {
        javax.crypto.JarVerifier r0;
        java.net.URL r1, r3, $r15, $r68;
        java.lang.StringBuilder $r2, $r16, $r18, $r19, $r25, $r26, $r28, $r39, $r41, $r42, $r49, $r51, $r52, $r54, $r62, $r64, $r65, $r66;
        javax.crypto.JarVerifier$JarHolder r4;
        java.security.PrivilegedActionException r5, $r23;
        java.lang.SecurityException r6, $r24;
        java.util.Enumeration r7, r44;
        java.util.jar.JarEntry r8, r46, r70;
        java.io.BufferedInputStream r9, $r34;
        java.lang.Throwable r10, r13, $r36, $r81;
        java.security.cert.Certificate[] r11;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.security.cert.X509Certificate[] r12, $r56;
        java.lang.String $r14, $r17, $r20, $r27, $r29, $r40, $r43, $r47, $r50, $r53, $r55, $r63, $r67, r78;
        javax.crypto.JarVerifier$2 $r21;
        java.lang.Object $r22, $r33, $r45;
        java.util.jar.JarFile r31, $r69, $r74, $r79, $r80, $r82;
        byte[] r32;
        java.io.InputStream $r35, $r75;
        java.util.jar.Manifest r37;
        java.util.jar.JarException $r38, $r48, $r61, $r71;
        java.util.Vector $r57, $r59;
        java.security.cert.X509Certificate $r58, $r60;
        javax.crypto.CryptoPermissions $r72, $r73;
        java.util.jar.Attributes $r76;
        java.util.jar.Attributes$Name $r77;
        null_type n0;

        r0 := @this: javax.crypto.JarVerifier;
        r1 := @parameter0: java.net.URL;
        $r14 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();
        $z1 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("jar");
        if $z1 == 0 goto label0;

        $r15 = r1;
        goto label1;

     label0:
        $r15 = new java.net.URL;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jar:");
        $r17 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<java.net.URL: void <init>(java.lang.String)>($r20);

     label1:
        r3 = $r15;
        r4 = null;

     label2:
        $r21 = new javax.crypto.JarVerifier$2;
        specialinvoke $r21.<javax.crypto.JarVerifier$2: void <init>(javax.crypto.JarVerifier,java.net.URL)>(r0, r3);
        $r22 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r21);
        r4 = (javax.crypto.JarVerifier$JarHolder) $r22;

     label3:
        goto label5;

     label4:
        $r23 := @caughtexception;
        r5 = $r23;
        $r24 = new java.lang.SecurityException;
        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot verify ");
        $r27 = virtualinvoke r3.<java.net.URL: java.lang.String toString()>();
        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>($r29);
        r6 = $r24;
        virtualinvoke r6.<java.lang.SecurityException: java.lang.Throwable initCause(java.lang.Throwable)>(r5);
        throw r6;

     label5:
        if r4 == null goto label29;

        r31 = r4.<javax.crypto.JarVerifier$JarHolder: java.util.jar.JarFile file>;
        r32 = newarray (byte)[8192];
        r7 = virtualinvoke r31.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label6:
        $z2 = interfaceinvoke r7.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z2 == 0 goto label13;

        $r33 = interfaceinvoke r7.<java.util.Enumeration: java.lang.Object nextElement()>();
        r8 = (java.util.jar.JarEntry) $r33;
        $r34 = new java.io.BufferedInputStream;
        $r35 = virtualinvoke r31.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r8);
        specialinvoke $r34.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r35);
        r9 = $r34;

     label7:
        $i1 = lengthof r32;
        $i2 = virtualinvoke r9.<java.io.BufferedInputStream: int read(byte[],int,int)>(r32, 0, $i1);
        if $i2 == -1 goto label8;

        goto label7;

     label8:
        virtualinvoke r9.<java.io.BufferedInputStream: void close()>();
        goto label12;

     label9:
        $r36 := @caughtexception;

     label10:
        r10 = $r36;

     label11:
        virtualinvoke r9.<java.io.BufferedInputStream: void close()>();
        throw r10;

     label12:
        goto label6;

     label13:
        r37 = virtualinvoke r31.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>();
        if r37 != null goto label14;

        $r38 = new java.util.jar.JarException;
        $r39 = new java.lang.StringBuilder;
        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
        $r40 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();
        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not signed.");
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r38.<java.util.jar.JarException: void <init>(java.lang.String)>($r43);
        throw $r38;

     label14:
        r44 = virtualinvoke r31.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label15:
        $z3 = interfaceinvoke r44.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z3 == 0 goto label24;

        $r45 = interfaceinvoke r44.<java.util.Enumeration: java.lang.Object nextElement()>();
        r46 = (java.util.jar.JarEntry) $r45;
        $z4 = virtualinvoke r46.<java.util.jar.JarEntry: boolean isDirectory()>();
        if $z4 == 0 goto label16;

        goto label15;

     label16:
        r11 = virtualinvoke r46.<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()>();
        if r11 == null goto label17;

        $i3 = lengthof r11;
        if $i3 != 0 goto label18;

     label17:
        $r47 = virtualinvoke r46.<java.util.jar.JarEntry: java.lang.String getName()>();
        $z5 = virtualinvoke $r47.<java.lang.String: boolean startsWith(java.lang.String)>("META-INF");
        if $z5 != 0 goto label23;

        $r48 = new java.util.jar.JarException;
        $r49 = new java.lang.StringBuilder;
        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();
        $r50 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();
        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);
        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has unsigned entries - ");
        $r53 = virtualinvoke r46.<java.util.jar.JarEntry: java.lang.String getName()>();
        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r48.<java.util.jar.JarException: void <init>(java.lang.String)>($r55);
        throw $r48;

     label18:
        i0 = 0;
        z0 = 0;

     label19:
        $r56 = staticinvoke <javax.crypto.JarVerifier: java.security.cert.X509Certificate[] getAChain(java.security.cert.Certificate[],int)>(r11, i0);
        r12 = $r56;
        if $r56 == null goto label22;

        $r57 = r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache>;
        $r58 = r12[0];
        $z6 = virtualinvoke $r57.<java.util.Vector: boolean contains(java.lang.Object)>($r58);
        if $z6 == 0 goto label20;

        z0 = 1;
        goto label22;

     label20:
        $z7 = specialinvoke r0.<javax.crypto.JarVerifier: boolean isTrusted(java.security.cert.X509Certificate[])>(r12);
        if $z7 == 0 goto label21;

        z0 = 1;
        $r59 = r0.<javax.crypto.JarVerifier: java.util.Vector verifiedSignerCache>;
        $r60 = r12[0];
        virtualinvoke $r59.<java.util.Vector: void addElement(java.lang.Object)>($r60);
        goto label22;

     label21:
        $i4 = lengthof r12;
        i0 = i0 + $i4;
        goto label19;

     label22:
        if z0 != 0 goto label23;

        $r61 = new java.util.jar.JarException;
        $r62 = new java.lang.StringBuilder;
        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();
        $r63 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();
        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);
        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not signed by a");
        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trusted signer.");
        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r61.<java.util.jar.JarException: void <init>(java.lang.String)>($r67);
        throw $r61;

     label23:
        goto label15;

     label24:
        $r68 = r0.<javax.crypto.JarVerifier: java.net.URL jarURL>;
        $z8 = virtualinvoke $r68.<java.net.URL: boolean equals(java.lang.Object)>(r1);
        if $z8 == 0 goto label26;

        $z9 = r0.<javax.crypto.JarVerifier: boolean savePerms>;
        if $z9 == 0 goto label26;

        $r69 = r4.<javax.crypto.JarVerifier$JarHolder: java.util.jar.JarFile file>;
        r70 = virtualinvoke $r69.<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>("cryptoPerms");
        if r70 != null goto label25;

        $r71 = new java.util.jar.JarException;
        specialinvoke $r71.<java.util.jar.JarException: void <init>(java.lang.String)>("Can not find cryptoPerms");
        throw $r71;

     label25:
        $r72 = new javax.crypto.CryptoPermissions;
        specialinvoke $r72.<javax.crypto.CryptoPermissions: void <init>()>();
        r0.<javax.crypto.JarVerifier: javax.crypto.CryptoPermissions appPerms> = $r72;
        $r73 = r0.<javax.crypto.JarVerifier: javax.crypto.CryptoPermissions appPerms>;
        $r74 = r4.<javax.crypto.JarVerifier$JarHolder: java.util.jar.JarFile file>;
        $r75 = virtualinvoke $r74.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r70);
        virtualinvoke $r73.<javax.crypto.CryptoPermissions: void load(java.io.InputStream)>($r75);

     label26:
        $r76 = virtualinvoke r37.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();
        $r77 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name CLASS_PATH>;
        r78 = virtualinvoke $r76.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>($r77);

     label27:
        if r4 == null goto label28;

        $z10 = r4.<javax.crypto.JarVerifier$JarHolder: boolean useCaches>;
        if $z10 != 0 goto label28;

        $r79 = r4.<javax.crypto.JarVerifier$JarHolder: java.util.jar.JarFile file>;
        virtualinvoke $r79.<java.util.jar.JarFile: void close()>();

     label28:
        return r78;

     label29:
        n0 = null;

     label30:
        if r4 == null goto label31;

        $z11 = r4.<javax.crypto.JarVerifier$JarHolder: boolean useCaches>;
        if $z11 != 0 goto label31;

        $r80 = r4.<javax.crypto.JarVerifier$JarHolder: java.util.jar.JarFile file>;
        virtualinvoke $r80.<java.util.jar.JarFile: void close()>();

     label31:
        return n0;

     label32:
        $r81 := @caughtexception;

     label33:
        r13 = $r81;

     label34:
        if r4 == null goto label35;

        $z12 = r4.<javax.crypto.JarVerifier$JarHolder: boolean useCaches>;
        if $z12 != 0 goto label35;

        $r82 = r4.<javax.crypto.JarVerifier$JarHolder: java.util.jar.JarFile file>;
        virtualinvoke $r82.<java.util.jar.JarFile: void close()>();

     label35:
        throw r13;

        catch java.security.PrivilegedActionException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label2 to label27 with label32;
        catch java.lang.Throwable from label29 to label30 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
    }

    private static java.lang.String[] parseAttrClasspath(java.lang.String) throws java.util.jar.JarException
    {
        java.lang.String r0, r2, r4, $r5;
        int i0, $i1;
        null_type n0;
        java.util.Vector r1, $r3;
        boolean z0, $z1;
        java.util.jar.JarException $r6;
        java.lang.String[] $r7, $r9, $r10;
        java.lang.Object[] $r8;

        r0 := @parameter0: java.lang.String;
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();
        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(32);
        n0 = null;
        $r3 = new java.util.Vector;
        specialinvoke $r3.<java.util.Vector: void <init>()>();
        r1 = $r3;
        z0 = 0;

     label0:
        if i0 <= 0 goto label1;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $i1 = i0 + 1;
        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);
        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();
        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(32);
        goto label2;

     label1:
        r4 = r2;
        z0 = 1;

     label2:
        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");
        if $z1 == 0 goto label3;

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>(r4);
        goto label4;

     label3:
        $r6 = new java.util.jar.JarException;
        specialinvoke $r6.<java.util.jar.JarException: void <init>(java.lang.String)>("The provider contains un-verifiable components");
        throw $r6;

     label4:
        if z0 == 0 goto label0;

        $r7 = newarray (java.lang.String)[0];
        $r8 = virtualinvoke r1.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>($r7);
        $r9 = (java.lang.String[]) $r8;
        $r10 = (java.lang.String[]) $r9;
        return $r10;
    }

    private boolean isTrusted(java.security.cert.X509Certificate[])
    {
        javax.crypto.JarVerifier r0;
        java.security.cert.X509Certificate[] r1;
        java.security.cert.CertificateException r2, $r5;
        sun.security.validator.Validator $r3;
        boolean $z0;

        r0 := @this: javax.crypto.JarVerifier;
        r1 := @parameter0: java.security.cert.X509Certificate[];

     label0:
        $r3 = r0.<javax.crypto.JarVerifier: sun.security.validator.Validator validator>;
        virtualinvoke $r3.<sun.security.validator.Validator: java.security.cert.X509Certificate[] validate(java.security.cert.X509Certificate[])>(r1);
        $z0 = 1;

     label1:
        return $z0;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        return 0;

        catch java.security.cert.CertificateException from label0 to label1 with label2;
    }

    private static java.security.cert.X509Certificate[] getAChain(java.security.cert.Certificate[], int)
    {
        java.security.cert.Certificate[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.security.cert.X509Certificate[] r1;
        java.security.cert.Certificate $r2, $r5, $r8;
        java.security.cert.X509Certificate $r3, $r6, $r9;
        java.security.Principal $r4, $r7;
        boolean $z0;

        r0 := @parameter0: java.security.cert.Certificate[];
        i0 := @parameter1: int;
        $i4 = lengthof r0;
        $i5 = $i4 - 1;
        if i0 <= $i5 goto label0;

        return null;

     label0:
        i1 = i0;

     label1:
        $i6 = lengthof r0;
        $i7 = $i6 - 1;
        if i1 >= $i7 goto label3;

        $i8 = i1 + 1;
        $r2 = r0[$i8];
        $r3 = (java.security.cert.X509Certificate) $r2;
        $r4 = virtualinvoke $r3.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();
        $r5 = r0[i1];
        $r6 = (java.security.cert.X509Certificate) $r5;
        $r7 = virtualinvoke $r6.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();
        $z0 = interfaceinvoke $r4.<java.security.Principal: boolean equals(java.lang.Object)>($r7);
        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;
        goto label1;

     label3:
        $i9 = i1 - i0;
        i2 = $i9 + 1;
        r1 = newarray (java.security.cert.X509Certificate)[i2];
        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        $i10 = i0 + i3;
        $r8 = r0[$i10];
        $r9 = (java.security.cert.X509Certificate) $r8;
        r1[i3] = $r9;
        i3 = i3 + 1;
        goto label4;

     label5:
        return r1;
    }

    private static java.util.List convertCertsToChains(java.security.cert.Certificate[]) throws java.security.cert.CertificateException
    {
        java.security.cert.Certificate[] r0;
        java.util.ArrayList r1, $r3;
        null_type n0;
        int i0, $i1;
        java.util.List $r2;
        java.security.cert.X509Certificate[] $r4, r5;

        r0 := @parameter0: java.security.cert.Certificate[];
        if r0 != null goto label0;

        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;
        return $r2;

     label0:
        $r3 = new java.util.ArrayList;
        specialinvoke $r3.<java.util.ArrayList: void <init>()>();
        r1 = $r3;
        n0 = null;
        i0 = 0;

     label1:
        $r4 = staticinvoke <javax.crypto.JarVerifier: java.security.cert.X509Certificate[] getAChain(java.security.cert.Certificate[],int)>(r0, i0);
        r5 = $r4;
        if $r4 == null goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);
        $i1 = lengthof r5;
        i0 = i0 + $i1;
        goto label1;

     label2:
        return r1;
    }

    private static void testSignatures(java.security.cert.X509Certificate, java.security.cert.CertificateFactory) throws java.lang.Exception
    {
        java.security.cert.X509Certificate r0, $r9, $r10, $r11, $r14, $r18;
        java.security.cert.CertificateFactory r1;
        java.lang.String r2;
        byte[] r3;
        int i0, i1, i2, $i7, $i8, $i11, $i12, $i14;
        java.security.cert.X509Certificate[] r4, $r8;
        java.security.PublicKey[] r5;
        boolean[] r6, $r17;
        boolean z0, $z1;
        java.security.SignatureException r7, $r20;
        byte $b3, $b5, $b9, $b13;
        short $s4, $s6, $s10;
        java.security.PublicKey $r12, $r13, $r15, $r16, $r19;
        java.security.InvalidKeyException $r21, r22;
        java.lang.SecurityException $r23;

        r0 := @parameter0: java.security.cert.X509Certificate;
        r1 := @parameter1: java.security.cert.CertificateFactory;
        r2 = "-----BEGIN CERTIFICATE-----\nMIIDLDCCAukCBDf5OeUwCwYHKoZIzjgEAwUAMHsxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRkwFwYDVQQKExBTdW4gTWljcm9zeXN0ZW1zMRYwFAYDVQQLEw1KYXZhIFNvZnR3YXJlMRgwFgYDVQQDEw9KQ0UgRGV2ZWxvcG1lbnQwHhcNOTkxMDA0MjMzNjA1WhcNMDAxMDAzMjMzNjA1WjB7MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEZMBcGA1UEChMQU3VuIE1pY3Jvc3lzdGVtczEWMBQGA1UECxMNSmF2YSBTb2Z0d2FyZTEYMBYGA1UEAxMPSkNFIERldmVsb3BtZW50MIIBuDCCASwGByqGSM44BAEwggEfAoGBAP1/U4EddRIpUt9KnC7s5Of2EbdSPO9EAMMeP4C2USZpRV1AIlH7WT2NWPq/xfW6MPbLm1Vs14E7gB00b/JmYLdrmVClpJ+f6AR7ECLCT7up1/63xhv4O1fnxqimFQ8E+4P208UewwI1VBNaFpEy9nXzrith1yrv8iIDGZ3RSAHHAhUAl2BQjxUjC8yykrmCouuEC/BYHPUCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0HgmdRWVeOutRZT+ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWRbqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImog9/hWuWfBpKLZl6Ae1UlZAFMO/7PSSoDgYUAAoGBAOGsR8waR5aiuOk1yBLemRlVCY+APJv3xqmPRxWAF6nwV2xrFUB8ghSEMFcHywoe4vBDvkGSoAFzeB5jy5wjDiFsN5AFPEVRfveS4NNZ1dgRdHbbh3h5O1dZE4MAKQwQfUoh9Oa3aahlB+orRzKOHLlGDpbNRQLST5BClvohramCMAsGByqGSM44BAMFAAMwADAtAhRF46T3nS+inP9TA1pLd3LIV0NNDQIVAIafi+1/+JKxu0rcoXWMFSxNaRb3\n-----END CERTIFICATE-----";
        r3 = staticinvoke <javax.crypto.JarVerifier: byte[] getSystemEntropy()>();
        $b3 = r3[0];
        $s4 = $b3 & 255;
        $b5 = r3[1];
        $s6 = $b5 & 255;
        $i7 = $s6 << 8;
        $i8 = $s4 | $i7;
        $b9 = r3[2];
        $s10 = $b9 & 255;
        $i11 = $s10 << 16;
        $i12 = $i8 | $i11;
        $b13 = r3[3];
        $i14 = $b13 << 24;
        i0 = $i12 | $i14;
        $r8 = newarray (java.security.cert.X509Certificate)[4];
        $r8[0] = r0;
        $r9 = staticinvoke <javax.crypto.JarVerifier: java.security.cert.X509Certificate parseCertificate(java.lang.String,java.security.cert.CertificateFactory)>(r2, r1);
        $r8[1] = $r9;
        $r10 = staticinvoke <javax.crypto.JarVerifier: java.security.cert.X509Certificate parseCertificate(java.lang.String,java.security.cert.CertificateFactory)>("-----BEGIN CERTIFICATE-----\nMIIB4DCCAYoCAQEwDQYJKoZIhvcNAQEEBQAwezELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlDdXBlcnRpbm8xGTAXBgNVBAoTEFN1biBNaWNyb3N5c3RlbXMxFjAUBgNVBAsTDUphdmEgU29mdHdhcmUxGDAWBgNVBAMTD0pDRSBEZXZlbG9wbWVudDAeFw0wMjEwMzExNTI3NDRaFw0wNzEwMzExNTI3NDRaMHsxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRkwFwYDVQQKExBTdW4gTWljcm9zeXN0ZW1zMRYwFAYDVQQLEw1KYXZhIFNvZnR3YXJlMRgwFgYDVQQDEw9KQ0UgRGV2ZWxvcG1lbnQwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAo/4CddEOa3M6v9JFAhnBYgTq54Y30++F8yzCK9EeYaG3AzvzZqNshDy579647p0cOM/4VO6rU2PgbzgKXPcs8wIDAQABMA0GCSqGSIb3DQEBBAUAA0EACqPlFmVdKdYSCTNltXKQnBqss9GNjbnB+CitvWrwN+oOK8qQpvV+5LB6LruvRy6zCedCV95Z2kXKg/Fnj0gvsg==\n-----END CERTIFICATE-----", r1);
        $r8[2] = $r10;
        $r11 = staticinvoke <javax.crypto.JarVerifier: java.security.cert.X509Certificate parseCertificate(java.lang.String,java.security.cert.CertificateFactory)>("-----BEGIN CERTIFICATE-----\nMIIB4DCCAYoCAQIwDQYJKoZIhvcNAQEEBQAwezELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlDdXBlcnRpbm8xGTAXBgNVBAoTEFN1biBNaWNyb3N5c3RlbXMxFjAUBgNVBAsTDUphdmEgU29mdHdhcmUxGDAWBgNVBAMTD0pDRSBEZXZlbG9wbWVudDAeFw0wMjEwMzExNTI3NDRaFw0wNzEwMzExNTI3NDRaMHsxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UEBxMJQ3VwZXJ0aW5vMRkwFwYDVQQKExBTdW4gTWljcm9zeXN0ZW1zMRYwFAYDVQQLEw1KYXZhIFNvZnR3YXJlMRgwFgYDVQQDEw9KQ0UgRGV2ZWxvcG1lbnQwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAr1OSXaOzpnVoqL2LqS5+HLy1kVvBwiM/E5iYT9eZaghE8qvF+4fETipWUNTWCQzHR4cDJGJOl9Nm77tELhES4QIDAQABMA0GCSqGSIb3DQEBBAUAA0EAL+WcVFyj+iXlEVNVQbNOOUlWmlmXGiNKKXnIdNcc1ZUyi+JW0zmlfZ7iU/eRYhEEJBwdrUoyiGOGLo7pi6JzAA==\n-----END CERTIFICATE-----", r1);
        $r8[3] = $r11;
        r4 = $r8;
        r5 = newarray (java.security.PublicKey)[4];
        $r12 = virtualinvoke r0.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        r5[0] = $r12;
        $r13 = r5[0];
        r5[1] = $r13;
        $r14 = r4[2];
        $r15 = virtualinvoke $r14.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        r5[2] = $r15;
        $r16 = r5[2];
        r5[3] = $r16;
        $r17 = newarray (boolean)[4];
        $r17[0] = 1;
        $r17[1] = 0;
        $r17[2] = 1;
        $r17[3] = 0;
        r6 = $r17;
        i1 = 0;

     label0:
        if i1 >= 12 goto label7;

        i2 = i0 & 3;
        i0 = i0 >> 2;

     label1:
        $r18 = r4[i2];
        $r19 = r5[i2];
        virtualinvoke $r18.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>($r19);
        z0 = 1;

     label2:
        goto label5;

     label3:
        $r20 := @caughtexception;
        r7 = $r20;
        z0 = 0;
        goto label5;

     label4:
        $r21 := @caughtexception;
        r22 = $r21;
        z0 = 0;

     label5:
        $z1 = r6[i2];
        if z0 == $z1 goto label6;

        $r23 = new java.lang.SecurityException;
        specialinvoke $r23.<java.lang.SecurityException: void <init>(java.lang.String)>("Signature classes have been tampered with");
        throw $r23;

     label6:
        i1 = i1 + 1;
        goto label0;

     label7:
        return;

        catch java.security.SignatureException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
    }

    private static byte[] getSystemEntropy()
    {
        java.security.MessageDigest r0;
        java.security.NoSuchAlgorithmException r1, $r7;
        java.util.Properties r2;
        java.util.Enumeration r3;
        java.lang.String r4, $r11, $r14, $r17, $r18;
        java.io.File r5, $r16;
        java.lang.String[] r6;
        int i0, $i2, $i4, $i5, $i8, $i10;
        java.lang.InternalError $r8;
        long $l1, $l7, $l9;
        byte b3, $b6;
        boolean $z0;
        java.lang.Object $r9;
        byte[] $r10, $r12, $r15, $r19, r23, r24, $r25;
        java.net.InetAddress $r13;
        java.lang.Exception $r20, r21;
        java.lang.Runtime r22;

     label0:
        r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA");

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r1 = $r7;
        $r8 = new java.lang.InternalError;
        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.String)>("internal error: SHA-1 not available.");
        throw $r8;

     label3:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $i2 = (int) $l1;
        b3 = (byte) $i2;
        virtualinvoke r0.<java.security.MessageDigest: void update(byte)>(b3);

     label4:
        r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();
        r3 = virtualinvoke r2.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label5:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        r4 = (java.lang.String) $r9;
        $r10 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();
        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>($r10);
        $r11 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r4);
        $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>();
        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>($r12);
        goto label5;

     label6:
        $r13 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();
        $r14 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String toString()>();
        $r15 = virtualinvoke $r14.<java.lang.String: byte[] getBytes()>();
        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>($r15);
        $r16 = new java.io.File;
        $r17 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");
        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r17);
        r5 = $r16;
        r6 = virtualinvoke r5.<java.io.File: java.lang.String[] list()>();
        i0 = 0;

     label7:
        $i4 = lengthof r6;
        if i0 >= $i4 goto label8;

        $r18 = r6[i0];
        $r19 = virtualinvoke $r18.<java.lang.String: byte[] getBytes()>();
        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>($r19);
        i0 = i0 + 1;
        goto label7;

     label8:
        goto label10;

     label9:
        $r20 := @caughtexception;
        r21 = $r20;
        $i5 = virtualinvoke r21.<java.lang.Object: int hashCode()>();
        $b6 = (byte) $i5;
        virtualinvoke r0.<java.security.MessageDigest: void update(byte)>($b6);

     label10:
        r22 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $l7 = virtualinvoke r22.<java.lang.Runtime: long totalMemory()>();
        r23 = staticinvoke <javax.crypto.JarVerifier: byte[] longToByteArray(long)>($l7);
        $i8 = lengthof r23;
        virtualinvoke r0.<java.security.MessageDigest: void update(byte[],int,int)>(r23, 0, $i8);
        $l9 = virtualinvoke r22.<java.lang.Runtime: long freeMemory()>();
        r24 = staticinvoke <javax.crypto.JarVerifier: byte[] longToByteArray(long)>($l9);
        $i10 = lengthof r24;
        virtualinvoke r0.<java.security.MessageDigest: void update(byte[],int,int)>(r24, 0, $i10);
        $r25 = virtualinvoke r0.<java.security.MessageDigest: byte[] digest()>();
        return $r25;

        catch java.security.NoSuchAlgorithmException from label0 to label1 with label2;
        catch java.lang.Exception from label4 to label8 with label9;
    }

    private static byte[] longToByteArray(long)
    {
        long l0;
        byte[] r0;
        int i1, $i2;
        byte $b3;

        l0 := @parameter0: long;
        r0 = newarray (byte)[8];
        i1 = 0;

     label0:
        if i1 >= 8 goto label1;

        $i2 = (int) l0;
        $b3 = (byte) $i2;
        r0[i1] = $b3;
        l0 = l0 >> 8;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r0;
    }

    static java.security.cert.X509Certificate access$002(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;

        r0 := @parameter0: java.security.cert.X509Certificate;
        <javax.crypto.JarVerifier: java.security.cert.X509Certificate frameworkCertificate> = r0;
        return r0;
    }

    static java.security.cert.X509Certificate access$100(java.lang.String, java.security.cert.CertificateFactory) throws java.lang.Exception
    {
        java.lang.String r0;
        java.security.cert.CertificateFactory r1;
        java.security.cert.X509Certificate $r2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.cert.CertificateFactory;
        $r2 = staticinvoke <javax.crypto.JarVerifier: java.security.cert.X509Certificate parseCertificate(java.lang.String,java.security.cert.CertificateFactory)>(r0, r1);
        return $r2;
    }

    static java.security.cert.X509Certificate access$000()
    {
        java.security.cert.X509Certificate $r0;

        $r0 = <javax.crypto.JarVerifier: java.security.cert.X509Certificate frameworkCertificate>;
        return $r0;
    }

    static sun.security.validator.Validator access$202(sun.security.validator.Validator)
    {
        sun.security.validator.Validator r0;

        r0 := @parameter0: sun.security.validator.Validator;
        <javax.crypto.JarVerifier: sun.security.validator.Validator providerValidator> = r0;
        return r0;
    }

    static sun.security.validator.Validator access$302(sun.security.validator.Validator)
    {
        sun.security.validator.Validator r0;

        r0 := @parameter0: sun.security.validator.Validator;
        <javax.crypto.JarVerifier: sun.security.validator.Validator exemptValidator> = r0;
        return r0;
    }

    static sun.security.validator.Validator access$200()
    {
        sun.security.validator.Validator $r0;

        $r0 = <javax.crypto.JarVerifier: sun.security.validator.Validator providerValidator>;
        return $r0;
    }

    static void access$400(java.security.cert.X509Certificate, java.security.cert.CertificateFactory) throws java.lang.Exception
    {
        java.security.cert.X509Certificate r0;
        java.security.cert.CertificateFactory r1;

        r0 := @parameter0: java.security.cert.X509Certificate;
        r1 := @parameter1: java.security.cert.CertificateFactory;
        staticinvoke <javax.crypto.JarVerifier: void testSignatures(java.security.cert.X509Certificate,java.security.cert.CertificateFactory)>(r0, r1);
        return;
    }

    static void <clinit>()
    {
        javax.crypto.JarVerifier$1 $r0;
        java.lang.Exception r1, $r4;
        java.lang.SecurityException r2, $r5;

     label0:
        $r0 = new javax.crypto.JarVerifier$1;
        specialinvoke $r0.<javax.crypto.JarVerifier$1: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r0);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.SecurityException;
        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Framework jar verification can not be initialized");
        r2 = $r5;
        virtualinvoke r2.<java.lang.SecurityException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);
        throw r2;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
