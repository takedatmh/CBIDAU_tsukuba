public class sun.reflect.generics.repository.MethodRepository extends sun.reflect.generics.repository.ConstructorRepository
{
    private java.lang.reflect.Type returnType;

    private void <init>(java.lang.String, sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.repository.MethodRepository r0;
        java.lang.String r1;
        sun.reflect.generics.factory.GenericsFactory r2;

        r0 := @this: sun.reflect.generics.repository.MethodRepository;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.reflect.generics.factory.GenericsFactory;
        specialinvoke r0.<sun.reflect.generics.repository.ConstructorRepository: void <init>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>(r1, r2);
        return;
    }

    public static sun.reflect.generics.repository.MethodRepository make(java.lang.String, sun.reflect.generics.factory.GenericsFactory)
    {
        java.lang.String r0;
        sun.reflect.generics.factory.GenericsFactory r1;
        sun.reflect.generics.repository.MethodRepository $r2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: sun.reflect.generics.factory.GenericsFactory;
        $r2 = new sun.reflect.generics.repository.MethodRepository;
        specialinvoke $r2.<sun.reflect.generics.repository.MethodRepository: void <init>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>(r0, r1);
        return $r2;
    }

    public java.lang.reflect.Type getReturnType()
    {
        sun.reflect.generics.repository.MethodRepository r0;
        sun.reflect.generics.visitor.Reifier r1;
        java.lang.reflect.Type $r2, $r6, $r7;
        sun.reflect.generics.tree.Tree $r3;
        sun.reflect.generics.tree.MethodTypeSignature $r4;
        sun.reflect.generics.tree.ReturnType $r5;

        r0 := @this: sun.reflect.generics.repository.MethodRepository;
        $r2 = r0.<sun.reflect.generics.repository.MethodRepository: java.lang.reflect.Type returnType>;
        if $r2 != null goto label0;

        r1 = virtualinvoke r0.<sun.reflect.generics.repository.MethodRepository: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r3 = virtualinvoke r0.<sun.reflect.generics.repository.MethodRepository: sun.reflect.generics.tree.Tree getTree()>();
        $r4 = (sun.reflect.generics.tree.MethodTypeSignature) $r3;
        $r5 = virtualinvoke $r4.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.ReturnType getReturnType()>();
        interfaceinvoke $r5.<sun.reflect.generics.tree.ReturnType: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r1);
        $r6 = virtualinvoke r1.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        r0.<sun.reflect.generics.repository.MethodRepository: java.lang.reflect.Type returnType> = $r6;

     label0:
        $r7 = r0.<sun.reflect.generics.repository.MethodRepository: java.lang.reflect.Type returnType>;
        return $r7;
    }
}
