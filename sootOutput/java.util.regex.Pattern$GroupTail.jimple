final class java.util.regex.Pattern$GroupTail extends java.util.regex.Pattern$Node
{
    int localIndex;
    int groupIndex;

    void <init>(int, int)
    {
        java.util.regex.Pattern$GroupTail r0;
        int i0, i1, $i2;

        r0 := @this: java.util.regex.Pattern$GroupTail;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$GroupTail: int localIndex> = i0;
        $i2 = i1 + i1;
        r0.<java.util.regex.Pattern$GroupTail: int groupIndex> = $i2;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupTail r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.CharSequence r2;
        int[] $r3, $r4, $r5, $r6, $r7, $r9, $r10;
        java.util.regex.Pattern$Node $r8;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$GroupTail;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r1.<java.util.regex.Matcher: int[] locals>;
        $i4 = r0.<java.util.regex.Pattern$GroupTail: int localIndex>;
        i1 = $r3[$i4];
        if i1 < 0 goto label1;

        $r4 = r1.<java.util.regex.Matcher: int[] groups>;
        $i5 = r0.<java.util.regex.Pattern$GroupTail: int groupIndex>;
        i2 = $r4[$i5];
        $r5 = r1.<java.util.regex.Matcher: int[] groups>;
        $i6 = r0.<java.util.regex.Pattern$GroupTail: int groupIndex>;
        $i7 = $i6 + 1;
        i3 = $r5[$i7];
        $r6 = r1.<java.util.regex.Matcher: int[] groups>;
        $i8 = r0.<java.util.regex.Pattern$GroupTail: int groupIndex>;
        $r6[$i8] = i1;
        $r7 = r1.<java.util.regex.Matcher: int[] groups>;
        $i9 = r0.<java.util.regex.Pattern$GroupTail: int groupIndex>;
        $i10 = $i9 + 1;
        $r7[$i10] = i0;
        $r8 = r0.<java.util.regex.Pattern$GroupTail: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r8.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label0;

        return 1;

     label0:
        $r9 = r1.<java.util.regex.Matcher: int[] groups>;
        $i11 = r0.<java.util.regex.Pattern$GroupTail: int groupIndex>;
        $r9[$i11] = i2;
        $r10 = r1.<java.util.regex.Matcher: int[] groups>;
        $i12 = r0.<java.util.regex.Pattern$GroupTail: int groupIndex>;
        $i13 = $i12 + 1;
        $r10[$i13] = i3;
        return 0;

     label1:
        r1.<java.util.regex.Matcher: int last> = i0;
        return 1;
    }
}
