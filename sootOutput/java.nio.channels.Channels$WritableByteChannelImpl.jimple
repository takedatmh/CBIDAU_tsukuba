class java.nio.channels.Channels$WritableByteChannelImpl extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.WritableByteChannel
{
    java.io.OutputStream out;
    private static final int TRANSFER_SIZE;
    private byte[] buf;
    private boolean open;
    private java.lang.Object writeLock;

    void <init>(java.io.OutputStream)
    {
        java.nio.channels.Channels$WritableByteChannelImpl r0;
        java.io.OutputStream r1;
        byte[] $r2;
        java.lang.Object $r3;

        r0 := @this: java.nio.channels.Channels$WritableByteChannelImpl;
        r1 := @parameter0: java.io.OutputStream;
        specialinvoke r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>();
        $r2 = newarray (byte)[0];
        r0.<java.nio.channels.Channels$WritableByteChannelImpl: byte[] buf> = $r2;
        r0.<java.nio.channels.Channels$WritableByteChannelImpl: boolean open> = 1;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.nio.channels.Channels$WritableByteChannelImpl: java.lang.Object writeLock> = $r3;
        r0.<java.nio.channels.Channels$WritableByteChannelImpl: java.io.OutputStream out> = r1;
        return;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.Channels$WritableByteChannelImpl r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, r4, $r13, $r15;
        byte[] $r6, $r7, $r8, $r11;
        java.io.OutputStream $r10;
        boolean $z0, $z1;

        r0 := @this: java.nio.channels.Channels$WritableByteChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        i1 = 0;
        $r5 = r0.<java.nio.channels.Channels$WritableByteChannelImpl: java.lang.Object writeLock>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        if i1 >= i0 goto label12;

        $i3 = i0 - i1;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i3, 8192);
        $r6 = r0.<java.nio.channels.Channels$WritableByteChannelImpl: byte[] buf>;
        $i4 = lengthof $r6;
        if $i4 >= i2 goto label1;

        $r7 = newarray (byte)[i2];
        r0.<java.nio.channels.Channels$WritableByteChannelImpl: byte[] buf> = $r7;

     label1:
        $r8 = r0.<java.nio.channels.Channels$WritableByteChannelImpl: byte[] buf>;
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r8, 0, i2);

     label2:
        virtualinvoke r0.<java.nio.channels.Channels$WritableByteChannelImpl: void begin()>();
        $r10 = r0.<java.nio.channels.Channels$WritableByteChannelImpl: java.io.OutputStream out>;
        $r11 = r0.<java.nio.channels.Channels$WritableByteChannelImpl: byte[] buf>;
        virtualinvoke $r10.<java.io.OutputStream: void write(byte[],int,int)>($r11, 0, i2);

     label3:
        if i2 <= 0 goto label4;

        $z0 = 1;
        goto label5;

     label4:
        $z0 = 0;

     label5:
        virtualinvoke r0.<java.nio.channels.Channels$WritableByteChannelImpl: void end(boolean)>($z0);
        goto label11;

     label6:
        $r13 := @caughtexception;

     label7:
        r3 = $r13;

     label8:
        if i2 <= 0 goto label9;

        $z1 = 1;
        goto label10;

     label9:
        $z1 = 0;

     label10:
        virtualinvoke r0.<java.nio.channels.Channels$WritableByteChannelImpl: void end(boolean)>($z1);
        throw r3;

     label11:
        i1 = i1 + i2;
        goto label0;

     label12:
        exitmonitor r2;

     label13:
        return i1;

     label14:
        $r15 := @caughtexception;

     label15:
        r4 = $r15;
        exitmonitor r2;

     label16:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label0 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.Channels$WritableByteChannelImpl r0;
        java.io.OutputStream $r1;

        r0 := @this: java.nio.channels.Channels$WritableByteChannelImpl;
        $r1 = r0.<java.nio.channels.Channels$WritableByteChannelImpl: java.io.OutputStream out>;
        virtualinvoke $r1.<java.io.OutputStream: void close()>();
        r0.<java.nio.channels.Channels$WritableByteChannelImpl: boolean open> = 0;
        return;
    }
}
