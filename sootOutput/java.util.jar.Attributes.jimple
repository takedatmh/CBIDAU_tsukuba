public class java.util.jar.Attributes extends java.lang.Object implements java.util.Map, java.lang.Cloneable
{
    protected java.util.Map map;

    public void <init>()
    {
        java.util.jar.Attributes r0;

        r0 := @this: java.util.jar.Attributes;
        specialinvoke r0.<java.util.jar.Attributes: void <init>(int)>(11);
        return;
    }

    public void <init>(int)
    {
        java.util.jar.Attributes r0;
        int i0;
        java.util.HashMap $r1;

        r0 := @this: java.util.jar.Attributes;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);
        r0.<java.util.jar.Attributes: java.util.Map map> = $r1;
        return;
    }

    public void <init>(java.util.jar.Attributes)
    {
        java.util.jar.Attributes r0, r1;
        java.util.HashMap $r2;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.util.jar.Attributes;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>(r1);
        r0.<java.util.jar.Attributes: java.util.Map map> = $r2;
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.jar.Attributes r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        return $r3;
    }

    public java.lang.String getValue(java.lang.String)
    {
        java.util.jar.Attributes r0;
        java.lang.String r1, $r4;
        java.util.jar.Attributes$Name $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.util.jar.Attributes$Name;
        specialinvoke $r2.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>(r1);
        $r3 = virtualinvoke r0.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>($r2);
        $r4 = (java.lang.String) $r3;
        return $r4;
    }

    public java.lang.String getValue(java.util.jar.Attributes$Name)
    {
        java.util.jar.Attributes r0;
        java.util.jar.Attributes$Name r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.util.jar.Attributes$Name;
        $r2 = virtualinvoke r0.<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>(r1);
        $r3 = (java.lang.String) $r2;
        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.jar.Attributes r0;
        java.lang.Object r1, r2, $r6;
        java.util.Map $r3;
        java.util.jar.Attributes$Name $r4;
        java.lang.String $r5;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $r4 = (java.util.jar.Attributes$Name) r1;
        $r5 = (java.lang.String) r2;
        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);
        return $r6;
    }

    public java.lang.String putValue(java.lang.String, java.lang.String)
    {
        java.util.jar.Attributes r0;
        java.lang.String r1, r2, $r5;
        java.util.jar.Attributes$Name $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = new java.util.jar.Attributes$Name;
        specialinvoke $r3.<java.util.jar.Attributes$Name: void <init>(java.lang.String)>(r1);
        $r4 = virtualinvoke r0.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);
        $r5 = (java.lang.String) $r4;
        return $r5;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.jar.Attributes r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        return $r3;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.jar.Attributes r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.jar.Attributes r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);
        return $z0;
    }

    public void putAll(java.util.Map)
    {
        java.util.jar.Attributes r0;
        java.util.Map r1;
        java.lang.Class $r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1;
        java.lang.ClassCastException $r5;
        java.util.Set $r6;
        java.lang.Object $r7, $r8, $r9;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.util.Map;
        $r2 = class "java/util/jar/Attributes";
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r5 = new java.lang.ClassCastException;
        specialinvoke $r5.<java.lang.ClassCastException: void <init>()>();
        throw $r5;

     label0:
        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r7;
        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r0.<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);
        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        java.util.jar.Attributes r0;
        java.util.Map $r1;

        r0 := @this: java.util.jar.Attributes;
        $r1 = r0.<java.util.jar.Attributes: java.util.Map map>;
        interfaceinvoke $r1.<java.util.Map: void clear()>();
        return;
    }

    public int size()
    {
        java.util.jar.Attributes r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.util.jar.Attributes;
        $r1 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.jar.Attributes r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: java.util.jar.Attributes;
        $r1 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();
        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.jar.Attributes r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: java.util.jar.Attributes;
        $r1 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();
        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.jar.Attributes r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.jar.Attributes;
        $r1 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();
        return $r2;
    }

    public java.util.Set entrySet()
    {
        java.util.jar.Attributes r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: java.util.jar.Attributes;
        $r1 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();
        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.jar.Attributes r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean equals(java.lang.Object)>(r1);
        return $z0;
    }

    public int hashCode()
    {
        java.util.jar.Attributes r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.util.jar.Attributes;
        $r1 = r0.<java.util.jar.Attributes: java.util.Map map>;
        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();
        return $i0;
    }

    public java.lang.Object clone()
    {
        java.util.jar.Attributes r0, $r1;

        r0 := @this: java.util.jar.Attributes;
        $r1 = new java.util.jar.Attributes;
        specialinvoke $r1.<java.util.jar.Attributes: void <init>(java.util.jar.Attributes)>(r0);
        return $r1;
    }

    void write(java.io.DataOutputStream) throws java.io.IOException
    {
        java.util.jar.Attributes r0;
        java.io.DataOutputStream r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.StringBuffer r4, $r9;
        java.lang.String r5, $r12, $r15, $r18;
        byte[] r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r10, $r14;
        java.util.jar.Attributes$Name $r11;
        int $i0;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.io.DataOutputStream;
        $r7 = virtualinvoke r0.<java.util.jar.Attributes: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r8;
        $r9 = new java.lang.StringBuffer;
        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r11 = (java.util.jar.Attributes$Name) $r10;
        $r12 = virtualinvoke $r11.<java.util.jar.Attributes$Name: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.StringBuffer: void <init>(java.lang.String)>($r12);
        r4 = $r9;
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");
        $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        r5 = (java.lang.String) $r14;
        if r5 == null goto label1;

        r6 = virtualinvoke r5.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
        $r15 = new java.lang.String;
        $i0 = lengthof r6;
        specialinvoke $r15.<java.lang.String: void <init>(byte[],int,int,int)>(r6, 0, 0, $i0);
        r5 = $r15;

     label1:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");
        staticinvoke <java.util.jar.Manifest: void make72Safe(java.lang.StringBuffer)>(r4);
        $r18 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r18);
        goto label0;

     label2:
        virtualinvoke r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>("\r\n");
        return;
    }

    void writeMain(java.io.DataOutputStream) throws java.io.IOException
    {
        java.util.jar.Attributes r0;
        java.io.DataOutputStream r1;
        java.util.jar.Attributes$Name $r2, $r11, $r21;
        java.lang.String r3, r4, r7, r9, $r17, $r25, $r28;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.lang.StringBuffer r8, $r22;
        byte[] r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;
        java.util.Set $r18;
        boolean $z0, $z1;
        java.lang.Object $r19, $r20, $r24;
        int $i0;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.io.DataOutputStream;
        $r2 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name MANIFEST_VERSION>;
        r3 = virtualinvoke $r2.<java.util.jar.Attributes$Name: java.lang.String toString()>();
        r4 = virtualinvoke r0.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>(r3);
        if r4 != null goto label0;

        $r11 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name SIGNATURE_VERSION>;
        r3 = virtualinvoke $r11.<java.util.jar.Attributes$Name: java.lang.String toString()>();
        r4 = virtualinvoke r0.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>(r3);

     label0:
        if r4 == null goto label1;

        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r17);

     label1:
        $r18 = virtualinvoke r0.<java.util.jar.Attributes: java.util.Set entrySet()>();
        r5 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.util.Map$Entry) $r19;
        $r20 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r21 = (java.util.jar.Attributes$Name) $r20;
        r7 = virtualinvoke $r21.<java.util.jar.Attributes$Name: java.lang.String toString()>();
        if r4 == null goto label4;

        $z1 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);
        if $z1 != 0 goto label4;

        $r22 = new java.lang.StringBuffer;
        specialinvoke $r22.<java.lang.StringBuffer: void <init>(java.lang.String)>(r7);
        r8 = $r22;
        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");
        $r24 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();
        r9 = (java.lang.String) $r24;
        if r9 == null goto label3;

        r10 = virtualinvoke r9.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
        $r25 = new java.lang.String;
        $i0 = lengthof r10;
        specialinvoke $r25.<java.lang.String: void <init>(byte[],int,int,int)>(r10, 0, 0, $i0);
        r9 = $r25;

     label3:
        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);
        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");
        staticinvoke <java.util.jar.Manifest: void make72Safe(java.lang.StringBuffer)>(r8);
        $r28 = virtualinvoke r8.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r28);

     label4:
        goto label2;

     label5:
        virtualinvoke r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>("\r\n");
        return;
    }

    void read(java.util.jar.Manifest$FastInputStream, byte[]) throws java.io.IOException
    {
        java.util.jar.Attributes r0;
        java.util.jar.Manifest$FastInputStream r1;
        byte[] r2, r4, r5;
        java.lang.String r3, $r8, r9, $r12, $r13, $r14, $r26, $r33;
        null_type n0;
        int i0, i1, $i2, i3, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, i18, $i20, $i22, $i23, $i24;
        boolean z0;
        byte $b4, $b6, $b7, $b14, $b17, $b19, $b21;
        java.io.IOException $r6, $r7, $r10, $r11, $r29;
        sun.util.logging.PlatformLogger $r15;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r30, $r31, $r32;
        java.lang.IllegalArgumentException $r27, r28;

        r0 := @this: java.util.jar.Attributes;
        r1 := @parameter0: java.util.jar.Manifest$FastInputStream;
        r2 := @parameter1: byte[];
        r3 = null;
        n0 = null;
        r4 = null;

     label0:
        $i2 = virtualinvoke r1.<java.util.jar.Manifest$FastInputStream: int readLine(byte[])>(r2);
        i0 = $i2;
        if $i2 == -1 goto label14;

        z0 = 0;
        i3 = i0 + -1;
        $b4 = r2[i3];
        if $b4 == 10 goto label1;

        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("line too long");
        throw $r6;

     label1:
        if i3 <= 0 goto label2;

        $i5 = i3 - 1;
        $b6 = r2[$i5];
        if $b6 != 13 goto label2;

        i3 = i3 + -1;

     label2:
        if i3 != 0 goto label3;

        goto label14;

     label3:
        i1 = 0;
        $b7 = r2[0];
        if $b7 != 32 goto label6;

        if r3 != null goto label4;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("misplaced continuation line");
        throw $r7;

     label4:
        z0 = 1;
        $i8 = lengthof r4;
        $i9 = $i8 + i3;
        $i10 = $i9 - 1;
        r5 = newarray (byte)[$i10];
        $i11 = lengthof r4;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i11);
        $i12 = lengthof r4;
        $i13 = i3 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, r5, $i12, $i13);
        $b14 = virtualinvoke r1.<java.util.jar.Manifest$FastInputStream: byte peek()>();
        if $b14 != 32 goto label5;

        r4 = r5;
        goto label0;

     label5:
        $r8 = new java.lang.String;
        $i15 = lengthof r5;
        specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r5, 0, $i15, "UTF8");
        r9 = $r8;
        r4 = null;
        goto label10;

     label6:
        $i16 = i1;
        i1 = i1 + 1;
        $b17 = r2[$i16];
        if $b17 == 58 goto label7;

        if i1 < i3 goto label6;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("invalid header field");
        throw $r10;

     label7:
        i18 = i1 + 1;
        $b19 = r2[i1];
        if $b19 == 32 goto label8;

        $r11 = new java.io.IOException;
        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("invalid header field");
        throw $r11;

     label8:
        $r12 = new java.lang.String;
        $i20 = i18 - 2;
        specialinvoke $r12.<java.lang.String: void <init>(byte[],int,int,int)>(r2, 0, 0, $i20);
        r3 = $r12;
        $b21 = virtualinvoke r1.<java.util.jar.Manifest$FastInputStream: byte peek()>();
        if $b21 != 32 goto label9;

        $i22 = i3 - i18;
        r4 = newarray (byte)[$i22];
        $i23 = i3 - i18;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i18, r4, 0, $i23);
        goto label0;

     label9:
        $r13 = new java.lang.String;
        $i24 = i3 - i18;
        specialinvoke $r13.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r2, i18, $i24, "UTF8");
        r9 = $r13;

     label10:
        $r14 = virtualinvoke r0.<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>(r3, r9);
        if $r14 == null goto label11;

        if z0 != 0 goto label11;

        $r15 = staticinvoke <sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>("java.util.jar");
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate name in Manifest: ");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ensure that the manifest does not ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("have duplicate entries, and\n");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("that blank lines separate ");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("individual sections in both your\n");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("manifest and in the META-INF/MANIFEST.MF ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entry in the jar file.");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r15.<sun.util.logging.PlatformLogger: void warning(java.lang.String)>($r26);

     label11:
        goto label13;

     label12:
        $r27 := @caughtexception;
        r28 = $r27;
        $r29 = new java.io.IOException;
        $r30 = new java.lang.StringBuilder;
        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid header field name: ");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r29.<java.io.IOException: void <init>(java.lang.String)>($r33);
        throw $r29;

     label13:
        goto label0;

     label14:
        return;

        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
    }
}
