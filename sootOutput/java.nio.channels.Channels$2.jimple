final class java.nio.channels.Channels$2 extends java.io.InputStream
{
    private java.nio.ByteBuffer bb;
    private byte[] bs;
    private byte[] b1;
    final java.nio.channels.AsynchronousByteChannel val$ch;

    void <init>(java.nio.channels.AsynchronousByteChannel)
    {
        java.nio.channels.Channels$2 r0;
        java.nio.channels.AsynchronousByteChannel r1;

        r0 := @this: java.nio.channels.Channels$2;
        r1 := @parameter0: java.nio.channels.AsynchronousByteChannel;
        r0.<java.nio.channels.Channels$2: java.nio.channels.AsynchronousByteChannel val$ch> = r1;
        specialinvoke r0.<java.io.InputStream: void <init>()>();
        r0.<java.nio.channels.Channels$2: java.nio.ByteBuffer bb> = null;
        r0.<java.nio.channels.Channels$2: byte[] bs> = null;
        r0.<java.nio.channels.Channels$2: byte[] b1> = null;
        return;
    }

    public synchronized int read() throws java.io.IOException
    {
        java.nio.channels.Channels$2 r0;
        int i0;
        byte[] $r1, $r2, $r3, $r4;
        byte $b1;
        short $s2;

        r0 := @this: java.nio.channels.Channels$2;
        $r1 = r0.<java.nio.channels.Channels$2: byte[] b1>;
        if $r1 != null goto label0;

        $r2 = newarray (byte)[1];
        r0.<java.nio.channels.Channels$2: byte[] b1> = $r2;

     label0:
        $r3 = r0.<java.nio.channels.Channels$2: byte[] b1>;
        i0 = virtualinvoke r0.<java.nio.channels.Channels$2: int read(byte[])>($r3);
        if i0 != 1 goto label1;

        $r4 = r0.<java.nio.channels.Channels$2: byte[] b1>;
        $b1 = $r4[0];
        $s2 = $b1 & 255;
        return $s2;

     label1:
        return -1;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        java.nio.channels.Channels$2 r0;
        byte[] r1, $r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.nio.ByteBuffer r2, $r6;
        boolean z0;
        java.lang.Throwable r3, $r17, $r20;
        java.lang.IndexOutOfBoundsException $r4;
        java.nio.channels.AsynchronousByteChannel $r9;
        java.util.concurrent.Future $r10;
        java.lang.Object $r11;
        java.lang.Integer $r12;
        java.lang.Thread $r13, $r21;
        java.util.concurrent.ExecutionException $r14, r15;
        java.io.IOException $r16;
        java.lang.InterruptedException $r18, r19;

        r0 := @this: java.nio.channels.Channels$2;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        $i3 = lengthof r1;
        if i0 > $i3 goto label0;

        if i1 < 0 goto label0;

        $i4 = i0 + i1;
        $i5 = lengthof r1;
        if $i4 > $i5 goto label0;

        $i6 = i0 + i1;
        if $i6 >= 0 goto label1;

     label0:
        $r4 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r4;

     label1:
        if i1 != 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<java.nio.channels.Channels$2: byte[] bs>;
        if $r5 != r1 goto label3;

        $r6 = r0.<java.nio.channels.Channels$2: java.nio.ByteBuffer bb>;
        goto label4;

     label3:
        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

     label4:
        r2 = $r6;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);
        $i7 = i0 + i1;
        $i8 = virtualinvoke r2.<java.nio.ByteBuffer: int capacity()>();
        $i9 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i8);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i9);
        r0.<java.nio.channels.Channels$2: java.nio.ByteBuffer bb> = r2;
        r0.<java.nio.channels.Channels$2: byte[] bs> = r1;
        z0 = 0;

     label5:
        $r9 = r0.<java.nio.channels.Channels$2: java.nio.channels.AsynchronousByteChannel val$ch>;
        $r10 = interfaceinvoke $r9.<java.nio.channels.AsynchronousByteChannel: java.util.concurrent.Future read(java.nio.ByteBuffer)>(r2);
        $r11 = interfaceinvoke $r10.<java.util.concurrent.Future: java.lang.Object get()>();
        $r12 = (java.lang.Integer) $r11;
        i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

     label6:
        if z0 == 0 goto label7;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

     label7:
        return i2;

     label8:
        $r14 := @caughtexception;

     label9:
        r15 = $r14;
        $r16 = new java.io.IOException;
        $r17 = virtualinvoke r15.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.Throwable)>($r17);
        throw $r16;

     label10:
        $r18 := @caughtexception;
        r19 = $r18;
        z0 = 1;
        goto label5;

     label11:
        $r20 := @caughtexception;
        r3 = $r20;

     label12:
        if z0 == 0 goto label13;

        $r21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r21.<java.lang.Thread: void interrupt()>();

     label13:
        throw r3;

        catch java.util.concurrent.ExecutionException from label5 to label6 with label8;
        catch java.lang.InterruptedException from label5 to label6 with label10;
        catch java.lang.Throwable from label5 to label6 with label11;
        catch java.lang.Throwable from label9 to label12 with label11;
    }

    public void close() throws java.io.IOException
    {
        java.nio.channels.Channels$2 r0;
        java.nio.channels.AsynchronousByteChannel $r1;

        r0 := @this: java.nio.channels.Channels$2;
        $r1 = r0.<java.nio.channels.Channels$2: java.nio.channels.AsynchronousByteChannel val$ch>;
        interfaceinvoke $r1.<java.nio.channels.AsynchronousByteChannel: void close()>();
        return;
    }
}
