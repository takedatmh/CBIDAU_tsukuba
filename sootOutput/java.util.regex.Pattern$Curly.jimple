final class java.util.regex.Pattern$Curly extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node atom;
    int type;
    int cmin;
    int cmax;

    void <init>(java.util.regex.Pattern$Node, int, int, int)
    {
        java.util.regex.Pattern$Curly r0;
        java.util.regex.Pattern$Node r1;
        int i0, i1, i2;

        r0 := @this: java.util.regex.Pattern$Curly;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node atom> = r1;
        r0.<java.util.regex.Pattern$Curly: int type> = i2;
        r0.<java.util.regex.Pattern$Curly: int cmin> = i0;
        r0.<java.util.regex.Pattern$Curly: int cmax> = i1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Curly r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.regex.Pattern$Curly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        i1 = 0;

     label0:
        $i2 = r0.<java.util.regex.Pattern$Curly: int cmin>;
        if i1 >= $i2 goto label3;

        $r3 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node atom>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label1;

        i0 = r1.<java.util.regex.Matcher: int last>;
        goto label2;

     label1:
        return 0;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        $i3 = r0.<java.util.regex.Pattern$Curly: int type>;
        if $i3 != 0 goto label4;

        $z1 = virtualinvoke r0.<java.util.regex.Pattern$Curly: boolean match0(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, i0, i1, r2);
        return $z1;

     label4:
        $i4 = r0.<java.util.regex.Pattern$Curly: int type>;
        if $i4 != 1 goto label5;

        $z2 = virtualinvoke r0.<java.util.regex.Pattern$Curly: boolean match1(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, i0, i1, r2);
        return $z2;

     label5:
        $z3 = virtualinvoke r0.<java.util.regex.Pattern$Curly: boolean match2(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, i0, i1, r2);
        return $z3;
    }

    boolean match0(java.util.regex.Matcher, int, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Curly r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: java.util.regex.Pattern$Curly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.CharSequence;
        $i4 = r0.<java.util.regex.Pattern$Curly: int cmax>;
        if i1 < $i4 goto label0;

        $r3 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z0;

     label0:
        i2 = i1;
        $r4 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node atom>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 == 0 goto label8;

        $i5 = r1.<java.util.regex.Matcher: int last>;
        i3 = $i5 - i0;
        if i3 != 0 goto label1;

        goto label8;

     label1:
        i6 = r1.<java.util.regex.Matcher: int last>;
        i7 = i1 + 1;

     label2:
        $i8 = r0.<java.util.regex.Pattern$Curly: int cmax>;
        if i7 >= $i8 goto label5;

        $r5 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node atom>;
        $z2 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i6, r2);
        if $z2 != 0 goto label3;

        goto label5;

     label3:
        $i9 = i6 + i3;
        $i10 = r1.<java.util.regex.Matcher: int last>;
        if $i9 == $i10 goto label4;

        $i11 = r1.<java.util.regex.Matcher: int last>;
        $i12 = i7 + 1;
        $z3 = virtualinvoke r0.<java.util.regex.Pattern$Curly: boolean match0(java.util.regex.Matcher,int,int,java.lang.CharSequence)>(r1, $i11, $i12, r2);
        if $z3 == 0 goto label5;

        return 1;

     label4:
        i6 = i6 + i3;
        i7 = i7 + 1;
        goto label2;

     label5:
        if i7 < i2 goto label7;

        $r6 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node next>;
        $z4 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i6, r2);
        if $z4 == 0 goto label6;

        return 1;

     label6:
        i6 = i6 - i3;
        i7 = i7 + -1;
        goto label5;

     label7:
        return 0;

     label8:
        $r7 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node next>;
        $z5 = virtualinvoke $r7.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z5;
    }

    boolean match1(java.util.regex.Matcher, int, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Curly r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Pattern$Curly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.CharSequence;

     label0:
        $r3 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i2 = r0.<java.util.regex.Pattern$Curly: int cmax>;
        if i1 < $i2 goto label2;

        return 0;

     label2:
        $r4 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node atom>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i3 = r1.<java.util.regex.Matcher: int last>;
        if i0 != $i3 goto label4;

        return 0;

     label4:
        i0 = r1.<java.util.regex.Matcher: int last>;
        i1 = i1 + 1;
        goto label0;
    }

    boolean match2(java.util.regex.Matcher, int, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Curly r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Pattern$Curly;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.CharSequence;

     label0:
        $i2 = r0.<java.util.regex.Pattern$Curly: int cmax>;
        if i1 >= $i2 goto label3;

        $r3 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node atom>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $i3 = r1.<java.util.regex.Matcher: int last>;
        if i0 != $i3 goto label2;

        goto label3;

     label2:
        i0 = r1.<java.util.regex.Matcher: int last>;
        i1 = i1 + 1;
        goto label0;

     label3:
        $r4 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node next>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z1;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Curly r0;
        java.util.regex.Pattern$TreeInfo r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11;
        boolean z0, z1, $z3, $z4, $z5, $z6;
        java.util.regex.Pattern$Node $r2, $r3;

        r0 := @this: java.util.regex.Pattern$Curly;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        i1 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        z0 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        z1 = r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic>;
        virtualinvoke r1.<java.util.regex.Pattern$TreeInfo: void reset()>();
        $r2 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node atom>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        $i3 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $i4 = r0.<java.util.regex.Pattern$Curly: int cmin>;
        $i5 = $i3 * $i4;
        i2 = $i5 + i0;
        if i2 >= i0 goto label0;

        i2 = 268435455;

     label0:
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = i2;
        $z3 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        $z4 = z0 & $z3;
        if $z4 == 0 goto label1;

        $i6 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        $i7 = r0.<java.util.regex.Pattern$Curly: int cmax>;
        $i8 = $i6 * $i7;
        i9 = $i8 + i1;
        r1.<java.util.regex.Pattern$TreeInfo: int maxLength> = i9;
        if i9 >= i1 goto label2;

        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        goto label2;

     label1:
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;

     label2:
        $z5 = r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic>;
        if $z5 == 0 goto label3;

        $i10 = r0.<java.util.regex.Pattern$Curly: int cmin>;
        $i11 = r0.<java.util.regex.Pattern$Curly: int cmax>;
        if $i10 != $i11 goto label3;

        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = z1;
        goto label4;

     label3:
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;

     label4:
        $r3 = r0.<java.util.regex.Pattern$Curly: java.util.regex.Pattern$Node next>;
        $z6 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z6;
    }
}
