public class java.util.Hashtable extends java.util.Dictionary implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
    private transient java.util.Hashtable$Entry[] table;
    private transient int count;
    private int threshold;
    private float loadFactor;
    private transient int modCount;
    private static final long serialVersionUID;
    static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;
    transient int hashSeed;
    private static final int MAX_ARRAY_SIZE;
    private transient volatile java.util.Set keySet;
    private transient volatile java.util.Set entrySet;
    private transient volatile java.util.Collection values;
    private static final int KEYS;
    private static final int VALUES;
    private static final int ENTRIES;

    final boolean initHashSeedAsNeeded(int)
    {
        java.util.Hashtable r0;
        int i0, $i1, $i2, $i3;
        boolean z0, z1, z2, $z3, $z4, $z5;

        r0 := @this: java.util.Hashtable;
        i0 := @parameter0: int;
        $i2 = r0.<java.util.Hashtable: int hashSeed>;
        if $i2 == 0 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        z0 = $z3;
        $z4 = staticinvoke <sun.misc.VM: boolean isBooted()>();
        if $z4 == 0 goto label2;

        $i1 = <java.util.Hashtable$Holder: int ALTERNATIVE_HASHING_THRESHOLD>;
        if i0 < $i1 goto label2;

        $z5 = 1;
        goto label3;

     label2:
        $z5 = 0;

     label3:
        z1 = $z5;
        z2 = z0 ^ z1;
        if z2 == 0 goto label6;

        if z1 == 0 goto label4;

        $i3 = staticinvoke <sun.misc.Hashing: int randomHashSeed(java.lang.Object)>(r0);
        goto label5;

     label4:
        $i3 = 0;

     label5:
        r0.<java.util.Hashtable: int hashSeed> = $i3;

     label6:
        return z2;
    }

    private int hash(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        $i0 = r0.<java.util.Hashtable: int hashSeed>;
        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();
        $i2 = $i0 ^ $i1;
        return $i2;
    }

    public void <init>(int, float)
    {
        java.util.Hashtable r0;
        int i0, $i2;
        float f0, $f1, $f2, $f3;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r2, $r6;
        java.lang.String $r5, $r10;
        byte $b1;
        boolean $z0;
        java.util.Hashtable$Entry[] $r11;

        r0 := @this: java.util.Hashtable;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.util.Dictionary: void <init>()>();
        r0.<java.util.Hashtable: int modCount> = 0;
        r0.<java.util.Hashtable: java.util.Set keySet> = null;
        r0.<java.util.Hashtable: java.util.Set entrySet> = null;
        r0.<java.util.Hashtable: java.util.Collection values> = null;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Capacity: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        $b1 = f0 cmpg 0.0F;
        if $b1 <= 0 goto label1;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);
        if $z0 == 0 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Load: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label2:
        if i0 != 0 goto label3;

        i0 = 1;

     label3:
        r0.<java.util.Hashtable: float loadFactor> = f0;
        $r11 = newarray (java.util.Hashtable$Entry)[i0];
        r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table> = $r11;
        $f1 = (float) i0;
        $f2 = $f1 * f0;
        $f3 = staticinvoke <java.lang.Math: float min(float,float)>($f2, 2.14748365E9F);
        $i2 = (int) $f3;
        r0.<java.util.Hashtable: int threshold> = $i2;
        virtualinvoke r0.<java.util.Hashtable: boolean initHashSeedAsNeeded(int)>(i0);
        return;
    }

    public void <init>(int)
    {
        java.util.Hashtable r0;
        int i0;

        r0 := @this: java.util.Hashtable;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.Hashtable: void <init>(int,float)>(i0, 0.75F);
        return;
    }

    public void <init>()
    {
        java.util.Hashtable r0;

        r0 := @this: java.util.Hashtable;
        specialinvoke r0.<java.util.Hashtable: void <init>(int,float)>(11, 0.75F);
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.Hashtable r0;
        java.util.Map r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.util.Map;
        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        $i1 = 2 * $i0;
        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 11);
        specialinvoke r0.<java.util.Hashtable: void <init>(int,float)>($i2, 0.75F);
        virtualinvoke r0.<java.util.Hashtable: void putAll(java.util.Map)>(r1);
        return;
    }

    public synchronized int size()
    {
        java.util.Hashtable r0;
        int $i0;

        r0 := @this: java.util.Hashtable;
        $i0 = r0.<java.util.Hashtable: int count>;
        return $i0;
    }

    public synchronized boolean isEmpty()
    {
        java.util.Hashtable r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        $i0 = r0.<java.util.Hashtable: int count>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public synchronized java.util.Enumeration keys()
    {
        java.util.Hashtable r0;
        java.util.Enumeration $r1;

        r0 := @this: java.util.Hashtable;
        $r1 = specialinvoke r0.<java.util.Hashtable: java.util.Enumeration getEnumeration(int)>(0);
        return $r1;
    }

    public synchronized java.util.Enumeration elements()
    {
        java.util.Hashtable r0;
        java.util.Enumeration $r1;

        r0 := @this: java.util.Hashtable;
        $r1 = specialinvoke r0.<java.util.Hashtable: java.util.Enumeration getEnumeration(int)>(1);
        return $r1;
    }

    public synchronized boolean contains(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, $r5;
        java.util.Hashtable$Entry[] r2;
        int i0, $i1;
        java.util.Hashtable$Entry r3;
        java.lang.NullPointerException $r4;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        r2 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = lengthof r2;

     label1:
        $i1 = i0;
        i0 = i0 + -1;
        if $i1 <= 0 goto label5;

        r3 = r2[i0];

     label2:
        if r3 == null goto label4;

        $r5 = r3.<java.util.Hashtable$Entry: java.lang.Object value>;
        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label3;

        return 1;

     label3:
        r3 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label2;

     label4:
        goto label1;

     label5:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.Hashtable: boolean contains(java.lang.Object)>(r1);
        return $z0;
    }

    public synchronized boolean containsKey(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, $r4;
        java.util.Hashtable$Entry[] r2;
        int i0, i1, $i2, $i3, $i4;
        java.util.Hashtable$Entry r3;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>(r1);
        $i2 = i0 & 2147483647;
        $i3 = lengthof r2;
        i1 = $i2 % $i3;
        r3 = r2[i1];

     label0:
        if r3 == null goto label2;

        $i4 = r3.<java.util.Hashtable$Entry: int hash>;
        if $i4 != i0 goto label1;

        $r4 = r3.<java.util.Hashtable$Entry: java.lang.Object key>;
        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        r3 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label0;

     label2:
        return 0;
    }

    public synchronized java.lang.Object get(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Hashtable$Entry[] r2;
        int i0, i1, $i2, $i3, $i4;
        java.util.Hashtable$Entry r3;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>(r1);
        $i2 = i0 & 2147483647;
        $i3 = lengthof r2;
        i1 = $i2 % $i3;
        r3 = r2[i1];

     label0:
        if r3 == null goto label2;

        $i4 = r3.<java.util.Hashtable$Entry: int hash>;
        if $i4 != i0 goto label1;

        $r4 = r3.<java.util.Hashtable$Entry: java.lang.Object key>;
        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

        $r5 = r3.<java.util.Hashtable$Entry: java.lang.Object value>;
        return $r5;

     label1:
        r3 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label0;

     label2:
        return null;
    }

    protected void rehash()
    {
        java.util.Hashtable r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.Hashtable$Entry[] r1, r2, $r5;
        boolean z0;
        java.util.Hashtable$Entry r3, r4, $r8;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r7;

        r0 := @this: java.util.Hashtable;
        $r5 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = lengthof $r5;
        r1 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $i4 = i0 << 1;
        i1 = $i4 + 1;
        $i5 = i1 - 2147483639;
        if $i5 <= 0 goto label1;

        if i0 != 2147483639 goto label0;

        return;

     label0:
        i1 = 2147483639;

     label1:
        r2 = newarray (java.util.Hashtable$Entry)[i1];
        $i6 = r0.<java.util.Hashtable: int modCount>;
        $i7 = $i6 + 1;
        r0.<java.util.Hashtable: int modCount> = $i7;
        $f0 = (float) i1;
        $f1 = r0.<java.util.Hashtable: float loadFactor>;
        $f2 = $f0 * $f1;
        $f3 = staticinvoke <java.lang.Math: float min(float,float)>($f2, 2.14748365E9F);
        $i8 = (int) $f3;
        r0.<java.util.Hashtable: int threshold> = $i8;
        z0 = virtualinvoke r0.<java.util.Hashtable: boolean initHashSeedAsNeeded(int)>(i1);
        r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table> = r2;
        i2 = i0;

     label2:
        $i9 = i2;
        i2 = i2 + -1;
        if $i9 <= 0 goto label6;

        r3 = r1[i2];

     label3:
        if r3 == null goto label5;

        r4 = r3;
        r3 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        if z0 == 0 goto label4;

        $r7 = r4.<java.util.Hashtable$Entry: java.lang.Object key>;
        $i10 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>($r7);
        r4.<java.util.Hashtable$Entry: int hash> = $i10;

     label4:
        $i11 = r4.<java.util.Hashtable$Entry: int hash>;
        $i12 = $i11 & 2147483647;
        i3 = $i12 % i1;
        $r8 = r2[i3];
        r4.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next> = $r8;
        r2[i3] = r4;
        goto label3;

     label5:
        goto label2;

     label6:
        return;
    }

    public synchronized java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r2, r5, $r7;
        java.util.Hashtable$Entry[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.Hashtable$Entry r4, r9, $r10;
        java.lang.NullPointerException $r6;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r2 != null goto label0;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label0:
        r3 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>(r1);
        $i2 = i0 & 2147483647;
        $i3 = lengthof r3;
        i1 = $i2 % $i3;
        r4 = r3[i1];

     label1:
        if r4 == null goto label3;

        $i4 = r4.<java.util.Hashtable$Entry: int hash>;
        if $i4 != i0 goto label2;

        $r7 = r4.<java.util.Hashtable$Entry: java.lang.Object key>;
        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label2;

        r5 = r4.<java.util.Hashtable$Entry: java.lang.Object value>;
        r4.<java.util.Hashtable$Entry: java.lang.Object value> = r2;
        return r5;

     label2:
        r4 = r4.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label1;

     label3:
        $i5 = r0.<java.util.Hashtable: int modCount>;
        $i6 = $i5 + 1;
        r0.<java.util.Hashtable: int modCount> = $i6;
        $i7 = r0.<java.util.Hashtable: int count>;
        $i8 = r0.<java.util.Hashtable: int threshold>;
        if $i7 < $i8 goto label4;

        virtualinvoke r0.<java.util.Hashtable: void rehash()>();
        r3 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>(r1);
        $i9 = i0 & 2147483647;
        $i10 = lengthof r3;
        i1 = $i9 % $i10;

     label4:
        r9 = r3[i1];
        $r10 = new java.util.Hashtable$Entry;
        specialinvoke $r10.<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>(i0, r1, r2, r9);
        r3[i1] = $r10;
        $i11 = r0.<java.util.Hashtable: int count>;
        $i12 = $i11 + 1;
        r0.<java.util.Hashtable: int count> = $i12;
        return null;
    }

    public synchronized java.lang.Object remove(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r5, $r6;
        java.util.Hashtable$Entry[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Hashtable$Entry r3, r4, $r8, $r9;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>(r1);
        $i2 = i0 & 2147483647;
        $i3 = lengthof r2;
        i1 = $i2 % $i3;
        r3 = r2[i1];
        r4 = null;

     label0:
        if r3 == null goto label4;

        $i4 = r3.<java.util.Hashtable$Entry: int hash>;
        if $i4 != i0 goto label3;

        $r6 = r3.<java.util.Hashtable$Entry: java.lang.Object key>;
        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label3;

        $i5 = r0.<java.util.Hashtable: int modCount>;
        $i6 = $i5 + 1;
        r0.<java.util.Hashtable: int modCount> = $i6;
        if r4 == null goto label1;

        $r8 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        r4.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next> = $r8;
        goto label2;

     label1:
        $r9 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        r2[i1] = $r9;

     label2:
        $i7 = r0.<java.util.Hashtable: int count>;
        $i8 = $i7 - 1;
        r0.<java.util.Hashtable: int count> = $i8;
        r5 = r3.<java.util.Hashtable$Entry: java.lang.Object value>;
        r3.<java.util.Hashtable$Entry: java.lang.Object value> = null;
        return r5;

     label3:
        r4 = r3;
        r3 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label0;

     label4:
        return null;
    }

    public synchronized void putAll(java.util.Map)
    {
        java.util.Hashtable r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.util.Map;
        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);
        goto label0;

     label1:
        return;
    }

    public synchronized void clear()
    {
        java.util.Hashtable r0;
        java.util.Hashtable$Entry[] r1;
        int i0, $i1, $i2;

        r0 := @this: java.util.Hashtable;
        r1 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $i1 = r0.<java.util.Hashtable: int modCount>;
        $i2 = $i1 + 1;
        r0.<java.util.Hashtable: int modCount> = $i2;
        i0 = lengthof r1;

     label0:
        i0 = i0 + -1;
        if i0 < 0 goto label1;

        r1[i0] = null;
        goto label0;

     label1:
        r0.<java.util.Hashtable: int count> = 0;
        return;
    }

    public synchronized java.lang.Object clone()
    {
        java.util.Hashtable r0, r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r11;
        java.util.Hashtable$Entry[] $r3, $r4, $r5, $r6, $r7, $r9;
        java.util.Hashtable$Entry $r8, $r10, $r12;
        java.lang.CloneNotSupportedException $r14, r15;
        java.lang.InternalError $r16;

        r0 := @this: java.util.Hashtable;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.util.Hashtable) $r2;
        $r3 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $i1 = lengthof $r3;
        $r4 = newarray (java.util.Hashtable$Entry)[$i1];
        r1.<java.util.Hashtable: java.util.Hashtable$Entry[] table> = $r4;
        $r5 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        i0 = lengthof $r5;

     label1:
        $i2 = i0;
        i0 = i0 + -1;
        if $i2 <= 0 goto label4;

        $r6 = r1.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $i3 = i0;
        $r7 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $r8 = $r7[i0];
        if $r8 == null goto label2;

        $r9 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $r10 = $r9[i0];
        $r11 = virtualinvoke $r10.<java.util.Hashtable$Entry: java.lang.Object clone()>();
        $r12 = (java.util.Hashtable$Entry) $r11;
        goto label3;

     label2:
        $r12 = null;

     label3:
        $r6[$i3] = $r12;
        goto label1;

     label4:
        r1.<java.util.Hashtable: java.util.Set keySet> = null;
        r1.<java.util.Hashtable: java.util.Set entrySet> = null;
        r1.<java.util.Hashtable: java.util.Collection values> = null;
        r1.<java.util.Hashtable: int modCount> = 0;

     label5:
        return r1;

     label6:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.lang.InternalError;
        specialinvoke $r16.<java.lang.InternalError: void <init>()>();
        throw $r16;

        catch java.lang.CloneNotSupportedException from label0 to label5 with label6;
    }

    public synchronized java.lang.String toString()
    {
        java.util.Hashtable r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r6, $r17;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object r4, r5, $r9;
        java.util.Set $r7;
        java.lang.String $r11, $r15, $r18;

        r0 := @this: java.util.Hashtable;
        $i2 = virtualinvoke r0.<java.util.Hashtable: int size()>();
        i0 = $i2 - 1;
        if i0 != -1 goto label0;

        return "{}";

     label0:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        r1 = $r6;
        $r7 = virtualinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);
        i1 = 0;

     label1:
        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r9;
        r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        if r4 != r0 goto label2;

        $r11 = "(this Map)";
        goto label3;

     label2:
        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
        if r5 != r0 goto label4;

        $r15 = "(this Map)";
        goto label5;

     label4:
        $r15 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        if i1 != i0 goto label6;

        $r17 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r18;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label1;
    }

    private java.util.Enumeration getEnumeration(int)
    {
        java.util.Hashtable r0;
        int i0, $i1;
        java.util.Enumeration $r1;
        java.util.Hashtable$Enumerator $r2;

        r0 := @this: java.util.Hashtable;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.Hashtable: int count>;
        if $i1 != 0 goto label0;

        $r1 = staticinvoke <java.util.Collections: java.util.Enumeration emptyEnumeration()>();
        return $r1;

     label0:
        $r2 = new java.util.Hashtable$Enumerator;
        specialinvoke $r2.<java.util.Hashtable$Enumerator: void <init>(java.util.Hashtable,int,boolean)>(r0, i0, 0);
        return $r2;
    }

    private java.util.Iterator getIterator(int)
    {
        java.util.Hashtable r0;
        int i0, $i1;
        java.util.Iterator $r1;
        java.util.Hashtable$Enumerator $r2;

        r0 := @this: java.util.Hashtable;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.Hashtable: int count>;
        if $i1 != 0 goto label0;

        $r1 = staticinvoke <java.util.Collections: java.util.Iterator emptyIterator()>();
        return $r1;

     label0:
        $r2 = new java.util.Hashtable$Enumerator;
        specialinvoke $r2.<java.util.Hashtable$Enumerator: void <init>(java.util.Hashtable,int,boolean)>(r0, i0, 1);
        return $r2;
    }

    public java.util.Set keySet()
    {
        java.util.Hashtable r0;
        java.util.Hashtable$KeySet $r1;
        java.util.Set $r2, $r3, $r4;

        r0 := @this: java.util.Hashtable;
        $r2 = r0.<java.util.Hashtable: java.util.Set keySet>;
        if $r2 != null goto label0;

        $r1 = new java.util.Hashtable$KeySet;
        specialinvoke $r1.<java.util.Hashtable$KeySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);
        $r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set,java.lang.Object)>($r1, r0);
        r0.<java.util.Hashtable: java.util.Set keySet> = $r3;

     label0:
        $r4 = r0.<java.util.Hashtable: java.util.Set keySet>;
        return $r4;
    }

    public java.util.Set entrySet()
    {
        java.util.Hashtable r0;
        java.util.Hashtable$EntrySet $r1;
        java.util.Set $r2, $r3, $r4;

        r0 := @this: java.util.Hashtable;
        $r2 = r0.<java.util.Hashtable: java.util.Set entrySet>;
        if $r2 != null goto label0;

        $r1 = new java.util.Hashtable$EntrySet;
        specialinvoke $r1.<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);
        $r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set,java.lang.Object)>($r1, r0);
        r0.<java.util.Hashtable: java.util.Set entrySet> = $r3;

     label0:
        $r4 = r0.<java.util.Hashtable: java.util.Set entrySet>;
        return $r4;
    }

    public java.util.Collection values()
    {
        java.util.Hashtable r0;
        java.util.Hashtable$ValueCollection $r1;
        java.util.Collection $r2, $r3, $r4;

        r0 := @this: java.util.Hashtable;
        $r2 = r0.<java.util.Hashtable: java.util.Collection values>;
        if $r2 != null goto label0;

        $r1 = new java.util.Hashtable$ValueCollection;
        specialinvoke $r1.<java.util.Hashtable$ValueCollection: void <init>(java.util.Hashtable,java.util.Hashtable$1)>(r0, null);
        $r3 = staticinvoke <java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection,java.lang.Object)>($r1, r0);
        r0.<java.util.Hashtable: java.util.Collection values> = $r3;

     label0:
        $r4 = r0.<java.util.Hashtable: java.util.Collection values>;
        return $r4;
    }

    public synchronized boolean equals(java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1, r5, r6, $r8, $r9, $r10;
        java.util.Map r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        java.util.Set $r7;
        java.lang.ClassCastException $r11, r12;
        java.lang.NullPointerException $r13, r14;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.Map;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map) r1;
        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();
        $i1 = virtualinvoke r0.<java.util.Hashtable: int size()>();
        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r7 = virtualinvoke r0.<java.util.Hashtable: java.util.Set entrySet()>();
        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label9;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r8;
        r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();
        r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();
        if r6 != null goto label6;

        $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        if $r9 != null goto label4;

        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);
        if $z2 != 0 goto label8;

     label4:
        $z3 = 0;

     label5:
        return $z3;

     label6:
        $r10 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        $z4 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r10);
        if $z4 != 0 goto label8;

        $z5 = 0;

     label7:
        return $z5;

     label8:
        goto label3;

     label9:
        goto label12;

     label10:
        $r11 := @caughtexception;
        r12 = $r11;
        return 0;

     label11:
        $r13 := @caughtexception;
        r14 = $r13;
        return 0;

     label12:
        return 1;

        catch java.lang.ClassCastException from label2 to label5 with label10;
        catch java.lang.ClassCastException from label6 to label7 with label10;
        catch java.lang.ClassCastException from label8 to label9 with label10;
        catch java.lang.NullPointerException from label2 to label5 with label11;
        catch java.lang.NullPointerException from label6 to label7 with label11;
        catch java.lang.NullPointerException from label8 to label9 with label11;
    }

    public synchronized int hashCode()
    {
        java.util.Hashtable r0;
        int i0, i1, i2, $i3, $i5;
        java.util.Hashtable$Entry[] r1, r2;
        java.util.Hashtable$Entry r3;
        float $f0, $f1, $f2, $f3, $f4;
        byte $b4;

        r0 := @this: java.util.Hashtable;
        i0 = 0;
        $i3 = r0.<java.util.Hashtable: int count>;
        if $i3 == 0 goto label0;

        $f0 = r0.<java.util.Hashtable: float loadFactor>;
        $b4 = $f0 cmpg 0.0F;
        if $b4 >= 0 goto label1;

     label0:
        return i0;

     label1:
        $f1 = r0.<java.util.Hashtable: float loadFactor>;
        $f2 = neg $f1;
        r0.<java.util.Hashtable: float loadFactor> = $f2;
        r1 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        r2 = r1;
        i1 = lengthof r2;
        i2 = 0;

     label2:
        if i2 >= i1 goto label5;

        r3 = r2[i2];

     label3:
        if r3 == null goto label4;

        $i5 = virtualinvoke r3.<java.util.Hashtable$Entry: int hashCode()>();
        i0 = i0 + $i5;
        r3 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label3;

     label4:
        i2 = i2 + 1;
        goto label2;

     label5:
        $f3 = r0.<java.util.Hashtable: float loadFactor>;
        $f4 = neg $f3;
        r0.<java.util.Hashtable: float loadFactor> = $f4;
        return i0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Hashtable r0, r3;
        java.io.ObjectOutputStream r1;
        java.util.Hashtable$Entry r2, r4, $r10;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r5, $r13;
        java.util.Hashtable$Entry[] $r7, $r8, $r9;
        java.lang.Object $r11, $r12, $r14, $r15;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.io.ObjectOutputStream;
        r2 = null;
        r3 = r0;
        entermonitor r0;

     label0:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $r7 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $i1 = lengthof $r7;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);
        $i2 = r0.<java.util.Hashtable: int count>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);
        i0 = 0;

     label1:
        $r8 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        $i3 = lengthof $r8;
        if i0 >= $i3 goto label4;

        $r9 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        r4 = $r9[i0];

     label2:
        if r4 == null goto label3;

        $r10 = new java.util.Hashtable$Entry;
        $r11 = r4.<java.util.Hashtable$Entry: java.lang.Object key>;
        $r12 = r4.<java.util.Hashtable$Entry: java.lang.Object value>;
        specialinvoke $r10.<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>(0, $r11, $r12, r2);
        r2 = $r10;
        r4 = r4.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label2;

     label3:
        i0 = i0 + 1;
        goto label1;

     label4:
        exitmonitor r3;

     label5:
        goto label9;

     label6:
        $r13 := @caughtexception;

     label7:
        r5 = $r13;
        exitmonitor r3;

     label8:
        throw r5;

     label9:
        if r2 == null goto label10;

        $r14 = r2.<java.util.Hashtable$Entry: java.lang.Object key>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r14);
        $r15 = r2.<java.util.Hashtable$Entry: java.lang.Object value>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r15);
        r2 = r2.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label9;

     label10:
        return;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Hashtable r0;
        java.io.ObjectInputStream r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Hashtable$Entry[] r2;
        java.lang.Object r3, r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        $f0 = (float) i1;
        $f1 = r0.<java.util.Hashtable: float loadFactor>;
        $f2 = $f0 * $f1;
        $i3 = (int) $f2;
        $i4 = i1 / 20;
        $i5 = $i3 + $i4;
        i2 = $i5 + 3;
        if i2 <= i1 goto label0;

        $i6 = i2 & 1;
        if $i6 != 0 goto label0;

        i2 = i2 + -1;

     label0:
        if i0 <= 0 goto label1;

        if i2 <= i0 goto label1;

        i2 = i0;

     label1:
        r2 = newarray (java.util.Hashtable$Entry)[i2];
        $f3 = (float) i2;
        $f4 = r0.<java.util.Hashtable: float loadFactor>;
        $f5 = $f3 * $f4;
        $f6 = staticinvoke <java.lang.Math: float min(float,float)>($f5, 2.14748365E9F);
        $i7 = (int) $f6;
        r0.<java.util.Hashtable: int threshold> = $i7;
        r0.<java.util.Hashtable: int count> = 0;
        virtualinvoke r0.<java.util.Hashtable: boolean initHashSeedAsNeeded(int)>(i2);

     label2:
        if i1 <= 0 goto label3;

        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        specialinvoke r0.<java.util.Hashtable: void reconstitutionPut(java.util.Hashtable$Entry[],java.lang.Object,java.lang.Object)>(r2, r3, r4);
        i1 = i1 + -1;
        goto label2;

     label3:
        r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table> = r2;
        return;
    }

    private void reconstitutionPut(java.util.Hashtable$Entry[], java.lang.Object, java.lang.Object) throws java.io.StreamCorruptedException
    {
        java.util.Hashtable r0;
        java.util.Hashtable$Entry[] r1;
        java.lang.Object r2, r3, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Hashtable$Entry r4, $r5, r9;
        java.io.StreamCorruptedException $r6, $r8;
        boolean $z0;

        r0 := @this: java.util.Hashtable;
        r1 := @parameter0: java.util.Hashtable$Entry[];
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.Object;
        if r3 != null goto label0;

        $r6 = new java.io.StreamCorruptedException;
        specialinvoke $r6.<java.io.StreamCorruptedException: void <init>()>();
        throw $r6;

     label0:
        i0 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>(r2);
        $i2 = i0 & 2147483647;
        $i3 = lengthof r1;
        i1 = $i2 % $i3;
        r4 = r1[i1];

     label1:
        if r4 == null goto label3;

        $i4 = r4.<java.util.Hashtable$Entry: int hash>;
        if $i4 != i0 goto label2;

        $r7 = r4.<java.util.Hashtable$Entry: java.lang.Object key>;
        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r2);
        if $z0 == 0 goto label2;

        $r8 = new java.io.StreamCorruptedException;
        specialinvoke $r8.<java.io.StreamCorruptedException: void <init>()>();
        throw $r8;

     label2:
        r4 = r4.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label1;

     label3:
        r9 = r1[i1];
        $r5 = new java.util.Hashtable$Entry;
        specialinvoke $r5.<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>(i0, r2, r3, r9);
        r1[i1] = $r5;
        $i5 = r0.<java.util.Hashtable: int count>;
        $i6 = $i5 + 1;
        r0.<java.util.Hashtable: int count> = $i6;
        return;
    }

    static java.util.Iterator access$100(java.util.Hashtable, int)
    {
        java.util.Hashtable r0;
        int i0;
        java.util.Iterator $r1;

        r0 := @parameter0: java.util.Hashtable;
        i0 := @parameter1: int;
        $r1 = specialinvoke r0.<java.util.Hashtable: java.util.Iterator getIterator(int)>(i0);
        return $r1;
    }

    static int access$200(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        int $i0;

        r0 := @parameter0: java.util.Hashtable;
        $i0 = r0.<java.util.Hashtable: int count>;
        return $i0;
    }

    static java.util.Hashtable$Entry[] access$400(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        java.util.Hashtable$Entry[] $r1;

        r0 := @parameter0: java.util.Hashtable;
        $r1 = r0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;
        return $r1;
    }

    static int access$500(java.util.Hashtable, java.lang.Object)
    {
        java.util.Hashtable r0;
        java.lang.Object r1;
        int $i0;

        r0 := @parameter0: java.util.Hashtable;
        r1 := @parameter1: java.lang.Object;
        $i0 = specialinvoke r0.<java.util.Hashtable: int hash(java.lang.Object)>(r1);
        return $i0;
    }

    static int access$608(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        int $i0, $i1;

        r0 := @parameter0: java.util.Hashtable;
        $i0 = r0.<java.util.Hashtable: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.Hashtable: int modCount> = $i1;
        return $i0;
    }

    static int access$210(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        int $i0, $i1;

        r0 := @parameter0: java.util.Hashtable;
        $i0 = r0.<java.util.Hashtable: int count>;
        $i1 = $i0 - 1;
        r0.<java.util.Hashtable: int count> = $i1;
        return $i0;
    }

    static int access$600(java.util.Hashtable)
    {
        java.util.Hashtable r0;
        int $i0;

        r0 := @parameter0: java.util.Hashtable;
        $i0 = r0.<java.util.Hashtable: int modCount>;
        return $i0;
    }
}
