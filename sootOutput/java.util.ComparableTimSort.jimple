class java.util.ComparableTimSort extends java.lang.Object
{
    private static final int MIN_MERGE;
    private final java.lang.Object[] a;
    private static final int MIN_GALLOP;
    private int minGallop;
    private static final int INITIAL_TMP_STORAGE_LENGTH;
    private java.lang.Object[] tmp;
    private int stackSize;
    private final int[] runBase;
    private final int[] runLen;
    static final boolean $assertionsDisabled;

    private void <init>(java.lang.Object[])
    {
        java.util.ComparableTimSort r0;
        java.lang.Object[] r1, r2;
        int i0, $i2;
        byte b1, $b3;
        int[] $r3, $r4;

        r0 := @this: java.util.ComparableTimSort;
        r1 := @parameter0: java.lang.Object[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.ComparableTimSort: int minGallop> = 7;
        r0.<java.util.ComparableTimSort: int stackSize> = 0;
        r0.<java.util.ComparableTimSort: java.lang.Object[] a> = r1;
        i0 = lengthof r1;
        if i0 >= 512 goto label0;

        $i2 = i0 >>> 1;
        goto label1;

     label0:
        $i2 = 256;

     label1:
        r2 = newarray (java.lang.Object)[$i2];
        r0.<java.util.ComparableTimSort: java.lang.Object[] tmp> = r2;
        if i0 >= 120 goto label2;

        $b3 = 5;
        goto label5;

     label2:
        if i0 >= 1542 goto label3;

        $b3 = 10;
        goto label5;

     label3:
        if i0 >= 119151 goto label4;

        $b3 = 24;
        goto label5;

     label4:
        $b3 = 40;

     label5:
        b1 = $b3;
        $r3 = newarray (int)[b1];
        r0.<java.util.ComparableTimSort: int[] runBase> = $r3;
        $r4 = newarray (int)[b1];
        r0.<java.util.ComparableTimSort: int[] runLen> = $r4;
        return;
    }

    static void sort(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0;

        r0 := @parameter0: java.lang.Object[];
        $i0 = lengthof r0;
        staticinvoke <java.util.ComparableTimSort: void sort(java.lang.Object[],int,int)>(r0, 0, $i0);
        return;
    }

    static void sort(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.ComparableTimSort $r1, r2;
        boolean $z0, $z1;
        java.lang.AssertionError $r3, $r4;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i7 = lengthof r0;
        staticinvoke <java.util.ComparableTimSort: void rangeCheck(int,int,int)>($i7, i0, i1);
        i2 = i1 - i0;
        if i2 >= 2 goto label0;

        return;

     label0:
        if i2 >= 32 goto label1;

        i3 = staticinvoke <java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>(r0, i0, i1);
        $i8 = i0 + i3;
        staticinvoke <java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>(r0, i0, i1, $i8);
        return;

     label1:
        $r1 = new java.util.ComparableTimSort;
        specialinvoke $r1.<java.util.ComparableTimSort: void <init>(java.lang.Object[])>(r0);
        r2 = $r1;
        i4 = staticinvoke <java.util.ComparableTimSort: int minRunLength(int)>(i2);

     label2:
        i5 = staticinvoke <java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>(r0, i0, i1);
        if i5 >= i4 goto label5;

        if i2 > i4 goto label3;

        $i9 = i2;
        goto label4;

     label3:
        $i9 = i4;

     label4:
        i6 = $i9;
        $i10 = i0 + i6;
        $i11 = i0 + i5;
        staticinvoke <java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>(r0, i0, $i10, $i11);
        i5 = i6;

     label5:
        specialinvoke r2.<java.util.ComparableTimSort: void pushRun(int,int)>(i0, i5);
        specialinvoke r2.<java.util.ComparableTimSort: void mergeCollapse()>();
        i0 = i0 + i5;
        i2 = i2 - i5;
        if i2 != 0 goto label2;

        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        if i0 == i1 goto label6;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label6:
        specialinvoke r2.<java.util.ComparableTimSort: void mergeForceCollapse()>();
        $z1 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z1 != 0 goto label7;

        $i12 = r2.<java.util.ComparableTimSort: int stackSize>;
        if $i12 == 1 goto label7;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label7:
        return;
    }

    private static void binarySort(java.lang.Object[], int, int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, i8, $i9, $i10, $i11, $i12;
        boolean $z0, $z1, $z2;
        java.lang.Comparable r1;
        java.lang.AssertionError $r2, $r4, $r6;
        java.lang.Object $r3, $r5, $r7, $r8;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i0 > i2 goto label0;

        if i2 <= i1 goto label1;

     label0:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label1:
        if i2 != i0 goto label2;

        i2 = i2 + 1;

     label2:
        if i2 >= i1 goto label12;

        $r3 = r0[i2];
        r1 = (java.lang.Comparable) $r3;
        i3 = i0;
        i4 = i2;
        $z1 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        if i3 <= i4 goto label3;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label3:
        if i3 >= i4 goto label6;

        $i6 = i3 + i4;
        i5 = $i6 >>> 1;
        $r5 = r0[i5];
        $i7 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);
        if $i7 >= 0 goto label4;

        i4 = i5;
        goto label5;

     label4:
        i3 = i5 + 1;

     label5:
        goto label3;

     label6:
        $z2 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z2 != 0 goto label7;

        if i3 == i4 goto label7;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label7:
        i8 = i2 - i3;
        lookupswitch(i8)
        {
            case 1: goto label9;
            case 2: goto label8;
            default: goto label10;
        };

     label8:
        $i9 = i3 + 2;
        $i10 = i3 + 1;
        $r7 = r0[$i10];
        r0[$i9] = $r7;

     label9:
        $i11 = i3 + 1;
        $r8 = r0[i3];
        r0[$i11] = $r8;
        goto label11;

     label10:
        $i12 = i3 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i3, r0, $i12, i8);

     label11:
        r0[i3] = r1;
        i2 = i2 + 1;
        goto label2;

     label12:
        return;
    }

    private static int countRunAndMakeAscending(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        java.lang.AssertionError $r1;
        java.lang.Object $r2, $r4, $r5, $r7, $r8, $r10;
        java.lang.Comparable $r3, $r6, $r9;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 < i1 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        i2 = i0 + 1;
        if i2 != i1 goto label1;

        return 1;

     label1:
        i3 = i2 + 1;
        $r2 = r0[i2];
        $r3 = (java.lang.Comparable) $r2;
        $r4 = r0[i0];
        $i4 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);
        if $i4 >= 0 goto label4;

     label2:
        if i3 >= i1 goto label3;

        $r5 = r0[i3];
        $r6 = (java.lang.Comparable) $r5;
        $i5 = i3 - 1;
        $r7 = r0[$i5];
        $i6 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);
        if $i6 >= 0 goto label3;

        i3 = i3 + 1;
        goto label2;

     label3:
        staticinvoke <java.util.ComparableTimSort: void reverseRange(java.lang.Object[],int,int)>(r0, i0, i3);
        goto label5;

     label4:
        if i3 >= i1 goto label5;

        $r8 = r0[i3];
        $r9 = (java.lang.Comparable) $r8;
        $i7 = i3 - 1;
        $r10 = r0[$i7];
        $i8 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>($r10);
        if $i8 < 0 goto label5;

        i3 = i3 + 1;
        goto label4;

     label5:
        $i9 = i3 - i0;
        return $i9;
    }

    private static void reverseRange(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 + -1;

     label0:
        if i0 >= i2 goto label1;

        r1 = r0[i0];
        $i3 = i0;
        i0 = i0 + 1;
        $r2 = r0[i2];
        r0[$i3] = $r2;
        $i4 = i2;
        i2 = i2 + -1;
        r0[$i4] = r1;
        goto label0;

     label1:
        return;
    }

    private static int minRunLength(int)
    {
        int i0, i1, $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r0;

        i0 := @parameter0: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 >= 0 goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        i1 = 0;

     label1:
        if i0 < 32 goto label2;

        $i2 = i0 & 1;
        i1 = i1 | $i2;
        i0 = i0 >> 1;
        goto label1;

     label2:
        $i3 = i0 + i1;
        return $i3;
    }

    private void pushRun(int, int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2;

        r0 := @this: java.util.ComparableTimSort;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.util.ComparableTimSort: int[] runBase>;
        $i2 = r0.<java.util.ComparableTimSort: int stackSize>;
        $r1[$i2] = i0;
        $r2 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i3 = r0.<java.util.ComparableTimSort: int stackSize>;
        $r2[$i3] = i1;
        $i4 = r0.<java.util.ComparableTimSort: int stackSize>;
        $i5 = $i4 + 1;
        r0.<java.util.ComparableTimSort: int stackSize> = $i5;
        return;
    }

    private void mergeCollapse()
    {
        java.util.ComparableTimSort r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.util.ComparableTimSort;

     label0:
        $i1 = r0.<java.util.ComparableTimSort: int stackSize>;
        if $i1 <= 1 goto label4;

        $i2 = r0.<java.util.ComparableTimSort: int stackSize>;
        i0 = $i2 - 2;
        if i0 <= 0 goto label2;

        $r1 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i3 = i0 - 1;
        $i4 = $r1[$i3];
        $r2 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i5 = $r2[i0];
        $r3 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i6 = i0 + 1;
        $i7 = $r3[$i6];
        $i8 = $i5 + $i7;
        if $i4 > $i8 goto label2;

        $r4 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i9 = i0 - 1;
        $i10 = $r4[$i9];
        $r5 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i11 = i0 + 1;
        $i12 = $r5[$i11];
        if $i10 >= $i12 goto label1;

        i0 = i0 + -1;

     label1:
        specialinvoke r0.<java.util.ComparableTimSort: void mergeAt(int)>(i0);
        goto label3;

     label2:
        $r6 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i13 = $r6[i0];
        $r7 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i14 = i0 + 1;
        $i15 = $r7[$i14];
        if $i13 > $i15 goto label4;

        specialinvoke r0.<java.util.ComparableTimSort: void mergeAt(int)>(i0);

     label3:
        goto label0;

     label4:
        return;
    }

    private void mergeForceCollapse()
    {
        java.util.ComparableTimSort r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r2;

        r0 := @this: java.util.ComparableTimSort;

     label0:
        $i1 = r0.<java.util.ComparableTimSort: int stackSize>;
        if $i1 <= 1 goto label2;

        $i2 = r0.<java.util.ComparableTimSort: int stackSize>;
        i0 = $i2 - 2;
        if i0 <= 0 goto label1;

        $r1 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i3 = i0 - 1;
        $i4 = $r1[$i3];
        $r2 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i5 = i0 + 1;
        $i6 = $r2[$i5];
        if $i4 >= $i6 goto label1;

        i0 = i0 + -1;

     label1:
        specialinvoke r0.<java.util.ComparableTimSort: void mergeAt(int)>(i0);
        goto label0;

     label2:
        return;
    }

    private void mergeAt(int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, $i27, $i28, $i29, i30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r1, $r2, $r3, $r8, $r9, $r20, $r25;
        int[] $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14;
        java.lang.Object[] $r16, $r19, $r21, $r24;
        java.lang.Object $r17, $r22;
        java.lang.Comparable $r18, $r23;

        r0 := @this: java.util.ComparableTimSort;
        i0 := @parameter0: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i6 = r0.<java.util.ComparableTimSort: int stackSize>;
        if $i6 >= 2 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        $z1 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label1:
        $z2 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z2 != 0 goto label2;

        $i7 = r0.<java.util.ComparableTimSort: int stackSize>;
        $i8 = $i7 - 2;
        if i0 == $i8 goto label2;

        $i9 = r0.<java.util.ComparableTimSort: int stackSize>;
        $i10 = $i9 - 3;
        if i0 == $i10 goto label2;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label2:
        $r4 = r0.<java.util.ComparableTimSort: int[] runBase>;
        i1 = $r4[i0];
        $r5 = r0.<java.util.ComparableTimSort: int[] runLen>;
        i2 = $r5[i0];
        $r6 = r0.<java.util.ComparableTimSort: int[] runBase>;
        $i11 = i0 + 1;
        i3 = $r6[$i11];
        $r7 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i12 = i0 + 1;
        i4 = $r7[$i12];
        $z3 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z3 != 0 goto label4;

        if i2 <= 0 goto label3;

        if i4 > 0 goto label4;

     label3:
        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label4:
        $z4 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z4 != 0 goto label5;

        $i13 = i1 + i2;
        if $i13 == i3 goto label5;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label5:
        $r10 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i14 = i2 + i4;
        $r10[i0] = $i14;
        $i15 = r0.<java.util.ComparableTimSort: int stackSize>;
        $i16 = $i15 - 3;
        if i0 != $i16 goto label6;

        $r11 = r0.<java.util.ComparableTimSort: int[] runBase>;
        $i17 = i0 + 1;
        $r12 = r0.<java.util.ComparableTimSort: int[] runBase>;
        $i18 = i0 + 2;
        $i19 = $r12[$i18];
        $r11[$i17] = $i19;
        $r13 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i20 = i0 + 1;
        $r14 = r0.<java.util.ComparableTimSort: int[] runLen>;
        $i21 = i0 + 2;
        $i22 = $r14[$i21];
        $r13[$i20] = $i22;

     label6:
        $i23 = r0.<java.util.ComparableTimSort: int stackSize>;
        $i24 = $i23 - 1;
        r0.<java.util.ComparableTimSort: int stackSize> = $i24;
        $r16 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;
        $r17 = $r16[i3];
        $r18 = (java.lang.Comparable) $r17;
        $r19 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;
        i5 = staticinvoke <java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>($r18, $r19, i1, i2, 0);
        $z5 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z5 != 0 goto label7;

        if i5 >= 0 goto label7;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label7:
        i25 = i1 + i5;
        i26 = i2 - i5;
        if i26 != 0 goto label8;

        return;

     label8:
        $r21 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;
        $i27 = i25 + i26;
        $i28 = $i27 - 1;
        $r22 = $r21[$i28];
        $r23 = (java.lang.Comparable) $r22;
        $r24 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;
        $i29 = i4 - 1;
        i30 = staticinvoke <java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>($r23, $r24, i3, i4, $i29);
        $z6 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z6 != 0 goto label9;

        if i30 >= 0 goto label9;

        $r25 = new java.lang.AssertionError;
        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();
        throw $r25;

     label9:
        if i30 != 0 goto label10;

        return;

     label10:
        if i26 > i30 goto label11;

        specialinvoke r0.<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>(i25, i26, i3, i30);
        goto label12;

     label11:
        specialinvoke r0.<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>(i25, i26, i3, i30);

     label12:
        return;
    }

    private static int gallopLeft(java.lang.Comparable, java.lang.Object[], int, int, int)
    {
        java.lang.Comparable r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, i23, $i24, $i25;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r2, $r6, $r8;
        java.lang.Object $r3, $r4, $r5, $r7;

        r0 := @parameter0: java.lang.Comparable;
        r1 := @parameter1: java.lang.Object[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i1 <= 0 goto label0;

        if i2 < 0 goto label0;

        if i2 < i1 goto label1;

     label0:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label1:
        i3 = 0;
        i4 = 1;
        $i7 = i0 + i2;
        $r3 = r1[$i7];
        $i8 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);
        if $i8 <= 0 goto label5;

        i5 = i1 - i2;

     label2:
        if i4 >= i5 goto label3;

        $i9 = i0 + i2;
        $i10 = $i9 + i4;
        $r4 = r1[$i10];
        $i11 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);
        if $i11 <= 0 goto label3;

        i3 = i4;
        $i12 = i4 << 1;
        i4 = $i12 + 1;
        if i4 > 0 goto label2;

        i4 = i5;
        goto label2;

     label3:
        if i4 <= i5 goto label4;

        i4 = i5;

     label4:
        i13 = i3 + i2;
        i14 = i4 + i2;
        goto label9;

     label5:
        i15 = i2 + 1;

     label6:
        if i4 >= i15 goto label7;

        $i16 = i0 + i2;
        $i17 = $i16 - i4;
        $r5 = r1[$i17];
        $i18 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);
        if $i18 > 0 goto label7;

        i3 = i4;
        $i19 = i4 << 1;
        i4 = $i19 + 1;
        if i4 > 0 goto label6;

        i4 = i15;
        goto label6;

     label7:
        if i4 <= i15 goto label8;

        i4 = i15;

     label8:
        i6 = i3;
        i13 = i2 - i4;
        i14 = i2 - i6;

     label9:
        $z1 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z1 != 0 goto label11;

        if -1 > i13 goto label10;

        if i13 >= i14 goto label10;

        if i14 <= i1 goto label11;

     label10:
        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label11:
        i20 = i13 + 1;

     label12:
        if i20 >= i14 goto label15;

        $i21 = i14 - i20;
        $i22 = $i21 >>> 1;
        i23 = i20 + $i22;
        $i24 = i0 + i23;
        $r7 = r1[$i24];
        $i25 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);
        if $i25 <= 0 goto label13;

        i20 = i23 + 1;
        goto label14;

     label13:
        i14 = i23;

     label14:
        goto label12;

     label15:
        $z2 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z2 != 0 goto label16;

        if i20 == i14 goto label16;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label16:
        return i14;
    }

    private static int gallopRight(java.lang.Comparable, java.lang.Object[], int, int, int)
    {
        java.lang.Comparable r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, i23, $i24, $i25;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r2, $r6, $r8;
        java.lang.Object $r3, $r4, $r5, $r7;

        r0 := @parameter0: java.lang.Comparable;
        r1 := @parameter1: java.lang.Object[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i1 <= 0 goto label0;

        if i2 < 0 goto label0;

        if i2 < i1 goto label1;

     label0:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label1:
        i3 = 1;
        i4 = 0;
        $i7 = i0 + i2;
        $r3 = r1[$i7];
        $i8 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);
        if $i8 >= 0 goto label5;

        i5 = i2 + 1;

     label2:
        if i3 >= i5 goto label3;

        $i9 = i0 + i2;
        $i10 = $i9 - i3;
        $r4 = r1[$i10];
        $i11 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);
        if $i11 >= 0 goto label3;

        i4 = i3;
        $i12 = i3 << 1;
        i3 = $i12 + 1;
        if i3 > 0 goto label2;

        i3 = i5;
        goto label2;

     label3:
        if i3 <= i5 goto label4;

        i3 = i5;

     label4:
        i6 = i4;
        i13 = i2 - i3;
        i14 = i2 - i6;
        goto label9;

     label5:
        i15 = i1 - i2;

     label6:
        if i3 >= i15 goto label7;

        $i16 = i0 + i2;
        $i17 = $i16 + i3;
        $r5 = r1[$i17];
        $i18 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);
        if $i18 < 0 goto label7;

        i4 = i3;
        $i19 = i3 << 1;
        i3 = $i19 + 1;
        if i3 > 0 goto label6;

        i3 = i15;
        goto label6;

     label7:
        if i3 <= i15 goto label8;

        i3 = i15;

     label8:
        i13 = i4 + i2;
        i14 = i3 + i2;

     label9:
        $z1 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z1 != 0 goto label11;

        if -1 > i13 goto label10;

        if i13 >= i14 goto label10;

        if i14 <= i1 goto label11;

     label10:
        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label11:
        i20 = i13 + 1;

     label12:
        if i20 >= i14 goto label15;

        $i21 = i14 - i20;
        $i22 = $i21 >>> 1;
        i23 = i20 + $i22;
        $i24 = i0 + i23;
        $r7 = r1[$i24];
        $i25 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);
        if $i25 >= 0 goto label13;

        i14 = i23;
        goto label14;

     label13:
        i20 = i23 + 1;

     label14:
        goto label12;

     label15:
        $z2 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z2 != 0 goto label16;

        if i20 == i14 goto label16;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label16:
        return i14;
    }

    private void mergeLo(int, int, int, int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, $i22, $i23, i24, $i25, $i26, $i27, $i28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] r1, r2;
        java.lang.AssertionError $r3, $r6, $r12, $r20, $r23, $r24;
        java.lang.Object $r4, $r5, $r7, $r9, $r10, $r11, $r13, $r15, $r16, $r18, $r21;
        java.lang.Comparable $r8, $r14, $r17;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: java.util.ComparableTimSort;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i1 <= 0 goto label0;

        if i3 <= 0 goto label0;

        $i10 = i0 + i1;
        if $i10 == i2 goto label1;

     label0:
        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label1:
        r1 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;
        r2 = specialinvoke r0.<java.util.ComparableTimSort: java.lang.Object[] ensureCapacity(int)>(i1);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r2, 0, i1);
        i4 = 0;
        i5 = i2;
        i6 = i0;
        i11 = i6 + 1;
        i12 = i5 + 1;
        $r4 = r1[i5];
        r1[i6] = $r4;
        i13 = i3 + -1;
        if i13 != 0 goto label2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i11, i1);
        return;

     label2:
        if i1 != 1 goto label3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i12, r1, i11, i13);
        $i14 = i11 + i13;
        $r5 = r2[i4];
        r1[$i14] = $r5;
        return;

     label3:
        i7 = r0.<java.util.ComparableTimSort: int minGallop>;

     label4:
        i8 = 0;
        i9 = 0;

     label5:
        $z1 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z1 != 0 goto label7;

        if i1 <= 1 goto label6;

        if i13 > 0 goto label7;

     label6:
        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label7:
        $r7 = r1[i12];
        $r8 = (java.lang.Comparable) $r7;
        $r9 = r2[i4];
        $i15 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>($r9);
        if $i15 >= 0 goto label8;

        $i16 = i11;
        i11 = i11 + 1;
        $i17 = i12;
        i12 = i12 + 1;
        $r10 = r1[$i17];
        r1[$i16] = $r10;
        i9 = i9 + 1;
        i8 = 0;
        i13 = i13 + -1;
        if i13 != 0 goto label9;

        goto label22;

     label8:
        $i18 = i11;
        i11 = i11 + 1;
        $i19 = i4;
        i4 = i4 + 1;
        $r11 = r2[$i19];
        r1[$i18] = $r11;
        i8 = i8 + 1;
        i9 = 0;
        i1 = i1 + -1;
        if i1 != 1 goto label9;

        goto label22;

     label9:
        $i20 = i8 | i9;
        if $i20 < i7 goto label5;

     label10:
        $z2 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z2 != 0 goto label12;

        if i1 <= 1 goto label11;

        if i13 > 0 goto label12;

     label11:
        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label12:
        $r13 = r1[i12];
        $r14 = (java.lang.Comparable) $r13;
        i21 = staticinvoke <java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>($r14, r2, i4, i1, 0);
        if i21 == 0 goto label13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i11, i21);
        i11 = i11 + i21;
        i4 = i4 + i21;
        i1 = i1 - i21;
        if i1 > 1 goto label13;

        goto label22;

     label13:
        $i22 = i11;
        i11 = i11 + 1;
        $i23 = i12;
        i12 = i12 + 1;
        $r15 = r1[$i23];
        r1[$i22] = $r15;
        i13 = i13 + -1;
        if i13 != 0 goto label14;

        goto label22;

     label14:
        $r16 = r2[i4];
        $r17 = (java.lang.Comparable) $r16;
        i24 = staticinvoke <java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>($r17, r1, i12, i13, 0);
        if i24 == 0 goto label15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i12, r1, i11, i24);
        i11 = i11 + i24;
        i12 = i12 + i24;
        i13 = i13 - i24;
        if i13 != 0 goto label15;

        goto label22;

     label15:
        $i25 = i11;
        i11 = i11 + 1;
        $i26 = i4;
        i4 = i4 + 1;
        $r18 = r2[$i26];
        r1[$i25] = $r18;
        i1 = i1 + -1;
        if i1 != 1 goto label16;

        goto label22;

     label16:
        i7 = i7 + -1;
        if i21 < 7 goto label17;

        $z3 = 1;
        goto label18;

     label17:
        $z3 = 0;

     label18:
        if i24 < 7 goto label19;

        $z4 = 1;
        goto label20;

     label19:
        $z4 = 0;

     label20:
        $z5 = $z3 | $z4;
        if $z5 != 0 goto label10;

        if i7 >= 0 goto label21;

        i7 = 0;

     label21:
        i7 = i7 + 2;
        goto label4;

     label22:
        if i7 >= 1 goto label23;

        $i27 = 1;
        goto label24;

     label23:
        $i27 = i7;

     label24:
        r0.<java.util.ComparableTimSort: int minGallop> = $i27;
        if i1 != 1 goto label26;

        $z6 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z6 != 0 goto label25;

        if i13 > 0 goto label25;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label25:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i12, r1, i11, i13);
        $i28 = i11 + i13;
        $r21 = r2[i4];
        r1[$i28] = $r21;
        goto label30;

     label26:
        if i1 != 0 goto label27;

        $r22 = new java.lang.IllegalArgumentException;
        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Comparison method violates its general contract!");
        throw $r22;

     label27:
        $z7 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z7 != 0 goto label28;

        if i13 == 0 goto label28;

        $r23 = new java.lang.AssertionError;
        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();
        throw $r23;

     label28:
        $z8 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z8 != 0 goto label29;

        if i1 > 1 goto label29;

        $r24 = new java.lang.AssertionError;
        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();
        throw $r24;

     label29:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i11, i1);

     label30:
        return;
    }

    private void mergeHi(int, int, int, int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, i13, i14, i15, $i16, $i17, i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, $i38, $i39, $i40, $i41, $i42, i43, i44, $i45, $i46, $i47, $i48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] r1, r2;
        java.lang.AssertionError $r3, $r6, $r12, $r20, $r23, $r24;
        java.lang.Object $r4, $r5, $r7, $r9, $r10, $r11, $r13, $r15, $r16, $r18, $r21;
        java.lang.Comparable $r8, $r14, $r17;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: java.util.ComparableTimSort;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        $z0 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i1 <= 0 goto label0;

        if i3 <= 0 goto label0;

        $i10 = i0 + i1;
        if $i10 == i2 goto label1;

     label0:
        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label1:
        r1 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;
        r2 = specialinvoke r0.<java.util.ComparableTimSort: java.lang.Object[] ensureCapacity(int)>(i3);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r2, 0, i3);
        $i11 = i0 + i1;
        i4 = $i11 - 1;
        i5 = i3 - 1;
        $i12 = i2 + i3;
        i6 = $i12 - 1;
        i13 = i6 + -1;
        i14 = i4 + -1;
        $r4 = r1[i4];
        r1[i6] = $r4;
        i15 = i1 + -1;
        if i15 != 0 goto label2;

        $i16 = i3 - 1;
        $i17 = i13 - $i16;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i17, i3);
        return;

     label2:
        if i3 != 1 goto label3;

        i18 = i13 - i15;
        i19 = i14 - i15;
        $i20 = i19 + 1;
        $i21 = i18 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i20, r1, $i21, i15);
        $r5 = r2[i5];
        r1[i18] = $r5;
        return;

     label3:
        i7 = r0.<java.util.ComparableTimSort: int minGallop>;

     label4:
        i8 = 0;
        i9 = 0;

     label5:
        $z1 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z1 != 0 goto label7;

        if i15 <= 0 goto label6;

        if i3 > 1 goto label7;

     label6:
        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label7:
        $r7 = r2[i5];
        $r8 = (java.lang.Comparable) $r7;
        $r9 = r1[i14];
        $i22 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>($r9);
        if $i22 >= 0 goto label8;

        $i23 = i13;
        i13 = i13 + -1;
        $i24 = i14;
        i14 = i14 + -1;
        $r10 = r1[$i24];
        r1[$i23] = $r10;
        i8 = i8 + 1;
        i9 = 0;
        i15 = i15 + -1;
        if i15 != 0 goto label9;

        goto label22;

     label8:
        $i25 = i13;
        i13 = i13 + -1;
        $i26 = i5;
        i5 = i5 + -1;
        $r11 = r2[$i26];
        r1[$i25] = $r11;
        i9 = i9 + 1;
        i8 = 0;
        i3 = i3 + -1;
        if i3 != 1 goto label9;

        goto label22;

     label9:
        $i27 = i8 | i9;
        if $i27 < i7 goto label5;

     label10:
        $z2 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z2 != 0 goto label12;

        if i15 <= 0 goto label11;

        if i3 > 1 goto label12;

     label11:
        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label12:
        $r13 = r2[i5];
        $r14 = (java.lang.Comparable) $r13;
        $i28 = i15 - 1;
        $i29 = staticinvoke <java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>($r14, r1, i0, i15, $i28);
        i30 = i15 - $i29;
        if i30 == 0 goto label13;

        i13 = i13 - i30;
        i14 = i14 - i30;
        i15 = i15 - i30;
        $i31 = i14 + 1;
        $i32 = i13 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i31, r1, $i32, i30);
        if i15 != 0 goto label13;

        goto label22;

     label13:
        $i33 = i13;
        i13 = i13 + -1;
        $i34 = i5;
        i5 = i5 + -1;
        $r15 = r2[$i34];
        r1[$i33] = $r15;
        i3 = i3 + -1;
        if i3 != 1 goto label14;

        goto label22;

     label14:
        $r16 = r1[i14];
        $r17 = (java.lang.Comparable) $r16;
        $i35 = i3 - 1;
        $i36 = staticinvoke <java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>($r17, r2, 0, i3, $i35);
        i37 = i3 - $i36;
        if i37 == 0 goto label15;

        i13 = i13 - i37;
        i5 = i5 - i37;
        i3 = i3 - i37;
        $i38 = i5 + 1;
        $i39 = i13 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i38, r1, $i39, i37);
        if i3 > 1 goto label15;

        goto label22;

     label15:
        $i40 = i13;
        i13 = i13 + -1;
        $i41 = i14;
        i14 = i14 + -1;
        $r18 = r1[$i41];
        r1[$i40] = $r18;
        i15 = i15 + -1;
        if i15 != 0 goto label16;

        goto label22;

     label16:
        i7 = i7 + -1;
        if i30 < 7 goto label17;

        $z3 = 1;
        goto label18;

     label17:
        $z3 = 0;

     label18:
        if i37 < 7 goto label19;

        $z4 = 1;
        goto label20;

     label19:
        $z4 = 0;

     label20:
        $z5 = $z3 | $z4;
        if $z5 != 0 goto label10;

        if i7 >= 0 goto label21;

        i7 = 0;

     label21:
        i7 = i7 + 2;
        goto label4;

     label22:
        if i7 >= 1 goto label23;

        $i42 = 1;
        goto label24;

     label23:
        $i42 = i7;

     label24:
        r0.<java.util.ComparableTimSort: int minGallop> = $i42;
        if i3 != 1 goto label26;

        $z6 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z6 != 0 goto label25;

        if i15 > 0 goto label25;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label25:
        i43 = i13 - i15;
        i44 = i14 - i15;
        $i45 = i44 + 1;
        $i46 = i43 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i45, r1, $i46, i15);
        $r21 = r2[i5];
        r1[i43] = $r21;
        goto label30;

     label26:
        if i3 != 0 goto label27;

        $r22 = new java.lang.IllegalArgumentException;
        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Comparison method violates its general contract!");
        throw $r22;

     label27:
        $z7 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z7 != 0 goto label28;

        if i15 == 0 goto label28;

        $r23 = new java.lang.AssertionError;
        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();
        throw $r23;

     label28:
        $z8 = <java.util.ComparableTimSort: boolean $assertionsDisabled>;
        if $z8 != 0 goto label29;

        if i3 > 0 goto label29;

        $r24 = new java.lang.AssertionError;
        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();
        throw $r24;

     label29:
        $i47 = i3 - 1;
        $i48 = i13 - $i47;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i48, i3);

     label30:
        return;
    }

    private java.lang.Object[] ensureCapacity(int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, $i2, $i3, i4, $i5, i6, $i7, i8, $i9, i10, $i11, i12, i13, i14, $i15, $i16;
        java.lang.Object[] r1, $r2, $r3, $r4;

        r0 := @this: java.util.ComparableTimSort;
        i0 := @parameter0: int;
        $r2 = r0.<java.util.ComparableTimSort: java.lang.Object[] tmp>;
        $i2 = lengthof $r2;
        if $i2 >= i0 goto label2;

        i1 = i0;
        $i3 = i1 >> 1;
        i4 = i1 | $i3;
        $i5 = i4 >> 2;
        i6 = i4 | $i5;
        $i7 = i6 >> 4;
        i8 = i6 | $i7;
        $i9 = i8 >> 8;
        i10 = i8 | $i9;
        $i11 = i10 >> 16;
        i12 = i10 | $i11;
        i13 = i12 + 1;
        if i13 >= 0 goto label0;

        i14 = i0;
        goto label1;

     label0:
        $r3 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;
        $i15 = lengthof $r3;
        $i16 = $i15 >>> 1;
        i14 = staticinvoke <java.lang.Math: int min(int,int)>(i13, $i16);

     label1:
        r1 = newarray (java.lang.Object)[i14];
        r0.<java.util.ComparableTimSort: java.lang.Object[] tmp> = r1;

     label2:
        $r4 = r0.<java.util.ComparableTimSort: java.lang.Object[] tmp>;
        return $r4;
    }

    private static void rangeCheck(int, int, int)
    {
        int i0, i1, i2;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r7;
        java.lang.ArrayIndexOutOfBoundsException $r8, $r9;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        if i1 <= i2 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex(");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") > toIndex(");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r1;

     label0:
        if i1 >= 0 goto label1;

        $r8 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r8.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i1);
        throw $r8;

     label1:
        if i2 <= i0 goto label2;

        $r9 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r9.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i2);
        throw $r9;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/ComparableTimSort";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.ComparableTimSort: boolean $assertionsDisabled> = $z1;
        return;
    }
}
