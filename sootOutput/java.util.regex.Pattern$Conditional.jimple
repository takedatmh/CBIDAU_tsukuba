final class java.util.regex.Pattern$Conditional extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node cond;
    java.util.regex.Pattern$Node yes;
    java.util.regex.Pattern$Node not;

    void <init>(java.util.regex.Pattern$Node, java.util.regex.Pattern$Node, java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$Conditional r0;
        java.util.regex.Pattern$Node r1, r2, r3;

        r0 := @this: java.util.regex.Pattern$Conditional;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        r2 := @parameter1: java.util.regex.Pattern$Node;
        r3 := @parameter2: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node cond> = r1;
        r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node yes> = r2;
        r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node not> = r3;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Conditional r0;
        java.util.regex.Matcher r1;
        int i0;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.regex.Pattern$Conditional;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node cond>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label0;

        $r4 = r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node yes>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z1;

     label0:
        $r5 = r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node not>;
        $z2 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z2;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Conditional r0;
        java.util.regex.Pattern$TreeInfo r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0, z1, $z4, $z5, $z6, $z7;
        java.util.regex.Pattern$Node $r2, $r3, $r4;

        r0 := @this: java.util.regex.Pattern$Conditional;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        i1 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        z0 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        virtualinvoke r1.<java.util.regex.Pattern$TreeInfo: void reset()>();
        $r2 = r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node yes>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        i2 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        i3 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        z1 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        virtualinvoke r1.<java.util.regex.Pattern$TreeInfo: void reset()>();
        $r3 = r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node not>;
        virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        $i4 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i4);
        $i6 = i0 + $i5;
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = $i6;
        $i7 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i7);
        $i9 = i1 + $i8;
        r1.<java.util.regex.Pattern$TreeInfo: int maxLength> = $i9;
        $z4 = z0 & z1;
        $z5 = r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid>;
        $z6 = $z4 & $z5;
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = $z6;
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;
        $r4 = r0.<java.util.regex.Pattern$Conditional: java.util.regex.Pattern$Node next>;
        $z7 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z7;
    }
}
