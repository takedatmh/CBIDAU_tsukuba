class java.net.URI$Parser extends java.lang.Object
{
    private java.lang.String input;
    private boolean requireServerAuthority;
    private int ipv6byteCount;
    final java.net.URI this$0;

    void <init>(java.net.URI, java.lang.String)
    {
        java.net.URI$Parser r0;
        java.net.URI r1;
        java.lang.String r2;

        r0 := @this: java.net.URI$Parser;
        r1 := @parameter0: java.net.URI;
        r2 := @parameter1: java.lang.String;
        r0.<java.net.URI$Parser: java.net.URI this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.URI$Parser: boolean requireServerAuthority> = 0;
        r0.<java.net.URI$Parser: int ipv6byteCount> = 0;
        r0.<java.net.URI$Parser: java.lang.String input> = r2;
        staticinvoke <java.net.URI: java.lang.String access$002(java.net.URI,java.lang.String)>(r1, r2);
        return;
    }

    private void fail(java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        java.lang.String r1, $r3;
        java.net.URISyntaxException $r2;

        r0 := @this: java.net.URI$Parser;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.net.URISyntaxException;
        $r3 = r0.<java.net.URI$Parser: java.lang.String input>;
        specialinvoke $r2.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>($r3, r1);
        throw $r2;
    }

    private void fail(java.lang.String, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        java.lang.String r1, $r3;
        int i0;
        java.net.URISyntaxException $r2;

        r0 := @this: java.net.URI$Parser;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = new java.net.URISyntaxException;
        $r3 = r0.<java.net.URI$Parser: java.lang.String input>;
        specialinvoke $r2.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>($r3, r1, i0);
        throw $r2;
    }

    private void failExpecting(java.lang.String, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        java.lang.String r1, $r5;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: java.net.URI$Parser;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>($r5, i0);
        return;
    }

    private void failExpecting(java.lang.String, java.lang.String, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        java.lang.String r1, r2, $r8;
        int i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.net.URI$Parser;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" following ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>($r8, i0);
        return;
    }

    private java.lang.String substring(int, int)
    {
        java.net.URI$Parser r0;
        int i0, i1;
        java.lang.String $r1, $r2;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.net.URI$Parser: java.lang.String input>;
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);
        return $r2;
    }

    private char charAt(int)
    {
        java.net.URI$Parser r0;
        int i0;
        java.lang.String $r1;
        char $c1;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        $r1 = r0.<java.net.URI$Parser: java.lang.String input>;
        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);
        return $c1;
    }

    private boolean at(int, int, char)
    {
        java.net.URI$Parser r0;
        int i0, i1;
        char c2, $c3;
        boolean $z0;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        c2 := @parameter2: char;
        if i0 >= i1 goto label0;

        $c3 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>(i0);
        if $c3 != c2 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private boolean at(int, int, java.lang.String)
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        java.lang.String r1;
        char $c7, $c8;
        boolean $z0;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        i2 = i0;
        i3 = virtualinvoke r1.<java.lang.String: int length()>();
        $i5 = i1 - i2;
        if i3 <= $i5 goto label0;

        return 0;

     label0:
        i4 = 0;

     label1:
        if i4 >= i3 goto label3;

        $i6 = i2;
        i2 = i2 + 1;
        $c7 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>($i6);
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);
        if $c7 == $c8 goto label2;

        goto label3;

     label2:
        i4 = i4 + 1;
        goto label1;

     label3:
        if i4 != i3 goto label4;

        $z0 = 1;
        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    private int scan(int, int, char)
    {
        java.net.URI$Parser r0;
        int i0, i1, $i4;
        char c2, $c3;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        c2 := @parameter2: char;
        if i0 >= i1 goto label0;

        $c3 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>(i0);
        if $c3 != c2 goto label0;

        $i4 = i0 + 1;
        return $i4;

     label0:
        return i0;
    }

    private int scan(int, int, java.lang.String, java.lang.String)
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, $i4, $i5;
        java.lang.String r1, r2;
        char c3;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        r2 := @parameter3: java.lang.String;
        i2 = i0;

     label0:
        if i2 >= i1 goto label3;

        c3 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>(i2);
        $i4 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c3);
        if $i4 < 0 goto label1;

        return -1;

     label1:
        $i5 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(c3);
        if $i5 < 0 goto label2;

        goto label3;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        return i2;
    }

    private int scanEscape(int, int, char) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i3, $i6, $i7, $i10, $i14, $i15;
        char c2, c4, $c8, $c11;
        long $l5, $l9, $l12, $l13;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        c2 := @parameter2: char;
        i3 = i0;
        c4 = c2;
        if c4 != 37 goto label1;

        $i6 = i3 + 3;
        if $i6 > i1 goto label0;

        $i7 = i3 + 1;
        $c8 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>($i7);
        $l9 = staticinvoke <java.net.URI: long access$100()>();
        $l5 = staticinvoke <java.net.URI: long access$200()>();
        $z0 = staticinvoke <java.net.URI: boolean access$300(char,long,long)>($c8, $l9, $l5);
        if $z0 == 0 goto label0;

        $i10 = i3 + 2;
        $c11 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>($i10);
        $l12 = staticinvoke <java.net.URI: long access$100()>();
        $l13 = staticinvoke <java.net.URI: long access$200()>();
        $z1 = staticinvoke <java.net.URI: boolean access$300(char,long,long)>($c11, $l12, $l13);
        if $z1 == 0 goto label0;

        $i14 = i3 + 3;
        return $i14;

     label0:
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Malformed escape pair", i3);
        goto label2;

     label1:
        if c4 <= 128 goto label2;

        $z2 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>(c4);
        if $z2 != 0 goto label2;

        $z3 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c4);
        if $z3 != 0 goto label2;

        $i15 = i3 + 1;
        return $i15;

     label2:
        return i3;
    }

    private int scan(int, int, long, long) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i4, i6;
        long l2, l3, $l7;
        char c5;
        boolean $z0;
        byte $b8;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        l2 := @parameter2: long;
        l3 := @parameter3: long;
        i4 = i0;

     label0:
        if i4 >= i1 goto label3;

        c5 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>(i4);
        $z0 = staticinvoke <java.net.URI: boolean access$300(char,long,long)>(c5, l2, l3);
        if $z0 == 0 goto label1;

        i4 = i4 + 1;
        goto label0;

     label1:
        $l7 = l2 & 1L;
        $b8 = $l7 cmp 0L;
        if $b8 == 0 goto label3;

        i6 = specialinvoke r0.<java.net.URI$Parser: int scanEscape(int,int,char)>(i4, i1, c5);
        if i6 <= i4 goto label2;

        i4 = i6;
        goto label0;

     label2:
        goto label3;

     label3:
        return i4;
    }

    private void checkChars(int, int, long, long, java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i4;
        long l2, l3;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        l2 := @parameter2: long;
        l3 := @parameter3: long;
        r1 := @parameter4: java.lang.String;
        i4 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i0, i1, l2, l3);
        if i4 >= i1 goto label0;

        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character in ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>($r5, i4);

     label0:
        return;
    }

    private void checkChar(int, long, long, java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, $i3;
        long l1, l2;
        java.lang.String r1;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        l2 := @parameter2: long;
        r1 := @parameter3: java.lang.String;
        $i3 = i0 + 1;
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>(i0, $i3, l1, l2, r1);
        return;
    }

    void parse(boolean) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, i3, i4, i7, i8, $i11, $i14;
        long $l2, $l5, $l6, $l9, $l10, $l12, $l13;
        java.lang.String $r1, $r3, $r6, $r9;
        java.net.URI $r2, $r5, $r8;

        r0 := @this: java.net.URI$Parser;
        z0 := @parameter0: boolean;
        r0.<java.net.URI$Parser: boolean requireServerAuthority> = z0;
        $r1 = r0.<java.net.URI$Parser: java.lang.String input>;
        i0 = virtualinvoke $r1.<java.lang.String: int length()>();
        i1 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(0, i0, "/?#", ":");
        if i1 < 0 goto label3;

        $z1 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i1, i0, 58);
        if $z1 == 0 goto label3;

        if i1 != 0 goto label0;

        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("scheme name", 0);

     label0:
        $l5 = staticinvoke <java.net.URI: long access$400()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChar(int,long,long,java.lang.String)>(0, 0L, $l5, "scheme name");
        $l6 = staticinvoke <java.net.URI: long access$500()>();
        $l2 = staticinvoke <java.net.URI: long access$600()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>(1, i1, $l6, $l2, "scheme name");
        $r2 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r3 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(0, i1);
        staticinvoke <java.net.URI: java.lang.String access$702(java.net.URI,java.lang.String)>($r2, $r3);
        i7 = i1 + 1;
        i3 = i7;
        $z2 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i7, i0, 47);
        if $z2 == 0 goto label1;

        i8 = specialinvoke r0.<java.net.URI$Parser: int parseHierarchical(int,int)>(i7, i0);
        goto label4;

     label1:
        i4 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i7, i0, "", "#");
        if i4 > i7 goto label2;

        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("scheme-specific part", i7);

     label2:
        $l9 = staticinvoke <java.net.URI: long access$800()>();
        $l10 = staticinvoke <java.net.URI: long access$900()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>(i7, i4, $l9, $l10, "opaque part");
        i8 = i4;
        goto label4;

     label3:
        i3 = 0;
        i8 = specialinvoke r0.<java.net.URI$Parser: int parseHierarchical(int,int)>(0, i0);

     label4:
        $r5 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r6 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i3, i8);
        staticinvoke <java.net.URI: java.lang.String access$1002(java.net.URI,java.lang.String)>($r5, $r6);
        $z3 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i8, i0, 35);
        if $z3 == 0 goto label5;

        $i11 = i8 + 1;
        $l12 = staticinvoke <java.net.URI: long access$800()>();
        $l13 = staticinvoke <java.net.URI: long access$900()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>($i11, i0, $l12, $l13, "fragment");
        $r8 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $i14 = i8 + 1;
        $r9 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>($i14, i0);
        staticinvoke <java.net.URI: java.lang.String access$1102(java.net.URI,java.lang.String)>($r8, $r9);
        i8 = i0;

     label5:
        if i8 >= i0 goto label6;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("end of URI", i8);

     label6:
        return;
    }

    private int parseHierarchical(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i3, $i5, i6, i8, i9, i10;
        long $l4, $l7, $l11, $l12;
        boolean $z0, $z1, $z2;
        java.net.URI $r1, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        $z0 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i2, i1, 47);
        if $z0 == 0 goto label2;

        $i5 = i2 + 1;
        $z1 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>($i5, i1, 47);
        if $z1 == 0 goto label2;

        i2 = i2 + 2;
        i3 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i2, i1, "", "/?#");
        if i3 <= i2 goto label0;

        i2 = specialinvoke r0.<java.net.URI$Parser: int parseAuthority(int,int)>(i2, i3);
        goto label2;

     label0:
        if i3 >= i1 goto label1;

        goto label2;

     label1:
        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("authority", i2);

     label2:
        i6 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i2, i1, "", "?#");
        $l7 = staticinvoke <java.net.URI: long access$1200()>();
        $l4 = staticinvoke <java.net.URI: long access$1300()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>(i2, i6, $l7, $l4, "path");
        $r1 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r2 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i2, i6);
        staticinvoke <java.net.URI: java.lang.String access$1402(java.net.URI,java.lang.String)>($r1, $r2);
        i8 = i6;
        $z2 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i8, i1, 63);
        if $z2 == 0 goto label3;

        i9 = i8 + 1;
        i10 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i9, i1, "", "#");
        $l11 = staticinvoke <java.net.URI: long access$800()>();
        $l12 = staticinvoke <java.net.URI: long access$900()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>(i9, i10, $l11, $l12, "query");
        $r4 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r5 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i9, i10);
        staticinvoke <java.net.URI: java.lang.String access$1502(java.net.URI,java.lang.String)>($r4, $r5);
        i8 = i10;

     label3:
        return i8;
    }

    private int parseAuthority(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i3, $i5, $i7, $i10, $i13;
        java.net.URISyntaxException r1, r2, $r9;
        long $l4, $l6, $l8, $l9, $l11, $l12;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.net.URI $r3, $r6, $r10, $r12, $r14, $r15;
        java.lang.String $r4, $r7, $r16;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        i3 = i2;
        r1 = null;
        $i5 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i2, i1, "", "]");
        if $i5 <= i2 goto label2;

        $l6 = staticinvoke <java.net.URI: long access$1600()>();
        $l4 = staticinvoke <java.net.URI: long access$1700()>();
        $i7 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l6, $l4);
        if $i7 != i1 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        z0 = $z2;
        goto label5;

     label2:
        $l8 = staticinvoke <java.net.URI: long access$1800()>();
        $l9 = staticinvoke <java.net.URI: long access$1900()>();
        $i10 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l8, $l9);
        if $i10 != i1 goto label3;

        $z3 = 1;
        goto label4;

     label3:
        $z3 = 0;

     label4:
        z0 = $z3;

     label5:
        $l11 = staticinvoke <java.net.URI: long access$2000()>();
        $l12 = staticinvoke <java.net.URI: long access$2100()>();
        $i13 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l11, $l12);
        if $i13 != i1 goto label6;

        $z4 = 1;
        goto label7;

     label6:
        $z4 = 0;

     label7:
        z1 = $z4;
        if z1 == 0 goto label8;

        if z0 != 0 goto label8;

        $r3 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r4 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i2, i1);
        staticinvoke <java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>($r3, $r4);
        return i1;

     label8:
        if z0 == 0 goto label14;

     label9:
        i3 = specialinvoke r0.<java.net.URI$Parser: int parseServer(int,int)>(i2, i1);
        if i3 >= i1 goto label10;

        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("end of authority", i3);

     label10:
        $r6 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r7 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i2, i1);
        staticinvoke <java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>($r6, $r7);

     label11:
        goto label14;

     label12:
        $r9 := @caughtexception;
        r2 = $r9;
        $r10 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        staticinvoke <java.net.URI: java.lang.String access$2302(java.net.URI,java.lang.String)>($r10, null);
        $r12 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        staticinvoke <java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>($r12, null);
        $r14 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        staticinvoke <java.net.URI: int access$2502(java.net.URI,int)>($r14, -1);
        $z5 = r0.<java.net.URI$Parser: boolean requireServerAuthority>;
        if $z5 == 0 goto label13;

        throw r2;

     label13:
        r1 = r2;
        i3 = i2;

     label14:
        if i3 >= i1 goto label17;

        if z1 == 0 goto label15;

        $r15 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r16 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i2, i1);
        staticinvoke <java.net.URI: java.lang.String access$2202(java.net.URI,java.lang.String)>($r15, $r16);
        goto label17;

     label15:
        if r1 == null goto label16;

        throw r1;

     label16:
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Illegal character in authority", i3);

     label17:
        return i1;

        catch java.net.URISyntaxException from label9 to label11 with label12;
    }

    private int parseServer(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i3, i5, i7, i8, $i10, $i11, $i15, $i16, i17, i18, $i20;
        long $l4, $l6, $l12, $l13, $l19;
        boolean $z0, $z1, $z2, $z3;
        java.net.URI $r1, $r4, $r7;
        java.lang.String $r2, $r5, $r8;
        java.lang.NumberFormatException $r9, r10;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        i3 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i2, i1, "/?#", "@");
        if i3 < i2 goto label0;

        $z0 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i3, i1, 64);
        if $z0 == 0 goto label0;

        $l6 = staticinvoke <java.net.URI: long access$2600()>();
        $l4 = staticinvoke <java.net.URI: long access$2700()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>(i2, i3, $l6, $l4, "user info");
        $r1 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r2 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i2, i3);
        staticinvoke <java.net.URI: java.lang.String access$2302(java.net.URI,java.lang.String)>($r1, $r2);
        i2 = i3 + 1;

     label0:
        $z1 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i2, i1, 91);
        if $z1 == 0 goto label5;

        i7 = i2 + 1;
        i8 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i7, i1, "/?#", "]");
        if i8 <= i7 goto label4;

        $z2 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i8, i1, 93);
        if $z2 == 0 goto label4;

        i5 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i7, i8, "", "%");
        if i5 <= i7 goto label2;

        specialinvoke r0.<java.net.URI$Parser: int parseIPv6Reference(int,int)>(i7, i5);
        $i10 = i5 + 1;
        if $i10 != i8 goto label1;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String)>("scope id expected");

     label1:
        $i11 = i5 + 1;
        $l12 = staticinvoke <java.net.URI: long access$2800()>();
        $l13 = staticinvoke <java.net.URI: long access$2900()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>($i11, i8, $l12, $l13, "scope id");
        goto label3;

     label2:
        specialinvoke r0.<java.net.URI$Parser: int parseIPv6Reference(int,int)>(i7, i8);

     label3:
        $r4 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $i15 = i7 - 1;
        $i16 = i8 + 1;
        $r5 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>($i15, $i16);
        staticinvoke <java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>($r4, $r5);
        i7 = i8 + 1;
        goto label7;

     label4:
        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("closing bracket for IPv6 address", i8);
        goto label7;

     label5:
        i17 = specialinvoke r0.<java.net.URI$Parser: int parseIPv4Address(int,int)>(i2, i1);
        if i17 > i2 goto label6;

        i17 = specialinvoke r0.<java.net.URI$Parser: int parseHostname(int,int)>(i2, i1);

     label6:
        i7 = i17;

     label7:
        $z3 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i7, i1, 58);
        if $z3 == 0 goto label12;

        i7 = i7 + 1;
        i18 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,java.lang.String,java.lang.String)>(i7, i1, "", "/");
        if i18 <= i7 goto label12;

        $l19 = staticinvoke <java.net.URI: long access$3000()>();
        specialinvoke r0.<java.net.URI$Parser: void checkChars(int,int,long,long,java.lang.String)>(i7, i18, $l19, 0L, "port number");

     label8:
        $r7 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r8 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i7, i18);
        $i20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);
        staticinvoke <java.net.URI: int access$2502(java.net.URI,int)>($r7, $i20);

     label9:
        goto label11;

     label10:
        $r9 := @caughtexception;
        r10 = $r9;
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Malformed port number", i7);

     label11:
        i7 = i18;

     label12:
        if i7 >= i1 goto label13;

        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("port number", i7);

     label13:
        return i7;

        catch java.lang.NumberFormatException from label8 to label9 with label10;
    }

    private int scanByte(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i4, $i5;
        long $l3;
        java.lang.String $r1;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        $l3 = staticinvoke <java.net.URI: long access$3000()>();
        i4 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l3, 0L);
        if i4 > i2 goto label0;

        return i4;

     label0:
        $r1 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i2, i4);
        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);
        if $i5 <= 255 goto label1;

        return i2;

     label1:
        return i4;
    }

    private int scanIPv4Address(int, int, boolean) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i6, i7, $i10, i11, $i12, i13, $i14, i15, $i16, i17, $i18, i19, $i20, i21, $i22, i23;
        boolean z0;
        long $l3, $l4, $l5, $l8, $l9;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        z0 := @parameter2: boolean;
        i2 = i0;
        $l3 = staticinvoke <java.net.URI: long access$3000()>();
        $l4 = staticinvoke <java.net.URI: long access$3100()>();
        $l8 = $l3 | $l4;
        $l5 = staticinvoke <java.net.URI: long access$3200()>();
        $l9 = 0L | $l5;
        i6 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l8, $l9);
        if i6 <= i2 goto label0;

        if z0 == 0 goto label1;

        if i6 == i1 goto label1;

     label0:
        return -1;

     label1:
        $i10 = specialinvoke r0.<java.net.URI$Parser: int scanByte(int,int)>(i2, i6);
        i7 = $i10;
        if $i10 > i2 goto label2;

        goto label10;

     label2:
        i11 = i7;
        $i12 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,char)>(i11, i6, 46);
        i7 = $i12;
        if $i12 > i11 goto label3;

        goto label10;

     label3:
        i13 = i7;
        $i14 = specialinvoke r0.<java.net.URI$Parser: int scanByte(int,int)>(i13, i6);
        i7 = $i14;
        if $i14 > i13 goto label4;

        goto label10;

     label4:
        i15 = i7;
        $i16 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,char)>(i15, i6, 46);
        i7 = $i16;
        if $i16 > i15 goto label5;

        goto label10;

     label5:
        i17 = i7;
        $i18 = specialinvoke r0.<java.net.URI$Parser: int scanByte(int,int)>(i17, i6);
        i7 = $i18;
        if $i18 > i17 goto label6;

        goto label10;

     label6:
        i19 = i7;
        $i20 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,char)>(i19, i6, 46);
        i7 = $i20;
        if $i20 > i19 goto label7;

        goto label10;

     label7:
        i21 = i7;
        $i22 = specialinvoke r0.<java.net.URI$Parser: int scanByte(int,int)>(i21, i6);
        i7 = $i22;
        if $i22 > i21 goto label8;

        goto label10;

     label8:
        i23 = i7;
        if i7 >= i6 goto label9;

        goto label10;

     label9:
        return i7;

     label10:
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Malformed IPv4 address", i7);
        return -1;
    }

    private int takeIPv4Address(int, int, java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2;
        java.lang.String r1;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        i2 = specialinvoke r0.<java.net.URI$Parser: int scanIPv4Address(int,int,boolean)>(i0, i1, 1);
        if i2 > i0 goto label0;

        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>(r1, i0);

     label0:
        return i2;
    }

    private int parseIPv4Address(int, int)
    {
        java.net.URI$Parser r0;
        int i0, i1, i2;
        java.net.URISyntaxException r1, $r2;
        java.lang.NumberFormatException $r3, r4;
        char $c3;
        java.net.URI $r5;
        java.lang.String $r6;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;

     label0:
        i2 = specialinvoke r0.<java.net.URI$Parser: int scanIPv4Address(int,int,boolean)>(i0, i1, 0);

     label1:
        goto label4;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return -1;

     label3:
        $r3 := @caughtexception;
        r4 = $r3;
        return -1;

     label4:
        if i2 <= i0 goto label5;

        if i2 >= i1 goto label5;

        $c3 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>(i2);
        if $c3 == 58 goto label5;

        i2 = -1;

     label5:
        if i2 <= i0 goto label6;

        $r5 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r6 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i0, i2);
        staticinvoke <java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>($r5, $r6);

     label6:
        return i2;

        catch java.net.URISyntaxException from label0 to label1 with label2;
        catch java.lang.NumberFormatException from label0 to label1 with label3;
    }

    private int parseHostname(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i3, i6, i13, $i14, $i16, i17;
        long $l4, $l5, $l7, $l8, $l9, $l10, $l11, $l12, $l19;
        char $c15, $c18;
        boolean $z0, $z1;
        java.net.URI $r1;
        java.lang.String $r2;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        i3 = -1;

     label0:
        $l4 = staticinvoke <java.net.URI: long access$2800()>();
        $l5 = staticinvoke <java.net.URI: long access$2900()>();
        i6 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l4, $l5);
        if i6 > i2 goto label1;

        goto label5;

     label1:
        i3 = i2;
        if i6 <= i2 goto label3;

        i2 = i6;
        $l8 = staticinvoke <java.net.URI: long access$2800()>();
        $l9 = staticinvoke <java.net.URI: long access$3300()>();
        $l10 = $l8 | $l9;
        $l11 = staticinvoke <java.net.URI: long access$2900()>();
        $l7 = staticinvoke <java.net.URI: long access$3400()>();
        $l12 = $l11 | $l7;
        i13 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l10, $l12);
        if i13 <= i2 goto label3;

        $i14 = i13 - 1;
        $c15 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>($i14);
        if $c15 != 45 goto label2;

        $i16 = i13 - 1;
        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Illegal character in hostname", $i16);

     label2:
        i2 = i13;

     label3:
        i17 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,char)>(i2, i1, 46);
        if i17 > i2 goto label4;

        goto label5;

     label4:
        i2 = i17;
        if i2 < i1 goto label0;

     label5:
        if i2 >= i1 goto label6;

        $z0 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i2, i1, 58);
        if $z0 != 0 goto label6;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Illegal character in hostname", i2);

     label6:
        if i3 >= 0 goto label7;

        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("hostname", i0);

     label7:
        if i3 <= i0 goto label8;

        $c18 = specialinvoke r0.<java.net.URI$Parser: char charAt(int)>(i3);
        $l19 = staticinvoke <java.net.URI: long access$400()>();
        $z1 = staticinvoke <java.net.URI: boolean access$300(char,long,long)>($c18, 0L, $l19);
        if $z1 != 0 goto label8;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Illegal character in hostname", i3);

     label8:
        $r1 = r0.<java.net.URI$Parser: java.net.URI this$0>;
        $r2 = specialinvoke r0.<java.net.URI$Parser: java.lang.String substring(int,int)>(i0, i2);
        staticinvoke <java.net.URI: java.lang.String access$2402(java.net.URI,java.lang.String)>($r1, $r2);
        return i2;
    }

    private int parseIPv6Reference(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        z0 = 0;
        i3 = specialinvoke r0.<java.net.URI$Parser: int scanHexSeq(int,int)>(i2, i1);
        if i3 <= i2 goto label1;

        i2 = i3;
        $z1 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,java.lang.String)>(i2, i1, "::");
        if $z1 == 0 goto label0;

        z0 = 1;
        $i4 = i2 + 2;
        i2 = specialinvoke r0.<java.net.URI$Parser: int scanHexPost(int,int)>($i4, i1);
        goto label2;

     label0:
        $z2 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i2, i1, 58);
        if $z2 == 0 goto label2;

        $i5 = i2 + 1;
        i2 = specialinvoke r0.<java.net.URI$Parser: int takeIPv4Address(int,int,java.lang.String)>($i5, i1, "IPv4 address");
        $i6 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        $i7 = $i6 + 4;
        r0.<java.net.URI$Parser: int ipv6byteCount> = $i7;
        goto label2;

     label1:
        $z3 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,java.lang.String)>(i2, i1, "::");
        if $z3 == 0 goto label2;

        z0 = 1;
        $i8 = i2 + 2;
        i2 = specialinvoke r0.<java.net.URI$Parser: int scanHexPost(int,int)>($i8, i1);

     label2:
        if i2 >= i1 goto label3;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Malformed IPv6 address", i0);

     label3:
        $i9 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        if $i9 <= 16 goto label4;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("IPv6 address too long", i0);

     label4:
        if z0 != 0 goto label5;

        $i10 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        if $i10 >= 16 goto label5;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("IPv6 address too short", i0);

     label5:
        if z0 == 0 goto label6;

        $i11 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        if $i11 != 16 goto label6;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("Malformed IPv6 address", i0);

     label6:
        return i2;
    }

    private int scanHexPost(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        boolean $z0;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        if i2 != i1 goto label0;

        return i2;

     label0:
        i3 = specialinvoke r0.<java.net.URI$Parser: int scanHexSeq(int,int)>(i2, i1);
        if i3 <= i2 goto label1;

        i4 = i3;
        $z0 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i4, i1, 58);
        if $z0 == 0 goto label2;

        i5 = i4 + 1;
        i4 = specialinvoke r0.<java.net.URI$Parser: int takeIPv4Address(int,int,java.lang.String)>(i5, i1, "hex digits or IPv4 address");
        $i6 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        $i7 = $i6 + 4;
        r0.<java.net.URI$Parser: int ipv6byteCount> = $i7;
        goto label2;

     label1:
        i4 = specialinvoke r0.<java.net.URI$Parser: int takeIPv4Address(int,int,java.lang.String)>(i2, i1, "hex digits or IPv4 address");
        $i8 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        $i9 = $i8 + 4;
        r0.<java.net.URI$Parser: int ipv6byteCount> = $i9;

     label2:
        return i4;
    }

    private int scanHexSeq(int, int) throws java.net.URISyntaxException
    {
        java.net.URI$Parser r0;
        int i0, i1, i2, i5, $i6, $i7, $i8, i9, $i10, i11, i14, $i15, $i16, $i17;
        long $l3, $l4, $l12, $l13;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.net.URI$Parser;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        $l3 = staticinvoke <java.net.URI: long access$100()>();
        $l4 = staticinvoke <java.net.URI: long access$200()>();
        i5 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i2, i1, $l3, $l4);
        if i5 > i2 goto label0;

        return -1;

     label0:
        $z0 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i5, i1, 46);
        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i6 = i2 + 4;
        if i5 <= $i6 goto label2;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("IPv6 hexadecimal digit sequence too long", i2);

     label2:
        $i7 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        $i8 = $i7 + 2;
        r0.<java.net.URI$Parser: int ipv6byteCount> = $i8;
        i9 = i5;

     label3:
        if i9 >= i1 goto label9;

        $z1 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i9, i1, 58);
        if $z1 != 0 goto label4;

        goto label9;

     label4:
        $i10 = i9 + 1;
        $z2 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>($i10, i1, 58);
        if $z2 == 0 goto label5;

        goto label9;

     label5:
        i11 = i9 + 1;
        $l12 = staticinvoke <java.net.URI: long access$100()>();
        $l13 = staticinvoke <java.net.URI: long access$200()>();
        i14 = specialinvoke r0.<java.net.URI$Parser: int scan(int,int,long,long)>(i11, i1, $l12, $l13);
        if i14 > i11 goto label6;

        specialinvoke r0.<java.net.URI$Parser: void failExpecting(java.lang.String,int)>("digits for an IPv6 address", i11);

     label6:
        $z3 = specialinvoke r0.<java.net.URI$Parser: boolean at(int,int,char)>(i14, i1, 46);
        if $z3 == 0 goto label7;

        i9 = i11 + -1;
        goto label9;

     label7:
        $i15 = i11 + 4;
        if i14 <= $i15 goto label8;

        specialinvoke r0.<java.net.URI$Parser: void fail(java.lang.String,int)>("IPv6 hexadecimal digit sequence too long", i11);

     label8:
        $i16 = r0.<java.net.URI$Parser: int ipv6byteCount>;
        $i17 = $i16 + 2;
        r0.<java.net.URI$Parser: int ipv6byteCount> = $i17;
        i9 = i14;
        goto label3;

     label9:
        return i9;
    }
}
