class java.util.logging.FileHandler$MeteredStream extends java.io.OutputStream
{
    java.io.OutputStream out;
    int written;
    final java.util.logging.FileHandler this$0;

    void <init>(java.util.logging.FileHandler, java.io.OutputStream, int)
    {
        java.util.logging.FileHandler$MeteredStream r0;
        java.util.logging.FileHandler r1;
        java.io.OutputStream r2;
        int i0;

        r0 := @this: java.util.logging.FileHandler$MeteredStream;
        r1 := @parameter0: java.util.logging.FileHandler;
        r2 := @parameter1: java.io.OutputStream;
        i0 := @parameter2: int;
        r0.<java.util.logging.FileHandler$MeteredStream: java.util.logging.FileHandler this$0> = r1;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        r0.<java.util.logging.FileHandler$MeteredStream: java.io.OutputStream out> = r2;
        r0.<java.util.logging.FileHandler$MeteredStream: int written> = i0;
        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.util.logging.FileHandler$MeteredStream r0;
        int i0, $i1, $i2;
        java.io.OutputStream $r1;

        r0 := @this: java.util.logging.FileHandler$MeteredStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.logging.FileHandler$MeteredStream: java.io.OutputStream out>;
        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);
        $i1 = r0.<java.util.logging.FileHandler$MeteredStream: int written>;
        $i2 = $i1 + 1;
        r0.<java.util.logging.FileHandler$MeteredStream: int written> = $i2;
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.util.logging.FileHandler$MeteredStream r0;
        byte[] r1;
        java.io.OutputStream $r2;
        int $i0, $i1, $i2;

        r0 := @this: java.util.logging.FileHandler$MeteredStream;
        r1 := @parameter0: byte[];
        $r2 = r0.<java.util.logging.FileHandler$MeteredStream: java.io.OutputStream out>;
        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);
        $i0 = r0.<java.util.logging.FileHandler$MeteredStream: int written>;
        $i1 = lengthof r1;
        $i2 = $i0 + $i1;
        r0.<java.util.logging.FileHandler$MeteredStream: int written> = $i2;
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.util.logging.FileHandler$MeteredStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.io.OutputStream $r2;

        r0 := @this: java.util.logging.FileHandler$MeteredStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = r0.<java.util.logging.FileHandler$MeteredStream: java.io.OutputStream out>;
        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);
        $i2 = r0.<java.util.logging.FileHandler$MeteredStream: int written>;
        $i3 = $i2 + i1;
        r0.<java.util.logging.FileHandler$MeteredStream: int written> = $i3;
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.util.logging.FileHandler$MeteredStream r0;
        java.io.OutputStream $r1;

        r0 := @this: java.util.logging.FileHandler$MeteredStream;
        $r1 = r0.<java.util.logging.FileHandler$MeteredStream: java.io.OutputStream out>;
        virtualinvoke $r1.<java.io.OutputStream: void flush()>();
        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.logging.FileHandler$MeteredStream r0;
        java.io.OutputStream $r1;

        r0 := @this: java.util.logging.FileHandler$MeteredStream;
        $r1 = r0.<java.util.logging.FileHandler$MeteredStream: java.io.OutputStream out>;
        virtualinvoke $r1.<java.io.OutputStream: void close()>();
        return;
    }
}
