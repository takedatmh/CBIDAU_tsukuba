public class org.apache.tomcat.util.net.NioEndpoint extends org.apache.tomcat.util.net.AbstractEndpoint
{
    private static final org.apache.juli.logging.Log log;
    public static final int OP_REGISTER;
    public static final int OP_CALLBACK;
    protected org.apache.tomcat.util.net.NioSelectorPool selectorPool;
    protected java.nio.channels.ServerSocketChannel serverSock;
    protected boolean useSendfile;
    protected int oomParachute;
    protected byte[] oomParachuteData;
    protected static final java.lang.String oomParachuteMsg;
    long lastParachuteCheck;
    protected volatile java.util.concurrent.CountDownLatch stopLatch;
    protected java.util.concurrent.ConcurrentLinkedQueue processorCache;
    protected java.util.concurrent.ConcurrentLinkedQueue keyCache;
    protected java.util.concurrent.ConcurrentLinkedQueue eventCache;
    protected java.util.concurrent.ConcurrentLinkedQueue nioChannels;
    protected int pollerThreadPriority;
    protected org.apache.tomcat.util.net.NioEndpoint$Handler handler;
    protected boolean useComet;
    protected int pollerThreadCount;
    protected long selectorTimeout;
    protected org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers;
    protected java.util.concurrent.atomic.AtomicInteger pollerRotater;
    protected javax.net.ssl.SSLContext sslContext;
    private java.lang.String[] enabledCiphers;
    private java.lang.String[] enabledProtocols;

    static void <clinit>()
    {
        org.apache.juli.logging.Log $r0;

        $r0 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/tomcat/util/net/NioEndpoint");
        <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log> = $r0;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioSelectorPool $r1;
        long $l0;
        org.apache.tomcat.util.net.NioEndpoint$1 $r2;
        org.apache.tomcat.util.net.NioEndpoint$2 $r3;
        org.apache.tomcat.util.net.NioEndpoint$3 $r4;
        org.apache.tomcat.util.net.NioEndpoint$4 $r5;
        java.lang.Runtime $r6;
        int $i1, $i2;
        java.util.concurrent.atomic.AtomicInteger $r7;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        specialinvoke r0.<org.apache.tomcat.util.net.AbstractEndpoint: void <init>()>();
        $r1 = new org.apache.tomcat.util.net.NioSelectorPool;
        specialinvoke $r1.<org.apache.tomcat.util.net.NioSelectorPool: void <init>()>();
        r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool selectorPool> = $r1;
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock> = null;
        r0.<org.apache.tomcat.util.net.NioEndpoint: boolean useSendfile> = 1;
        r0.<org.apache.tomcat.util.net.NioEndpoint: int oomParachute> = 1048576;
        r0.<org.apache.tomcat.util.net.NioEndpoint: byte[] oomParachuteData> = null;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<org.apache.tomcat.util.net.NioEndpoint: long lastParachuteCheck> = $l0;
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.CountDownLatch stopLatch> = null;
        $r2 = new org.apache.tomcat.util.net.NioEndpoint$1;
        specialinvoke $r2.<org.apache.tomcat.util.net.NioEndpoint$1: void <init>(org.apache.tomcat.util.net.NioEndpoint)>(r0);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue processorCache> = $r2;
        $r3 = new org.apache.tomcat.util.net.NioEndpoint$2;
        specialinvoke $r3.<org.apache.tomcat.util.net.NioEndpoint$2: void <init>(org.apache.tomcat.util.net.NioEndpoint)>(r0);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue keyCache> = $r3;
        $r4 = new org.apache.tomcat.util.net.NioEndpoint$3;
        specialinvoke $r4.<org.apache.tomcat.util.net.NioEndpoint$3: void <init>(org.apache.tomcat.util.net.NioEndpoint)>(r0);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue eventCache> = $r4;
        $r5 = new org.apache.tomcat.util.net.NioEndpoint$4;
        specialinvoke $r5.<org.apache.tomcat.util.net.NioEndpoint$4: void <init>(org.apache.tomcat.util.net.NioEndpoint)>(r0);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue nioChannels> = $r5;
        r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadPriority> = 5;
        r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Handler handler> = null;
        r0.<org.apache.tomcat.util.net.NioEndpoint: boolean useComet> = 1;
        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $i1 = virtualinvoke $r6.<java.lang.Runtime: int availableProcessors()>();
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(2, $i1);
        r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadCount> = $i2;
        r0.<org.apache.tomcat.util.net.NioEndpoint: long selectorTimeout> = 1000L;
        r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers> = null;
        $r7 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.atomic.AtomicInteger pollerRotater> = $r7;
        r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext> = null;
        return;
    }

    public boolean setProperty(java.lang.String, java.lang.String)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        java.lang.String r1, r2, r3, $r4, $r7, $r15;
        java.lang.Exception r5, $r8;
        boolean $z0, $z1, $z2;
        org.apache.tomcat.util.net.NioSelectorPool $r6;
        int $i0;
        org.apache.juli.logging.Log $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 = "selectorPool.";

     label0:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("selectorPool.");
        if $z0 == 0 goto label2;

        $r6 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool selectorPool>;
        $r4 = "selectorPool.";
        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);
        $z1 = staticinvoke <org.apache.tomcat.util.IntrospectionUtils: boolean setProperty(java.lang.Object,java.lang.String,java.lang.String)>($r6, $r7, r2);

     label1:
        return $z1;

     label2:
        $z2 = specialinvoke r0.<org.apache.tomcat.util.net.AbstractEndpoint: boolean setProperty(java.lang.String,java.lang.String)>(r1, r2);

     label3:
        return $z2;

     label4:
        $r8 := @caughtexception;
        r5 = $r8;
        $r9 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to set attribute \"");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" to \"");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r9.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r15, r5);
        return 0;

        catch java.lang.Exception from label0 to label1 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void setPollerThreadPriority(int)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        i0 := @parameter0: int;
        r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadPriority> = i0;
        return;
    }

    public int getPollerThreadPriority()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $i0 = r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadPriority>;
        return $i0;
    }

    public void setHandler(org.apache.tomcat.util.net.NioEndpoint$Handler)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioEndpoint$Handler r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: org.apache.tomcat.util.net.NioEndpoint$Handler;
        r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Handler handler> = r1;
        return;
    }

    public org.apache.tomcat.util.net.NioEndpoint$Handler getHandler()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioEndpoint$Handler $r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Handler handler>;
        return $r1;
    }

    public void setUseComet(boolean)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        boolean z0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        z0 := @parameter0: boolean;
        r0.<org.apache.tomcat.util.net.NioEndpoint: boolean useComet> = z0;
        return;
    }

    public boolean getUseComet()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $z0 = r0.<org.apache.tomcat.util.net.NioEndpoint: boolean useComet>;
        return $z0;
    }

    public boolean getUseCometTimeout()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: boolean getUseComet()>();
        return $z0;
    }

    public boolean getUsePolling()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        return 1;
    }

    public void setPollerThreadCount(int)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        i0 := @parameter0: int;
        r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadCount> = i0;
        return;
    }

    public int getPollerThreadCount()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $i0 = r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadCount>;
        return $i0;
    }

    public void setSelectorTimeout(long)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        long l0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        l0 := @parameter0: long;
        r0.<org.apache.tomcat.util.net.NioEndpoint: long selectorTimeout> = l0;
        return;
    }

    public long getSelectorTimeout()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        long $l0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $l0 = r0.<org.apache.tomcat.util.net.NioEndpoint: long selectorTimeout>;
        return $l0;
    }

    public org.apache.tomcat.util.net.NioEndpoint$Poller getPoller0()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int i0, $i1, $i2, $i3;
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.apache.tomcat.util.net.NioEndpoint$Poller[] $r2, $r3;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r4;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.atomic.AtomicInteger pollerRotater>;
        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i1);
        $r2 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $i3 = lengthof $r2;
        i0 = $i2 % $i3;
        $r3 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $r4 = $r3[i0];
        return $r4;
    }

    public void setSelectorPool(org.apache.tomcat.util.net.NioSelectorPool)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioSelectorPool r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: org.apache.tomcat.util.net.NioSelectorPool;
        r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool selectorPool> = r1;
        return;
    }

    public void setSocketProperties(org.apache.tomcat.util.net.SocketProperties)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.SocketProperties r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketProperties;
        r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties> = r1;
        return;
    }

    public void setUseSendfile(boolean)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        boolean z0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        z0 := @parameter0: boolean;
        r0.<org.apache.tomcat.util.net.NioEndpoint: boolean useSendfile> = z0;
        return;
    }

    public boolean getDeferAccept()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        return 0;
    }

    public void setOomParachute(int)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        i0 := @parameter0: int;
        r0.<org.apache.tomcat.util.net.NioEndpoint: int oomParachute> = i0;
        return;
    }

    public void setOomParachuteData(byte[])
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        byte[] r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: byte[];
        r0.<org.apache.tomcat.util.net.NioEndpoint: byte[] oomParachuteData> = r1;
        return;
    }

    public javax.net.ssl.SSLContext getSSLContext()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        javax.net.ssl.SSLContext $r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext>;
        return $r1;
    }

    public void setSSLContext(javax.net.ssl.SSLContext)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        javax.net.ssl.SSLContext r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: javax.net.ssl.SSLContext;
        r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext> = r1;
        return;
    }

    public int getLocalPort()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        java.nio.channels.ServerSocketChannel r1;
        java.net.ServerSocket r2;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock>;
        if r1 != null goto label0;

        return -1;

     label0:
        r2 = virtualinvoke r1.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
        if r2 != null goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke r2.<java.net.ServerSocket: int getLocalPort()>();
        return $i0;
    }

    protected void checkParachute()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        boolean z0;
        java.lang.Throwable r1, $r3;
        long $l0, $l1, $l2, $l4;
        byte $b3;
        org.apache.juli.logging.Log $r2;
        java.io.PrintStream $r4;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        z0 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: boolean reclaimParachute(boolean)>(0);
        if z0 != 0 goto label4;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l1 = r0.<org.apache.tomcat.util.net.NioEndpoint: long lastParachuteCheck>;
        $l2 = $l0 - $l1;
        $b3 = $l2 cmp 10000L;
        if $b3 <= 0 goto label4;

     label0:
        $r2 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        interfaceinvoke $r2.<org.apache.juli.logging.Log: void fatal(java.lang.Object)>("SEVERE:Memory usage is low, parachute is non existent, your system may start failing.");

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>(r1);
        $r4 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("SEVERE:Memory usage is low, parachute is non existent, your system may start failing.");

     label3:
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<org.apache.tomcat.util.net.NioEndpoint: long lastParachuteCheck> = $l4;

     label4:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    protected boolean reclaimParachute(boolean)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        boolean z0;
        byte[] $r1, $r3, $r4;
        int $i0, $i2, $i3, $i6;
        java.lang.Runtime $r2;
        long $l1, $l4;
        byte $b5;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        z0 := @parameter0: boolean;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: byte[] oomParachuteData>;
        if $r1 == null goto label0;

        return 1;

     label0:
        $i0 = r0.<org.apache.tomcat.util.net.NioEndpoint: int oomParachute>;
        if $i0 <= 0 goto label2;

        if z0 != 0 goto label1;

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $l1 = virtualinvoke $r2.<java.lang.Runtime: long freeMemory()>();
        $i2 = r0.<org.apache.tomcat.util.net.NioEndpoint: int oomParachute>;
        $i3 = $i2 * 2;
        $l4 = (long) $i3;
        $b5 = $l1 cmp $l4;
        if $b5 <= 0 goto label2;

     label1:
        $i6 = r0.<org.apache.tomcat.util.net.NioEndpoint: int oomParachute>;
        $r3 = newarray (byte)[$i6];
        r0.<org.apache.tomcat.util.net.NioEndpoint: byte[] oomParachuteData> = $r3;

     label2:
        $r4 = r0.<org.apache.tomcat.util.net.NioEndpoint: byte[] oomParachuteData>;
        if $r4 == null goto label3;

        return 1;

     label3:
        return 0;
    }

    protected void releaseCaches()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        java.util.concurrent.ConcurrentLinkedQueue $r1, $r2, $r3;
        org.apache.tomcat.util.net.NioEndpoint$Handler $r4, $r5;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue keyCache>;
        virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r2 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue nioChannels>;
        virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r3 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue processorCache>;
        virtualinvoke $r3.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r4 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Handler handler>;
        if $r4 == null goto label0;

        $r5 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Handler handler>;
        interfaceinvoke $r5.<org.apache.tomcat.util.net.NioEndpoint$Handler: void recycle()>();

     label0:
        return;
    }

    public int getKeepAliveCount()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int i0, i1, $i2, $i3;
        org.apache.tomcat.util.net.NioEndpoint$Poller[] $r1, $r2, $r4;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r3;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        if $r1 != null goto label0;

        return 0;

     label0:
        i0 = 0;
        i1 = 0;
        goto label2;

     label1:
        $r2 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $r3 = $r2[i1];
        $i2 = virtualinvoke $r3.<org.apache.tomcat.util.net.NioEndpoint$Poller: int getKeyCount()>();
        i0 = i0 + $i2;
        i1 = i1 + 1;

     label2:
        $r4 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $i3 = lengthof $r4;
        if i1 < $i3 goto label1;

        return i0;
    }

    public void bind() throws java.lang.Exception
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        java.nio.channels.ServerSocketChannel $r1, $r6, $r11, $r13, $r15;
        java.net.InetSocketAddress r2, $r9;
        org.apache.tomcat.util.net.SSLUtil r3;
        javax.net.ssl.SSLSessionContext r4;
        org.apache.tomcat.util.net.SocketProperties $r5, $r17;
        java.net.ServerSocket $r7, $r12, $r16;
        java.net.InetAddress $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.concurrent.CountDownLatch $r18;
        boolean $z0;
        org.apache.tomcat.util.net.NioEndpoint$Handler $r19;
        org.apache.tomcat.util.net.SSLImplementation $r20;
        javax.net.ssl.SSLContext $r21, $r22, $r26, $r27, $r29;
        javax.net.ssl.KeyManager[] $r23, $r24;
        javax.net.ssl.TrustManager[] $r25;
        java.lang.String[] $r28, $r30;
        org.apache.tomcat.util.net.NioSelectorPool $r31;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = staticinvoke <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>();
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock> = $r1;
        $r5 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $r6 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock>;
        $r7 = virtualinvoke $r6.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
        virtualinvoke $r5.<org.apache.tomcat.util.net.SocketProperties: void setProperties(java.net.ServerSocket)>($r7);
        $r8 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.net.InetAddress getAddress()>();
        if $r8 == null goto label0;

        $r9 = new java.net.InetSocketAddress;
        $r10 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.net.InetAddress getAddress()>();
        $i0 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: int getPort()>();
        specialinvoke $r9.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r10, $i0);
        goto label1;

     label0:
        $r9 = new java.net.InetSocketAddress;
        $i1 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: int getPort()>();
        specialinvoke $r9.<java.net.InetSocketAddress: void <init>(int)>($i1);

     label1:
        r2 = $r9;
        $r11 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock>;
        $r12 = virtualinvoke $r11.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
        $i2 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: int getBacklog()>();
        virtualinvoke $r12.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>(r2, $i2);
        $r13 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock>;
        virtualinvoke $r13.<java.nio.channels.ServerSocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);
        $r15 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock>;
        $r16 = virtualinvoke $r15.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
        $r17 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties getSocketProperties()>();
        $i3 = virtualinvoke $r17.<org.apache.tomcat.util.net.SocketProperties: int getSoTimeout()>();
        virtualinvoke $r16.<java.net.ServerSocket: void setSoTimeout(int)>($i3);
        $i4 = r0.<org.apache.tomcat.util.net.NioEndpoint: int acceptorThreadCount>;
        if $i4 != 0 goto label2;

        r0.<org.apache.tomcat.util.net.NioEndpoint: int acceptorThreadCount> = 1;

     label2:
        $i5 = r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadCount>;
        if $i5 > 0 goto label3;

        r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadCount> = 1;

     label3:
        $r18 = new java.util.concurrent.CountDownLatch;
        $i6 = r0.<org.apache.tomcat.util.net.NioEndpoint: int pollerThreadCount>;
        specialinvoke $r18.<java.util.concurrent.CountDownLatch: void <init>(int)>($i6);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.CountDownLatch stopLatch> = $r18;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: boolean isSSLEnabled()>();
        if $z0 == 0 goto label5;

        $r19 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Handler handler>;
        $r20 = interfaceinvoke $r19.<org.apache.tomcat.util.net.NioEndpoint$Handler: org.apache.tomcat.util.net.SSLImplementation getSslImplementation()>();
        r3 = virtualinvoke $r20.<org.apache.tomcat.util.net.SSLImplementation: org.apache.tomcat.util.net.SSLUtil getSSLUtil(org.apache.tomcat.util.net.AbstractEndpoint)>(r0);
        $r21 = interfaceinvoke r3.<org.apache.tomcat.util.net.SSLUtil: javax.net.ssl.SSLContext createSSLContext()>();
        r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext> = $r21;
        $r22 = r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext>;
        $r23 = interfaceinvoke r3.<org.apache.tomcat.util.net.SSLUtil: javax.net.ssl.KeyManager[] getKeyManagers()>();
        $r24 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.KeyManager[] wrap(javax.net.ssl.KeyManager[])>($r23);
        $r25 = interfaceinvoke r3.<org.apache.tomcat.util.net.SSLUtil: javax.net.ssl.TrustManager[] getTrustManagers()>();
        virtualinvoke $r22.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r24, $r25, null);
        $r26 = r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext>;
        r4 = virtualinvoke $r26.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()>();
        if r4 == null goto label4;

        interfaceinvoke r3.<org.apache.tomcat.util.net.SSLUtil: void configureSessionContext(javax.net.ssl.SSLSessionContext)>(r4);

     label4:
        $r27 = r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext>;
        $r28 = interfaceinvoke r3.<org.apache.tomcat.util.net.SSLUtil: java.lang.String[] getEnableableCiphers(javax.net.ssl.SSLContext)>($r27);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String[] enabledCiphers> = $r28;
        $r29 = r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext>;
        $r30 = interfaceinvoke r3.<org.apache.tomcat.util.net.SSLUtil: java.lang.String[] getEnableableProtocols(javax.net.ssl.SSLContext)>($r29);
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String[] enabledProtocols> = $r30;

     label5:
        $i7 = r0.<org.apache.tomcat.util.net.NioEndpoint: int oomParachute>;
        if $i7 <= 0 goto label6;

        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: boolean reclaimParachute(boolean)>(1);

     label6:
        $r31 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool selectorPool>;
        virtualinvoke $r31.<org.apache.tomcat.util.net.NioSelectorPool: void open()>();
        return;
    }

    public javax.net.ssl.KeyManager[] wrap(javax.net.ssl.KeyManager[])
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        javax.net.ssl.KeyManager[] r1, r2;
        int i0, $i1, $i2;
        java.lang.String r3, $r6, $r7, $r8;
        org.apache.tomcat.util.net.jsse.NioX509KeyManager $r4;
        javax.net.ssl.KeyManager $r5, $r10, $r12;
        boolean $z0, $z1;
        java.util.Locale $r9;
        javax.net.ssl.X509KeyManager $r11;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: javax.net.ssl.KeyManager[];
        if r1 != null goto label0;

        return null;

     label0:
        $i1 = lengthof r1;
        r2 = newarray (javax.net.ssl.KeyManager)[$i1];
        i0 = 0;
        goto label5;

     label1:
        $r5 = r1[i0];
        $z0 = $r5 instanceof javax.net.ssl.X509KeyManager;
        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getKeyAlias()>();
        if $r6 == null goto label3;

        r3 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getKeyAlias()>();
        $r7 = "jks";
        $r8 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getKeystoreType()>();
        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);
        if $z1 == 0 goto label2;

        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;
        r3 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

     label2:
        $r4 = new org.apache.tomcat.util.net.jsse.NioX509KeyManager;
        $r10 = r1[i0];
        $r11 = (javax.net.ssl.X509KeyManager) $r10;
        specialinvoke $r4.<org.apache.tomcat.util.net.jsse.NioX509KeyManager: void <init>(javax.net.ssl.X509KeyManager,java.lang.String)>($r11, r3);
        r2[i0] = $r4;
        goto label4;

     label3:
        $r12 = r1[i0];
        r2[i0] = $r12;

     label4:
        i0 = i0 + 1;

     label5:
        $i2 = lengthof r2;
        if i0 < $i2 goto label1;

        return r2;
    }

    public void startInternal() throws java.lang.Exception
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int i0, $i1, $i2, $i3;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r1, $r9;
        java.lang.Thread r2, $r7;
        boolean $z0;
        java.util.concurrent.Executor $r3;
        org.apache.tomcat.util.net.NioEndpoint$Poller[] $r5, $r6, $r8, $r16;
        java.lang.StringBuilder $r10, $r13, $r14;
        java.lang.String $r11, $r12, $r15;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $z0 = r0.<org.apache.tomcat.util.net.NioEndpoint: boolean running>;
        if $z0 != 0 goto label3;

        r0.<org.apache.tomcat.util.net.NioEndpoint: boolean running> = 1;
        r0.<org.apache.tomcat.util.net.NioEndpoint: boolean paused> = 0;
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.Executor getExecutor()>();
        if $r3 != null goto label0;

        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void createExecutor()>();

     label0:
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.threads.LimitLatch initializeConnectionLatch()>();
        $i1 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: int getPollerThreadCount()>();
        $r5 = newarray (org.apache.tomcat.util.net.NioEndpoint$Poller)[$i1];
        r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers> = $r5;
        i0 = 0;
        goto label2;

     label1:
        $r6 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $r1 = new org.apache.tomcat.util.net.NioEndpoint$Poller;
        specialinvoke $r1.<org.apache.tomcat.util.net.NioEndpoint$Poller: void <init>(org.apache.tomcat.util.net.NioEndpoint)>(r0);
        $r6[i0] = $r1;
        $r7 = new java.lang.Thread;
        $r8 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $r9 = $r8[i0];
        $r10 = new java.lang.StringBuilder;
        $r11 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getName()>();
        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);
        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-ClientPoller-");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r9, $r15);
        r2 = $r7;
        $i2 = r0.<org.apache.tomcat.util.net.NioEndpoint: int threadPriority>;
        virtualinvoke r2.<java.lang.Thread: void setPriority(int)>($i2);
        virtualinvoke r2.<java.lang.Thread: void setDaemon(boolean)>(1);
        virtualinvoke r2.<java.lang.Thread: void start()>();
        i0 = i0 + 1;

     label2:
        $r16 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $i3 = lengthof $r16;
        if i0 < $i3 goto label1;

        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void startAcceptorThreads()>();

     label3:
        return;
    }

    public void stopInternal()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        org.apache.tomcat.util.net.NioEndpoint$Poller[] $r1, $r3, $r5, $r6, $r7;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r2, $r4;
        java.util.concurrent.CountDownLatch $r8;
        long $l2, $l3;
        java.util.concurrent.TimeUnit $r9;
        org.apache.juli.logging.Log $r10, $r15;
        org.apache.tomcat.util.res.StringManager $r11, $r16;
        java.lang.String $r12, $r17;
        java.lang.InterruptedException $r13, r14;
        java.util.concurrent.ConcurrentLinkedQueue $r18, $r19, $r20, $r21;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void releaseConnectionLatch()>();
        $z0 = r0.<org.apache.tomcat.util.net.NioEndpoint: boolean paused>;
        if $z0 != 0 goto label0;

        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void pause()>();

     label0:
        $z1 = r0.<org.apache.tomcat.util.net.NioEndpoint: boolean running>;
        if $z1 == 0 goto label8;

        r0.<org.apache.tomcat.util.net.NioEndpoint: boolean running> = 0;
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void unlockAccept()>();
        i0 = 0;
        goto label4;

     label1:
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $r2 = $r1[i0];
        if $r2 != null goto label2;

        goto label3;

     label2:
        $r3 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $r4 = $r3[i0];
        virtualinvoke $r4.<org.apache.tomcat.util.net.NioEndpoint$Poller: void destroy()>();
        $r5 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $r5[i0] = null;

     label3:
        i0 = i0 + 1;

     label4:
        $r6 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        if $r6 == null goto label5;

        $r7 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller[] pollers>;
        $i1 = lengthof $r7;
        if i0 < $i1 goto label1;

     label5:
        $r8 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.CountDownLatch stopLatch>;
        $l2 = r0.<org.apache.tomcat.util.net.NioEndpoint: long selectorTimeout>;
        $l3 = $l2 + 100L;
        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
        $z2 = virtualinvoke $r8.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l3, $r9);
        if $z2 != 0 goto label8;

        $r10 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $r11 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.res.StringManager sm>;
        $r12 = virtualinvoke $r11.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("endpoint.nio.stopLatchAwaitFail");
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void warn(java.lang.Object)>($r12);

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $r16 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.res.StringManager sm>;
        $r17 = virtualinvoke $r16.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("endpoint.nio.stopLatchAwaitInterrupted");
        interfaceinvoke $r15.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r17, r14);

     label8:
        $r18 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue eventCache>;
        virtualinvoke $r18.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r19 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue keyCache>;
        virtualinvoke $r19.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r20 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue nioChannels>;
        virtualinvoke $r20.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r21 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue processorCache>;
        virtualinvoke $r21.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void shutdownExecutor()>();
        return;

        catch java.lang.InterruptedException from label5 to label6 with label7;
    }

    public void unbind() throws java.lang.Exception
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.juli.logging.Log $r1, $r3, $r12, $r13;
        java.lang.StringBuilder $r2, $r6, $r14, $r17;
        boolean $z0, $z1, $z2;
        java.net.InetSocketAddress $r4, $r15;
        java.net.InetAddress $r5, $r16;
        int $i0, $i1;
        java.lang.String $r7, $r18;
        java.nio.channels.ServerSocketChannel $r8, $r10;
        java.net.ServerSocket $r9;
        org.apache.tomcat.util.net.NioSelectorPool $r11;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r1.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r3 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destroy initiated for ");
        $r4 = new java.net.InetSocketAddress;
        $r5 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.net.InetAddress getAddress()>();
        $i0 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: int getPort()>();
        specialinvoke $r4.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r5, $i0);
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r7);

     label0:
        $z1 = r0.<org.apache.tomcat.util.net.NioEndpoint: boolean running>;
        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void stop()>();

     label1:
        $r8 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock>;
        $r9 = virtualinvoke $r8.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
        virtualinvoke $r9.<java.net.ServerSocket: void close()>();
        $r10 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock>;
        virtualinvoke $r10.<java.nio.channels.ServerSocketChannel: void close()>();
        r0.<org.apache.tomcat.util.net.NioEndpoint: java.nio.channels.ServerSocketChannel serverSock> = null;
        r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext> = null;
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void releaseCaches()>();
        $r11 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool selectorPool>;
        virtualinvoke $r11.<org.apache.tomcat.util.net.NioSelectorPool: void close()>();
        $r12 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $z2 = interfaceinvoke $r12.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z2 == 0 goto label2;

        $r13 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destroy completed for ");
        $r15 = new java.net.InetSocketAddress;
        $r16 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.net.InetAddress getAddress()>();
        $i1 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: int getPort()>();
        specialinvoke $r15.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r16, $i1);
        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r18);

     label2:
        return;
    }

    public int getWriteBufSize()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.SocketProperties $r1;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i0 = virtualinvoke $r1.<org.apache.tomcat.util.net.SocketProperties: int getTxBufSize()>();
        return $i0;
    }

    public int getReadBufSize()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.SocketProperties $r1;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i0 = virtualinvoke $r1.<org.apache.tomcat.util.net.SocketProperties: int getRxBufSize()>();
        return $i0;
    }

    public org.apache.tomcat.util.net.NioSelectorPool getSelectorPool()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioSelectorPool $r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool selectorPool>;
        return $r1;
    }

    public boolean getUseSendfile()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $z0 = r0.<org.apache.tomcat.util.net.NioEndpoint: boolean useSendfile>;
        return $z0;
    }

    public int getOomParachute()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $i0 = r0.<org.apache.tomcat.util.net.NioEndpoint: int oomParachute>;
        return $i0;
    }

    public byte[] getOomParachuteData()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        byte[] $r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = r0.<org.apache.tomcat.util.net.NioEndpoint: byte[] oomParachuteData>;
        return $r1;
    }

    protected org.apache.tomcat.util.net.AbstractEndpoint$Acceptor createAcceptor()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioEndpoint$Acceptor $r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = new org.apache.tomcat.util.net.NioEndpoint$Acceptor;
        specialinvoke $r1.<org.apache.tomcat.util.net.NioEndpoint$Acceptor: void <init>(org.apache.tomcat.util.net.NioEndpoint)>(r0);
        return $r1;
    }

    protected boolean setSocketOptions(java.nio.channels.SocketChannel)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        java.nio.channels.SocketChannel r1;
        java.net.Socket r2;
        org.apache.tomcat.util.net.NioChannel r3, $r23;
        javax.net.ssl.SSLEngine r4, r24;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler r5, $r12, $r18, r22;
        org.apache.tomcat.util.net.SocketProperties $r7, $r13, $r14, $r15, $r19, $r20, $r21;
        java.util.concurrent.ConcurrentLinkedQueue $r8;
        java.lang.Object $r9;
        javax.net.ssl.SSLContext $r10;
        javax.net.ssl.SSLSession $r11;
        boolean $z0, $z1, $z2;
        org.apache.tomcat.util.net.SecureNioChannel $r16, $r25;
        org.apache.tomcat.util.net.NioSelectorPool $r17;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r26;
        java.lang.Throwable $r27, r28, $r30, r31;
        org.apache.juli.logging.Log $r29;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: java.nio.channels.SocketChannel;

     label0:
        virtualinvoke r1.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);
        r2 = virtualinvoke r1.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
        $r7 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        virtualinvoke $r7.<org.apache.tomcat.util.net.SocketProperties: void setProperties(java.net.Socket)>(r2);
        $r8 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue nioChannels>;
        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();
        r3 = (org.apache.tomcat.util.net.NioChannel) $r9;
        if r3 != null goto label2;

        $r10 = r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext>;
        if $r10 == null goto label1;

        r4 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLEngine createSSLEngine()>();
        $r11 = virtualinvoke r4.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();
        i0 = interfaceinvoke $r11.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();
        $r12 = new org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler;
        $r13 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i1 = virtualinvoke $r13.<org.apache.tomcat.util.net.SocketProperties: int getAppReadBufSize()>();
        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i1);
        $r14 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i3 = virtualinvoke $r14.<org.apache.tomcat.util.net.SocketProperties: int getAppWriteBufSize()>();
        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i3);
        $r15 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $z0 = virtualinvoke $r15.<org.apache.tomcat.util.net.SocketProperties: boolean getDirectBuffer()>();
        specialinvoke $r12.<org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler: void <init>(int,int,boolean)>($i2, $i4, $z0);
        r5 = $r12;
        $r16 = new org.apache.tomcat.util.net.SecureNioChannel;
        $r17 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool selectorPool>;
        specialinvoke $r16.<org.apache.tomcat.util.net.SecureNioChannel: void <init>(java.nio.channels.SocketChannel,javax.net.ssl.SSLEngine,org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler,org.apache.tomcat.util.net.NioSelectorPool)>(r1, r4, r5, $r17);
        r3 = $r16;
        goto label4;

     label1:
        $r18 = new org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler;
        $r19 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i5 = virtualinvoke $r19.<org.apache.tomcat.util.net.SocketProperties: int getAppReadBufSize()>();
        $r20 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $i6 = virtualinvoke $r20.<org.apache.tomcat.util.net.SocketProperties: int getAppWriteBufSize()>();
        $r21 = r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.SocketProperties socketProperties>;
        $z1 = virtualinvoke $r21.<org.apache.tomcat.util.net.SocketProperties: boolean getDirectBuffer()>();
        specialinvoke $r18.<org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler: void <init>(int,int,boolean)>($i5, $i6, $z1);
        r22 = $r18;
        $r23 = new org.apache.tomcat.util.net.NioChannel;
        specialinvoke $r23.<org.apache.tomcat.util.net.NioChannel: void <init>(java.nio.channels.SocketChannel,org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler)>(r1, r22);
        r3 = $r23;
        goto label4;

     label2:
        virtualinvoke r3.<org.apache.tomcat.util.net.NioChannel: void setIOChannel(java.nio.channels.SocketChannel)>(r1);
        $z2 = r3 instanceof org.apache.tomcat.util.net.SecureNioChannel;
        if $z2 == 0 goto label3;

        r24 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLEngine createSSLEngine()>();
        $r25 = (org.apache.tomcat.util.net.SecureNioChannel) r3;
        virtualinvoke $r25.<org.apache.tomcat.util.net.SecureNioChannel: void reset(javax.net.ssl.SSLEngine)>(r24);
        goto label4;

     label3:
        virtualinvoke r3.<org.apache.tomcat.util.net.NioChannel: void reset()>();

     label4:
        $r26 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioEndpoint$Poller getPoller0()>();
        virtualinvoke $r26.<org.apache.tomcat.util.net.NioEndpoint$Poller: void register(org.apache.tomcat.util.net.NioChannel)>(r3);

     label5:
        goto label11;

     label6:
        $r27 := @caughtexception;
        r28 = $r27;
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>(r28);

     label7:
        $r29 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        interfaceinvoke $r29.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("", r28);

     label8:
        goto label10;

     label9:
        $r30 := @caughtexception;
        r31 = $r30;
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>(r31);

     label10:
        return 0;

     label11:
        return 1;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    protected javax.net.ssl.SSLEngine createSSLEngine()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        javax.net.ssl.SSLEngine r1;
        javax.net.ssl.SSLContext $r2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r11, $r12;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r2 = r0.<org.apache.tomcat.util.net.NioEndpoint: javax.net.ssl.SSLContext sslContext>;
        r1 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>();
        $r3 = "false";
        $r4 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getClientAuth()>();
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label0;

        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setNeedClientAuth(boolean)>(0);
        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)>(0);
        goto label3;

     label0:
        $r5 = "true";
        $r6 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getClientAuth()>();
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z1 != 0 goto label1;

        $r7 = "yes";
        $r8 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getClientAuth()>();
        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);
        if $z2 == 0 goto label2;

     label1:
        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setNeedClientAuth(boolean)>(1);
        goto label3;

     label2:
        $r9 = "want";
        $r10 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String getClientAuth()>();
        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);
        if $z3 == 0 goto label3;

        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)>(1);

     label3:
        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(0);
        $r11 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String[] enabledCiphers>;
        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setEnabledCipherSuites(java.lang.String[])>($r11);
        $r12 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.lang.String[] enabledProtocols>;
        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setEnabledProtocols(java.lang.String[])>($r12);
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void configureUseServerCipherSuitesOrder(javax.net.ssl.SSLEngine)>(r1);
        return r1;
    }

    protected boolean isWorkerAvailable()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        return 1;
    }

    public void processSocketAsync(org.apache.tomcat.util.net.SocketWrapper, org.apache.tomcat.util.net.SocketStatus)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.tomcat.util.net.SocketStatus r2;
        java.lang.Object $r3;
        org.apache.tomcat.util.net.NioChannel $r4;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.tomcat.util.net.SocketStatus;
        $r3 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r4 = (org.apache.tomcat.util.net.NioChannel) $r3;
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: boolean dispatchForEvent(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)>($r4, r2, 1);
        return;
    }

    public boolean dispatchForEvent(org.apache.tomcat.util.net.NioChannel, org.apache.tomcat.util.net.SocketStatus, boolean)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioChannel r1;
        org.apache.tomcat.util.net.SocketStatus r2, $r3;
        boolean z0;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r4;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: org.apache.tomcat.util.net.NioChannel;
        r2 := @parameter1: org.apache.tomcat.util.net.SocketStatus;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $r3 = <org.apache.tomcat.util.net.SocketStatus: org.apache.tomcat.util.net.SocketStatus OPEN_READ>;
        if r2 != $r3 goto label0;

        $r4 = virtualinvoke r1.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.NioEndpoint$Poller getPoller()>();
        virtualinvoke $r4.<org.apache.tomcat.util.net.NioEndpoint$Poller: void add(org.apache.tomcat.util.net.NioChannel,int)>(r1, 512);
        goto label1;

     label0:
        virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)>(r1, r2, z0);

     label1:
        return 1;
    }

    public boolean processSocket(org.apache.tomcat.util.net.NioChannel, org.apache.tomcat.util.net.SocketStatus, boolean)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.NioChannel r1;
        org.apache.tomcat.util.net.SocketStatus r2;
        boolean z0;
        org.apache.tomcat.util.net.NioEndpoint$KeyAttachment r3;
        org.apache.tomcat.util.net.NioEndpoint$SocketProcessor r4, $r8;
        java.lang.Object $r5, $r7;
        java.util.concurrent.ConcurrentLinkedQueue $r6;
        java.util.concurrent.Executor $r9, $r10;
        java.util.concurrent.RejectedExecutionException $r11, r12;
        org.apache.juli.logging.Log $r13, $r19;
        java.lang.StringBuilder $r14, $r15;
        java.lang.String $r16, $r21;
        java.lang.Throwable $r17, r18;
        org.apache.tomcat.util.res.StringManager $r20;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: org.apache.tomcat.util.net.NioChannel;
        r2 := @parameter1: org.apache.tomcat.util.net.SocketStatus;
        z0 := @parameter2: boolean;

     label0:
        $r5 = virtualinvoke r1.<org.apache.tomcat.util.net.NioChannel: java.lang.Object getAttachment()>();
        r3 = (org.apache.tomcat.util.net.NioEndpoint$KeyAttachment) $r5;
        if r3 != null goto label2;

     label1:
        return 0;

     label2:
        virtualinvoke r3.<org.apache.tomcat.util.net.NioEndpoint$KeyAttachment: void setCometNotify(boolean)>(0);
        $r6 = r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.ConcurrentLinkedQueue processorCache>;
        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();
        r4 = (org.apache.tomcat.util.net.NioEndpoint$SocketProcessor) $r7;
        if r4 != null goto label3;

        $r8 = new org.apache.tomcat.util.net.NioEndpoint$SocketProcessor;
        specialinvoke $r8.<org.apache.tomcat.util.net.NioEndpoint$SocketProcessor: void <init>(org.apache.tomcat.util.net.NioEndpoint,org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus)>(r0, r1, r2);
        r4 = $r8;
        goto label4;

     label3:
        virtualinvoke r4.<org.apache.tomcat.util.net.NioEndpoint$SocketProcessor: void reset(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus)>(r1, r2);

     label4:
        if z0 == 0 goto label5;

        $r9 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.Executor getExecutor()>();
        if $r9 == null goto label5;

        $r10 = virtualinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: java.util.concurrent.Executor getExecutor()>();
        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r4);
        goto label9;

     label5:
        virtualinvoke r4.<org.apache.tomcat.util.net.NioEndpoint$SocketProcessor: void run()>();

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Socket processing request was rejected for:");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r16, r12);
        return 0;

     label8:
        $r17 := @caughtexception;
        r18 = $r17;
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>(r18);
        $r19 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $r20 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.res.StringManager sm>;
        $r21 = virtualinvoke $r20.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("endpoint.process.fail");
        interfaceinvoke $r19.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r21, r18);
        return 0;

     label9:
        return 1;

        catch java.util.concurrent.RejectedExecutionException from label0 to label1 with label7;
        catch java.util.concurrent.RejectedExecutionException from label2 to label6 with label7;
        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label6 with label8;
    }

    public void removeWaitingRequest(org.apache.tomcat.util.net.SocketWrapper)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.tomcat.util.net.SocketWrapper r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        return;
    }

    protected org.apache.juli.logging.Log getLog()
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        org.apache.juli.logging.Log $r1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        $r1 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        return $r1;
    }

    private void closeSocket(java.nio.channels.SocketChannel)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        java.nio.channels.SocketChannel r1;
        java.io.IOException r2, $r4, $r7, r8;
        java.net.Socket $r3;
        org.apache.juli.logging.Log $r5, $r6, $r9, $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter0: java.nio.channels.SocketChannel;

     label0:
        $r3 = virtualinvoke r1.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
        virtualinvoke $r3.<java.net.Socket: void close()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r5.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label3;

        $r6 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        interfaceinvoke $r6.<org.apache.juli.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("", r2);

     label3:
        virtualinvoke r1.<java.nio.channels.SocketChannel: void close()>();

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r9.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label6;

        $r10 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("", r8);

     label6:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.io.IOException from label3 to label4 with label5;
    }

    static void access$0(org.apache.tomcat.util.net.NioEndpoint, java.nio.channels.SocketChannel)
    {
        org.apache.tomcat.util.net.NioEndpoint r0;
        java.nio.channels.SocketChannel r1;

        r0 := @parameter0: org.apache.tomcat.util.net.NioEndpoint;
        r1 := @parameter1: java.nio.channels.SocketChannel;
        specialinvoke r0.<org.apache.tomcat.util.net.NioEndpoint: void closeSocket(java.nio.channels.SocketChannel)>(r1);
        return;
    }

    static org.apache.juli.logging.Log access$1()
    {
        org.apache.juli.logging.Log $r0;

        $r0 = <org.apache.tomcat.util.net.NioEndpoint: org.apache.juli.logging.Log log>;
        return $r0;
    }
}
