public class org.apache.tomcat.util.threads.LimitLatch extends java.lang.Object
{
    private static final org.apache.juli.logging.Log log;
    private final org.apache.tomcat.util.threads.LimitLatch$Sync sync;
    private final java.util.concurrent.atomic.AtomicLong count;
    private volatile long limit;
    private volatile boolean released;

    static void <clinit>()
    {
        org.apache.juli.logging.Log $r0;

        $r0 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/tomcat/util/threads/LimitLatch");
        <org.apache.tomcat.util.threads.LimitLatch: org.apache.juli.logging.Log log> = $r0;
        return;
    }

    public void <init>(long)
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        long l0;
        java.util.concurrent.atomic.AtomicLong $r1;
        org.apache.tomcat.util.threads.LimitLatch$Sync $r2;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.tomcat.util.threads.LimitLatch: boolean released> = 0;
        r0.<org.apache.tomcat.util.threads.LimitLatch: long limit> = l0;
        $r1 = new java.util.concurrent.atomic.AtomicLong;
        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);
        r0.<org.apache.tomcat.util.threads.LimitLatch: java.util.concurrent.atomic.AtomicLong count> = $r1;
        $r2 = new org.apache.tomcat.util.threads.LimitLatch$Sync;
        specialinvoke $r2.<org.apache.tomcat.util.threads.LimitLatch$Sync: void <init>(org.apache.tomcat.util.threads.LimitLatch)>(r0);
        r0.<org.apache.tomcat.util.threads.LimitLatch: org.apache.tomcat.util.threads.LimitLatch$Sync sync> = $r2;
        return;
    }

    public long getCount()
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        $r1 = r0.<org.apache.tomcat.util.threads.LimitLatch: java.util.concurrent.atomic.AtomicLong count>;
        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();
        return $l0;
    }

    public long getLimit()
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        long $l0;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        $l0 = r0.<org.apache.tomcat.util.threads.LimitLatch: long limit>;
        return $l0;
    }

    public void setLimit(long)
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        long l0;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        l0 := @parameter0: long;
        r0.<org.apache.tomcat.util.threads.LimitLatch: long limit> = l0;
        return;
    }

    public void countUpOrAwait() throws java.lang.InterruptedException
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        org.apache.juli.logging.Log $r1, $r3;
        java.lang.StringBuilder $r2, $r6, $r7, $r8;
        boolean $z0;
        java.lang.Thread $r4;
        java.lang.String $r5, $r9;
        long $l0;
        org.apache.tomcat.util.threads.LimitLatch$Sync $r10;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        $r1 = <org.apache.tomcat.util.threads.LimitLatch: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r1.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r3 = <org.apache.tomcat.util.threads.LimitLatch: org.apache.juli.logging.Log log>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Counting up[");
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] latch=");
        $l0 = virtualinvoke r0.<org.apache.tomcat.util.threads.LimitLatch: long getCount()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r9);

     label0:
        $r10 = r0.<org.apache.tomcat.util.threads.LimitLatch: org.apache.tomcat.util.threads.LimitLatch$Sync sync>;
        virtualinvoke $r10.<org.apache.tomcat.util.threads.LimitLatch$Sync: void acquireSharedInterruptibly(int)>(1);
        return;
    }

    public long countDown()
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        long l0;
        org.apache.tomcat.util.threads.LimitLatch$Sync $r1;
        org.apache.juli.logging.Log $r2, $r3;
        boolean $z1;
        java.lang.StringBuilder $r4, $r7, $r8, $r9;
        java.lang.Thread $r5;
        java.lang.String $r6, $r10;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        $r1 = r0.<org.apache.tomcat.util.threads.LimitLatch: org.apache.tomcat.util.threads.LimitLatch$Sync sync>;
        virtualinvoke $r1.<org.apache.tomcat.util.threads.LimitLatch$Sync: boolean releaseShared(int)>(0);
        l0 = virtualinvoke r0.<org.apache.tomcat.util.threads.LimitLatch: long getCount()>();
        $r2 = <org.apache.tomcat.util.threads.LimitLatch: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r2.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label0;

        $r3 = <org.apache.tomcat.util.threads.LimitLatch: org.apache.juli.logging.Log log>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Counting down[");
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r6 = virtualinvoke $r5.<java.lang.Thread: java.lang.String getName()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] latch=");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r3.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r10);

     label0:
        return l0;
    }

    public boolean releaseAll()
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        org.apache.tomcat.util.threads.LimitLatch$Sync $r1;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        r0.<org.apache.tomcat.util.threads.LimitLatch: boolean released> = 1;
        $r1 = r0.<org.apache.tomcat.util.threads.LimitLatch: org.apache.tomcat.util.threads.LimitLatch$Sync sync>;
        $z0 = virtualinvoke $r1.<org.apache.tomcat.util.threads.LimitLatch$Sync: boolean releaseShared(int)>(0);
        return $z0;
    }

    public void reset()
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        $r1 = r0.<org.apache.tomcat.util.threads.LimitLatch: java.util.concurrent.atomic.AtomicLong count>;
        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);
        r0.<org.apache.tomcat.util.threads.LimitLatch: boolean released> = 0;
        return;
    }

    public boolean hasQueuedThreads()
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        org.apache.tomcat.util.threads.LimitLatch$Sync $r1;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        $r1 = r0.<org.apache.tomcat.util.threads.LimitLatch: org.apache.tomcat.util.threads.LimitLatch$Sync sync>;
        $z0 = virtualinvoke $r1.<org.apache.tomcat.util.threads.LimitLatch$Sync: boolean hasQueuedThreads()>();
        return $z0;
    }

    public java.util.Collection getQueuedThreads()
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        org.apache.tomcat.util.threads.LimitLatch$Sync $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.tomcat.util.threads.LimitLatch;
        $r1 = r0.<org.apache.tomcat.util.threads.LimitLatch: org.apache.tomcat.util.threads.LimitLatch$Sync sync>;
        $r2 = virtualinvoke $r1.<org.apache.tomcat.util.threads.LimitLatch$Sync: java.util.Collection getQueuedThreads()>();
        return $r2;
    }

    static java.util.concurrent.atomic.AtomicLong access$0(org.apache.tomcat.util.threads.LimitLatch)
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @parameter0: org.apache.tomcat.util.threads.LimitLatch;
        $r1 = r0.<org.apache.tomcat.util.threads.LimitLatch: java.util.concurrent.atomic.AtomicLong count>;
        return $r1;
    }

    static boolean access$1(org.apache.tomcat.util.threads.LimitLatch)
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        boolean $z0;

        r0 := @parameter0: org.apache.tomcat.util.threads.LimitLatch;
        $z0 = r0.<org.apache.tomcat.util.threads.LimitLatch: boolean released>;
        return $z0;
    }

    static long access$2(org.apache.tomcat.util.threads.LimitLatch)
    {
        org.apache.tomcat.util.threads.LimitLatch r0;
        long $l0;

        r0 := @parameter0: org.apache.tomcat.util.threads.LimitLatch;
        $l0 = r0.<org.apache.tomcat.util.threads.LimitLatch: long limit>;
        return $l0;
    }
}
