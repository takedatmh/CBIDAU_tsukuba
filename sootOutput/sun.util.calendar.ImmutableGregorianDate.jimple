class sun.util.calendar.ImmutableGregorianDate extends sun.util.calendar.BaseCalendar$Date
{
    private final sun.util.calendar.BaseCalendar$Date date;

    void <init>(sun.util.calendar.BaseCalendar$Date)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date r1;
        java.lang.NullPointerException $r2;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        r1 := @parameter0: sun.util.calendar.BaseCalendar$Date;
        specialinvoke r0.<sun.util.calendar.BaseCalendar$Date: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date> = r1;
        return;
    }

    public sun.util.calendar.Era getEra()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        sun.util.calendar.Era $r2;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $r2 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.Era getEra()>();
        return $r2;
    }

    public sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.Era r1;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        r1 := @parameter0: sun.util.calendar.Era;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public int getYear()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getYear()>();
        return $i0;
    }

    public sun.util.calendar.CalendarDate setYear(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addYear(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public boolean isLeapYear()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        boolean $z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $z0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: boolean isLeapYear()>();
        return $z0;
    }

    void setLeapYear(boolean)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        boolean z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        z0 := @parameter0: boolean;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    public int getMonth()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        return $i0;
    }

    public sun.util.calendar.CalendarDate setMonth(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addMonth(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public int getDayOfMonth()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        return $i0;
    }

    public sun.util.calendar.CalendarDate setDayOfMonth(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addDayOfMonth(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public int getDayOfWeek()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getDayOfWeek()>();
        return $i0;
    }

    public int getHours()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getHours()>();
        return $i0;
    }

    public sun.util.calendar.CalendarDate setHours(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addHours(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public int getMinutes()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getMinutes()>();
        return $i0;
    }

    public sun.util.calendar.CalendarDate setMinutes(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addMinutes(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public int getSeconds()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getSeconds()>();
        return $i0;
    }

    public sun.util.calendar.CalendarDate setSeconds(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addSeconds(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public int getMillis()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getMillis()>();
        return $i0;
    }

    public sun.util.calendar.CalendarDate setMillis(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addMillis(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public long getTimeOfDay()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        long $l0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $l0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: long getTimeOfDay()>();
        return $l0;
    }

    public sun.util.calendar.CalendarDate setDate(int, int, int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0, i1, i2;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addDate(int, int, int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0, i1, i2;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate setTimeOfDay(int, int, int, int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0, i1, i2, i3;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public sun.util.calendar.CalendarDate addTimeOfDay(int, int, int, int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0, i1, i2, i3;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    protected void setTimeOfDay(long)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        long l0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        l0 := @parameter0: long;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    public boolean isNormalized()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        boolean $z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $z0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: boolean isNormalized()>();
        return $z0;
    }

    public boolean isStandardTime()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        boolean $z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $z0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: boolean isStandardTime()>();
        return $z0;
    }

    public void setStandardTime(boolean)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        boolean z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        z0 := @parameter0: boolean;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    public boolean isDaylightTime()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        boolean $z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $z0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: boolean isDaylightTime()>();
        return $z0;
    }

    protected void setLocale(java.util.Locale)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        java.util.Locale r1;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        r1 := @parameter0: java.util.Locale;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    public java.util.TimeZone getZone()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        java.util.TimeZone $r2;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $r2 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: java.util.TimeZone getZone()>();
        return $r2;
    }

    public sun.util.calendar.CalendarDate setZone(java.util.TimeZone)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        java.util.TimeZone r1;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        r1 := @parameter0: java.util.TimeZone;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return r0;
    }

    public boolean isSameDate(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.CalendarDate r1;
        boolean $z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $z0 = virtualinvoke r1.<sun.util.calendar.CalendarDate: boolean isSameDate(sun.util.calendar.CalendarDate)>(r1);
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        sun.util.calendar.ImmutableGregorianDate r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;
        sun.util.calendar.BaseCalendar$Date $r2, $r4;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof sun.util.calendar.ImmutableGregorianDate;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $r3 = (sun.util.calendar.ImmutableGregorianDate) r1;
        $r4 = $r3.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $z1 = virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: boolean equals(java.lang.Object)>($r4);
        return $z1;
    }

    public int hashCode()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int hashCode()>();
        return $i0;
    }

    public java.lang.Object clone()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        java.lang.Object $r1;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = specialinvoke r0.<sun.util.calendar.BaseCalendar$Date: java.lang.Object clone()>();
        return $r1;
    }

    public java.lang.String toString()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        java.lang.String $r2;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $r2 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: java.lang.String toString()>();
        return $r2;
    }

    protected void setDayOfWeek(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    protected void setNormalized(boolean)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        boolean z0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        z0 := @parameter0: boolean;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    public int getZoneOffset()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getZoneOffset()>();
        return $i0;
    }

    protected void setZoneOffset(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    public int getDaylightSaving()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getDaylightSaving()>();
        return $i0;
    }

    protected void setDaylightSaving(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    public int getNormalizedYear()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        sun.util.calendar.BaseCalendar$Date $r1;
        int $i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = r0.<sun.util.calendar.ImmutableGregorianDate: sun.util.calendar.BaseCalendar$Date date>;
        $i0 = virtualinvoke $r1.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        return $i0;
    }

    public void setNormalizedYear(int)
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        int i0;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.util.calendar.ImmutableGregorianDate: void unsupported()>();
        return;
    }

    private void unsupported()
    {
        sun.util.calendar.ImmutableGregorianDate r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: sun.util.calendar.ImmutableGregorianDate;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }
}
