public final class java.util.Currency extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.String currencyCode;
    private final transient int defaultFractionDigits;
    private final transient int numericCode;
    private static java.util.HashMap instances;
    private static java.util.HashSet available;
    static int formatVersion;
    static int dataVersion;
    static int[] mainTable;
    static long[] scCutOverTimes;
    static java.lang.String[] scOldCurrencies;
    static java.lang.String[] scNewCurrencies;
    static int[] scOldCurrenciesDFD;
    static int[] scNewCurrenciesDFD;
    static int[] scOldCurrenciesNumericCode;
    static int[] scNewCurrenciesNumericCode;
    static java.lang.String otherCurrencies;
    static int[] otherCurrenciesDFD;
    static int[] otherCurrenciesNumericCode;
    private static final int MAGIC_NUMBER;
    private static final int A_TO_Z;
    private static final int INVALID_COUNTRY_ENTRY;
    private static final int COUNTRY_WITHOUT_CURRENCY_ENTRY;
    private static final int SIMPLE_CASE_COUNTRY_MASK;
    private static final int SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK;
    private static final int SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK;
    private static final int SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;
    private static final int SPECIAL_CASE_COUNTRY_MASK;
    private static final int SPECIAL_CASE_COUNTRY_INDEX_MASK;
    private static final int SPECIAL_CASE_COUNTRY_INDEX_DELTA;
    private static final int COUNTRY_TYPE_MASK;
    private static final int NUMERIC_CODE_MASK;
    private static final int NUMERIC_CODE_SHIFT;
    private static final int VALID_FORMAT_VERSION;
    private static final int SYMBOL;
    private static final int DISPLAYNAME;

    private void <init>(java.lang.String, int, int)
    {
        java.util.Currency r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: java.util.Currency;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Currency: java.lang.String currencyCode> = r1;
        r0.<java.util.Currency: int defaultFractionDigits> = i0;
        r0.<java.util.Currency: int numericCode> = i1;
        return;
    }

    public static java.util.Currency getInstance(java.lang.String)
    {
        java.lang.String r0;
        java.util.Currency $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>(r0, -2147483648, 0);
        return $r1;
    }

    private static java.util.Currency getInstance(java.lang.String, int, int)
    {
        java.lang.String r0, $r10;
        int i0, i1, i4, i5, $i6, $i7, $i9, $i10, $i11, $i12, $i14, $i15;
        java.util.HashMap $r1, r2, $r5, $r16;
        java.util.Currency r3, $r14, r15;
        char c2, c3, $c8, $c13;
        java.lang.Throwable r4, $r19;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r8, $r9, $r11;
        int[] $r12, $r13;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r1 = <java.util.Currency: java.util.HashMap instances>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r5 = <java.util.Currency: java.util.HashMap instances>;
        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (java.util.Currency) $r6;
        if r3 == null goto label2;

        exitmonitor r2;

     label1:
        return r3;

     label2:
        if i0 != -2147483648 goto label7;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i6 == 3 goto label3;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r8;

     label3:
        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);
        i4 = staticinvoke <java.util.Currency: int getMainTableEntry(char,char)>(c2, c3);
        $i7 = i4 & 128;
        if $i7 != 0 goto label4;

        if i4 == 127 goto label4;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2);
        $i9 = $c8 - 65;
        $i10 = i4 & 31;
        if $i9 != $i10 goto label4;

        $i11 = i4 & 96;
        i0 = $i11 >> 5;
        $i12 = i4 & 261888;
        i1 = $i12 >> 8;
        goto label7;

     label4:
        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2);
        if $c13 != 45 goto label5;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r9;

     label5:
        $r10 = <java.util.Currency: java.lang.String otherCurrencies>;
        i5 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>(r0);
        if i5 != -1 goto label6;

        $r11 = new java.lang.IllegalArgumentException;
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r11;

     label6:
        $r12 = <java.util.Currency: int[] otherCurrenciesDFD>;
        $i14 = i5 / 4;
        i0 = $r12[$i14];
        $r13 = <java.util.Currency: int[] otherCurrenciesNumericCode>;
        $i15 = i5 / 4;
        i1 = $r13[$i15];

     label7:
        $r14 = new java.util.Currency;
        specialinvoke $r14.<java.util.Currency: void <init>(java.lang.String,int,int)>(r0, i0, i1);
        r15 = $r14;
        $r16 = <java.util.Currency: java.util.HashMap instances>;
        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r15);
        exitmonitor r2;

     label8:
        return r15;

     label9:
        $r19 := @caughtexception;

     label10:
        r4 = $r19;
        exitmonitor r2;

     label11:
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label9;
        catch java.lang.Throwable from label2 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public static java.util.Currency getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.lang.String r1, $r7, $r13, $r18;
        char c0, c1, c3;
        int i2, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i19, $i20, $i21, $i22;
        java.lang.StringBuffer r2, $r5;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4, $r9;
        java.util.Currency $r8, $r16, $r21;
        long[] $r10, $r11;
        long $l14, $l16, $l17;
        byte $b15, $b18;
        java.lang.String[] $r12, $r17;
        int[] $r14, $r15, $r19, $r20;

        r0 := @parameter0: java.util.Locale;
        r1 = virtualinvoke r0.<java.util.Locale: java.lang.String getCountry()>();
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i6 == 2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label1:
        c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);
        i2 = staticinvoke <java.util.Currency: int getMainTableEntry(char,char)>(c0, c1);
        $i7 = i2 & 128;
        if $i7 != 0 goto label2;

        if i2 == 127 goto label2;

        $i8 = i2 & 31;
        $i9 = $i8 + 65;
        c3 = (char) $i9;
        $i10 = i2 & 96;
        i4 = $i10 >> 5;
        $i11 = i2 & 261888;
        i5 = $i11 >> 8;
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);
        r2 = $r5;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);
        $r7 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        $r8 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>($r7, i4, i5);
        return $r8;

     label2:
        if i2 != 127 goto label3;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r9;

     label3:
        if i2 != 128 goto label4;

        return null;

     label4:
        $i12 = i2 & 31;
        i13 = $i12 - 1;
        $r10 = <java.util.Currency: long[] scCutOverTimes>;
        $l14 = $r10[i13];
        $b15 = $l14 cmp 9223372036854775807L;
        if $b15 == 0 goto label5;

        $l16 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r11 = <java.util.Currency: long[] scCutOverTimes>;
        $l17 = $r11[i13];
        $b18 = $l16 cmp $l17;
        if $b18 >= 0 goto label6;

     label5:
        $r12 = <java.util.Currency: java.lang.String[] scOldCurrencies>;
        $r13 = $r12[i13];
        $r14 = <java.util.Currency: int[] scOldCurrenciesDFD>;
        $i19 = $r14[i13];
        $r15 = <java.util.Currency: int[] scOldCurrenciesNumericCode>;
        $i20 = $r15[i13];
        $r16 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>($r13, $i19, $i20);
        return $r16;

     label6:
        $r17 = <java.util.Currency: java.lang.String[] scNewCurrencies>;
        $r18 = $r17[i13];
        $r19 = <java.util.Currency: int[] scNewCurrenciesDFD>;
        $i21 = $r19[i13];
        $r20 = <java.util.Currency: int[] scNewCurrenciesNumericCode>;
        $i22 = $r20[i13];
        $r21 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>($r18, $i21, $i22);
        return $r21;
    }

    public static java.util.Set getAvailableCurrencies()
    {
        java.lang.Class $r0, r1;
        char c0, c1, c3;
        int i2, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.StringBuilder r2, $r6;
        java.lang.Throwable r3, $r20;
        java.util.HashSet $r4, $r5, $r10, $r16, $r21;
        java.lang.String $r11, $r14, $r18;
        java.util.Currency $r12, $r19;
        java.util.StringTokenizer $r13, r15;
        boolean $z1;
        java.lang.Object $r17, $r22;
        java.util.Set r23;

        $r0 = class "java/util/Currency";
        r1 = $r0;
        entermonitor $r0;

     label0:
        $r4 = <java.util.Currency: java.util.HashSet available>;
        if $r4 != null goto label7;

        $r5 = new java.util.HashSet;
        specialinvoke $r5.<java.util.HashSet: void <init>(int)>(256);
        <java.util.Currency: java.util.HashSet available> = $r5;
        c0 = 65;

     label1:
        if c0 > 90 goto label5;

        c1 = 65;

     label2:
        if c1 > 90 goto label4;

        i2 = staticinvoke <java.util.Currency: int getMainTableEntry(char,char)>(c0, c1);
        $i6 = i2 & 128;
        if $i6 != 0 goto label3;

        if i2 == 127 goto label3;

        $i7 = i2 & 31;
        $i8 = $i7 + 65;
        c3 = (char) $i8;
        $i9 = i2 & 96;
        i4 = $i9 >> 5;
        $i10 = i2 & 261888;
        i5 = $i10 >> 8;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        r2 = $r6;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);
        $r10 = <java.util.Currency: java.util.HashSet available>;
        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        $r12 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>($r11, i4, i5);
        virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>($r12);

     label3:
        $i11 = c1 + 1;
        c1 = (char) $i11;
        goto label2;

     label4:
        $i12 = c0 + 1;
        c0 = (char) $i12;
        goto label1;

     label5:
        $r13 = new java.util.StringTokenizer;
        $r14 = <java.util.Currency: java.lang.String otherCurrencies>;
        specialinvoke $r13.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r14, "-");
        r15 = $r13;

     label6:
        $z1 = virtualinvoke r15.<java.util.StringTokenizer: boolean hasMoreElements()>();
        if $z1 == 0 goto label7;

        $r16 = <java.util.Currency: java.util.HashSet available>;
        $r17 = virtualinvoke r15.<java.util.StringTokenizer: java.lang.Object nextElement()>();
        $r18 = (java.lang.String) $r17;
        $r19 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r18);
        virtualinvoke $r16.<java.util.HashSet: boolean add(java.lang.Object)>($r19);
        goto label6;

     label7:
        exitmonitor r1;

     label8:
        goto label12;

     label9:
        $r20 := @caughtexception;

     label10:
        r3 = $r20;
        exitmonitor r1;

     label11:
        throw r3;

     label12:
        $r21 = <java.util.Currency: java.util.HashSet available>;
        $r22 = virtualinvoke $r21.<java.util.HashSet: java.lang.Object clone()>();
        r23 = (java.util.Set) $r22;
        return r23;

        catch java.lang.Throwable from label0 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public java.lang.String getCurrencyCode()
    {
        java.util.Currency r0;
        java.lang.String $r1;

        r0 := @this: java.util.Currency;
        $r1 = r0.<java.util.Currency: java.lang.String currencyCode>;
        return $r1;
    }

    public java.lang.String getSymbol()
    {
        java.util.Currency r0;
        java.util.Locale$Category $r1;
        java.util.Locale $r2;
        java.lang.String $r3;

        r0 := @this: java.util.Currency;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category DISPLAY>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r3 = virtualinvoke r0.<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>($r2);
        return $r3;
    }

    public java.lang.String getSymbol(java.util.Locale)
    {
        java.util.Currency r0;
        java.util.Locale r1;
        sun.util.LocaleServiceProviderPool r2;
        java.util.Currency$CurrencyNameGetter $r3;
        java.lang.String r4, $r6, $r12, $r13, $r16;
        boolean $z0;
        sun.util.resources.OpenListResourceBundle $r5, r11;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.Object $r9;
        java.util.MissingResourceException $r14, r15;

        r0 := @this: java.util.Currency;
        r1 := @parameter0: java.util.Locale;

     label0:
        r2 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/util/spi/CurrencyNameProvider");
        $z0 = virtualinvoke r2.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label2;

        $r3 = staticinvoke <java.util.Currency$CurrencyNameGetter: java.util.Currency$CurrencyNameGetter access$500()>();
        $r5 = (sun.util.resources.OpenListResourceBundle) null;
        $r6 = r0.<java.util.Currency: java.lang.String currencyCode>;
        $r7 = newarray (java.lang.Object)[1];
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        $r7[0] = $r8;
        $r9 = virtualinvoke r2.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>($r3, r1, $r5, $r6, $r7);
        r4 = (java.lang.String) $r9;
        if r4 == null goto label2;

     label1:
        return r4;

     label2:
        r11 = staticinvoke <sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)>(r1);
        $r12 = r0.<java.util.Currency: java.lang.String currencyCode>;
        $r13 = virtualinvoke r11.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>($r12);

     label3:
        return $r13;

     label4:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = r0.<java.util.Currency: java.lang.String currencyCode>;
        return $r16;

        catch java.util.MissingResourceException from label0 to label1 with label4;
        catch java.util.MissingResourceException from label2 to label3 with label4;
    }

    public int getDefaultFractionDigits()
    {
        java.util.Currency r0;
        int $i0;

        r0 := @this: java.util.Currency;
        $i0 = r0.<java.util.Currency: int defaultFractionDigits>;
        return $i0;
    }

    public int getNumericCode()
    {
        java.util.Currency r0;
        int $i0;

        r0 := @this: java.util.Currency;
        $i0 = r0.<java.util.Currency: int numericCode>;
        return $i0;
    }

    public java.lang.String getDisplayName()
    {
        java.util.Currency r0;
        java.util.Locale$Category $r1;
        java.util.Locale $r2;
        java.lang.String $r3;

        r0 := @this: java.util.Currency;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category DISPLAY>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r3 = virtualinvoke r0.<java.util.Currency: java.lang.String getDisplayName(java.util.Locale)>($r2);
        return $r3;
    }

    public java.lang.String getDisplayName(java.util.Locale)
    {
        java.util.Currency r0;
        java.util.Locale r1, $r4;
        sun.util.resources.OpenListResourceBundle r2;
        java.lang.String r3, r5, $r7, $r9, $r16;
        sun.util.LocaleServiceProviderPool r6;
        boolean $z0;
        java.util.Currency$CurrencyNameGetter $r8;
        java.lang.Object[] $r10;
        java.lang.Integer $r11;
        java.lang.Object $r12;
        java.util.MissingResourceException $r14, r15;

        r0 := @this: java.util.Currency;
        r1 := @parameter0: java.util.Locale;

     label0:
        r2 = staticinvoke <sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)>(r1);
        r3 = null;
        $r7 = r0.<java.util.Currency: java.lang.String currencyCode>;
        $r4 = <java.util.Locale: java.util.Locale ROOT>;
        r5 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);
        r6 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/util/spi/CurrencyNameProvider");
        $z0 = virtualinvoke r6.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label1;

        $r8 = staticinvoke <java.util.Currency$CurrencyNameGetter: java.util.Currency$CurrencyNameGetter access$500()>();
        $r9 = r0.<java.util.Currency: java.lang.String currencyCode>;
        $r10 = newarray (java.lang.Object)[1];
        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
        $r10[0] = $r11;
        $r12 = virtualinvoke r6.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.String,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>($r8, r1, r5, r2, $r9, $r10);
        r3 = (java.lang.String) $r12;

     label1:
        if r3 != null goto label2;

        r3 = virtualinvoke r2.<sun.util.resources.OpenListResourceBundle: java.lang.String getString(java.lang.String)>(r5);

     label2:
        if r3 == null goto label4;

     label3:
        return r3;

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;
        r15 = $r14;

     label6:
        $r16 = r0.<java.util.Currency: java.lang.String currencyCode>;
        return $r16;

        catch java.util.MissingResourceException from label0 to label3 with label5;
    }

    public java.lang.String toString()
    {
        java.util.Currency r0;
        java.lang.String $r1;

        r0 := @this: java.util.Currency;
        $r1 = r0.<java.util.Currency: java.lang.String currencyCode>;
        return $r1;
    }

    private java.lang.Object readResolve()
    {
        java.util.Currency r0, $r2;
        java.lang.String $r1;

        r0 := @this: java.util.Currency;
        $r1 = r0.<java.util.Currency: java.lang.String currencyCode>;
        $r2 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r1);
        return $r2;
    }

    private static int getMainTableEntry(char, char)
    {
        char c0, c1;
        java.lang.IllegalArgumentException $r0;
        int[] $r1;
        int $i2, $i3, $i4, $i5, $i6;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        if c0 < 65 goto label0;

        if c0 > 90 goto label0;

        if c1 < 65 goto label0;

        if c1 <= 90 goto label1;

     label0:
        $r0 = new java.lang.IllegalArgumentException;
        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r0;

     label1:
        $r1 = <java.util.Currency: int[] mainTable>;
        $i2 = c0 - 65;
        $i3 = $i2 * 26;
        $i4 = c1 - 65;
        $i5 = $i3 + $i4;
        $i6 = $r1[$i5];
        return $i6;
    }

    private static void setMainTableEntry(char, char, int)
    {
        char c0, c1;
        int i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r0;
        int[] $r1;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        i2 := @parameter2: int;
        if c0 < 65 goto label0;

        if c0 > 90 goto label0;

        if c1 < 65 goto label0;

        if c1 <= 90 goto label1;

     label0:
        $r0 = new java.lang.IllegalArgumentException;
        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r0;

     label1:
        $r1 = <java.util.Currency: int[] mainTable>;
        $i3 = c0 - 65;
        $i4 = $i3 * 26;
        $i5 = c1 - 65;
        $i6 = $i4 + $i5;
        $r1[$i6] = i2;
        return;
    }

    private static int[] readIntArray(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int i0, i1, $i2;
        int[] r1;

        r0 := @parameter0: java.io.DataInputStream;
        i0 := @parameter1: int;
        r1 = newarray (int)[i0];
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $i2 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();
        r1[i1] = $i2;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r1;
    }

    private static long[] readLongArray(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int i0, i1;
        long[] r1;
        long $l2;

        r0 := @parameter0: java.io.DataInputStream;
        i0 := @parameter1: int;
        r1 = newarray (long)[i0];
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $l2 = virtualinvoke r0.<java.io.DataInputStream: long readLong()>();
        r1[i1] = $l2;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r1;
    }

    private static java.lang.String[] readStringArray(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int i0, i1;
        java.lang.String[] r1;
        java.lang.String $r2;

        r0 := @parameter0: java.io.DataInputStream;
        i0 := @parameter1: int;
        r1 = newarray (java.lang.String)[i0];
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r2 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>();
        r1[i1] = $r2;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r1;
    }

    private static void replaceCurrencyData(java.util.regex.Pattern, java.lang.String, java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, r2, r3, r4, r14, $r15, $r16, $r19;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i10, i11, $i12, $i13;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13;
        java.util.regex.Matcher r9;
        boolean $z0, $z1;
        java.lang.String[] $r17, $r18, $r20;
        char $c8, $c14, $c15;

        r0 := @parameter0: java.util.regex.Pattern;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i4 == 2 goto label0;

        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The entry in currency.properties for ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ignored because of the invalid country code.");
        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <java.util.Currency: void info(java.lang.String,java.lang.Throwable)>(r3, null);
        return;

     label0:
        r9 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
        $z0 = virtualinvoke r9.<java.util.regex.Matcher: boolean find()>();
        if $z0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The entry in currency.properties for ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ignored because the value format is not recognized.");
        r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <java.util.Currency: void info(java.lang.String,java.lang.Throwable)>(r4, null);
        return;

     label1:
        r14 = virtualinvoke r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);
        $r15 = virtualinvoke r9.<java.util.regex.Matcher: java.lang.String group(int)>(2);
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);
        $r16 = virtualinvoke r9.<java.util.regex.Matcher: java.lang.String group(int)>(3);
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);
        i2 = i0 << 8;
        i3 = 0;

     label2:
        $r17 = <java.util.Currency: java.lang.String[] scOldCurrencies>;
        $i5 = lengthof $r17;
        if i3 >= $i5 goto label4;

        $r18 = <java.util.Currency: java.lang.String[] scOldCurrencies>;
        $r19 = $r18[i3];
        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r14);
        if $z1 == 0 goto label3;

        goto label4;

     label3:
        i3 = i3 + 1;
        goto label2;

     label4:
        $r20 = <java.util.Currency: java.lang.String[] scOldCurrencies>;
        $i6 = lengthof $r20;
        if i3 != $i6 goto label5;

        $i7 = i1 << 5;
        $c8 = virtualinvoke r14.<java.lang.String: char charAt(int)>(2);
        $i9 = $c8 - 65;
        $i10 = $i7 | $i9;
        i11 = i2 | $i10;
        goto label6;

     label5:
        $i12 = i3 + 1;
        $i13 = 128 | $i12;
        i11 = i2 | $i13;

     label6:
        $c14 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        $c15 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);
        staticinvoke <java.util.Currency: void setMainTableEntry(char,char,int)>($c14, $c15, i11);
        return;
    }

    private static void info(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;
        sun.util.logging.PlatformLogger r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Throwable;
        r2 = staticinvoke <sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>("java.util.Currency");
        $z0 = virtualinvoke r2.<sun.util.logging.PlatformLogger: boolean isLoggable(int)>(800);
        if $z0 == 0 goto label1;

        if r1 == null goto label0;

        virtualinvoke r2.<sun.util.logging.PlatformLogger: void info(java.lang.String,java.lang.Throwable)>(r0, r1);
        goto label1;

     label0:
        virtualinvoke r2.<sun.util.logging.PlatformLogger: void info(java.lang.String)>(r0);

     label1:
        return;
    }

    static int[] access$000(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int i0;
        int[] $r1;

        r0 := @parameter0: java.io.DataInputStream;
        i0 := @parameter1: int;
        $r1 = staticinvoke <java.util.Currency: int[] readIntArray(java.io.DataInputStream,int)>(r0, i0);
        return $r1;
    }

    static long[] access$100(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int i0;
        long[] $r1;

        r0 := @parameter0: java.io.DataInputStream;
        i0 := @parameter1: int;
        $r1 = staticinvoke <java.util.Currency: long[] readLongArray(java.io.DataInputStream,int)>(r0, i0);
        return $r1;
    }

    static java.lang.String[] access$200(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int i0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.io.DataInputStream;
        i0 := @parameter1: int;
        $r1 = staticinvoke <java.util.Currency: java.lang.String[] readStringArray(java.io.DataInputStream,int)>(r0, i0);
        return $r1;
    }

    static void access$300(java.util.regex.Pattern, java.lang.String, java.lang.String)
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, r2;

        r0 := @parameter0: java.util.regex.Pattern;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        staticinvoke <java.util.Currency: void replaceCurrencyData(java.util.regex.Pattern,java.lang.String,java.lang.String)>(r0, r1, r2);
        return;
    }

    static void access$400(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Throwable;
        staticinvoke <java.util.Currency: void info(java.lang.String,java.lang.Throwable)>(r0, r1);
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Currency$1 $r1;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(7);
        <java.util.Currency: java.util.HashMap instances> = $r0;
        $r1 = new java.util.Currency$1;
        specialinvoke $r1.<java.util.Currency$1: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        return;
    }
}
