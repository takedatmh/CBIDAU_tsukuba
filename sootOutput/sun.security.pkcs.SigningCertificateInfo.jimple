public class sun.security.pkcs.SigningCertificateInfo extends java.lang.Object
{
    private byte[] ber;
    private sun.security.pkcs.ESSCertId[] certId;

    public void <init>(byte[]) throws java.io.IOException
    {
        sun.security.pkcs.SigningCertificateInfo r0;
        byte[] r1;

        r0 := @this: sun.security.pkcs.SigningCertificateInfo;
        r1 := @parameter0: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.security.pkcs.SigningCertificateInfo: byte[] ber> = null;
        r0.<sun.security.pkcs.SigningCertificateInfo: sun.security.pkcs.ESSCertId[] certId> = null;
        virtualinvoke r0.<sun.security.pkcs.SigningCertificateInfo: void parse(byte[])>(r1);
        return;
    }

    public java.lang.String toString()
    {
        sun.security.pkcs.SigningCertificateInfo r0;
        java.lang.StringBuffer $r1, r2;
        int i0, $i1;
        sun.security.pkcs.ESSCertId[] $r4, $r5;
        sun.security.pkcs.ESSCertId $r6;
        java.lang.String $r7, $r10;

        r0 := @this: sun.security.pkcs.SigningCertificateInfo;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[\n");
        i0 = 0;

     label0:
        $r4 = r0.<sun.security.pkcs.SigningCertificateInfo: sun.security.pkcs.ESSCertId[] certId>;
        $i1 = lengthof $r4;
        if i0 >= $i1 goto label1;

        $r5 = r0.<sun.security.pkcs.SigningCertificateInfo: sun.security.pkcs.ESSCertId[] certId>;
        $r6 = $r5[i0];
        $r7 = virtualinvoke $r6.<sun.security.pkcs.ESSCertId: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        i0 = i0 + 1;
        goto label0;

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n]");
        $r10 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r10;
    }

    public void parse(byte[]) throws java.io.IOException
    {
        sun.security.pkcs.SigningCertificateInfo r0;
        byte[] r1;
        sun.security.util.DerValue $r2, r3, $r10;
        sun.security.util.DerValue[] r4, r13;
        int i0, i1, $i3, $i4, $i5, $i6;
        byte $b2;
        java.io.IOException $r5;
        sun.security.util.DerInputStream $r6, $r11, $r12;
        sun.security.pkcs.ESSCertId[] $r7, $r8;
        sun.security.pkcs.ESSCertId $r9;

        r0 := @this: sun.security.pkcs.SigningCertificateInfo;
        r1 := @parameter0: byte[];
        $r2 = new sun.security.util.DerValue;
        specialinvoke $r2.<sun.security.util.DerValue: void <init>(byte[])>(r1);
        r3 = $r2;
        $b2 = r3.<sun.security.util.DerValue: byte tag>;
        if $b2 == 48 goto label0;

        $r5 = new java.io.IOException;
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Bad encoding for signingCertificate");
        throw $r5;

     label0:
        $r6 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r4 = virtualinvoke $r6.<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>(1);
        $i3 = lengthof r4;
        $r7 = newarray (sun.security.pkcs.ESSCertId)[$i3];
        r0.<sun.security.pkcs.SigningCertificateInfo: sun.security.pkcs.ESSCertId[] certId> = $r7;
        i0 = 0;

     label1:
        $i4 = lengthof r4;
        if i0 >= $i4 goto label2;

        $r8 = r0.<sun.security.pkcs.SigningCertificateInfo: sun.security.pkcs.ESSCertId[] certId>;
        $r9 = new sun.security.pkcs.ESSCertId;
        $r10 = r4[i0];
        specialinvoke $r9.<sun.security.pkcs.ESSCertId: void <init>(sun.security.util.DerValue)>($r10);
        $r8[i0] = $r9;
        i0 = i0 + 1;
        goto label1;

     label2:
        $r11 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i5 = virtualinvoke $r11.<sun.security.util.DerInputStream: int available()>();
        if $i5 <= 0 goto label4;

        $r12 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r13 = virtualinvoke $r12.<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>(1);
        i1 = 0;

     label3:
        $i6 = lengthof r13;
        if i1 >= $i6 goto label4;

        i1 = i1 + 1;
        goto label3;

     label4:
        return;
    }
}
