final class java.util.regex.ASCII extends java.lang.Object
{
    static final int UPPER;
    static final int LOWER;
    static final int DIGIT;
    static final int SPACE;
    static final int PUNCT;
    static final int CNTRL;
    static final int BLANK;
    static final int HEX;
    static final int UNDER;
    static final int ASCII;
    static final int ALPHA;
    static final int ALNUM;
    static final int GRAPH;
    static final int WORD;
    static final int XDIGIT;
    private static final int[] ctype;

    void <init>()
    {
        java.util.regex.ASCII r0;

        r0 := @this: java.util.regex.ASCII;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static int getType(int)
    {
        int i0, $i1, $i2;
        int[] $r0;

        i0 := @parameter0: int;
        $i1 = i0 & -128;
        if $i1 != 0 goto label0;

        $r0 = <java.util.regex.ASCII: int[] ctype>;
        $i2 = $r0[i0];
        goto label1;

     label0:
        $i2 = 0;

     label1:
        return $i2;
    }

    static boolean isType(int, int)
    {
        int i0, i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = staticinvoke <java.util.regex.ASCII: int getType(int)>(i0);
        $i3 = $i2 & i1;
        if $i3 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isAscii(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 & -128;
        if $i1 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isAlpha(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 768);
        return $z0;
    }

    static boolean isDigit(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 - 48;
        $i2 = 57 - i0;
        $i3 = $i1 | $i2;
        if $i3 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isAlnum(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 1792);
        return $z0;
    }

    static boolean isGraph(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 5888);
        return $z0;
    }

    static boolean isPrint(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 - 32;
        $i2 = 126 - i0;
        $i3 = $i1 | $i2;
        if $i3 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isPunct(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 4096);
        return $z0;
    }

    static boolean isSpace(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 2048);
        return $z0;
    }

    static boolean isHexDigit(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 32768);
        return $z0;
    }

    static boolean isOctDigit(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 - 48;
        $i2 = 55 - i0;
        $i3 = $i1 | $i2;
        if $i3 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isCntrl(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 8192);
        return $z0;
    }

    static boolean isLower(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 - 97;
        $i2 = 122 - i0;
        $i3 = $i1 | $i2;
        if $i3 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isUpper(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 - 65;
        $i2 = 90 - i0;
        $i3 = $i1 | $i2;
        if $i3 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isWord(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isType(int,int)>(i0, 67328);
        return $z0;
    }

    static int toDigit(int)
    {
        int i0, $i1, $i2, $i3;
        int[] $r0;

        i0 := @parameter0: int;
        $r0 = <java.util.regex.ASCII: int[] ctype>;
        $i1 = i0 & 127;
        $i2 = $r0[$i1];
        $i3 = $i2 & 63;
        return $i3;
    }

    static int toLower(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isUpper(int)>(i0);
        if $z0 == 0 goto label0;

        $i1 = i0 + 32;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        return $i1;
    }

    static int toUpper(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isLower(int)>(i0);
        if $z0 == 0 goto label0;

        $i1 = i0 - 32;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        return $i1;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[128];
        $r0[0] = 8192;
        $r0[1] = 8192;
        $r0[2] = 8192;
        $r0[3] = 8192;
        $r0[4] = 8192;
        $r0[5] = 8192;
        $r0[6] = 8192;
        $r0[7] = 8192;
        $r0[8] = 8192;
        $r0[9] = 26624;
        $r0[10] = 10240;
        $r0[11] = 10240;
        $r0[12] = 10240;
        $r0[13] = 10240;
        $r0[14] = 8192;
        $r0[15] = 8192;
        $r0[16] = 8192;
        $r0[17] = 8192;
        $r0[18] = 8192;
        $r0[19] = 8192;
        $r0[20] = 8192;
        $r0[21] = 8192;
        $r0[22] = 8192;
        $r0[23] = 8192;
        $r0[24] = 8192;
        $r0[25] = 8192;
        $r0[26] = 8192;
        $r0[27] = 8192;
        $r0[28] = 8192;
        $r0[29] = 8192;
        $r0[30] = 8192;
        $r0[31] = 8192;
        $r0[32] = 18432;
        $r0[33] = 4096;
        $r0[34] = 4096;
        $r0[35] = 4096;
        $r0[36] = 4096;
        $r0[37] = 4096;
        $r0[38] = 4096;
        $r0[39] = 4096;
        $r0[40] = 4096;
        $r0[41] = 4096;
        $r0[42] = 4096;
        $r0[43] = 4096;
        $r0[44] = 4096;
        $r0[45] = 4096;
        $r0[46] = 4096;
        $r0[47] = 4096;
        $r0[48] = 33792;
        $r0[49] = 33793;
        $r0[50] = 33794;
        $r0[51] = 33795;
        $r0[52] = 33796;
        $r0[53] = 33797;
        $r0[54] = 33798;
        $r0[55] = 33799;
        $r0[56] = 33800;
        $r0[57] = 33801;
        $r0[58] = 4096;
        $r0[59] = 4096;
        $r0[60] = 4096;
        $r0[61] = 4096;
        $r0[62] = 4096;
        $r0[63] = 4096;
        $r0[64] = 4096;
        $r0[65] = 33034;
        $r0[66] = 33035;
        $r0[67] = 33036;
        $r0[68] = 33037;
        $r0[69] = 33038;
        $r0[70] = 33039;
        $r0[71] = 272;
        $r0[72] = 273;
        $r0[73] = 274;
        $r0[74] = 275;
        $r0[75] = 276;
        $r0[76] = 277;
        $r0[77] = 278;
        $r0[78] = 279;
        $r0[79] = 280;
        $r0[80] = 281;
        $r0[81] = 282;
        $r0[82] = 283;
        $r0[83] = 284;
        $r0[84] = 285;
        $r0[85] = 286;
        $r0[86] = 287;
        $r0[87] = 288;
        $r0[88] = 289;
        $r0[89] = 290;
        $r0[90] = 291;
        $r0[91] = 4096;
        $r0[92] = 4096;
        $r0[93] = 4096;
        $r0[94] = 4096;
        $r0[95] = 69632;
        $r0[96] = 4096;
        $r0[97] = 33290;
        $r0[98] = 33291;
        $r0[99] = 33292;
        $r0[100] = 33293;
        $r0[101] = 33294;
        $r0[102] = 33295;
        $r0[103] = 528;
        $r0[104] = 529;
        $r0[105] = 530;
        $r0[106] = 531;
        $r0[107] = 532;
        $r0[108] = 533;
        $r0[109] = 534;
        $r0[110] = 535;
        $r0[111] = 536;
        $r0[112] = 537;
        $r0[113] = 538;
        $r0[114] = 539;
        $r0[115] = 540;
        $r0[116] = 541;
        $r0[117] = 542;
        $r0[118] = 543;
        $r0[119] = 544;
        $r0[120] = 545;
        $r0[121] = 546;
        $r0[122] = 547;
        $r0[123] = 4096;
        $r0[124] = 4096;
        $r0[125] = 4096;
        $r0[126] = 4096;
        $r0[127] = 8192;
        <java.util.regex.ASCII: int[] ctype> = $r0;
        return;
    }
}
