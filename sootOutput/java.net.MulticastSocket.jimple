public class java.net.MulticastSocket extends java.net.DatagramSocket
{
    private boolean interfaceSet;
    private java.lang.Object ttlLock;
    private java.lang.Object infLock;
    private java.net.InetAddress infAddress;

    public void <init>() throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.InetSocketAddress $r1;

        r0 := @this: java.net.MulticastSocket;
        $r1 = new java.net.InetSocketAddress;
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(int)>(0);
        specialinvoke r0.<java.net.MulticastSocket: void <init>(java.net.SocketAddress)>($r1);
        return;
    }

    public void <init>(int) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        int i0;
        java.net.InetSocketAddress $r1;

        r0 := @this: java.net.MulticastSocket;
        i0 := @parameter0: int;
        $r1 = new java.net.InetSocketAddress;
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(int)>(i0);
        specialinvoke r0.<java.net.MulticastSocket: void <init>(java.net.SocketAddress)>($r1);
        return;
    }

    public void <init>(java.net.SocketAddress) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.SocketAddress r1, $r2;
        java.lang.Object $r3, $r4;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.SocketAddress;
        $r2 = (java.net.SocketAddress) null;
        specialinvoke r0.<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>($r2);
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.net.MulticastSocket: java.lang.Object ttlLock> = $r3;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<java.net.MulticastSocket: java.lang.Object infLock> = $r4;
        r0.<java.net.MulticastSocket: java.net.InetAddress infAddress> = null;
        virtualinvoke r0.<java.net.MulticastSocket: void setReuseAddress(boolean)>(1);
        if r1 == null goto label0;

        virtualinvoke r0.<java.net.MulticastSocket: void bind(java.net.SocketAddress)>(r1);

     label0:
        return;
    }

    public void setTTL(byte) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        byte b0;
        boolean $z0;
        java.net.SocketException $r1;
        java.net.DatagramSocketImpl $r2;

        r0 := @this: java.net.MulticastSocket;
        b0 := @parameter0: byte;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r2.<java.net.DatagramSocketImpl: void setTTL(byte)>(b0);
        return;
    }

    public void setTimeToLive(int) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3;

        r0 := @this: java.net.MulticastSocket;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        if i0 <= 255 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ttl out of range");
        throw $r1;

     label1:
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label2;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label2:
        $r3 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r3.<java.net.DatagramSocketImpl: void setTimeToLive(int)>(i0);
        return;
    }

    public byte getTTL() throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        boolean $z0;
        java.net.SocketException $r1;
        java.net.DatagramSocketImpl $r2;
        byte $b0;

        r0 := @this: java.net.MulticastSocket;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        $b0 = virtualinvoke $r2.<java.net.DatagramSocketImpl: byte getTTL()>();
        return $b0;
    }

    public int getTimeToLive() throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        boolean $z0;
        java.net.SocketException $r1;
        java.net.DatagramSocketImpl $r2;
        int $i0;

        r0 := @this: java.net.MulticastSocket;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        $i0 = virtualinvoke $r2.<java.net.DatagramSocketImpl: int getTimeToLive()>();
        return $i0;
    }

    public void joinGroup(java.net.InetAddress) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1;
        java.lang.SecurityManager r2;
        java.net.NetworkInterface r3;
        boolean $z0, $z1, $z2;
        java.net.SocketException $r4, $r5;
        java.net.DatagramSocketImpl $r6;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.InetAddress;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r4 = new java.net.SocketException;
        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r4;

     label0:
        virtualinvoke r0.<java.net.MulticastSocket: void checkAddress(java.net.InetAddress,java.lang.String)>(r1, "joinGroup");
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label1;

        virtualinvoke r2.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>(r1);

     label1:
        $z1 = virtualinvoke r1.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z1 != 0 goto label2;

        $r5 = new java.net.SocketException;
        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>("Not a multicast address");
        throw $r5;

     label2:
        r3 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getDefault()>();
        $z2 = r0.<java.net.MulticastSocket: boolean interfaceSet>;
        if $z2 != 0 goto label3;

        if r3 == null goto label3;

        virtualinvoke r0.<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>(r3);

     label3:
        $r6 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r6.<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>(r1);
        return;
    }

    public void leaveGroup(java.net.InetAddress) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1;
        java.lang.SecurityManager r2;
        boolean $z0, $z1;
        java.net.SocketException $r3, $r4;
        java.net.DatagramSocketImpl $r5;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.InetAddress;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r3;

     label0:
        virtualinvoke r0.<java.net.MulticastSocket: void checkAddress(java.net.InetAddress,java.lang.String)>(r1, "leaveGroup");
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label1;

        virtualinvoke r2.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>(r1);

     label1:
        $z1 = virtualinvoke r1.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z1 != 0 goto label2;

        $r4 = new java.net.SocketException;
        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Not a multicast address");
        throw $r4;

     label2:
        $r5 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r5.<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>(r1);
        return;
    }

    public void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        java.lang.SecurityManager r3;
        boolean $z0, $z1, $z2, $z3;
        java.net.SocketException $r4, $r13;
        java.lang.IllegalArgumentException $r5;
        java.lang.UnsupportedOperationException $r6;
        java.net.InetSocketAddress $r7, $r9, $r11;
        java.net.InetAddress $r8, $r10, $r12;
        java.net.DatagramSocketImpl $r14;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.SocketAddress;
        r2 := @parameter1: java.net.NetworkInterface;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r4 = new java.net.SocketException;
        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r4;

     label0:
        if r1 == null goto label1;

        $z1 = r1 instanceof java.net.InetSocketAddress;
        if $z1 != 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported address type");
        throw $r5;

     label2:
        $z2 = r0.<java.net.MulticastSocket: boolean oldImpl>;
        if $z2 == 0 goto label3;

        $r6 = new java.lang.UnsupportedOperationException;
        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r6;

     label3:
        $r7 = (java.net.InetSocketAddress) r1;
        $r8 = virtualinvoke $r7.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r0.<java.net.MulticastSocket: void checkAddress(java.net.InetAddress,java.lang.String)>($r8, "joinGroup");
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label4;

        $r9 = (java.net.InetSocketAddress) r1;
        $r10 = virtualinvoke $r9.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>($r10);

     label4:
        $r11 = (java.net.InetSocketAddress) r1;
        $r12 = virtualinvoke $r11.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $z3 = virtualinvoke $r12.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z3 != 0 goto label5;

        $r13 = new java.net.SocketException;
        specialinvoke $r13.<java.net.SocketException: void <init>(java.lang.String)>("Not a multicast address");
        throw $r13;

     label5:
        $r14 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r14.<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>(r1, r2);
        return;
    }

    public void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        java.lang.SecurityManager r3;
        boolean $z0, $z1, $z2, $z3;
        java.net.SocketException $r4, $r13;
        java.lang.IllegalArgumentException $r5;
        java.lang.UnsupportedOperationException $r6;
        java.net.InetSocketAddress $r7, $r9, $r11;
        java.net.InetAddress $r8, $r10, $r12;
        java.net.DatagramSocketImpl $r14;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.SocketAddress;
        r2 := @parameter1: java.net.NetworkInterface;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r4 = new java.net.SocketException;
        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r4;

     label0:
        if r1 == null goto label1;

        $z1 = r1 instanceof java.net.InetSocketAddress;
        if $z1 != 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported address type");
        throw $r5;

     label2:
        $z2 = r0.<java.net.MulticastSocket: boolean oldImpl>;
        if $z2 == 0 goto label3;

        $r6 = new java.lang.UnsupportedOperationException;
        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r6;

     label3:
        $r7 = (java.net.InetSocketAddress) r1;
        $r8 = virtualinvoke $r7.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r0.<java.net.MulticastSocket: void checkAddress(java.net.InetAddress,java.lang.String)>($r8, "leaveGroup");
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label4;

        $r9 = (java.net.InetSocketAddress) r1;
        $r10 = virtualinvoke $r9.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>($r10);

     label4:
        $r11 = (java.net.InetSocketAddress) r1;
        $r12 = virtualinvoke $r11.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $z3 = virtualinvoke $r12.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z3 != 0 goto label5;

        $r13 = new java.net.SocketException;
        specialinvoke $r13.<java.net.SocketException: void <init>(java.lang.String)>("Not a multicast address");
        throw $r13;

     label5:
        $r14 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r14.<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>(r1, r2);
        return;
    }

    public void setInterface(java.net.InetAddress) throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        java.net.SocketException $r4;
        java.net.DatagramSocketImpl $r6;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.InetAddress;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r4 = new java.net.SocketException;
        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r4;

     label0:
        virtualinvoke r0.<java.net.MulticastSocket: void checkAddress(java.net.InetAddress,java.lang.String)>(r1, "setInterface");
        $r5 = r0.<java.net.MulticastSocket: java.lang.Object infLock>;
        r2 = $r5;
        entermonitor $r5;

     label1:
        $r6 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r6.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(16, r1);
        r0.<java.net.MulticastSocket: java.net.InetAddress infAddress> = r1;
        r0.<java.net.MulticastSocket: boolean interfaceSet> = 1;
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r3 = $r7;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.net.InetAddress getInterface() throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.lang.Object r1, $r8, $r10, $r15;
        java.net.InetAddress r2, r5, $r11, $r13, $r16, $r17, $r18;
        java.net.NetworkInterface r3;
        java.util.Enumeration r4;
        java.lang.Throwable r6, $r23;
        boolean $z0, $z1, $z2, $z3;
        java.net.SocketException $r7;
        java.net.DatagramSocketImpl $r9;
        java.lang.Exception $r20, r21;

        r0 := @this: java.net.MulticastSocket;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r7 = new java.net.SocketException;
        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r7;

     label0:
        $r8 = r0.<java.net.MulticastSocket: java.lang.Object infLock>;
        r1 = $r8;
        entermonitor $r8;

     label1:
        $r9 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        $r10 = virtualinvoke $r9.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(16);
        r2 = (java.net.InetAddress) $r10;
        $r11 = r0.<java.net.MulticastSocket: java.net.InetAddress infAddress>;
        if $r11 != null goto label3;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r13 = r0.<java.net.MulticastSocket: java.net.InetAddress infAddress>;
        $z1 = virtualinvoke r2.<java.net.InetAddress: boolean equals(java.lang.Object)>($r13);
        if $z1 == 0 goto label5;

        exitmonitor r1;

     label4:
        return r2;

     label5:
        r3 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>(r2);
        r4 = virtualinvoke r3.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

     label6:
        $z2 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z2 == 0 goto label10;

        $r15 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r16 = (java.net.InetAddress) $r15;
        r5 = (java.net.InetAddress) $r16;
        $r17 = r0.<java.net.MulticastSocket: java.net.InetAddress infAddress>;
        $z3 = virtualinvoke r5.<java.net.InetAddress: boolean equals(java.lang.Object)>($r17);
        if $z3 == 0 goto label9;

        $r18 = r0.<java.net.MulticastSocket: java.net.InetAddress infAddress>;

     label7:
        exitmonitor r1;

     label8:
        return $r18;

     label9:
        goto label6;

     label10:
        r0.<java.net.MulticastSocket: java.net.InetAddress infAddress> = null;

     label11:
        exitmonitor r1;

     label12:
        return r2;

     label13:
        $r20 := @caughtexception;

     label14:
        r21 = $r20;
        exitmonitor r1;

     label15:
        return r2;

     label16:
        $r23 := @caughtexception;

     label17:
        r6 = $r23;
        exitmonitor r1;

     label18:
        throw r6;

        catch java.lang.Exception from label5 to label7 with label13;
        catch java.lang.Exception from label9 to label11 with label13;
        catch java.lang.Throwable from label1 to label2 with label16;
        catch java.lang.Throwable from label3 to label4 with label16;
        catch java.lang.Throwable from label5 to label8 with label16;
        catch java.lang.Throwable from label9 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void setNetworkInterface(java.net.NetworkInterface) throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.NetworkInterface r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.net.DatagramSocketImpl $r5;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.NetworkInterface;
        $r4 = r0.<java.net.MulticastSocket: java.lang.Object infLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r5.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(31, r1);
        r0.<java.net.MulticastSocket: java.net.InetAddress infAddress> = null;
        r0.<java.net.MulticastSocket: boolean interfaceSet> = 1;
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r3 = $r6;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.net.NetworkInterface getNetworkInterface() throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.NetworkInterface r1, $r6;
        java.net.InetAddress[] r2;
        java.net.InetAddress $r3, $r7;
        java.net.DatagramSocketImpl $r4;
        java.lang.Object $r5;
        int $i0, $i1;
        java.lang.String $r8;

        r0 := @this: java.net.MulticastSocket;
        $r4 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        $r5 = virtualinvoke $r4.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(31);
        r1 = (java.net.NetworkInterface) $r5;
        $i0 = virtualinvoke r1.<java.net.NetworkInterface: int getIndex()>();
        if $i0 == 0 goto label0;

        $i1 = virtualinvoke r1.<java.net.NetworkInterface: int getIndex()>();
        if $i1 != -1 goto label1;

     label0:
        r2 = newarray (java.net.InetAddress)[1];
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress anyLocalAddress()>();
        r2[0] = $r3;
        $r6 = new java.net.NetworkInterface;
        $r7 = r2[0];
        $r8 = virtualinvoke $r7.<java.net.InetAddress: java.lang.String getHostName()>();
        specialinvoke $r6.<java.net.NetworkInterface: void <init>(java.lang.String,int,java.net.InetAddress[])>($r8, 0, r2);
        return $r6;

     label1:
        return r1;
    }

    public void setLoopbackMode(boolean) throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        boolean z0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.MulticastSocket;
        z0 := @parameter0: boolean;
        $r1 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(18, $r2);
        return;
    }

    public boolean getLoopbackMode() throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.MulticastSocket;
        $r1 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(18);
        $r3 = (java.lang.Boolean) $r2;
        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;
    }

    public void send(java.net.DatagramPacket, byte) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.DatagramPacket r1, r3;
        byte b0, b6;
        java.lang.Object r2, $r10;
        java.lang.SecurityManager r4;
        java.lang.Throwable r5, r6, r7, $r23, $r25, $r26;
        boolean $z0, $z1, $z2;
        java.net.SocketException $r8;
        java.net.InetAddress $r9, $r12, $r13, $r14, r16, $r17, $r18;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r15;
        null_type n0;
        java.lang.SecurityException $r19;
        java.net.DatagramSocketImpl $r20, $r21, $r22, $r24;

        r0 := @this: java.net.MulticastSocket;
        r1 := @parameter0: java.net.DatagramPacket;
        b0 := @parameter1: byte;
        $z0 = virtualinvoke r0.<java.net.MulticastSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r8 = new java.net.SocketException;
        specialinvoke $r8.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r8;

     label0:
        $r9 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        virtualinvoke r0.<java.net.MulticastSocket: void checkAddress(java.net.InetAddress,java.lang.String)>($r9, "send");
        $r10 = r0.<java.net.MulticastSocket: java.lang.Object ttlLock>;
        r2 = $r10;
        entermonitor $r10;

     label1:
        r3 = r1;
        entermonitor r1;

     label2:
        $i1 = r0.<java.net.MulticastSocket: int connectState>;
        if $i1 != 0 goto label5;

        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label4;

        $r12 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        $z1 = virtualinvoke $r12.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z1 == 0 goto label3;

        $r13 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        virtualinvoke r4.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>($r13, b0);
        goto label4;

     label3:
        $r14 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        $r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i2 = virtualinvoke r1.<java.net.DatagramPacket: int getPort()>();
        virtualinvoke r4.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r15, $i2);

     label4:
        goto label8;

     label5:
        n0 = null;
        r16 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        if r16 != null goto label6;

        $r17 = r0.<java.net.MulticastSocket: java.net.InetAddress connectedAddress>;
        virtualinvoke r1.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>($r17);
        $i3 = r0.<java.net.MulticastSocket: int connectedPort>;
        virtualinvoke r1.<java.net.DatagramPacket: void setPort(int)>($i3);
        goto label8;

     label6:
        $r18 = r0.<java.net.MulticastSocket: java.net.InetAddress connectedAddress>;
        $z2 = virtualinvoke r16.<java.net.InetAddress: boolean equals(java.lang.Object)>($r18);
        if $z2 == 0 goto label7;

        $i4 = virtualinvoke r1.<java.net.DatagramPacket: int getPort()>();
        $i5 = r0.<java.net.MulticastSocket: int connectedPort>;
        if $i4 == $i5 goto label8;

     label7:
        $r19 = new java.lang.SecurityException;
        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("connected address and packet address differ");
        throw $r19;

     label8:
        b6 = virtualinvoke r0.<java.net.MulticastSocket: byte getTTL()>();

     label9:
        if b0 == b6 goto label10;

        $r20 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r20.<java.net.DatagramSocketImpl: void setTTL(byte)>(b0);

     label10:
        $r21 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r21.<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>(r1);

     label11:
        if b0 == b6 goto label16;

        $r22 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r22.<java.net.DatagramSocketImpl: void setTTL(byte)>(b6);
        goto label16;

     label12:
        $r23 := @caughtexception;

     label13:
        r5 = $r23;

     label14:
        if b0 == b6 goto label15;

        $r24 = virtualinvoke r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r24.<java.net.DatagramSocketImpl: void setTTL(byte)>(b6);

     label15:
        throw r5;

     label16:
        exitmonitor r3;

     label17:
        goto label21;

     label18:
        $r25 := @caughtexception;

     label19:
        r6 = $r25;
        exitmonitor r3;

     label20:
        throw r6;

     label21:
        exitmonitor r2;

     label22:
        goto label26;

     label23:
        $r26 := @caughtexception;

     label24:
        r7 = $r26;
        exitmonitor r2;

     label25:
        throw r7;

     label26:
        return;

        catch java.lang.Throwable from label9 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label2 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label1 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }
}
