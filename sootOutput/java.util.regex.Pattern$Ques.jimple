final class java.util.regex.Pattern$Ques extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node atom;
    int type;

    void <init>(java.util.regex.Pattern$Node, int)
    {
        java.util.regex.Pattern$Ques r0;
        java.util.regex.Pattern$Node r1;
        int i0;

        r0 := @this: java.util.regex.Pattern$Ques;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        i0 := @parameter1: int;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node atom> = r1;
        r0.<java.util.regex.Pattern$Ques: int type> = i0;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Ques r0;
        java.util.regex.Matcher r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;

        r0 := @this: java.util.regex.Pattern$Ques;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $i1 = r0.<java.util.regex.Pattern$Ques: int type>;
        tableswitch($i1)
        {
            case 0: goto label0;
            case 1: goto label5;
            case 2: goto label9;
            default: goto label11;
        };

     label0:
        $r3 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node atom>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label1;

        $r4 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $i2 = r1.<java.util.regex.Matcher: int last>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i2, r2);
        if $z1 != 0 goto label2;

     label1:
        $r5 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $z2 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;
        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        $r6 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $z4 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z4 != 0 goto label6;

        $r7 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node atom>;
        $z5 = virtualinvoke $r7.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z5 == 0 goto label7;

        $r8 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $i3 = r1.<java.util.regex.Matcher: int last>;
        $z6 = virtualinvoke $r8.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i3, r2);
        if $z6 == 0 goto label7;

     label6:
        $z7 = 1;
        goto label8;

     label7:
        $z7 = 0;

     label8:
        return $z7;

     label9:
        $r9 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node atom>;
        $z8 = virtualinvoke $r9.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z8 == 0 goto label10;

        i0 = r1.<java.util.regex.Matcher: int last>;

     label10:
        $r10 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $z9 = virtualinvoke $r10.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z9;

     label11:
        $r11 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node atom>;
        $z10 = virtualinvoke $r11.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z10 == 0 goto label12;

        $r12 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $i4 = r1.<java.util.regex.Matcher: int last>;
        $z11 = virtualinvoke $r12.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i4, r2);
        if $z11 == 0 goto label12;

        $z12 = 1;
        goto label13;

     label12:
        $z12 = 0;

     label13:
        return $z12;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Ques r0;
        java.util.regex.Pattern$TreeInfo r1;
        int i0, $i1;
        java.util.regex.Pattern$Node $r2, $r3, $r4, $r5;
        boolean $z1, $z3;

        r0 := @this: java.util.regex.Pattern$Ques;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $i1 = r0.<java.util.regex.Pattern$Ques: int type>;
        if $i1 == 3 goto label0;

        i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $r2 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node atom>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = i0;
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;
        $r3 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $z1 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z1;

     label0:
        $r4 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node atom>;
        virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        $r5 = r0.<java.util.regex.Pattern$Ques: java.util.regex.Pattern$Node next>;
        $z3 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z3;
    }
}
