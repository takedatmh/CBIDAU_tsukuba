public class sun.misc.FpUtils extends java.lang.Object
{
    static double twoToTheDoubleScaleUp;
    static double twoToTheDoubleScaleDown;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        sun.misc.FpUtils r0;

        r0 := @this: sun.misc.FpUtils;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static int getExponent(double)
    {
        double d0;
        long $l0, $l1, $l2, $l3;
        int $i4;

        d0 := @parameter0: double;
        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        $l1 = $l0 & 9218868437227405312L;
        $l2 = $l1 >> 52;
        $l3 = $l2 - 1023L;
        $i4 = (int) $l3;
        return $i4;
    }

    public static int getExponent(float)
    {
        float f0;
        int $i0, $i1, $i2, $i3;

        f0 := @parameter0: float;
        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        $i1 = $i0 & 2139095040;
        $i2 = $i1 >> 23;
        $i3 = $i2 - 127;
        return $i3;
    }

    static double powerOfTwoD(int)
    {
        int i0;
        boolean $z0;
        java.lang.AssertionError $r0;
        long $l1, $l2, $l3, $l4;
        double $d0;

        i0 := @parameter0: int;
        $z0 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i0 < -1022 goto label0;

        if i0 <= 1023 goto label1;

     label0:
        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label1:
        $l1 = (long) i0;
        $l2 = $l1 + 1023L;
        $l3 = $l2 << 52;
        $l4 = $l3 & 9218868437227405312L;
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l4);
        return $d0;
    }

    static float powerOfTwoF(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r0;
        float $f0;

        i0 := @parameter0: int;
        $z0 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i0 < -126 goto label0;

        if i0 <= 127 goto label1;

     label0:
        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label1:
        $i1 = i0 + 127;
        $i2 = $i1 << 23;
        $i3 = $i2 & 2139095040;
        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i3);
        return $f0;
    }

    public static double rawCopySign(double, double)
    {
        double d0, d1, $d2;
        long $l0, $l1, $l2, $l3, $l4;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);
        $l1 = $l0 & -9223372036854775808L;
        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        $l3 = $l2 & 9223372036854775807L;
        $l4 = $l1 | $l3;
        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l4);
        return $d2;
    }

    public static float rawCopySign(float, float)
    {
        float f0, f1, $f2;
        int $i0, $i1, $i2, $i3, $i4;

        f0 := @parameter0: float;
        f1 := @parameter1: float;
        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);
        $i1 = $i0 & -2147483648;
        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        $i3 = $i2 & 2147483647;
        $i4 = $i1 | $i3;
        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i4);
        return $f2;
    }

    public static boolean isFinite(double)
    {
        double d0, $d1;
        byte $b0;
        boolean $z0;

        d0 := @parameter0: double;
        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);
        $b0 = $d1 cmpg 1.7976931348623157E308;
        if $b0 > 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isFinite(float)
    {
        float f0, $f1;
        byte $b0;
        boolean $z0;

        f0 := @parameter0: float;
        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);
        $b0 = $f1 cmpg 3.4028235E38F;
        if $b0 > 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isInfinite(double)
    {
        double d0;
        boolean $z0;

        d0 := @parameter0: double;
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);
        return $z0;
    }

    public static boolean isInfinite(float)
    {
        float f0;
        boolean $z0;

        f0 := @parameter0: float;
        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);
        return $z0;
    }

    public static boolean isNaN(double)
    {
        double d0;
        boolean $z0;

        d0 := @parameter0: double;
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
        return $z0;
    }

    public static boolean isNaN(float)
    {
        float f0;
        boolean $z0;

        f0 := @parameter0: float;
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);
        return $z0;
    }

    public static boolean isUnordered(double, double)
    {
        double d0, d1;
        boolean $z0, $z1, $z2;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d1);
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isUnordered(float, float)
    {
        float f0, f1;
        boolean $z0, $z1, $z2;

        f0 := @parameter0: float;
        f1 := @parameter1: float;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f1);
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static int ilogb(double)
    {
        double d0;
        int i0, i6;
        long l1, l3;
        boolean $z0, $z1, $z2, $z3;
        byte $b2, $b4, $b5;
        java.lang.AssertionError $r0, $r1, $r2;

        d0 := @parameter0: double;
        i0 = staticinvoke <sun.misc.FpUtils: int getExponent(double)>(d0);
        lookupswitch(i0)
        {
            case -1023: goto label2;
            case 1024: goto label0;
            default: goto label8;
        };

     label0:
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d0);
        if $z0 == 0 goto label1;

        return 1073741824;

     label1:
        return 268435456;

     label2:
        $b2 = d0 cmpl 0.0;
        if $b2 != 0 goto label3;

        return -268435456;

     label3:
        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        l3 = l1 & 4503599627370495L;
        $z1 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z1 != 0 goto label4;

        $b4 = l3 cmp 0L;
        if $b4 != 0 goto label4;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label4:
        $b5 = l3 cmp 4503599627370496L;
        if $b5 >= 0 goto label5;

        l3 = l3 * 2L;
        i0 = i0 + -1;
        goto label4;

     label5:
        i6 = i0 + 1;
        $z2 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z2 != 0 goto label7;

        if i6 < -1074 goto label6;

        if i6 < -1022 goto label7;

     label6:
        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label7:
        return i6;

     label8:
        $z3 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z3 != 0 goto label10;

        if i0 < -1022 goto label9;

        if i0 <= 1023 goto label10;

     label9:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label10:
        return i0;
    }

    public static int ilogb(float)
    {
        float f0;
        int i0, i1, i3, i4;
        boolean $z0, $z1, $z2, $z3;
        byte $b2;
        java.lang.AssertionError $r0, $r1, $r2;

        f0 := @parameter0: float;
        i0 = staticinvoke <sun.misc.FpUtils: int getExponent(float)>(f0);
        lookupswitch(i0)
        {
            case -127: goto label2;
            case 128: goto label0;
            default: goto label8;
        };

     label0:
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f0);
        if $z0 == 0 goto label1;

        return 1073741824;

     label1:
        return 268435456;

     label2:
        $b2 = f0 cmpl 0.0F;
        if $b2 != 0 goto label3;

        return -268435456;

     label3:
        i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        i3 = i1 & 8388607;
        $z1 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z1 != 0 goto label4;

        if i3 != 0 goto label4;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label4:
        if i3 >= 8388608 goto label5;

        i3 = i3 * 2;
        i0 = i0 + -1;
        goto label4;

     label5:
        i4 = i0 + 1;
        $z2 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z2 != 0 goto label7;

        if i4 < -149 goto label6;

        if i4 < -126 goto label7;

     label6:
        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label7:
        return i4;

     label8:
        $z3 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z3 != 0 goto label10;

        if i0 < -126 goto label9;

        if i0 <= 127 goto label10;

     label9:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label10:
        return i0;
    }

    public static double scalb(double, int)
    {
        double d0, d1, d2, $d3, d4;
        int i0, i1, i2, $i4, $i5, $i6, i7, i8;
        boolean z0, z1;
        short s3;

        d0 := @parameter0: double;
        i0 := @parameter1: int;
        z0 = 0;
        z1 = 0;
        d1 = #NaN;
        if i0 >= 0 goto label0;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, -2099);
        s3 = -512;
        d2 = <sun.misc.FpUtils: double twoToTheDoubleScaleDown>;
        goto label1;

     label0:
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 2099);
        s3 = 512;
        d2 = <sun.misc.FpUtils: double twoToTheDoubleScaleUp>;

     label1:
        $i4 = i2 >> 8;
        i1 = $i4 >>> 23;
        $i5 = i2 + i1;
        $i6 = $i5 & 511;
        i7 = $i6 - i1;
        $d3 = staticinvoke <sun.misc.FpUtils: double powerOfTwoD(int)>(i7);
        d4 = d0 * $d3;
        i8 = i2 - i7;

     label2:
        if i8 == 0 goto label3;

        d4 = d4 * d2;
        i8 = i8 - s3;
        goto label2;

     label3:
        return d4;
    }

    public static float scalb(float, int)
    {
        float f0, $f1;
        int i0, $i1, i2;
        double $d0, $d1, $d2;

        f0 := @parameter0: float;
        i0 := @parameter1: int;
        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 278);
        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, -278);
        $d0 = (double) f0;
        $d1 = staticinvoke <sun.misc.FpUtils: double powerOfTwoD(int)>(i2);
        $d2 = $d0 * $d1;
        $f1 = (float) $d2;
        return $f1;
    }

    public static double nextAfter(double, double)
    {
        double d0, d1, $d2, $d3, $d4;
        long l0, $l5, l6;
        boolean $z0, $z1, $z2;
        byte $b1, $b2, $b4, $b7, $b8, $b9;
        java.lang.AssertionError $r0;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d1);
        if $z1 == 0 goto label1;

     label0:
        $d2 = d0 + d1;
        return $d2;

     label1:
        $b1 = d0 cmpl d1;
        if $b1 != 0 goto label2;

        return d1;

     label2:
        $d3 = d0 + 0.0;
        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d3);
        $b2 = d1 cmpl d0;
        if $b2 <= 0 goto label5;

        $b4 = l0 cmp 0L;
        if $b4 < 0 goto label3;

        $l5 = 1L;
        goto label4;

     label3:
        $l5 = -1L;

     label4:
        l6 = l0 + $l5;
        goto label9;

     label5:
        $z2 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z2 != 0 goto label6;

        $b7 = d1 cmpg d0;
        if $b7 < 0 goto label6;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label6:
        $b8 = l0 cmp 0L;
        if $b8 <= 0 goto label7;

        l6 = l0 - 1L;
        goto label9;

     label7:
        $b9 = l0 cmp 0L;
        if $b9 >= 0 goto label8;

        l6 = l0 + 1L;
        goto label9;

     label8:
        l6 = -9223372036854775807L;

     label9:
        $d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l6);
        return $d4;
    }

    public static float nextAfter(float, double)
    {
        float f0, $f1, $f2, $f3, $f4, $f5;
        double d0, $d1, $d2, $d3;
        int i0, i5;
        boolean $z0, $z1, $z2;
        byte $b1, $b2, $b4, $b6;
        java.lang.AssertionError $r0;

        f0 := @parameter0: float;
        d0 := @parameter1: double;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d0);
        if $z1 == 0 goto label1;

     label0:
        $f1 = (float) d0;
        $f2 = f0 + $f1;
        return $f2;

     label1:
        $d1 = (double) f0;
        $b1 = $d1 cmpl d0;
        if $b1 != 0 goto label2;

        $f3 = (float) d0;
        return $f3;

     label2:
        $f4 = f0 + 0.0F;
        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f4);
        $d2 = (double) f0;
        $b2 = d0 cmpl $d2;
        if $b2 <= 0 goto label5;

        if i0 < 0 goto label3;

        $b4 = 1;
        goto label4;

     label3:
        $b4 = -1;

     label4:
        i5 = i0 + $b4;
        goto label9;

     label5:
        $z2 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z2 != 0 goto label6;

        $d3 = (double) f0;
        $b6 = d0 cmpg $d3;
        if $b6 < 0 goto label6;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label6:
        if i0 <= 0 goto label7;

        i5 = i0 + -1;
        goto label9;

     label7:
        if i0 >= 0 goto label8;

        i5 = i0 + 1;
        goto label9;

     label8:
        i5 = -2147483647;

     label9:
        $f5 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i5);
        return $f5;
    }

    public static double nextUp(double)
    {
        double d0, d1, $d2;
        boolean $z0;
        byte $b0, $b2;
        long $l1, $l3, $l4;

        d0 := @parameter0: double;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d0);
        if $z0 != 0 goto label0;

        $b0 = d0 cmpl #Infinity;
        if $b0 != 0 goto label1;

     label0:
        return d0;

     label1:
        d1 = d0 + 0.0;
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);
        $b2 = d1 cmpl 0.0;
        if $b2 < 0 goto label2;

        $l3 = 1L;
        goto label3;

     label2:
        $l3 = -1L;

     label3:
        $l4 = $l1 + $l3;
        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l4);
        return $d2;
    }

    public static float nextUp(float)
    {
        float f0, f1, $f2;
        boolean $z0;
        byte $b0, $b2, $b3;
        int $i1, $i4;

        f0 := @parameter0: float;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f0);
        if $z0 != 0 goto label0;

        $b0 = f0 cmpl #InfinityF;
        if $b0 != 0 goto label1;

     label0:
        return f0;

     label1:
        f1 = f0 + 0.0F;
        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);
        $b2 = f1 cmpl 0.0F;
        if $b2 < 0 goto label2;

        $b3 = 1;
        goto label3;

     label2:
        $b3 = -1;

     label3:
        $i4 = $i1 + $b3;
        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i4);
        return $f2;
    }

    public static double nextDown(double)
    {
        double d0, $d1;
        boolean $z0;
        byte $b0, $b1, $b3;
        long $l2, $l4, $l5;

        d0 := @parameter0: double;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d0);
        if $z0 != 0 goto label0;

        $b0 = d0 cmpl #-Infinity;
        if $b0 != 0 goto label1;

     label0:
        return d0;

     label1:
        $b1 = d0 cmpl 0.0;
        if $b1 != 0 goto label2;

        return -4.9E-324;

     label2:
        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        $b3 = d0 cmpl 0.0;
        if $b3 <= 0 goto label3;

        $l4 = -1L;
        goto label4;

     label3:
        $l4 = 1L;

     label4:
        $l5 = $l2 + $l4;
        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l5);
        return $d1;
    }

    public static double nextDown(float)
    {
        float f0, $f1;
        boolean $z0;
        byte $b0, $b1, $b3, $b4;
        double $d0, $d1;
        int $i2, $i5;

        f0 := @parameter0: float;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f0);
        if $z0 != 0 goto label0;

        $b0 = f0 cmpl #-InfinityF;
        if $b0 != 0 goto label1;

     label0:
        $d0 = (double) f0;
        return $d0;

     label1:
        $b1 = f0 cmpl 0.0F;
        if $b1 != 0 goto label2;

        return -1.401298464324817E-45;

     label2:
        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        $b3 = f0 cmpl 0.0F;
        if $b3 <= 0 goto label3;

        $b4 = -1;
        goto label4;

     label3:
        $b4 = 1;

     label4:
        $i5 = $i2 + $b4;
        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i5);
        $d1 = (double) $f1;
        return $d1;
    }

    public static double copySign(double, double)
    {
        double d0, d1, $d3, $d4;
        boolean $z0;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d1);
        if $z0 == 0 goto label0;

        $d3 = 1.0;
        goto label1;

     label0:
        $d3 = d1;

     label1:
        $d4 = staticinvoke <sun.misc.FpUtils: double rawCopySign(double,double)>(d0, $d3);
        return $d4;
    }

    public static float copySign(float, float)
    {
        float f0, f1, $f3, $f4;
        boolean $z0;

        f0 := @parameter0: float;
        f1 := @parameter1: float;
        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f1);
        if $z0 == 0 goto label0;

        $f3 = 1.0F;
        goto label1;

     label0:
        $f3 = f1;

     label1:
        $f4 = staticinvoke <sun.misc.FpUtils: float rawCopySign(float,float)>(f0, $f3);
        return $f4;
    }

    public static double ulp(double)
    {
        double d0, $d1, $d2, $d3;
        int i0, i1, $i2;
        boolean $z0;
        java.lang.AssertionError $r0;
        long $l3;

        d0 := @parameter0: double;
        i0 = staticinvoke <sun.misc.FpUtils: int getExponent(double)>(d0);
        lookupswitch(i0)
        {
            case -1023: goto label1;
            case 1024: goto label0;
            default: goto label2;
        };

     label0:
        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);
        return $d1;

     label1:
        return 4.9E-324;

     label2:
        $z0 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z0 != 0 goto label4;

        if i0 > 1023 goto label3;

        if i0 >= -1022 goto label4;

     label3:
        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label4:
        i1 = i0 - 52;
        if i1 < -1022 goto label5;

        $d2 = staticinvoke <sun.misc.FpUtils: double powerOfTwoD(int)>(i1);
        return $d2;

     label5:
        $i2 = i1 - -1074;
        $l3 = 1L << $i2;
        $d3 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3);
        return $d3;
    }

    public static float ulp(float)
    {
        float f0, $f1, $f2, $f3;
        int i0, i1, $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r0;

        f0 := @parameter0: float;
        i0 = staticinvoke <sun.misc.FpUtils: int getExponent(float)>(f0);
        lookupswitch(i0)
        {
            case -127: goto label1;
            case 128: goto label0;
            default: goto label2;
        };

     label0:
        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);
        return $f1;

     label1:
        return 1.4E-45F;

     label2:
        $z0 = <sun.misc.FpUtils: boolean $assertionsDisabled>;
        if $z0 != 0 goto label4;

        if i0 > 127 goto label3;

        if i0 >= -126 goto label4;

     label3:
        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label4:
        i1 = i0 - 23;
        if i1 < -126 goto label5;

        $f2 = staticinvoke <sun.misc.FpUtils: float powerOfTwoF(int)>(i1);
        return $f2;

     label5:
        $i2 = i1 - -149;
        $i3 = 1 << $i2;
        $f3 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i3);
        return $f3;
    }

    public static double signum(double)
    {
        double d0, $d1;
        byte $b0;
        boolean $z0;

        d0 := @parameter0: double;
        $b0 = d0 cmpl 0.0;
        if $b0 == 0 goto label0;

        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(double)>(d0);
        if $z0 == 0 goto label1;

     label0:
        $d1 = d0;
        goto label2;

     label1:
        $d1 = staticinvoke <sun.misc.FpUtils: double copySign(double,double)>(1.0, d0);

     label2:
        return $d1;
    }

    public static float signum(float)
    {
        float f0, $f1;
        byte $b0;
        boolean $z0;

        f0 := @parameter0: float;
        $b0 = f0 cmpl 0.0F;
        if $b0 == 0 goto label0;

        $z0 = staticinvoke <sun.misc.FpUtils: boolean isNaN(float)>(f0);
        if $z0 == 0 goto label1;

     label0:
        $f1 = f0;
        goto label2;

     label1:
        $f1 = staticinvoke <sun.misc.FpUtils: float copySign(float,float)>(1.0F, f0);

     label2:
        return $f1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        double $d0, $d1;

        $r0 = class "sun/misc/FpUtils";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.misc.FpUtils: boolean $assertionsDisabled> = $z1;
        $d0 = staticinvoke <sun.misc.FpUtils: double powerOfTwoD(int)>(512);
        <sun.misc.FpUtils: double twoToTheDoubleScaleUp> = $d0;
        $d1 = staticinvoke <sun.misc.FpUtils: double powerOfTwoD(int)>(-512);
        <sun.misc.FpUtils: double twoToTheDoubleScaleDown> = $d1;
        return;
    }
}
