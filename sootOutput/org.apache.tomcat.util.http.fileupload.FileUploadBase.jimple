public abstract class org.apache.tomcat.util.http.fileupload.FileUploadBase extends java.lang.Object
{
    private static final java.nio.charset.Charset CHARSET_ISO_8859_1;
    public static final java.lang.String CONTENT_TYPE;
    public static final java.lang.String CONTENT_DISPOSITION;
    public static final java.lang.String CONTENT_LENGTH;
    public static final java.lang.String FORM_DATA;
    public static final java.lang.String ATTACHMENT;
    public static final java.lang.String MULTIPART;
    public static final java.lang.String MULTIPART_FORM_DATA;
    public static final java.lang.String MULTIPART_MIXED;
    private long sizeMax;
    private long fileSizeMax;
    private java.lang.String headerEncoding;
    private org.apache.tomcat.util.http.fileupload.ProgressListener listener;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");
        <org.apache.tomcat.util.http.fileupload.FileUploadBase: java.nio.charset.Charset CHARSET_ISO_8859_1> = $r0;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long sizeMax> = -1L;
        r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long fileSizeMax> = -1L;
        return;
    }

    public static final boolean isMultipartContent(org.apache.tomcat.util.http.fileupload.RequestContext)
    {
        org.apache.tomcat.util.http.fileupload.RequestContext r0;
        java.lang.String r1, $r3;
        java.util.Locale $r2;
        boolean $z0;

        r0 := @parameter0: org.apache.tomcat.util.http.fileupload.RequestContext;
        r1 = interfaceinvoke r0.<org.apache.tomcat.util.http.fileupload.RequestContext: java.lang.String getContentType()>();
        if r1 != null goto label0;

        return 0;

     label0:
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);
        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("multipart/");
        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract org.apache.tomcat.util.http.fileupload.FileItemFactory getFileItemFactory();

    public abstract void setFileItemFactory(org.apache.tomcat.util.http.fileupload.FileItemFactory);

    public long getSizeMax()
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        long $l0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $l0 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long sizeMax>;
        return $l0;
    }

    public void setSizeMax(long)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        long l0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        l0 := @parameter0: long;
        r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long sizeMax> = l0;
        return;
    }

    public long getFileSizeMax()
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        long $l0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $l0 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long fileSizeMax>;
        return $l0;
    }

    public void setFileSizeMax(long)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        long l0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        l0 := @parameter0: long;
        r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long fileSizeMax> = l0;
        return;
    }

    public java.lang.String getHeaderEncoding()
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: java.lang.String headerEncoding>;
        return $r1;
    }

    public void setHeaderEncoding(java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: java.lang.String headerEncoding> = r1;
        return;
    }

    public org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext) throws org.apache.tomcat.util.http.fileupload.FileUploadException, java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.RequestContext r1;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl $r2;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException r3, $r4;
        java.lang.Throwable $r5;
        org.apache.tomcat.util.http.fileupload.FileUploadException $r6;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.RequestContext;

     label0:
        $r2 = new org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl;
        specialinvoke $r2.<org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl: void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)>(r0, r1);

     label1:
        return $r2;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        $r5 = virtualinvoke r3.<org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException: java.lang.Throwable getCause()>();
        $r6 = (org.apache.tomcat.util.http.fileupload.FileUploadException) $r5;
        throw $r6;

        catch org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException from label0 to label1 with label2;
    }

    public java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext) throws org.apache.tomcat.util.http.fileupload.FileUploadException
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.RequestContext r1;
        java.util.ArrayList $r2, r3, r10;
        boolean z0, $z1, $z3, $z4, $z5;
        org.apache.tomcat.util.http.fileupload.FileItemIterator r4;
        org.apache.tomcat.util.http.fileupload.FileItemFactory r5;
        org.apache.tomcat.util.http.fileupload.FileItemStream r6;
        java.lang.String r7, $r17, $r18, $r28, $r29, $r40;
        org.apache.tomcat.util.http.fileupload.FileItem r8, r12, r44;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException r9, $r21, $r33, r34;
        java.util.Iterator r11, r42;
        java.lang.Exception r13, $r32, $r45, r46;
        java.lang.Throwable r14, $r22, $r35, $r41;
        java.lang.NullPointerException $r15;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl $r16;
        java.io.InputStream $r19;
        java.io.OutputStream $r20;
        org.apache.tomcat.util.http.fileupload.FileUploadException $r23, $r36, $r39;
        java.io.IOException $r24, r25, $r37, r38;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException $r26;
        java.lang.Object[] $r27;
        org.apache.tomcat.util.http.fileupload.FileItemHeaders r30;
        java.lang.Object $r31, $r43;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.RequestContext;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        r3 = $r2;
        z0 = 0;

     label0:
        r4 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)>(r1);
        r5 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: org.apache.tomcat.util.http.fileupload.FileItemFactory getFileItemFactory()>();
        if r5 != null goto label7;

        $r15 = new java.lang.NullPointerException;
        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("No FileItemFactory has been set.");
        throw $r15;

     label1:
        r6 = interfaceinvoke r4.<org.apache.tomcat.util.http.fileupload.FileItemIterator: org.apache.tomcat.util.http.fileupload.FileItemStream next()>();
        $r16 = (org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl) r6;
        r7 = staticinvoke <org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl: java.lang.String access$1(org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl)>($r16);
        $r17 = interfaceinvoke r6.<org.apache.tomcat.util.http.fileupload.FileItemStream: java.lang.String getFieldName()>();
        $r18 = interfaceinvoke r6.<org.apache.tomcat.util.http.fileupload.FileItemStream: java.lang.String getContentType()>();
        $z1 = interfaceinvoke r6.<org.apache.tomcat.util.http.fileupload.FileItemStream: boolean isFormField()>();
        r8 = interfaceinvoke r5.<org.apache.tomcat.util.http.fileupload.FileItemFactory: org.apache.tomcat.util.http.fileupload.FileItem createItem(java.lang.String,java.lang.String,boolean,java.lang.String)>($r17, $r18, $z1, r7);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r8);

     label2:
        $r19 = interfaceinvoke r6.<org.apache.tomcat.util.http.fileupload.FileItemStream: java.io.InputStream openStream()>();
        $r20 = interfaceinvoke r8.<org.apache.tomcat.util.http.fileupload.FileItem: java.io.OutputStream getOutputStream()>();
        staticinvoke <org.apache.tomcat.util.http.fileupload.util.Streams: long copy(java.io.InputStream,java.io.OutputStream,boolean)>($r19, $r20, 1);

     label3:
        goto label6;

     label4:
        $r21 := @caughtexception;
        r9 = $r21;
        $r22 = virtualinvoke r9.<org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException: java.lang.Throwable getCause()>();
        $r23 = (org.apache.tomcat.util.http.fileupload.FileUploadException) $r22;
        throw $r23;

     label5:
        $r24 := @caughtexception;
        r25 = $r24;
        $r26 = new org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException;
        $r27 = newarray (java.lang.Object)[2];
        $r27[0] = "multipart/form-data";
        $r28 = virtualinvoke r25.<java.io.IOException: java.lang.String getMessage()>();
        $r27[1] = $r28;
        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Processing of %s request failed. %s", $r27);
        specialinvoke $r26.<org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException: void <init>(java.lang.String,java.lang.Throwable)>($r29, r25);
        throw $r26;

     label6:
        r30 = interfaceinvoke r6.<org.apache.tomcat.util.http.fileupload.FileItemStream: org.apache.tomcat.util.http.fileupload.FileItemHeaders getHeaders()>();
        interfaceinvoke r8.<org.apache.tomcat.util.http.fileupload.FileItem: void setHeaders(org.apache.tomcat.util.http.fileupload.FileItemHeaders)>(r30);

     label7:
        $z3 = interfaceinvoke r4.<org.apache.tomcat.util.http.fileupload.FileItemIterator: boolean hasNext()>();
        if $z3 != 0 goto label1;

        z0 = 1;
        r10 = r3;

     label8:
        if z0 != 0 goto label14;

        r11 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();
        goto label13;

     label9:
        $r31 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();
        r12 = (org.apache.tomcat.util.http.fileupload.FileItem) $r31;

     label10:
        interfaceinvoke r12.<org.apache.tomcat.util.http.fileupload.FileItem: void delete()>();

     label11:
        goto label13;

     label12:
        $r32 := @caughtexception;
        r13 = $r32;

     label13:
        $z4 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();
        if $z4 != 0 goto label9;

     label14:
        return r10;

     label15:
        $r33 := @caughtexception;

     label16:
        r34 = $r33;
        $r35 = virtualinvoke r34.<org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException: java.lang.Throwable getCause()>();
        $r36 = (org.apache.tomcat.util.http.fileupload.FileUploadException) $r35;
        throw $r36;

     label17:
        $r37 := @caughtexception;
        r38 = $r37;
        $r39 = new org.apache.tomcat.util.http.fileupload.FileUploadException;
        $r40 = virtualinvoke r38.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r39.<org.apache.tomcat.util.http.fileupload.FileUploadException: void <init>(java.lang.String,java.lang.Throwable)>($r40, r38);
        throw $r39;

     label18:
        $r41 := @caughtexception;
        r14 = $r41;
        if z0 != 0 goto label24;

        r42 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();
        goto label23;

     label19:
        $r43 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();
        r44 = (org.apache.tomcat.util.http.fileupload.FileItem) $r43;

     label20:
        interfaceinvoke r44.<org.apache.tomcat.util.http.fileupload.FileItem: void delete()>();

     label21:
        goto label23;

     label22:
        $r45 := @caughtexception;
        r46 = $r45;

     label23:
        $z5 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();
        if $z5 != 0 goto label19;

     label24:
        throw r14;

        catch org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.lang.Exception from label10 to label11 with label12;
        catch org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException from label0 to label8 with label15;
        catch java.io.IOException from label0 to label8 with label17;
        catch java.lang.Throwable from label0 to label8 with label18;
        catch java.lang.Throwable from label16 to label18 with label18;
        catch java.lang.Exception from label20 to label21 with label22;
    }

    public java.util.Map parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext) throws org.apache.tomcat.util.http.fileupload.FileUploadException
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.RequestContext r1;
        java.util.List r2, r7;
        java.util.HashMap r3, $r8;
        java.util.Iterator r4;
        org.apache.tomcat.util.http.fileupload.FileItem r5;
        java.lang.String r6;
        int $i0;
        java.lang.Object $r9, $r10;
        java.util.ArrayList $r11;
        boolean $z1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.RequestContext;
        r2 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)>(r1);
        $r8 = new java.util.HashMap;
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();
        specialinvoke $r8.<java.util.HashMap: void <init>(int)>($i0);
        r3 = $r8;
        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();
        goto label2;

     label0:
        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (org.apache.tomcat.util.http.fileupload.FileItem) $r9;
        r6 = interfaceinvoke r5.<org.apache.tomcat.util.http.fileupload.FileItem: java.lang.String getFieldName()>();
        $r10 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);
        r7 = (java.util.List) $r10;
        if r7 != null goto label1;

        $r11 = new java.util.ArrayList;
        specialinvoke $r11.<java.util.ArrayList: void <init>()>();
        r7 = $r11;
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label1:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 != 0 goto label0;

        return r3;
    }

    protected byte[] getBoundary(java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String r1, r5;
        org.apache.tomcat.util.http.fileupload.ParameterParser $r2, r3;
        java.util.Map r4;
        byte[] r6;
        char[] $r7;
        java.lang.Object $r8;
        java.nio.charset.Charset $r9;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: java.lang.String;
        $r2 = new org.apache.tomcat.util.http.fileupload.ParameterParser;
        specialinvoke $r2.<org.apache.tomcat.util.http.fileupload.ParameterParser: void <init>()>();
        r3 = $r2;
        virtualinvoke r3.<org.apache.tomcat.util.http.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);
        $r7 = newarray (char)[2];
        $r7[0] = 59;
        $r7[1] = 44;
        r4 = virtualinvoke r3.<org.apache.tomcat.util.http.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char[])>(r1, $r7);
        $r8 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("boundary");
        r5 = (java.lang.String) $r8;
        if r5 != null goto label0;

        return null;

     label0:
        $r9 = <org.apache.tomcat.util.http.fileupload.FileUploadBase: java.nio.charset.Charset CHARSET_ISO_8859_1>;
        r6 = virtualinvoke r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9);
        return r6;
    }

    protected java.lang.String getFileName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.FileItemHeaders r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.FileItemHeaders;
        $r2 = interfaceinvoke r1.<org.apache.tomcat.util.http.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-disposition");
        $r3 = specialinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: java.lang.String getFileName(java.lang.String)>($r2);
        return $r3;
    }

    private java.lang.String getFileName(java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String r1, r2, r4, r9;
        java.util.Locale $r3;
        org.apache.tomcat.util.http.fileupload.ParameterParser r5, $r7;
        java.util.Map r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: java.lang.String;
        r2 = null;
        if r1 == null goto label2;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);
        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("form-data");
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("attachment");
        if $z1 == 0 goto label2;

     label0:
        $r7 = new org.apache.tomcat.util.http.fileupload.ParameterParser;
        specialinvoke $r7.<org.apache.tomcat.util.http.fileupload.ParameterParser: void <init>()>();
        r5 = $r7;
        virtualinvoke r5.<org.apache.tomcat.util.http.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);
        r6 = virtualinvoke r5.<org.apache.tomcat.util.http.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char)>(r1, 59);
        $z2 = interfaceinvoke r6.<java.util.Map: boolean containsKey(java.lang.Object)>("filename");
        if $z2 == 0 goto label2;

        $r8 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("filename");
        r9 = (java.lang.String) $r8;
        if r9 == null goto label1;

        r2 = virtualinvoke r9.<java.lang.String: java.lang.String trim()>();
        goto label2;

     label1:
        r2 = "";

     label2:
        return r2;
    }

    protected java.lang.String getFieldName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.FileItemHeaders r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.FileItemHeaders;
        $r2 = interfaceinvoke r1.<org.apache.tomcat.util.http.fileupload.FileItemHeaders: java.lang.String getHeader(java.lang.String)>("Content-disposition");
        $r3 = specialinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: java.lang.String getFieldName(java.lang.String)>($r2);
        return $r3;
    }

    private java.lang.String getFieldName(java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String r1, r2, $r6;
        java.util.Locale $r3;
        org.apache.tomcat.util.http.fileupload.ParameterParser r4, $r7;
        java.util.Map r5;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: java.lang.String;
        r2 = null;
        if r1 == null goto label0;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);
        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("form-data");
        if $z0 == 0 goto label0;

        $r7 = new org.apache.tomcat.util.http.fileupload.ParameterParser;
        specialinvoke $r7.<org.apache.tomcat.util.http.fileupload.ParameterParser: void <init>()>();
        r4 = $r7;
        virtualinvoke r4.<org.apache.tomcat.util.http.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);
        r5 = virtualinvoke r4.<org.apache.tomcat.util.http.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char)>(r1, 59);
        $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("name");
        r2 = (java.lang.String) $r8;
        if r2 == null goto label0;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

     label0:
        return r2;
    }

    protected org.apache.tomcat.util.http.fileupload.FileItemHeaders getParsedHeaders(java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String r1, $r5, $r7, $r9;
        int i0, i1, i2, i3, i5;
        org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl r2;
        java.lang.StringBuilder r3, $r4, $r6;
        char c4;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        r2 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl newFileItemHeaders()>();
        i1 = 0;

     label0:
        i2 = specialinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: int parseEndOfLine(java.lang.String,int)>(r1, i1);
        if i1 != i2 goto label1;

        goto label10;

     label1:
        $r4 = new java.lang.StringBuilder;
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);
        r3 = $r4;
        i1 = i2 + 2;
        goto label8;

     label2:
        i3 = i1;
        goto label5;

     label3:
        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        if c4 == 32 goto label4;

        if c4 == 9 goto label4;

        goto label6;

     label4:
        i3 = i3 + 1;

     label5:
        if i3 < i0 goto label3;

     label6:
        if i3 != i1 goto label7;

        goto label9;

     label7:
        i5 = specialinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: int parseEndOfLine(java.lang.String,int)>(r1, i3);
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, i5);
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        i1 = i5 + 2;

     label8:
        if i1 < i0 goto label2;

     label9:
        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: void parseHeaderLine(org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl,java.lang.String)>(r2, $r9);
        goto label0;

     label10:
        return r2;
    }

    protected org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl newFileItemHeaders()
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $r1 = new org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl;
        specialinvoke $r1.<org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl: void <init>()>();
        return $r1;
    }

    private int parseEndOfLine(java.lang.String, int)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.IllegalStateException $r2;
        char $c6;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 = i0;

     label0:
        i2 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(13, i1);
        if i2 == -1 goto label1;

        $i3 = i2 + 1;
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i3 < $i4 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected headers to be terminated by an empty line.");
        throw $r2;

     label2:
        $i5 = i2 + 1;
        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i5);
        if $c6 != 10 goto label3;

        return i2;

     label3:
        i1 = i2 + 1;
        goto label0;
    }

    private void parseHeaderLine(org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl, java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl r1;
        java.lang.String r2, r3, r4, $r5, $r6;
        int i0, $i1, $i2;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl;
        r2 := @parameter1: java.lang.String;
        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);
        if i0 != -1 goto label0;

        return;

     label0:
        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        r3 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();
        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);
        $i2 = $i1 + 1;
        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i2);
        r4 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();
        virtualinvoke r1.<org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl: void addHeader(java.lang.String,java.lang.String)>(r3, r4);
        return;
    }

    public org.apache.tomcat.util.http.fileupload.ProgressListener getProgressListener()
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.ProgressListener $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: org.apache.tomcat.util.http.fileupload.ProgressListener listener>;
        return $r1;
    }

    public void setProgressListener(org.apache.tomcat.util.http.fileupload.ProgressListener)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.ProgressListener r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.ProgressListener;
        r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: org.apache.tomcat.util.http.fileupload.ProgressListener listener> = r1;
        return;
    }

    static long access$0(org.apache.tomcat.util.http.fileupload.FileUploadBase)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        long $l0;

        r0 := @parameter0: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $l0 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long fileSizeMax>;
        return $l0;
    }

    static long access$1(org.apache.tomcat.util.http.fileupload.FileUploadBase)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        long $l0;

        r0 := @parameter0: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $l0 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: long sizeMax>;
        return $l0;
    }

    static java.lang.String access$2(org.apache.tomcat.util.http.fileupload.FileUploadBase)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: java.lang.String headerEncoding>;
        return $r1;
    }

    static org.apache.tomcat.util.http.fileupload.ProgressListener access$3(org.apache.tomcat.util.http.fileupload.FileUploadBase)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase r0;
        org.apache.tomcat.util.http.fileupload.ProgressListener $r1;

        r0 := @parameter0: org.apache.tomcat.util.http.fileupload.FileUploadBase;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase: org.apache.tomcat.util.http.fileupload.ProgressListener listener>;
        return $r1;
    }
}
