public class org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler extends org.apache.coyote.AbstractProtocol$AbstractConnectionHandler implements org.apache.tomcat.util.net.NioEndpoint$Handler
{
    protected org.apache.coyote.http11.Http11NioProtocol proto;

    void <init>(org.apache.coyote.http11.Http11NioProtocol)
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.coyote.http11.Http11NioProtocol r1;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: org.apache.coyote.http11.Http11NioProtocol;
        specialinvoke r0.<org.apache.coyote.AbstractProtocol$AbstractConnectionHandler: void <init>()>();
        r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto> = r1;
        return;
    }

    protected org.apache.coyote.AbstractProtocol getProtocol()
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.coyote.http11.Http11NioProtocol $r1;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        $r1 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        return $r1;
    }

    protected org.apache.juli.logging.Log getLog()
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.juli.logging.Log $r1;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        $r1 = staticinvoke <org.apache.coyote.http11.Http11NioProtocol: org.apache.juli.logging.Log access$0()>();
        return $r1;
    }

    public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.coyote.http11.Http11NioProtocol $r1;
        org.apache.tomcat.util.net.SSLImplementation $r2;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        $r1 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r2 = $r1.<org.apache.coyote.http11.Http11NioProtocol: org.apache.tomcat.util.net.SSLImplementation sslImplementation>;
        return $r2;
    }

    public void release(java.nio.channels.SocketChannel)
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        java.nio.channels.SocketChannel r1, $r15;
        org.apache.juli.logging.Log $r2, $r7, $r17, $r18;
        java.lang.StringBuilder $r3, $r8, $r19, $r20, $r21, $r22;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        org.apache.coyote.Processor r6;
        java.lang.String $r9, $r23;
        java.util.Map $r10;
        java.util.Set $r11;
        java.lang.Object $r12, $r13, $r16;
        org.apache.tomcat.util.net.NioChannel $r14;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: java.nio.channels.SocketChannel;
        $r2 = staticinvoke <org.apache.coyote.http11.Http11NioProtocol: org.apache.juli.logging.Log access$0()>();
        $z1 = interfaceinvoke $r2.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label0;

        $r7 = staticinvoke <org.apache.coyote.http11.Http11NioProtocol: org.apache.juli.logging.Log access$0()>();
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Iterating through our connections to release a socket channel:");
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r9);

     label0:
        z0 = 0;
        $r10 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: java.util.Map connections>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();
        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();
        goto label2;

     label1:
        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.Map$Entry) $r12;
        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r14 = (org.apache.tomcat.util.net.NioChannel) $r13;
        $r15 = virtualinvoke $r14.<org.apache.tomcat.util.net.NioChannel: java.nio.channels.SocketChannel getIOChannel()>();
        if $r15 != r1 goto label2;

        interfaceinvoke r4.<java.util.Iterator: void remove()>();
        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();
        r6 = (org.apache.coyote.Processor) $r16;
        interfaceinvoke r6.<org.apache.coyote.Processor: void recycle(boolean)>(1);
        virtualinvoke r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: void unregister(org.apache.coyote.Processor)>(r6);
        z0 = 1;
        goto label3;

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z2 != 0 goto label1;

     label3:
        $r17 = staticinvoke <org.apache.coyote.http11.Http11NioProtocol: org.apache.juli.logging.Log access$0()>();
        $z3 = interfaceinvoke $r17.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z3 == 0 goto label4;

        $r18 = staticinvoke <org.apache.coyote.http11.Http11NioProtocol: org.apache.juli.logging.Log access$0()>();
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Done iterating through our connections to release a socket channel:");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" released:");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r18.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r23);

     label4:
        return;
    }

    public void release(org.apache.tomcat.util.net.SocketWrapper)
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.Processor r2;
        java.util.Map $r3;
        java.lang.Object $r4, $r5;
        boolean $z0;
        org.apache.coyote.AbstractProtocol$RecycledProcessors $r6;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        $r3 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: java.util.Map connections>;
        $r4 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);
        r2 = (org.apache.coyote.Processor) $r5;
        if r2 == null goto label0;

        interfaceinvoke r2.<org.apache.coyote.Processor: void recycle(boolean)>(1);
        $z0 = interfaceinvoke r2.<org.apache.coyote.Processor: boolean isUpgrade()>();
        if $z0 != 0 goto label0;

        $r6 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.AbstractProtocol$RecycledProcessors recycledProcessors>;
        virtualinvoke $r6.<org.apache.coyote.AbstractProtocol$RecycledProcessors: boolean offer(org.apache.coyote.Processor)>(r2);

     label0:
        return;
    }

    public void release(org.apache.tomcat.util.net.SocketWrapper, org.apache.coyote.Processor, boolean, boolean)
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.Processor r2;
        boolean z0, z1;
        org.apache.coyote.AbstractProtocol$RecycledProcessors $r3;
        org.apache.coyote.AbstractProtocol $r4;
        int $i0;
        long $l1;
        java.lang.Object $r5, $r8;
        org.apache.tomcat.util.net.NioChannel $r6, $r9;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r7;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.coyote.Processor;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        interfaceinvoke r2.<org.apache.coyote.Processor: void recycle(boolean)>(z0);
        $r3 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.AbstractProtocol$RecycledProcessors recycledProcessors>;
        virtualinvoke $r3.<org.apache.coyote.AbstractProtocol$RecycledProcessors: boolean offer(org.apache.coyote.Processor)>(r2);
        if z1 == 0 goto label0;

        $r4 = virtualinvoke r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.AbstractProtocol getProtocol()>();
        $i0 = virtualinvoke $r4.<org.apache.coyote.AbstractProtocol: int getKeepAliveTimeout()>();
        $l1 = (long) $i0;
        virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: void setTimeout(long)>($l1);
        $r5 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r6 = (org.apache.tomcat.util.net.NioChannel) $r5;
        $r7 = virtualinvoke $r6.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.NioEndpoint$Poller getPoller()>();
        $r8 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r9 = (org.apache.tomcat.util.net.NioChannel) $r8;
        virtualinvoke $r7.<org.apache.tomcat.util.net.NioEndpoint$Poller: void add(org.apache.tomcat.util.net.NioChannel)>($r9);

     label0:
        return;
    }

    protected void initSsl(org.apache.tomcat.util.net.SocketWrapper, org.apache.coyote.Processor)
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.Processor r2;
        org.apache.tomcat.util.net.SecureNioChannel r3;
        org.apache.coyote.http11.Http11NioProtocol $r4, $r5, $r9;
        boolean $z0, $z1;
        org.apache.tomcat.util.net.SSLImplementation $r6, $r10;
        java.lang.Object $r7, $r8;
        javax.net.ssl.SSLEngine $r11;
        javax.net.ssl.SSLSession $r12;
        org.apache.tomcat.util.net.SSLSupport $r13;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.coyote.Processor;
        $r4 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $z0 = virtualinvoke $r4.<org.apache.coyote.http11.Http11NioProtocol: boolean isSSLEnabled()>();
        if $z0 == 0 goto label0;

        $r5 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r6 = $r5.<org.apache.coyote.http11.Http11NioProtocol: org.apache.tomcat.util.net.SSLImplementation sslImplementation>;
        if $r6 == null goto label0;

        $r7 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $z1 = $r7 instanceof org.apache.tomcat.util.net.SecureNioChannel;
        if $z1 == 0 goto label0;

        $r8 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        r3 = (org.apache.tomcat.util.net.SecureNioChannel) $r8;
        $r9 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r10 = $r9.<org.apache.coyote.http11.Http11NioProtocol: org.apache.tomcat.util.net.SSLImplementation sslImplementation>;
        $r11 = virtualinvoke r3.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine getSslEngine()>();
        $r12 = virtualinvoke $r11.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();
        $r13 = virtualinvoke $r10.<org.apache.tomcat.util.net.SSLImplementation: org.apache.tomcat.util.net.SSLSupport getSSLSupport(javax.net.ssl.SSLSession)>($r12);
        interfaceinvoke r2.<org.apache.coyote.Processor: void setSslSupport(org.apache.tomcat.util.net.SSLSupport)>($r13);
        goto label1;

     label0:
        interfaceinvoke r2.<org.apache.coyote.Processor: void setSslSupport(org.apache.tomcat.util.net.SSLSupport)>(null);

     label1:
        return;
    }

    protected void longPoll(org.apache.tomcat.util.net.SocketWrapper, org.apache.coyote.Processor)
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.Processor r2;
        boolean $z0;
        java.lang.Object $r3, $r6;
        org.apache.tomcat.util.net.NioChannel $r4, $r7;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r5;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.coyote.Processor;
        $z0 = interfaceinvoke r2.<org.apache.coyote.Processor: boolean isAsync()>();
        if $z0 == 0 goto label0;

        virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: void setAsync(boolean)>(1);
        goto label1;

     label0:
        $r3 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r4 = (org.apache.tomcat.util.net.NioChannel) $r3;
        $r5 = virtualinvoke $r4.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.NioEndpoint$Poller getPoller()>();
        $r6 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r7 = (org.apache.tomcat.util.net.NioChannel) $r6;
        virtualinvoke $r5.<org.apache.tomcat.util.net.NioEndpoint$Poller: void add(org.apache.tomcat.util.net.NioChannel)>($r7);

     label1:
        return;
    }

    public org.apache.coyote.http11.Http11NioProcessor createProcessor()
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.coyote.http11.Http11NioProcessor $r1, r2;
        org.apache.coyote.http11.Http11NioProtocol $r3, $r4, $r5, $r8, $r9, $r11, $r12, $r13, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r28, $r30, $r32, $r33, $r34, $r36;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1;
        org.apache.tomcat.util.net.AbstractEndpoint $r6;
        org.apache.tomcat.util.net.NioEndpoint $r7;
        java.util.Set $r10;
        java.lang.String $r14, $r16, $r25, $r27, $r29, $r31, $r35;
        org.apache.coyote.Adapter $r18;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        $r1 = new org.apache.coyote.http11.Http11NioProcessor;
        $r3 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i0 = virtualinvoke $r3.<org.apache.coyote.http11.Http11NioProtocol: int getMaxHttpHeaderSize()>();
        $r4 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $z0 = virtualinvoke $r4.<org.apache.coyote.http11.Http11NioProtocol: boolean getRejectIllegalHeaderName()>();
        $r5 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r6 = staticinvoke <org.apache.coyote.http11.Http11NioProtocol: org.apache.tomcat.util.net.AbstractEndpoint access$1(org.apache.coyote.http11.Http11NioProtocol)>($r5);
        $r7 = (org.apache.tomcat.util.net.NioEndpoint) $r6;
        $r8 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i1 = virtualinvoke $r8.<org.apache.coyote.http11.Http11NioProtocol: int getMaxTrailerSize()>();
        $r9 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r10 = virtualinvoke $r9.<org.apache.coyote.http11.Http11NioProtocol: java.util.Set getAllowedTrailerHeadersAsSet()>();
        $r11 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i2 = virtualinvoke $r11.<org.apache.coyote.http11.Http11NioProtocol: int getMaxExtensionSize()>();
        $r12 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i3 = virtualinvoke $r12.<org.apache.coyote.http11.Http11NioProtocol: int getMaxSwallowSize()>();
        $r13 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r14 = virtualinvoke $r13.<org.apache.coyote.http11.Http11NioProtocol: java.lang.String getRelaxedPathChars()>();
        $r15 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r16 = virtualinvoke $r15.<org.apache.coyote.http11.Http11NioProtocol: java.lang.String getRelaxedQueryChars()>();
        specialinvoke $r1.<org.apache.coyote.http11.Http11NioProcessor: void <init>(int,boolean,org.apache.tomcat.util.net.NioEndpoint,int,java.util.Set,int,int,java.lang.String,java.lang.String)>($i0, $z0, $r7, $i1, $r10, $i2, $i3, $r14, $r16);
        r2 = $r1;
        $r17 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r18 = staticinvoke <org.apache.coyote.http11.Http11NioProtocol: org.apache.coyote.Adapter access$2(org.apache.coyote.http11.Http11NioProtocol)>($r17);
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setAdapter(org.apache.coyote.Adapter)>($r18);
        $r19 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i4 = virtualinvoke $r19.<org.apache.coyote.http11.Http11NioProtocol: int getMaxKeepAliveRequests()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setMaxKeepAliveRequests(int)>($i4);
        $r20 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i5 = virtualinvoke $r20.<org.apache.coyote.http11.Http11NioProtocol: int getKeepAliveTimeout()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setKeepAliveTimeout(int)>($i5);
        $r21 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i6 = virtualinvoke $r21.<org.apache.coyote.http11.Http11NioProtocol: int getConnectionUploadTimeout()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setConnectionUploadTimeout(int)>($i6);
        $r22 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $z1 = virtualinvoke $r22.<org.apache.coyote.http11.Http11NioProtocol: boolean getDisableUploadTimeout()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setDisableUploadTimeout(boolean)>($z1);
        $r23 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i7 = virtualinvoke $r23.<org.apache.coyote.http11.Http11NioProtocol: int getCompressionMinSize()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setCompressionMinSize(int)>($i7);
        $r24 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r25 = virtualinvoke $r24.<org.apache.coyote.http11.Http11NioProtocol: java.lang.String getCompression()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setCompression(java.lang.String)>($r25);
        $r26 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r27 = virtualinvoke $r26.<org.apache.coyote.http11.Http11NioProtocol: java.lang.String getNoCompressionUserAgents()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setNoCompressionUserAgents(java.lang.String)>($r27);
        $r28 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r29 = virtualinvoke $r28.<org.apache.coyote.http11.Http11NioProtocol: java.lang.String getCompressableMimeTypes()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setCompressableMimeTypes(java.lang.String)>($r29);
        $r30 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r31 = virtualinvoke $r30.<org.apache.coyote.http11.Http11NioProtocol: java.lang.String getRestrictedUserAgents()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setRestrictedUserAgents(java.lang.String)>($r31);
        $r32 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i8 = virtualinvoke $r32.<org.apache.coyote.http11.Http11NioProtocol: int getSocketBuffer()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setSocketBuffer(int)>($i8);
        $r33 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i9 = virtualinvoke $r33.<org.apache.coyote.http11.Http11NioProtocol: int getMaxSavePostSize()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setMaxSavePostSize(int)>($i9);
        $r34 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r35 = virtualinvoke $r34.<org.apache.coyote.http11.Http11NioProtocol: java.lang.String getServer()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setServer(java.lang.String)>($r35);
        $r36 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i10 = virtualinvoke $r36.<org.apache.coyote.http11.Http11NioProtocol: int getMaxCookieCount()>();
        virtualinvoke r2.<org.apache.coyote.http11.Http11NioProcessor: void setMaxCookieCount(int)>($i10);
        virtualinvoke r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: void register(org.apache.coyote.AbstractProcessor)>(r2);
        return r2;
    }

    protected org.apache.coyote.Processor createUpgradeProcessor(org.apache.tomcat.util.net.SocketWrapper, org.apache.coyote.http11.upgrade.UpgradeInbound) throws java.io.IOException
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.http11.upgrade.UpgradeInbound r2;
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor $r3;
        org.apache.coyote.AbstractProtocol $r4;
        org.apache.coyote.http11.Http11NioProtocol $r5;
        org.apache.tomcat.util.net.NioEndpoint $r6;
        org.apache.tomcat.util.net.NioSelectorPool $r7;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.coyote.http11.upgrade.UpgradeInbound;
        $r3 = new org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        $r4 = virtualinvoke r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.AbstractProtocol getProtocol()>();
        $r5 = (org.apache.coyote.http11.Http11NioProtocol) $r4;
        $r6 = virtualinvoke $r5.<org.apache.coyote.http11.Http11NioProtocol: org.apache.tomcat.util.net.NioEndpoint getEndpoint()>();
        $r7 = virtualinvoke $r6.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool getSelectorPool()>();
        specialinvoke $r3.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: void <init>(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.http11.upgrade.UpgradeInbound,org.apache.tomcat.util.net.NioSelectorPool)>(r1, r2, $r7);
        return $r3;
    }

    protected org.apache.coyote.Processor createUpgradeProcessor(org.apache.tomcat.util.net.SocketWrapper, org.apache.coyote.http11.upgrade.servlet31.HttpUpgradeHandler) throws java.io.IOException
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.http11.upgrade.servlet31.HttpUpgradeHandler r2;
        org.apache.coyote.http11.upgrade.NioProcessor $r3;
        org.apache.coyote.http11.Http11NioProtocol $r4, $r7;
        org.apache.tomcat.util.net.NioEndpoint $r5;
        org.apache.tomcat.util.net.NioSelectorPool $r6;
        int $i0;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.coyote.http11.upgrade.servlet31.HttpUpgradeHandler;
        $r3 = new org.apache.coyote.http11.upgrade.NioProcessor;
        $r4 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $r5 = virtualinvoke $r4.<org.apache.coyote.http11.Http11NioProtocol: org.apache.tomcat.util.net.NioEndpoint getEndpoint()>();
        $r6 = virtualinvoke $r5.<org.apache.tomcat.util.net.NioEndpoint: org.apache.tomcat.util.net.NioSelectorPool getSelectorPool()>();
        $r7 = r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProtocol proto>;
        $i0 = virtualinvoke $r7.<org.apache.coyote.http11.Http11NioProtocol: int getUpgradeAsyncWriteBufferSize()>();
        specialinvoke $r3.<org.apache.coyote.http11.upgrade.NioProcessor: void <init>(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.http11.upgrade.servlet31.HttpUpgradeHandler,org.apache.tomcat.util.net.NioSelectorPool,int)>(r1, r2, $r6, $i0);
        return $r3;
    }

    public volatile org.apache.coyote.Processor createProcessor()
    {
        org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler r0;
        org.apache.coyote.http11.Http11NioProcessor $r1;

        r0 := @this: org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler;
        $r1 = virtualinvoke r0.<org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler: org.apache.coyote.http11.Http11NioProcessor createProcessor()>();
        return $r1;
    }
}
