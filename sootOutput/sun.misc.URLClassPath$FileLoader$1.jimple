class sun.misc.URLClassPath$FileLoader$1 extends sun.misc.Resource
{
    final java.lang.String val$name;
    final java.net.URL val$url;
    final java.io.File val$file;
    final sun.misc.URLClassPath$FileLoader this$0;

    void <init>(sun.misc.URLClassPath$FileLoader, java.lang.String, java.net.URL, java.io.File)
    {
        sun.misc.URLClassPath$FileLoader$1 r0;
        sun.misc.URLClassPath$FileLoader r1;
        java.lang.String r2;
        java.net.URL r3;
        java.io.File r4;

        r0 := @this: sun.misc.URLClassPath$FileLoader$1;
        r1 := @parameter0: sun.misc.URLClassPath$FileLoader;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.net.URL;
        r4 := @parameter3: java.io.File;
        r0.<sun.misc.URLClassPath$FileLoader$1: sun.misc.URLClassPath$FileLoader this$0> = r1;
        r0.<sun.misc.URLClassPath$FileLoader$1: java.lang.String val$name> = r2;
        r0.<sun.misc.URLClassPath$FileLoader$1: java.net.URL val$url> = r3;
        r0.<sun.misc.URLClassPath$FileLoader$1: java.io.File val$file> = r4;
        specialinvoke r0.<sun.misc.Resource: void <init>()>();
        return;
    }

    public java.lang.String getName()
    {
        sun.misc.URLClassPath$FileLoader$1 r0;
        java.lang.String $r1;

        r0 := @this: sun.misc.URLClassPath$FileLoader$1;
        $r1 = r0.<sun.misc.URLClassPath$FileLoader$1: java.lang.String val$name>;
        return $r1;
    }

    public java.net.URL getURL()
    {
        sun.misc.URLClassPath$FileLoader$1 r0;
        java.net.URL $r1;

        r0 := @this: sun.misc.URLClassPath$FileLoader$1;
        $r1 = r0.<sun.misc.URLClassPath$FileLoader$1: java.net.URL val$url>;
        return $r1;
    }

    public java.net.URL getCodeSourceURL()
    {
        sun.misc.URLClassPath$FileLoader$1 r0;
        sun.misc.URLClassPath$FileLoader $r1;
        java.net.URL $r2;

        r0 := @this: sun.misc.URLClassPath$FileLoader$1;
        $r1 = r0.<sun.misc.URLClassPath$FileLoader$1: sun.misc.URLClassPath$FileLoader this$0>;
        $r2 = virtualinvoke $r1.<sun.misc.URLClassPath$FileLoader: java.net.URL getBaseURL()>();
        return $r2;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        sun.misc.URLClassPath$FileLoader$1 r0;
        java.io.FileInputStream $r1;
        java.io.File $r2;

        r0 := @this: sun.misc.URLClassPath$FileLoader$1;
        $r1 = new java.io.FileInputStream;
        $r2 = r0.<sun.misc.URLClassPath$FileLoader$1: java.io.File val$file>;
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);
        return $r1;
    }

    public int getContentLength() throws java.io.IOException
    {
        sun.misc.URLClassPath$FileLoader$1 r0;
        java.io.File $r1;
        long $l0;
        int $i1;

        r0 := @this: sun.misc.URLClassPath$FileLoader$1;
        $r1 = r0.<sun.misc.URLClassPath$FileLoader$1: java.io.File val$file>;
        $l0 = virtualinvoke $r1.<java.io.File: long length()>();
        $i1 = (int) $l0;
        return $i1;
    }
}
