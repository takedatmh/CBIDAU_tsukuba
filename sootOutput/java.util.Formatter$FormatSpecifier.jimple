class java.util.Formatter$FormatSpecifier extends java.lang.Object implements java.util.Formatter$FormatString
{
    private int index;
    private java.util.Formatter$Flags f;
    private int width;
    private int precision;
    private boolean dt;
    private char c;
    static final boolean $assertionsDisabled;
    final java.util.Formatter this$0;

    private int index(java.lang.String)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.String r1, $r3;
        java.lang.NumberFormatException r2, $r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r5;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label4;

     label0:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        $i1 = $i0 - 1;
        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);
        r0.<java.util.Formatter$FormatSpecifier: int index> = $i2;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $z0 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label3;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label3:
        goto label5;

     label4:
        r0.<java.util.Formatter$FormatSpecifier: int index> = 0;

     label5:
        $i3 = r0.<java.util.Formatter$FormatSpecifier: int index>;
        return $i3;

        catch java.lang.NumberFormatException from label0 to label1 with label2;
    }

    public int index()
    {
        java.util.Formatter$FormatSpecifier r0;
        int $i0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int index>;
        return $i0;
    }

    private java.util.Formatter$Flags flags(java.lang.String)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.String r1;
        java.util.Formatter$Flags $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.util.Formatter$Flags: java.util.Formatter$Flags parse(java.lang.String)>(r1);
        r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f> = $r2;
        $r3 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r4 = <java.util.Formatter$Flags: java.util.Formatter$Flags PREVIOUS>;
        $z0 = virtualinvoke $r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r4);
        if $z0 == 0 goto label0;

        r0.<java.util.Formatter$FormatSpecifier: int index> = -1;

     label0:
        $r5 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        return $r5;
    }

    java.util.Formatter$Flags flags()
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags $r1;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $r1 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        return $r1;
    }

    private int width(java.lang.String)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.String r1;
        java.lang.NumberFormatException r2, $r4;
        int $i0, $i1, $i2, $i3;
        java.util.IllegalFormatWidthException $r3;
        boolean $z0;
        java.lang.AssertionError $r5;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.String;
        r0.<java.util.Formatter$FormatSpecifier: int width> = -1;
        if r1 == null goto label3;

     label0:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);
        r0.<java.util.Formatter$FormatSpecifier: int width> = $i0;
        $i1 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i1 >= 0 goto label1;

        $r3 = new java.util.IllegalFormatWidthException;
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        specialinvoke $r3.<java.util.IllegalFormatWidthException: void <init>(int)>($i2);
        throw $r3;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $z0 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label3;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label3:
        $i3 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        return $i3;

        catch java.lang.NumberFormatException from label0 to label1 with label2;
    }

    int width()
    {
        java.util.Formatter$FormatSpecifier r0;
        int $i0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        return $i0;
    }

    private int precision(java.lang.String)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.String r1, $r3;
        java.lang.NumberFormatException r2, $r5;
        int $i0, $i1, $i2, $i3;
        java.util.IllegalFormatPrecisionException $r4;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.String;
        r0.<java.util.Formatter$FormatSpecifier: int precision> = -1;
        if r1 == null goto label3;

     label0:
        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);
        r0.<java.util.Formatter$FormatSpecifier: int precision> = $i0;
        $i1 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i1 >= 0 goto label1;

        $r4 = new java.util.IllegalFormatPrecisionException;
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke $r4.<java.util.IllegalFormatPrecisionException: void <init>(int)>($i2);
        throw $r4;

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $z0 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label3;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label3:
        $i3 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        return $i3;

        catch java.lang.NumberFormatException from label0 to label1 with label2;
    }

    int precision()
    {
        java.util.Formatter$FormatSpecifier r0;
        int $i0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        return $i0;
    }

    private char conversion(java.lang.String)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.String r1, $r3;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7;
        boolean $z0, $z1, $z2, $z3;
        java.util.UnknownFormatConversionException $r2;
        java.util.Formatter$Flags $r4, $r5;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.String;
        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        r0.<java.util.Formatter$FormatSpecifier: char c> = $c0;
        $z0 = r0.<java.util.Formatter$FormatSpecifier: boolean dt>;
        if $z0 != 0 goto label2;

        $c1 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z1 = staticinvoke <java.util.Formatter$Conversion: boolean isValid(char)>($c1);
        if $z1 != 0 goto label0;

        $r2 = new java.util.UnknownFormatConversionException;
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);
        specialinvoke $r2.<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>($r3);
        throw $r2;

     label0:
        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z2 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c3);
        if $z2 == 0 goto label1;

        $r4 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        staticinvoke <java.util.Formatter$Flags: java.util.Formatter$Flags access$100(java.util.Formatter$Flags,java.util.Formatter$Flags)>($r4, $r5);

     label1:
        $c4 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $c5 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c4);
        r0.<java.util.Formatter$FormatSpecifier: char c> = $c5;
        $c6 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z3 = staticinvoke <java.util.Formatter$Conversion: boolean isText(char)>($c6);
        if $z3 == 0 goto label2;

        r0.<java.util.Formatter$FormatSpecifier: int index> = -2;

     label2:
        $c7 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        return $c7;
    }

    private char conversion()
    {
        java.util.Formatter$FormatSpecifier r0;
        char $c0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $c0 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        return $c0;
    }

    void <init>(java.util.Formatter, java.util.regex.Matcher)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter r1;
        java.util.regex.Matcher r2;
        byte b0;
        java.lang.String r3, $r5, $r6, $r8, $r9, $r13, $r15;
        java.util.Formatter$Flags $r4, $r10, $r11;
        int i1, i3, i4, i6, i8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        char $c10, $c11, $c12, $c13, $c14, $c15;
        java.util.UnknownFormatConversionException $r14;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.util.Formatter;
        r2 := @parameter1: java.util.regex.Matcher;
        r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Formatter$FormatSpecifier: int index> = -1;
        $r4 = <java.util.Formatter$Flags: java.util.Formatter$Flags NONE>;
        r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f> = $r4;
        r0.<java.util.Formatter$FormatSpecifier: boolean dt> = 0;
        b0 = 1;
        i1 = b0 + 1;
        $r5 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(b0);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>($r5);
        i3 = i1 + 1;
        $r6 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i1);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags flags(java.lang.String)>($r6);
        i4 = i3 + 1;
        $r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i3);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: int width(java.lang.String)>($r8);
        i6 = i4 + 1;
        $r9 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i4);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>($r9);
        i8 = i6 + 1;
        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i6);
        if r3 == null goto label0;

        r0.<java.util.Formatter$FormatSpecifier: boolean dt> = 1;
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("T");
        if $z0 == 0 goto label0;

        $r10 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r11 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        staticinvoke <java.util.Formatter$Flags: java.util.Formatter$Flags access$100(java.util.Formatter$Flags,java.util.Formatter$Flags)>($r10, $r11);

     label0:
        $r13 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i8);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: char conversion(java.lang.String)>($r13);
        $z1 = r0.<java.util.Formatter$FormatSpecifier: boolean dt>;
        if $z1 == 0 goto label1;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkDateTime()>();
        goto label7;

     label1:
        $c10 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z2 = staticinvoke <java.util.Formatter$Conversion: boolean isGeneral(char)>($c10);
        if $z2 == 0 goto label2;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkGeneral()>();
        goto label7;

     label2:
        $c11 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z3 = staticinvoke <java.util.Formatter$Conversion: boolean isCharacter(char)>($c11);
        if $z3 == 0 goto label3;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkCharacter()>();
        goto label7;

     label3:
        $c12 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z4 = staticinvoke <java.util.Formatter$Conversion: boolean isInteger(char)>($c12);
        if $z4 == 0 goto label4;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkInteger()>();
        goto label7;

     label4:
        $c13 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z5 = staticinvoke <java.util.Formatter$Conversion: boolean isFloat(char)>($c13);
        if $z5 == 0 goto label5;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkFloat()>();
        goto label7;

     label5:
        $c14 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z6 = staticinvoke <java.util.Formatter$Conversion: boolean isText(char)>($c14);
        if $z6 == 0 goto label6;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkText()>();
        goto label7;

     label6:
        $r14 = new java.util.UnknownFormatConversionException;
        $c15 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c15);
        specialinvoke $r14.<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>($r15);
        throw $r14;

     label7:
        return;
    }

    public void print(java.lang.Object, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1;
        java.util.Locale r2;
        boolean $z0, $z1;
        char $c0;
        java.util.Formatter $r3, $r7;
        java.lang.Appendable $r4, $r8;
        java.lang.String $r5;
        java.lang.AssertionError $r10;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.util.Locale;
        $z0 = r0.<java.util.Formatter$FormatSpecifier: boolean dt>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void printDateTime(java.lang.Object,java.util.Locale)>(r1, r2);
        return;

     label0:
        $c0 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        lookupswitch($c0)
        {
            case 37: goto label8;
            case 67: goto label3;
            case 97: goto label2;
            case 98: goto label4;
            case 99: goto label3;
            case 100: goto label1;
            case 101: goto label2;
            case 102: goto label2;
            case 103: goto label2;
            case 104: goto label6;
            case 110: goto label7;
            case 111: goto label1;
            case 115: goto label5;
            case 120: goto label1;
            default: goto label9;
        };

     label1:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void printInteger(java.lang.Object,java.util.Locale)>(r1, r2);
        goto label10;

     label2:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void printFloat(java.lang.Object,java.util.Locale)>(r1, r2);
        goto label10;

     label3:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void printCharacter(java.lang.Object)>(r1);
        goto label10;

     label4:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void printBoolean(java.lang.Object)>(r1);
        goto label10;

     label5:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void printString(java.lang.Object,java.util.Locale)>(r1, r2);
        goto label10;

     label6:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void printHashCode(java.lang.Object)>(r1);
        goto label10;

     label7:
        $r3 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r4 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r3);
        $r5 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
        interfaceinvoke $r4.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);
        goto label10;

     label8:
        $r7 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r8 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r7);
        interfaceinvoke $r8.<java.lang.Appendable: java.lang.Appendable append(char)>(37);
        goto label10;

     label9:
        $z1 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z1 != 0 goto label10;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label10:
        return;
    }

    private void printInteger(java.lang.Object, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1;
        java.util.Locale r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Byte $r3;
        byte $b0;
        java.lang.Short $r4;
        short $s1;
        java.lang.Integer $r5;
        int $i2;
        java.lang.Long $r6;
        long $l3;
        java.math.BigInteger $r7;
        char $c4;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.util.Locale;
        if r1 != null goto label0;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>("null");
        goto label6;

     label0:
        $z0 = r1 instanceof java.lang.Byte;
        if $z0 == 0 goto label1;

        $r3 = (java.lang.Byte) r1;
        $b0 = virtualinvoke $r3.<java.lang.Byte: byte byteValue()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(byte,java.util.Locale)>($b0, r2);
        goto label6;

     label1:
        $z1 = r1 instanceof java.lang.Short;
        if $z1 == 0 goto label2;

        $r4 = (java.lang.Short) r1;
        $s1 = virtualinvoke $r4.<java.lang.Short: short shortValue()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(short,java.util.Locale)>($s1, r2);
        goto label6;

     label2:
        $z2 = r1 instanceof java.lang.Integer;
        if $z2 == 0 goto label3;

        $r5 = (java.lang.Integer) r1;
        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(int,java.util.Locale)>($i2, r2);
        goto label6;

     label3:
        $z3 = r1 instanceof java.lang.Long;
        if $z3 == 0 goto label4;

        $r6 = (java.lang.Long) r1;
        $l3 = virtualinvoke $r6.<java.lang.Long: long longValue()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>($l3, r2);
        goto label6;

     label4:
        $z4 = r1 instanceof java.math.BigInteger;
        if $z4 == 0 goto label5;

        $r7 = (java.math.BigInteger) r1;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.math.BigInteger,java.util.Locale)>($r7, r2);
        goto label6;

     label5:
        $c4 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failConversion(char,java.lang.Object)>($c4, r1);

     label6:
        return;
    }

    private void printFloat(java.lang.Object, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1;
        java.util.Locale r2;
        boolean $z0, $z1, $z2;
        java.lang.Float $r3;
        float $f0;
        java.lang.Double $r4;
        double $d0;
        java.math.BigDecimal $r5;
        char $c0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.util.Locale;
        if r1 != null goto label0;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>("null");
        goto label4;

     label0:
        $z0 = r1 instanceof java.lang.Float;
        if $z0 == 0 goto label1;

        $r3 = (java.lang.Float) r1;
        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(float,java.util.Locale)>($f0, r2);
        goto label4;

     label1:
        $z1 = r1 instanceof java.lang.Double;
        if $z1 == 0 goto label2;

        $r4 = (java.lang.Double) r1;
        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>($d0, r2);
        goto label4;

     label2:
        $z2 = r1 instanceof java.math.BigDecimal;
        if $z2 == 0 goto label3;

        $r5 = (java.math.BigDecimal) r1;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.math.BigDecimal,java.util.Locale)>($r5, r2);
        goto label4;

     label3:
        $c0 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failConversion(char,java.lang.Object)>($c0, r1);

     label4:
        return;
    }

    private void printDateTime(java.lang.Object, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1, $r9;
        java.util.Locale r2, $r4, $r6;
        java.util.Calendar r3, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Long $r5;
        long $l0;
        java.util.Date $r7;
        char $c1, $c2;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.util.Locale;
        if r1 != null goto label0;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>("null");
        return;

     label0:
        r3 = null;
        $z0 = r1 instanceof java.lang.Long;
        if $z0 == 0 goto label3;

        if r2 != null goto label1;

        $r4 = <java.util.Locale: java.util.Locale US>;
        goto label2;

     label1:
        $r4 = r2;

     label2:
        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r4);
        $r5 = (java.lang.Long) r1;
        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();
        virtualinvoke r3.<java.util.Calendar: void setTimeInMillis(long)>($l0);
        goto label8;

     label3:
        $z1 = r1 instanceof java.util.Date;
        if $z1 == 0 goto label6;

        if r2 != null goto label4;

        $r6 = <java.util.Locale: java.util.Locale US>;
        goto label5;

     label4:
        $r6 = r2;

     label5:
        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r6);
        $r7 = (java.util.Date) r1;
        virtualinvoke r3.<java.util.Calendar: void setTime(java.util.Date)>($r7);
        goto label8;

     label6:
        $z2 = r1 instanceof java.util.Calendar;
        if $z2 == 0 goto label7;

        $r8 = (java.util.Calendar) r1;
        $r9 = virtualinvoke $r8.<java.util.Calendar: java.lang.Object clone()>();
        r3 = (java.util.Calendar) $r9;
        virtualinvoke r3.<java.util.Calendar: void setLenient(boolean)>(1);
        goto label8;

     label7:
        $c1 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failConversion(char,java.lang.Object)>($c1, r1);

     label8:
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.util.Calendar,char,java.util.Locale)>(r3, $c2, r2);
        return;
    }

    private void printCharacter(java.lang.Object) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1;
        java.lang.String r2, $r5, $r9, $r13;
        byte b0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Character $r3;
        java.lang.Byte $r4;
        char[] $r6, $r10, $r14;
        java.util.IllegalFormatCodePointException $r7, $r11, $r15;
        java.lang.Short $r8;
        short s1;
        java.lang.Integer $r12;
        int i2;
        char $c3;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>("null");
        return;

     label0:
        r2 = null;
        $z0 = r1 instanceof java.lang.Character;
        if $z0 == 0 goto label1;

        $r3 = (java.lang.Character) r1;
        r2 = virtualinvoke $r3.<java.lang.Character: java.lang.String toString()>();
        goto label11;

     label1:
        $z1 = r1 instanceof java.lang.Byte;
        if $z1 == 0 goto label4;

        $r4 = (java.lang.Byte) r1;
        b0 = virtualinvoke $r4.<java.lang.Byte: byte byteValue()>();
        $z2 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(b0);
        if $z2 == 0 goto label2;

        $r5 = new java.lang.String;
        $r6 = staticinvoke <java.lang.Character: char[] toChars(int)>(b0);
        specialinvoke $r5.<java.lang.String: void <init>(char[])>($r6);
        r2 = $r5;
        goto label3;

     label2:
        $r7 = new java.util.IllegalFormatCodePointException;
        specialinvoke $r7.<java.util.IllegalFormatCodePointException: void <init>(int)>(b0);
        throw $r7;

     label3:
        goto label11;

     label4:
        $z3 = r1 instanceof java.lang.Short;
        if $z3 == 0 goto label7;

        $r8 = (java.lang.Short) r1;
        s1 = virtualinvoke $r8.<java.lang.Short: short shortValue()>();
        $z4 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(s1);
        if $z4 == 0 goto label5;

        $r9 = new java.lang.String;
        $r10 = staticinvoke <java.lang.Character: char[] toChars(int)>(s1);
        specialinvoke $r9.<java.lang.String: void <init>(char[])>($r10);
        r2 = $r9;
        goto label6;

     label5:
        $r11 = new java.util.IllegalFormatCodePointException;
        specialinvoke $r11.<java.util.IllegalFormatCodePointException: void <init>(int)>(s1);
        throw $r11;

     label6:
        goto label11;

     label7:
        $z5 = r1 instanceof java.lang.Integer;
        if $z5 == 0 goto label10;

        $r12 = (java.lang.Integer) r1;
        i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();
        $z6 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(i2);
        if $z6 == 0 goto label8;

        $r13 = new java.lang.String;
        $r14 = staticinvoke <java.lang.Character: char[] toChars(int)>(i2);
        specialinvoke $r13.<java.lang.String: void <init>(char[])>($r14);
        r2 = $r13;
        goto label9;

     label8:
        $r15 = new java.util.IllegalFormatCodePointException;
        specialinvoke $r15.<java.util.IllegalFormatCodePointException: void <init>(int)>(i2);
        throw $r15;

     label9:
        goto label11;

     label10:
        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failConversion(char,java.lang.Object)>($c3, r1);

     label11:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>(r2);
        return;
    }

    private void printString(java.lang.Object, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1;
        java.util.Locale r2, $r4;
        java.util.Formatter r3, $r5;
        boolean $z0, $z1;
        java.lang.Appendable $r6;
        java.util.Formattable $r7;
        java.util.Formatter$Flags $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2;
        java.lang.String $r12;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.util.Locale;
        $z0 = r1 instanceof java.util.Formattable;
        if $z0 == 0 goto label1;

        r3 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r4 = virtualinvoke r3.<java.util.Formatter: java.util.Locale locale()>();
        if $r4 == r2 goto label0;

        $r5 = new java.util.Formatter;
        $r6 = virtualinvoke r3.<java.util.Formatter: java.lang.Appendable out()>();
        specialinvoke $r5.<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>($r6, r2);
        r3 = $r5;

     label0:
        $r7 = (java.util.Formattable) r1;
        $r8 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i0 = virtualinvoke $r8.<java.util.Formatter$Flags: int valueOf()>();
        $i1 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        interfaceinvoke $r7.<java.util.Formattable: void formatTo(java.util.Formatter,int,int,int)>(r3, $i0, $i1, $i2);
        goto label4;

     label1:
        $r9 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r10 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z1 = virtualinvoke $r9.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r10);
        if $z1 == 0 goto label2;

        $r11 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failMismatch(java.util.Formatter$Flags,char)>($r11, 115);

     label2:
        if r1 != null goto label3;

        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>("null");
        goto label4;

     label3:
        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>($r12);

     label4:
        return;
    }

    private void printBoolean(java.lang.Object) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1;
        java.lang.String r2, $r4;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label2;

        $z0 = r1 instanceof java.lang.Boolean;
        if $z0 == 0 goto label0;

        $r3 = (java.lang.Boolean) r1;
        $r4 = virtualinvoke $r3.<java.lang.Boolean: java.lang.String toString()>();
        goto label1;

     label0:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

     label1:
        r2 = $r4;
        goto label3;

     label2:
        r2 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(0);

     label3:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>(r2);
        return;
    }

    private void printHashCode(java.lang.Object) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.Object r1;
        java.lang.String r2, $r3;
        int $i0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r3 = "null";
        goto label1;

     label0:
        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

     label1:
        r2 = $r3;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.String)>(r2);
        return;
    }

    private void print(java.lang.String) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.String r1, $r6;
        int $i0, $i1, $i2, $i3;
        java.util.Formatter$Flags $r2, $r3;
        boolean $z0;
        java.util.Formatter $r4;
        java.lang.Appendable $r5;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.String;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i0 == -1 goto label0;

        $i1 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 >= $i2 goto label0;

        $i3 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label0:
        $r2 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z0 = virtualinvoke $r2.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r3);
        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r4 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r5 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r4);
        $r6 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>(r1);
        interfaceinvoke $r5.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r6);
        return;
    }

    private java.lang.String justify(java.lang.String)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.String r1, $r9;
        java.lang.StringBuilder r2, $r3;
        boolean z0;
        int i0, i1, $i2, $i3, $i4, i5;
        java.util.Formatter$Flags $r4, $r5;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.String;
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i2 != -1 goto label0;

        return r1;

     label0:
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        r2 = $r3;
        $r4 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        z0 = virtualinvoke $r4.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r5);
        $i3 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        i0 = $i3 - $i4;
        if z0 != 0 goto label2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        i1 = i1 + 1;
        goto label1;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        if z0 == 0 goto label4;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        i5 = i5 + 1;
        goto label3;

     label4:
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    public java.lang.String toString()
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder $r1, r2, $r9, $r12;
        java.util.Formatter$Flags r3, $r4, $r5, $r6, $r15, $r16, $r19, $r20;
        java.lang.String $r7, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;
        char $c6, $c7, $c8;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(37);
        r2 = $r1;
        $r4 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r5 = virtualinvoke $r4.<java.util.Formatter$Flags: java.util.Formatter$Flags dup()>();
        $r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        r3 = virtualinvoke $r5.<java.util.Formatter$Flags: java.util.Formatter$Flags remove(java.util.Formatter$Flags)>($r6);
        $r7 = virtualinvoke r3.<java.util.Formatter$Flags: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int index>;
        if $i0 <= 0 goto label0;

        $i1 = r0.<java.util.Formatter$FormatSpecifier: int index>;
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(36);

     label0:
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i2 == -1 goto label1;

        $i3 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

     label1:
        $i4 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i4 == -1 goto label2;

        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
        $i5 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

     label2:
        $z0 = r0.<java.util.Formatter$FormatSpecifier: boolean dt>;
        if $z0 == 0 goto label5;

        $r15 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r16 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z1 = virtualinvoke $r15.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r16);
        if $z1 == 0 goto label3;

        $c6 = 84;
        goto label4;

     label3:
        $c6 = 116;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

     label5:
        $r19 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r20 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z2 = virtualinvoke $r19.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r20);
        if $z2 == 0 goto label6;

        $c7 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $c8 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c7);
        goto label7;

     label6:
        $c8 = r0.<java.util.Formatter$FormatSpecifier: char c>;

     label7:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);
        $r22 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r22;
    }

    private void checkGeneral()
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags $r1, $r2, $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13;
        char $c0, $c1, $c2;
        boolean $z0, $z1;
        int $i3;
        java.util.MissingFormatWidthException $r7;
        java.lang.String $r8;
        java.util.Formatter$Flags[] $r9;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $c0 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c0 == 98 goto label0;

        $c1 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c1 != 104 goto label1;

     label0:
        $r2 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z0 = virtualinvoke $r2.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r3);
        if $z0 == 0 goto label1;

        $r4 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failMismatch(java.util.Formatter$Flags,char)>($r4, $c2);

     label1:
        $i3 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i3 != -1 goto label2;

        $r5 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $z1 = virtualinvoke $r5.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r6);
        if $z1 == 0 goto label2;

        $r7 = new java.util.MissingFormatWidthException;
        $r8 = virtualinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String toString()>();
        specialinvoke $r7.<java.util.MissingFormatWidthException: void <init>(java.lang.String)>($r8);
        throw $r7;

     label2:
        $r9 = newarray (java.util.Formatter$Flags)[5];
        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $r9[0] = $r1;
        $r10 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $r9[1] = $r10;
        $r11 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $r9[2] = $r11;
        $r12 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $r9[3] = $r12;
        $r13 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $r9[4] = $r13;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r9);
        return;
    }

    private void checkDateTime()
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags $r1, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i4;
        java.util.IllegalFormatPrecisionException $r2;
        char $c2, $c3;
        boolean $z0, $z1;
        java.util.UnknownFormatConversionException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7, $r17;
        java.util.Formatter$Flags[] $r8;
        java.util.MissingFormatWidthException $r16;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i0 == -1 goto label0;

        $r2 = new java.util.IllegalFormatPrecisionException;
        $i1 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke $r2.<java.util.IllegalFormatPrecisionException: void <init>(int)>($i1);
        throw $r2;

     label0:
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $z0 = staticinvoke <java.util.Formatter$DateTime: boolean isValid(char)>($c2);
        if $z0 != 0 goto label1;

        $r3 = new java.util.UnknownFormatConversionException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("t");
        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label1:
        $r8 = newarray (java.util.Formatter$Flags)[6];
        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $r8[0] = $r1;
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $r8[1] = $r9;
        $r10 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $r8[2] = $r10;
        $r11 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $r8[3] = $r11;
        $r12 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $r8[4] = $r12;
        $r13 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $r8[5] = $r13;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r8);
        $i4 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i4 != -1 goto label2;

        $r14 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r15 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $z1 = virtualinvoke $r14.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r15);
        if $z1 == 0 goto label2;

        $r16 = new java.util.MissingFormatWidthException;
        $r17 = virtualinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String toString()>();
        specialinvoke $r16.<java.util.MissingFormatWidthException: void <init>(java.lang.String)>($r17);
        throw $r16;

     label2:
        return;
    }

    private void checkCharacter()
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2;
        java.util.IllegalFormatPrecisionException $r2;
        java.util.Formatter$Flags[] $r3;
        boolean $z0;
        java.util.MissingFormatWidthException $r11;
        java.lang.String $r12;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i0 == -1 goto label0;

        $r2 = new java.util.IllegalFormatPrecisionException;
        $i1 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke $r2.<java.util.IllegalFormatPrecisionException: void <init>(int)>($i1);
        throw $r2;

     label0:
        $r3 = newarray (java.util.Formatter$Flags)[6];
        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $r3[0] = $r1;
        $r4 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $r3[1] = $r4;
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $r3[2] = $r5;
        $r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $r3[3] = $r6;
        $r7 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $r3[4] = $r7;
        $r8 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $r3[5] = $r8;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r3);
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i2 != -1 goto label1;

        $r9 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r10 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $z0 = virtualinvoke $r9.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r10);
        if $z0 == 0 goto label1;

        $r11 = new java.util.MissingFormatWidthException;
        $r12 = virtualinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String toString()>();
        specialinvoke $r11.<java.util.MissingFormatWidthException: void <init>(java.lang.String)>($r12);
        throw $r11;

     label1:
        return;
    }

    private void checkInteger()
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags $r1, $r5, $r7;
        int $i0, $i1;
        java.util.IllegalFormatPrecisionException $r2;
        char $c2, $c3;
        java.util.Formatter$Flags[] $r3, $r4, $r6;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkNumeric()>();
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i0 == -1 goto label0;

        $r2 = new java.util.IllegalFormatPrecisionException;
        $i1 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke $r2.<java.util.IllegalFormatPrecisionException: void <init>(int)>($i1);
        throw $r2;

     label0:
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c2 != 100 goto label1;

        $r3 = newarray (java.util.Formatter$Flags)[1];
        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $r3[0] = $r1;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r3);
        goto label3;

     label1:
        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c3 != 111 goto label2;

        $r4 = newarray (java.util.Formatter$Flags)[1];
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $r4[0] = $r5;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r4);
        goto label3;

     label2:
        $r6 = newarray (java.util.Formatter$Flags)[1];
        $r7 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $r6[0] = $r7;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r6);

     label3:
        return;
    }

    private transient void checkBadFlags(java.util.Formatter$Flags[])
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags[] r1;
        int i0, $i1;
        java.util.Formatter$Flags $r2, $r3, $r4;
        boolean $z0;
        char $c2;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.util.Formatter$Flags[];
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label2;

        $r2 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r3 = r1[i0];
        $z0 = virtualinvoke $r2.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r3);
        if $z0 == 0 goto label1;

        $r4 = r1[i0];
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failMismatch(java.util.Formatter$Flags,char)>($r4, $c2);

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return;
    }

    private void checkFloat()
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags $r1, $r3, $r5, $r7;
        char $c0, $c1, $c2, $c3;
        java.util.Formatter$Flags[] $r2, $r4, $r6;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkNumeric()>();
        $c0 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c0 != 102 goto label0;

        goto label3;

     label0:
        $c1 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c1 != 97 goto label1;

        $r2 = newarray (java.util.Formatter$Flags)[2];
        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $r2[0] = $r1;
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $r2[1] = $r3;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r2);
        goto label3;

     label1:
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c2 != 101 goto label2;

        $r4 = newarray (java.util.Formatter$Flags)[1];
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $r4[0] = $r5;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r4);
        goto label3;

     label2:
        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c3 != 103 goto label3;

        $r6 = newarray (java.util.Formatter$Flags)[1];
        $r7 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $r6[0] = $r7;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r6);

     label3:
        return;
    }

    private void checkNumeric()
    {
        java.util.Formatter$FormatSpecifier r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.IllegalFormatWidthException $r1;
        java.util.IllegalFormatPrecisionException $r2;
        java.util.Formatter$Flags $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.MissingFormatWidthException $r7;
        java.lang.String $r8, $r19;
        java.util.IllegalFormatFlagsException $r17;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i0 == -1 goto label0;

        $i1 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i1 >= 0 goto label0;

        $r1 = new java.util.IllegalFormatWidthException;
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        specialinvoke $r1.<java.util.IllegalFormatWidthException: void <init>(int)>($i2);
        throw $r1;

     label0:
        $i3 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i3 == -1 goto label1;

        $i4 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i4 >= 0 goto label1;

        $r2 = new java.util.IllegalFormatPrecisionException;
        $i5 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke $r2.<java.util.IllegalFormatPrecisionException: void <init>(int)>($i5);
        throw $r2;

     label1:
        $i6 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i6 != -1 goto label3;

        $r3 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r4 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $z0 = virtualinvoke $r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r4);
        if $z0 != 0 goto label2;

        $r5 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z1 = virtualinvoke $r5.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r6);
        if $z1 == 0 goto label3;

     label2:
        $r7 = new java.util.MissingFormatWidthException;
        $r8 = virtualinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String toString()>();
        specialinvoke $r7.<java.util.MissingFormatWidthException: void <init>(java.lang.String)>($r8);
        throw $r7;

     label3:
        $r9 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r10 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $z2 = virtualinvoke $r9.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r10);
        if $z2 == 0 goto label4;

        $r11 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r12 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $z3 = virtualinvoke $r11.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r12);
        if $z3 != 0 goto label5;

     label4:
        $r13 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r14 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $z4 = virtualinvoke $r13.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r14);
        if $z4 == 0 goto label6;

        $r15 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r16 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z5 = virtualinvoke $r15.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r16);
        if $z5 == 0 goto label6;

     label5:
        $r17 = new java.util.IllegalFormatFlagsException;
        $r18 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r19 = virtualinvoke $r18.<java.util.Formatter$Flags: java.lang.String toString()>();
        specialinvoke $r17.<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>($r19);
        throw $r17;

     label6:
        return;
    }

    private void checkText()
    {
        java.util.Formatter$FormatSpecifier r0;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.IllegalFormatPrecisionException $r1;
        char $c2;
        java.util.Formatter$Flags $r2, $r3, $r4, $r5, $r7, $r9, $r10, $r14, $r15, $r17;
        java.util.IllegalFormatFlagsException $r6, $r16;
        java.lang.String $r8, $r12, $r18;
        boolean $z0, $z1;
        java.util.MissingFormatWidthException $r11;
        java.util.IllegalFormatWidthException $r13;
        java.lang.AssertionError $r19;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        $i0 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        if $i0 == -1 goto label0;

        $r1 = new java.util.IllegalFormatPrecisionException;
        $i1 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke $r1.<java.util.IllegalFormatPrecisionException: void <init>(int)>($i1);
        throw $r1;

     label0:
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        lookupswitch($c2)
        {
            case 37: goto label1;
            case 110: goto label3;
            default: goto label5;
        };

     label1:
        $r2 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i3 = virtualinvoke $r2.<java.util.Formatter$Flags: int valueOf()>();
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $i4 = virtualinvoke $r3.<java.util.Formatter$Flags: int valueOf()>();
        if $i3 == $i4 goto label2;

        $r4 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i5 = virtualinvoke $r4.<java.util.Formatter$Flags: int valueOf()>();
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags NONE>;
        $i6 = virtualinvoke $r5.<java.util.Formatter$Flags: int valueOf()>();
        if $i5 == $i6 goto label2;

        $r6 = new java.util.IllegalFormatFlagsException;
        $r7 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r8 = virtualinvoke $r7.<java.util.Formatter$Flags: java.lang.String toString()>();
        specialinvoke $r6.<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>($r8);
        throw $r6;

     label2:
        $i7 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i7 != -1 goto label6;

        $r9 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r10 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $z0 = virtualinvoke $r9.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r10);
        if $z0 == 0 goto label6;

        $r11 = new java.util.MissingFormatWidthException;
        $r12 = virtualinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String toString()>();
        specialinvoke $r11.<java.util.MissingFormatWidthException: void <init>(java.lang.String)>($r12);
        throw $r11;

     label3:
        $i8 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i8 == -1 goto label4;

        $r13 = new java.util.IllegalFormatWidthException;
        $i9 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        specialinvoke $r13.<java.util.IllegalFormatWidthException: void <init>(int)>($i9);
        throw $r13;

     label4:
        $r14 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i10 = virtualinvoke $r14.<java.util.Formatter$Flags: int valueOf()>();
        $r15 = <java.util.Formatter$Flags: java.util.Formatter$Flags NONE>;
        $i11 = virtualinvoke $r15.<java.util.Formatter$Flags: int valueOf()>();
        if $i10 == $i11 goto label6;

        $r16 = new java.util.IllegalFormatFlagsException;
        $r17 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r18 = virtualinvoke $r17.<java.util.Formatter$Flags: java.lang.String toString()>();
        specialinvoke $r16.<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>($r18);
        throw $r16;

     label5:
        $z1 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z1 != 0 goto label6;

        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();
        throw $r19;

     label6:
        return;
    }

    private void print(byte, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        byte b0, $b4;
        java.util.Locale r1;
        long l1;
        char $c2, $c3;
        boolean $z0;
        java.lang.AssertionError $r2;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        b0 := @parameter0: byte;
        r1 := @parameter1: java.util.Locale;
        l1 = (long) b0;
        if b0 >= 0 goto label1;

        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c2 == 111 goto label0;

        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c3 != 120 goto label1;

     label0:
        l1 = l1 + 256L;
        $z0 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $b4 = l1 cmp 0L;
        if $b4 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(long)>(l1);
        throw $r2;

     label1:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>(l1, r1);
        return;
    }

    private void print(short, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        short s0;
        java.util.Locale r1;
        long l1;
        char $c2, $c3;
        boolean $z0;
        byte $b4;
        java.lang.AssertionError $r2;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        s0 := @parameter0: short;
        r1 := @parameter1: java.util.Locale;
        l1 = (long) s0;
        if s0 >= 0 goto label1;

        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c2 == 111 goto label0;

        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c3 != 120 goto label1;

     label0:
        l1 = l1 + 65536L;
        $z0 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $b4 = l1 cmp 0L;
        if $b4 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(long)>(l1);
        throw $r2;

     label1:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>(l1, r1);
        return;
    }

    private void print(int, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        int i0;
        java.util.Locale r1;
        long l1;
        char $c2, $c3;
        boolean $z0;
        byte $b4;
        java.lang.AssertionError $r2;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Locale;
        l1 = (long) i0;
        if i0 >= 0 goto label1;

        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c2 == 111 goto label0;

        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c3 != 120 goto label1;

     label0:
        l1 = l1 + 4294967296L;
        $z0 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $b4 = l1 cmp 0L;
        if $b4 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(long)>(l1);
        throw $r2;

     label1:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(long,java.util.Locale)>(l1, r1);
        return;
    }

    private void print(long, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        long l0;
        java.util.Locale r1;
        java.lang.StringBuilder $r2, r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        char[] r4;
        int i1, $i5, $i6, $i8, $i9, i10, $i11, $i12, $i14, $i15, i16, i17, $i18, $i19;
        char $c2, $c7, $c13;
        byte $b3, $b4;
        java.lang.String $r5, $r6, $r7, r17, r31, $r39, $r49, $r50;
        java.util.Formatter$Flags $r9, $r10, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r37, $r38, $r41, $r42, $r44, $r45;
        java.util.Formatter$Flags[] $r13, $r27;
        java.util.Formatter $r47;
        java.lang.Appendable $r48;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.Locale;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r3 = $r2;
        $c2 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c2 != 100 goto label4;

        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        $b4 = l0 cmp 0L;
        if $b4 >= 0 goto label2;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(l0, 10);
        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(1);
        r4 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();
        goto label3;

     label2:
        $r7 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(l0, 10);
        r4 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();

     label3:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder leadingSign(java.lang.StringBuilder,boolean)>(r3, z0);
        $r9 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i5 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $r10 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i6 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i5, $r10, z0);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r3, r4, $r9, $i6, r1);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder trailingSign(java.lang.StringBuilder,boolean)>(r3, z0);
        goto label19;

     label4:
        $c7 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c7 != 111 goto label10;

        $r13 = newarray (java.util.Formatter$Flags)[3];
        $r14 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $r13[0] = $r14;
        $r15 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $r13[1] = $r15;
        $r16 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $r13[2] = $r16;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r13);
        r17 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>(l0);
        $r18 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r19 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z2 = virtualinvoke $r18.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r19);
        if $z2 == 0 goto label5;

        $i8 = virtualinvoke r17.<java.lang.String: int length()>();
        $i9 = $i8 + 1;
        goto label6;

     label5:
        $i9 = virtualinvoke r17.<java.lang.String: int length()>();

     label6:
        i10 = $i9;
        $r20 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r21 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z3 = virtualinvoke $r20.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r21);
        if $z3 == 0 goto label7;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label7:
        $r23 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r24 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z4 = virtualinvoke $r23.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r24);
        if $z4 == 0 goto label9;

        i1 = 0;

     label8:
        $i11 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i12 = $i11 - i10;
        if i1 >= $i12 goto label9;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
        i1 = i1 + 1;
        goto label8;

     label9:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);
        goto label19;

     label10:
        $c13 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c13 != 120 goto label19;

        $r27 = newarray (java.util.Formatter$Flags)[3];
        $r28 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $r27[0] = $r28;
        $r29 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $r27[1] = $r29;
        $r30 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $r27[2] = $r30;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>($r27);
        r31 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);
        $r32 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r33 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z5 = virtualinvoke $r32.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r33);
        if $z5 == 0 goto label11;

        $i14 = virtualinvoke r31.<java.lang.String: int length()>();
        $i15 = $i14 + 2;
        goto label12;

     label11:
        $i15 = virtualinvoke r31.<java.lang.String: int length()>();

     label12:
        i16 = $i15;
        $r34 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r35 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z6 = virtualinvoke $r34.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r35);
        if $z6 == 0 goto label15;

        $r37 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r38 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z7 = virtualinvoke $r37.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r38);
        if $z7 == 0 goto label13;

        $r39 = "0X";
        goto label14;

     label13:
        $r39 = "0x";

     label14:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

     label15:
        $r41 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r42 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z8 = virtualinvoke $r41.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r42);
        if $z8 == 0 goto label17;

        i17 = 0;

     label16:
        $i18 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i19 = $i18 - i16;
        if i17 >= $i19 goto label17;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
        i17 = i17 + 1;
        goto label16;

     label17:
        $r44 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r45 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z9 = virtualinvoke $r44.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r45);
        if $z9 == 0 goto label18;

        r31 = virtualinvoke r31.<java.lang.String: java.lang.String toUpperCase()>();

     label18:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

     label19:
        $r47 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r48 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r47);
        $r49 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $r50 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>($r49);
        interfaceinvoke $r48.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r50);
        return;
    }

    private java.lang.StringBuilder leadingSign(java.lang.StringBuilder, boolean)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder r1;
        boolean z0, $z1, $z2, $z3;
        java.util.Formatter$Flags $r2, $r3, $r5, $r6, $r8, $r9;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.StringBuilder;
        z0 := @parameter1: boolean;
        if z0 != 0 goto label1;

        $r3 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r2 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $z1 = virtualinvoke $r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r2);
        if $z1 == 0 goto label0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);
        goto label3;

     label0:
        $r5 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $z2 = virtualinvoke $r5.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r6);
        if $z2 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        goto label3;

     label1:
        $r8 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $z3 = virtualinvoke $r8.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r9);
        if $z3 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);
        goto label3;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label3:
        return r1;
    }

    private java.lang.StringBuilder trailingSign(java.lang.StringBuilder, boolean)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder r1;
        boolean z0, $z1;
        java.util.Formatter$Flags $r2, $r3;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.StringBuilder;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $r3 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r2 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $z1 = virtualinvoke $r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r2);
        if $z1 == 0 goto label0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label0:
        return r1;
    }

    private void print(java.math.BigInteger, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.math.BigInteger r1, r5;
        java.util.Locale r2;
        java.lang.StringBuilder $r3, r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        char[] r6;
        int i0, i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i12, $i13, i14, i15, $i16, $i17, $i18;
        char $c3, $c6, $c11;
        java.lang.String $r8, r12, r22, $r30, $r43, $r44;
        java.util.Formatter$Flags $r9, $r10, $r13, $r14, $r15, $r16, $r18, $r19, $r23, $r24, $r25, $r26, $r28, $r29, $r32, $r33, $r35, $r36;
        java.util.Formatter $r41;
        java.lang.Appendable $r42;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.math.BigInteger;
        r2 := @parameter1: java.util.Locale;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        r4 = $r3;
        $i2 = virtualinvoke r1.<java.math.BigInteger: int signum()>();
        if $i2 != -1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        r5 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger abs()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder leadingSign(java.lang.StringBuilder,boolean)>(r4, z0);
        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c3 != 100 goto label2;

        $r8 = virtualinvoke r5.<java.math.BigInteger: java.lang.String toString()>();
        r6 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();
        $r9 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i4 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $r10 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $i5 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i4, $r10, z0);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r4, r6, $r9, $i5, r2);
        goto label15;

     label2:
        $c6 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c6 != 111 goto label7;

        r12 = virtualinvoke r5.<java.math.BigInteger: java.lang.String toString(int)>(8);
        $i7 = virtualinvoke r12.<java.lang.String: int length()>();
        $i8 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();
        i0 = $i7 + $i8;
        if z0 == 0 goto label3;

        $r13 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r14 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $z2 = virtualinvoke $r13.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r14);
        if $z2 == 0 goto label3;

        i0 = i0 + 1;

     label3:
        $r15 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r16 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z3 = virtualinvoke $r15.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r16);
        if $z3 == 0 goto label4;

        i0 = i0 + 1;
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label4:
        $r18 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r19 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z4 = virtualinvoke $r18.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r19);
        if $z4 == 0 goto label6;

        i1 = 0;

     label5:
        $i9 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i10 = $i9 - i0;
        if i1 >= $i10 goto label6;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
        i1 = i1 + 1;
        goto label5;

     label6:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
        goto label15;

     label7:
        $c11 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c11 != 120 goto label15;

        r22 = virtualinvoke r5.<java.math.BigInteger: java.lang.String toString(int)>(16);
        $i12 = virtualinvoke r22.<java.lang.String: int length()>();
        $i13 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();
        i14 = $i12 + $i13;
        if z0 == 0 goto label8;

        $r23 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r24 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $z5 = virtualinvoke $r23.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r24);
        if $z5 == 0 goto label8;

        i14 = i14 + 1;

     label8:
        $r25 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r26 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z6 = virtualinvoke $r25.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r26);
        if $z6 == 0 goto label11;

        i14 = i14 + 2;
        $r28 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r29 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z7 = virtualinvoke $r28.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r29);
        if $z7 == 0 goto label9;

        $r30 = "0X";
        goto label10;

     label9:
        $r30 = "0x";

     label10:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

     label11:
        $r32 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r33 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z8 = virtualinvoke $r32.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r33);
        if $z8 == 0 goto label13;

        i15 = 0;

     label12:
        $i16 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i17 = $i16 - i14;
        if i15 >= $i17 goto label13;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
        i15 = i15 + 1;
        goto label12;

     label13:
        $r35 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r36 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z9 = virtualinvoke $r35.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r36);
        if $z9 == 0 goto label14;

        r22 = virtualinvoke r22.<java.lang.String: java.lang.String toUpperCase()>();

     label14:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

     label15:
        $i18 = virtualinvoke r1.<java.math.BigInteger: int signum()>();
        if $i18 != -1 goto label16;

        $z10 = 1;
        goto label17;

     label16:
        $z10 = 0;

     label17:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder trailingSign(java.lang.StringBuilder,boolean)>(r4, $z10);
        $r41 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r42 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r41);
        $r43 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();
        $r44 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>($r43);
        interfaceinvoke $r42.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r44);
        return;
    }

    private void print(float, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        float f0;
        java.util.Locale r1;
        double $d0;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        f0 := @parameter0: float;
        r1 := @parameter1: java.util.Locale;
        $d0 = (double) f0;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(double,java.util.Locale)>($d0, r1);
        return;
    }

    private void print(double, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        double d0, d1;
        java.util.Locale r1;
        java.lang.StringBuilder $r2, r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i2;
        java.util.Formatter$Flags $r5, $r7, $r8, $r13, $r14;
        char $c1;
        java.lang.String $r9, $r15, $r19, $r20;
        java.util.Formatter $r17;
        java.lang.Appendable $r18;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        d0 := @parameter0: double;
        r1 := @parameter1: java.util.Locale;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r3 = $r2;
        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>(d0, 0.0);
        if $i0 != -1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);
        if $z2 != 0 goto label6;

        d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder leadingSign(java.lang.StringBuilder,boolean)>(r3, z0);
        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);
        if $z3 != 0 goto label2;

        $r5 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $c1 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $i2 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,double,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>(r3, d1, r1, $r5, $c1, $i2, z0);
        goto label5;

     label2:
        $r7 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r8 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z4 = virtualinvoke $r7.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r8);
        if $z4 == 0 goto label3;

        $r9 = "INFINITY";
        goto label4;

     label3:
        $r9 = "Infinity";

     label4:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label5:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder trailingSign(java.lang.StringBuilder,boolean)>(r3, z0);
        goto label9;

     label6:
        $r13 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r14 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z5 = virtualinvoke $r13.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r14);
        if $z5 == 0 goto label7;

        $r15 = "NAN";
        goto label8;

     label7:
        $r15 = "NaN";

     label8:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label9:
        $r17 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r18 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r17);
        $r19 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $r20 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>($r19);
        interfaceinvoke $r18.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r20);
        return;
    }

    private void print(java.lang.StringBuilder, double, java.util.Locale, java.util.Formatter$Flags, char, int, boolean) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder r1, $r23, $r51;
        double d0;
        java.util.Locale r2, $r64;
        java.util.Formatter$Flags r3, r9, $r13, $r17, $r19, $r20, $r31, $r40, $r43, $r45, $r46, r47, $r54, $r58;
        char c0, c5, $c13, $c44, c45, $c57;
        int i1, i2, i3, i4, $i6, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, i23, i24, $i25, $i26, i27, $i28, $i29, $i30, i31, i32, $i33, $i35, $i36, i37, $i38, $i39, $i40, $i41, $i42, $i43, $i46, $i47, $i48, $i49, i50, i51, $i52, $i53, $i54, $i55, i56, $i58;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        sun.misc.FormattedFloatingDecimal$Form $r4, $r26, $r34;
        sun.misc.FormattedFloatingDecimal r5, $r11, $r25, r27, $r33, r35;
        char[] r6, r7, r8, r10, $r12, $r14, r28, $r29, r30, r36, r37, $r38, r39, r50, r61, $r67;
        byte $b7, $b34;
        java.lang.AssertionError $r21, $r48;
        java.lang.String r53, $r56, $r60, $r62, r63, r65, $r71;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.StringBuilder;
        d0 := @parameter1: double;
        r2 := @parameter2: java.util.Locale;
        r3 := @parameter3: java.util.Formatter$Flags;
        c0 := @parameter4: char;
        i1 := @parameter5: int;
        z0 := @parameter6: boolean;
        if c0 != 101 goto label9;

        if i1 != -1 goto label0;

        $i6 = 6;
        goto label1;

     label0:
        $i6 = i1;

     label1:
        i2 = $i6;
        $r11 = new sun.misc.FormattedFloatingDecimal;
        $r4 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form SCIENTIFIC>;
        specialinvoke $r11.<sun.misc.FormattedFloatingDecimal: void <init>(double,int,sun.misc.FormattedFloatingDecimal$Form)>(d0, i2, $r4);
        r5 = $r11;
        r6 = newarray (char)[30];
        i3 = virtualinvoke r5.<sun.misc.FormattedFloatingDecimal: int getChars(char[])>(r6);
        $r12 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] mantissa(char[],int)>(r6, i3);
        r7 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>($r12, i2);
        $r13 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z1 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r13);
        if $z1 == 0 goto label2;

        if i2 != 0 goto label2;

        r7 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addDot(char[])>(r7);

     label2:
        $b7 = d0 cmpl 0.0;
        if $b7 != 0 goto label3;

        $r14 = newarray (char)[3];
        $r14[0] = 43;
        $r14[1] = 48;
        $r14[2] = 48;
        goto label4;

     label3:
        $r14 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] exponent(char[],int)>(r6, i3);

     label4:
        r8 = $r14;
        i4 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i8 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i8 == -1 goto label5;

        $i9 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i10 = lengthof r8;
        $i11 = $i9 - $i10;
        $i12 = $i11 - 1;
        i4 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i12, r3, z0);

     label5:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r1, r7, r3, i4, r2);
        $r17 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z2 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r17);
        if $z2 == 0 goto label6;

        $c13 = 69;
        goto label7;

     label6:
        $c13 = 101;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);
        $r19 = virtualinvoke r3.<java.util.Formatter$Flags: java.util.Formatter$Flags dup()>();
        $r20 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        r9 = virtualinvoke $r19.<java.util.Formatter$Flags: java.util.Formatter$Flags remove(java.util.Formatter$Flags)>($r20);
        c5 = r8[0];
        $z3 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z3 != 0 goto label8;

        if c5 == 43 goto label8;

        if c5 == 45 goto label8;

        $r21 = new java.lang.AssertionError;
        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();
        throw $r21;

     label8:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);
        $i14 = lengthof r8;
        $i15 = $i14 - 1;
        r10 = newarray (char)[$i15];
        $i16 = lengthof r8;
        $i17 = $i16 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 1, r10, 0, $i17);
        $r23 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(null, r10, r9, -1, r2);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r23);
        goto label40;

     label9:
        if c0 != 102 goto label14;

        if i1 != -1 goto label10;

        $i18 = 6;
        goto label11;

     label10:
        $i18 = i1;

     label11:
        i19 = $i18;
        $r25 = new sun.misc.FormattedFloatingDecimal;
        $r26 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form DECIMAL_FLOAT>;
        specialinvoke $r25.<sun.misc.FormattedFloatingDecimal: void <init>(double,int,sun.misc.FormattedFloatingDecimal$Form)>(d0, i19, $r26);
        r27 = $r25;
        $i20 = virtualinvoke r27.<sun.misc.FormattedFloatingDecimal: int getExponent()>();
        $i21 = staticinvoke <java.lang.Math: int abs(int)>($i20);
        $i22 = 31 + $i21;
        r28 = newarray (char)[$i22];
        i23 = virtualinvoke r27.<sun.misc.FormattedFloatingDecimal: int getChars(char[])>(r28);
        $r29 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] mantissa(char[],int)>(r28, i23);
        r30 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>($r29, i19);
        $r31 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z4 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r31);
        if $z4 == 0 goto label12;

        if i19 != 0 goto label12;

        r30 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addDot(char[])>(r30);

     label12:
        i24 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i25 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i25 == -1 goto label13;

        $i26 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        i24 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i26, r3, z0);

     label13:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r1, r30, r3, i24, r2);
        goto label40;

     label14:
        if c0 != 103 goto label28;

        i27 = i1;
        if i1 != -1 goto label15;

        i27 = 6;
        goto label16;

     label15:
        if i1 != 0 goto label16;

        i27 = 1;

     label16:
        $r33 = new sun.misc.FormattedFloatingDecimal;
        $r34 = <sun.misc.FormattedFloatingDecimal$Form: sun.misc.FormattedFloatingDecimal$Form GENERAL>;
        specialinvoke $r33.<sun.misc.FormattedFloatingDecimal: void <init>(double,int,sun.misc.FormattedFloatingDecimal$Form)>(d0, i27, $r34);
        r35 = $r33;
        $i28 = virtualinvoke r35.<sun.misc.FormattedFloatingDecimal: int getExponent()>();
        $i29 = staticinvoke <java.lang.Math: int abs(int)>($i28);
        $i30 = 31 + $i29;
        r36 = newarray (char)[$i30];
        i31 = virtualinvoke r35.<sun.misc.FormattedFloatingDecimal: int getChars(char[])>(r36);
        r37 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] exponent(char[],int)>(r36, i31);
        if r37 == null goto label17;

        i32 = i27 + -1;
        goto label20;

     label17:
        $i33 = i27;
        $b34 = d0 cmpl 0.0;
        if $b34 != 0 goto label18;

        $i35 = 0;
        goto label19;

     label18:
        $i35 = virtualinvoke r35.<sun.misc.FormattedFloatingDecimal: int getExponentRounded()>();

     label19:
        $i36 = $i33 - $i35;
        i32 = $i36 - 1;

     label20:
        $r38 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] mantissa(char[],int)>(r36, i31);
        r39 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>($r38, i32);
        $r40 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z5 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r40);
        if $z5 == 0 goto label21;

        if i32 != 0 goto label21;

        r39 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addDot(char[])>(r39);

     label21:
        i37 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i38 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i38 == -1 goto label23;

        if r37 == null goto label22;

        $i39 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i40 = lengthof r37;
        $i41 = $i39 - $i40;
        $i42 = $i41 - 1;
        i37 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i42, r3, z0);
        goto label23;

     label22:
        $i43 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        i37 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i43, r3, z0);

     label23:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r1, r39, r3, i37, r2);
        if r37 == null goto label27;

        $r43 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z6 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r43);
        if $z6 == 0 goto label24;

        $c44 = 69;
        goto label25;

     label24:
        $c44 = 101;

     label25:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c44);
        $r45 = virtualinvoke r3.<java.util.Formatter$Flags: java.util.Formatter$Flags dup()>();
        $r46 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        r47 = virtualinvoke $r45.<java.util.Formatter$Flags: java.util.Formatter$Flags remove(java.util.Formatter$Flags)>($r46);
        c45 = r37[0];
        $z7 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z7 != 0 goto label26;

        if c45 == 43 goto label26;

        if c45 == 45 goto label26;

        $r48 = new java.lang.AssertionError;
        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();
        throw $r48;

     label26:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c45);
        $i46 = lengthof r37;
        $i47 = $i46 - 1;
        r50 = newarray (char)[$i47];
        $i48 = lengthof r37;
        $i49 = $i48 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r37, 1, r50, 0, $i49);
        $r51 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(null, r50, r47, -1, r2);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r51);

     label27:
        goto label40;

     label28:
        if c0 != 97 goto label40;

        i50 = i1;
        if i1 != -1 goto label29;

        i50 = 0;
        goto label30;

     label29:
        if i1 != 0 goto label30;

        i50 = 1;

     label30:
        r53 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String hexDouble(double,int)>(d0, i50);
        $r54 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        z8 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r54);
        if z8 == 0 goto label31;

        $r56 = "0X";
        goto label32;

     label31:
        $r56 = "0x";

     label32:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);
        $r58 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z9 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r58);
        if $z9 == 0 goto label34;

        i51 = 0;

     label33:
        $i52 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i53 = virtualinvoke r53.<java.lang.String: int length()>();
        $i54 = $i52 - $i53;
        $i55 = $i54 - 2;
        if i51 >= $i55 goto label34;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
        i51 = i51 + 1;
        goto label33;

     label34:
        i56 = virtualinvoke r53.<java.lang.String: int indexOf(int)>(112);
        $r60 = virtualinvoke r53.<java.lang.String: java.lang.String substring(int,int)>(0, i56);
        r61 = virtualinvoke $r60.<java.lang.String: char[] toCharArray()>();
        if z8 == 0 goto label35;

        $r62 = new java.lang.String;
        specialinvoke $r62.<java.lang.String: void <init>(char[])>(r61);
        r63 = $r62;
        $r64 = <java.util.Locale: java.util.Locale US>;
        r65 = virtualinvoke r63.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r64);
        r61 = virtualinvoke r65.<java.lang.String: char[] toCharArray()>();

     label35:
        if i50 == 0 goto label36;

        $r67 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addZeros(char[],int)>(r61, i50);
        goto label37;

     label36:
        $r67 = r61;

     label37:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r67);
        if z8 == 0 goto label38;

        $c57 = 80;
        goto label39;

     label38:
        $c57 = 112;

     label39:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c57);
        $i58 = i56 + 1;
        $r71 = virtualinvoke r53.<java.lang.String: java.lang.String substring(int)>($i58);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

     label40:
        return;
    }

    private char[] mantissa(char[], int)
    {
        java.util.Formatter$FormatSpecifier r0;
        char[] r1, r2;
        int i0, i1;
        char $c2;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        $c2 = r1[i1];
        if $c2 != 101 goto label1;

        goto label2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        r2 = newarray (char)[i1];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i1);
        return r2;
    }

    private char[] exponent(char[], int)
    {
        java.util.Formatter$FormatSpecifier r0;
        char[] r1, r2;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        char $c2;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 = i0 - 1;

     label0:
        if i1 < 0 goto label2;

        $c2 = r1[i1];
        if $c2 != 101 goto label1;

        goto label2;

     label1:
        i1 = i1 + -1;
        goto label0;

     label2:
        if i1 != -1 goto label3;

        return null;

     label3:
        $i3 = i0 - i1;
        $i4 = $i3 - 1;
        r2 = newarray (char)[$i4];
        $i5 = i1 + 1;
        $i6 = i0 - i1;
        $i7 = $i6 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r2, 0, $i7);
        return r2;
    }

    private char[] addZeros(char[], int)
    {
        java.util.Formatter$FormatSpecifier r0;
        char[] r1, r2;
        int i0, i1, i2, i3, i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i15, $i16, $i17, $i18;
        boolean z0, $z1;
        char $c6;
        byte $b10, $b14;
        java.lang.AssertionError $r3;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 = 0;

     label0:
        $i5 = lengthof r1;
        if i1 >= $i5 goto label2;

        $c6 = r1[i1];
        if $c6 != 46 goto label1;

        goto label2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        z0 = 0;
        $i7 = lengthof r1;
        if i1 != $i7 goto label3;

        z0 = 1;

     label3:
        $i8 = lengthof r1;
        $i9 = $i8 - i1;
        if z0 == 0 goto label4;

        $b10 = 0;
        goto label5;

     label4:
        $b10 = 1;

     label5:
        i2 = $i9 - $b10;
        $z1 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z1 != 0 goto label6;

        if i2 <= i0 goto label6;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label6:
        if i2 != i0 goto label7;

        return r1;

     label7:
        $i11 = lengthof r1;
        $i12 = $i11 + i0;
        $i13 = $i12 - i2;
        if z0 == 0 goto label8;

        $b14 = 1;
        goto label9;

     label8:
        $b14 = 0;

     label9:
        $i15 = $i13 + $b14;
        r2 = newarray (char)[$i15];
        $i16 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i16);
        i3 = lengthof r1;
        if z0 == 0 goto label10;

        $i17 = lengthof r1;
        r2[$i17] = 46;
        i3 = i3 + 1;

     label10:
        i4 = i3;

     label11:
        $i18 = lengthof r2;
        if i4 >= $i18 goto label12;

        r2[i4] = 48;
        i4 = i4 + 1;
        goto label11;

     label12:
        return r2;
    }

    private java.lang.String hexDouble(double, int)
    {
        java.util.Formatter$FormatSpecifier r0;
        double d0, d1, $d2, $d4;
        int i0, i1, i2, i3, i8, i9, i11, $i12, $i18, $i22, $i29, $i30;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        long l4, l5, l6, l7, $l13, $l14, $l15, $l16, $l19, $l20, $l23, $l24, $l25, $l27, l28;
        java.lang.String r1, r2, $r3, $r4, $r8, $r11, $r14, $r16;
        byte $b10, $b17, $b21, $b26;
        java.lang.AssertionError $r5, $r6, $r7, $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r15;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        d0 := @parameter0: double;
        i0 := @parameter1: int;
        $z4 = staticinvoke <sun.misc.FpUtils: boolean isFinite(double)>(d0);
        if $z4 == 0 goto label0;

        $b10 = d0 cmpl 0.0;
        if $b10 == 0 goto label0;

        if i0 == 0 goto label0;

        if i0 < 13 goto label1;

     label0:
        $r3 = staticinvoke <java.lang.Double: java.lang.String toHexString(double)>(d0);
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(2);
        return $r4;

     label1:
        $z5 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z5 != 0 goto label3;

        if i0 < 1 goto label2;

        if i0 <= 12 goto label3;

     label2:
        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label3:
        i1 = staticinvoke <sun.misc.FpUtils: int getExponent(double)>(d0);
        if i1 != -1023 goto label4;

        $z6 = 1;
        goto label5;

     label4:
        $z6 = 0;

     label5:
        z0 = $z6;
        if z0 == 0 goto label7;

        $d2 = staticinvoke <sun.misc.FpUtils: double scalb(double,int)>(1.0, 54);
        staticinvoke <java.util.Formatter: double access$202(double)>($d2);
        $d4 = staticinvoke <java.util.Formatter: double access$200()>();
        d0 = d0 * $d4;
        i11 = staticinvoke <sun.misc.FpUtils: int getExponent(double)>(d0);
        $z7 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z7 != 0 goto label7;

        if i11 < -1022 goto label6;

        if i11 <= 1023 goto label7;

     label6:
        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>(int)>(i11);
        throw $r6;

     label7:
        $i12 = i0 * 4;
        i2 = 1 + $i12;
        i3 = 53 - i2;
        $z8 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z8 != 0 goto label9;

        if i3 < 1 goto label8;

        if i3 < 53 goto label9;

     label8:
        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label9:
        l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        $l13 = l4 & 9223372036854775807L;
        l5 = $l13 >> i3;
        $l14 = -1L << i3;
        $l15 = $l14 ^ -1L;
        l6 = l4 & $l15;
        $l16 = l5 & 1L;
        $b17 = $l16 cmp 0L;
        if $b17 != 0 goto label10;

        $z9 = 1;
        goto label11;

     label10:
        $z9 = 0;

     label11:
        z1 = $z9;
        $i18 = i3 - 1;
        $l19 = 1L << $i18;
        $l20 = $l19 & l6;
        $b21 = $l20 cmp 0L;
        if $b21 == 0 goto label12;

        $z10 = 1;
        goto label13;

     label12:
        $z10 = 0;

     label13:
        z2 = $z10;
        if i3 <= 1 goto label14;

        $i22 = i3 - 1;
        $l23 = 1L << $i22;
        $l24 = $l23 ^ -1L;
        $l25 = $l24 & l6;
        $b26 = $l25 cmp 0L;
        if $b26 == 0 goto label14;

        $z11 = 1;
        goto label15;

     label14:
        $z11 = 0;

     label15:
        z3 = $z11;
        if z1 == 0 goto label16;

        if z2 == 0 goto label16;

        if z3 != 0 goto label17;

     label16:
        if z1 != 0 goto label18;

        if z2 == 0 goto label18;

     label17:
        l5 = l5 + 1L;

     label18:
        l7 = l4 & -9223372036854775808L;
        $l27 = l5 << i3;
        l28 = l7 | $l27;
        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l28);
        $z12 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);
        if $z12 == 0 goto label19;

        return "1.0p1024";

     label19:
        $r8 = staticinvoke <java.lang.Double: java.lang.String toHexString(double)>(d1);
        r1 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(2);
        if z0 != 0 goto label20;

        return r1;

     label20:
        i8 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(112);
        if i8 != -1 goto label22;

        $z13 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z13 != 0 goto label21;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label21:
        return null;

     label22:
        $i29 = i8 + 1;
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i29);
        $i30 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);
        i9 = $i30 - 54;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i8);
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p");
        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i9);
        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r16;
    }

    private void print(java.math.BigDecimal, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.math.BigDecimal r1, r4;
        java.util.Locale r2;
        java.lang.StringBuilder r3, $r5;
        boolean z0, $z1;
        char $c0, $c1, $c3;
        int $i2, $i4;
        java.util.Formatter$Flags $r7;
        java.util.Formatter $r9;
        java.lang.Appendable $r10;
        java.lang.String $r11, $r12;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.math.BigDecimal;
        r2 := @parameter1: java.util.Locale;
        $c0 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        if $c0 != 97 goto label0;

        $c1 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void failConversion(char,java.lang.Object)>($c1, r1);

     label0:
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        r3 = $r5;
        $i2 = virtualinvoke r1.<java.math.BigDecimal: int signum()>();
        if $i2 != -1 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;
        r4 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal abs()>();
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder leadingSign(java.lang.StringBuilder,boolean)>(r3, z0);
        $r7 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $c3 = r0.<java.util.Formatter$FormatSpecifier: char c>;
        $i4 = r0.<java.util.Formatter$FormatSpecifier: int precision>;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>(r3, r4, r2, $r7, $c3, $i4, z0);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder trailingSign(java.lang.StringBuilder,boolean)>(r3, z0);
        $r9 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r10 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r9);
        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $r12 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>($r11);
        interfaceinvoke $r10.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r12);
        return;
    }

    private void print(java.lang.StringBuilder, java.math.BigDecimal, java.util.Locale, java.util.Formatter$Flags, char, int, boolean) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder r1, $r28;
        java.math.BigDecimal r2, r6, $r14, $r31, r43, r44, $r45;
        java.util.Locale r3;
        java.util.Formatter$Flags r4, r11, $r18, $r22, $r24, $r25, $r39;
        char c0, c8, $c18, $c19;
        int i1, i2, i3, i4, i5, i6, i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, $i28, i29, $i30, $i31, $i32, $i33, i34, $i35, $i36, $i37, i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, i46, $i47, i48, $i49;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.math.MathContext r5, $r13, $r33;
        java.util.Formatter$BigDecimalLayoutForm $r7, $r36;
        java.util.Formatter$FormatSpecifier$BigDecimalLayout r8, $r16, $r34, r37;
        char[] r9, r10, r12, r19, r38, $r40, r41;
        java.math.BigInteger $r15, $r17, $r32, $r35, $r46;
        java.lang.AssertionError $r26, $r48;
        java.math.RoundingMode $r30;
        java.lang.String $r47;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.StringBuilder;
        r2 := @parameter1: java.math.BigDecimal;
        r3 := @parameter2: java.util.Locale;
        r4 := @parameter3: java.util.Formatter$Flags;
        c0 := @parameter4: char;
        i1 := @parameter5: int;
        z0 := @parameter6: boolean;
        if c0 != 101 goto label11;

        if i1 != -1 goto label0;

        $i9 = 6;
        goto label1;

     label0:
        $i9 = i1;

     label1:
        i2 = $i9;
        i3 = virtualinvoke r2.<java.math.BigDecimal: int scale()>();
        i4 = virtualinvoke r2.<java.math.BigDecimal: int precision()>();
        i5 = 0;
        $i10 = i4 - 1;
        if i2 <= $i10 goto label2;

        i6 = i4;
        $i11 = i4 - 1;
        i5 = i2 - $i11;
        goto label3;

     label2:
        i6 = i2 + 1;

     label3:
        $r13 = new java.math.MathContext;
        specialinvoke $r13.<java.math.MathContext: void <init>(int)>(i6);
        r5 = $r13;
        $r14 = new java.math.BigDecimal;
        $r15 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();
        specialinvoke $r14.<java.math.BigDecimal: void <init>(java.math.BigInteger,int,java.math.MathContext)>($r15, i3, r5);
        r6 = $r14;
        $r16 = new java.util.Formatter$FormatSpecifier$BigDecimalLayout;
        $r17 = virtualinvoke r6.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();
        $i12 = virtualinvoke r6.<java.math.BigDecimal: int scale()>();
        $r7 = <java.util.Formatter$BigDecimalLayoutForm: java.util.Formatter$BigDecimalLayoutForm SCIENTIFIC>;
        specialinvoke $r16.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void <init>(java.util.Formatter$FormatSpecifier,java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>(r0, $r17, $i12, $r7);
        r8 = $r16;
        r9 = virtualinvoke r8.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: char[] mantissa()>();
        if i4 == 1 goto label4;

        $z1 = virtualinvoke r8.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: boolean hasDot()>();
        if $z1 != 0 goto label6;

     label4:
        if i5 > 0 goto label5;

        $r18 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z2 = virtualinvoke r4.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r18);
        if $z2 == 0 goto label6;

     label5:
        r9 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addDot(char[])>(r9);

     label6:
        r19 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] trailingZeros(char[],int)>(r9, i5);
        r10 = virtualinvoke r8.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: char[] exponent()>();
        i7 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i13 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i13 == -1 goto label7;

        $i14 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i15 = lengthof r10;
        $i16 = $i14 - $i15;
        $i17 = $i16 - 1;
        i7 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i17, r4, z0);

     label7:
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r1, r19, r4, i7, r3);
        $r22 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z3 = virtualinvoke r4.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r22);
        if $z3 == 0 goto label8;

        $c18 = 69;
        goto label9;

     label8:
        $c18 = 101;

     label9:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c18);
        $r24 = virtualinvoke r4.<java.util.Formatter$Flags: java.util.Formatter$Flags dup()>();
        $r25 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        r11 = virtualinvoke $r24.<java.util.Formatter$Flags: java.util.Formatter$Flags remove(java.util.Formatter$Flags)>($r25);
        c8 = r10[0];
        $z4 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z4 != 0 goto label10;

        if c8 == 43 goto label10;

        if c8 == 45 goto label10;

        $r26 = new java.lang.AssertionError;
        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();
        throw $r26;

     label10:
        $c19 = r10[0];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c19);
        $i20 = lengthof r10;
        $i21 = $i20 - 1;
        r12 = newarray (char)[$i21];
        $i22 = lengthof r10;
        $i23 = $i22 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 1, r12, 0, $i23);
        $r28 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(null, r12, r11, -1, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r28);
        goto label27;

     label11:
        if c0 != 102 goto label20;

        if i1 != -1 goto label12;

        $i24 = 6;
        goto label13;

     label12:
        $i24 = i1;

     label13:
        i25 = $i24;
        i26 = virtualinvoke r2.<java.math.BigDecimal: int scale()>();
        if i26 <= i25 goto label15;

        i27 = virtualinvoke r2.<java.math.BigDecimal: int precision()>();
        if i27 > i26 goto label14;

        $r30 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;
        r2 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>(i25, $r30);
        goto label15;

     label14:
        $i28 = i26 - i25;
        i29 = i27 - $i28;
        $r31 = new java.math.BigDecimal;
        $r32 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();
        $r33 = new java.math.MathContext;
        specialinvoke $r33.<java.math.MathContext: void <init>(int)>(i29);
        specialinvoke $r31.<java.math.BigDecimal: void <init>(java.math.BigInteger,int,java.math.MathContext)>($r32, i26, $r33);
        r2 = $r31;

     label15:
        $r34 = new java.util.Formatter$FormatSpecifier$BigDecimalLayout;
        $r35 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();
        $i30 = virtualinvoke r2.<java.math.BigDecimal: int scale()>();
        $r36 = <java.util.Formatter$BigDecimalLayoutForm: java.util.Formatter$BigDecimalLayoutForm DECIMAL_FLOAT>;
        specialinvoke $r34.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: void <init>(java.util.Formatter$FormatSpecifier,java.math.BigInteger,int,java.util.Formatter$BigDecimalLayoutForm)>(r0, $r35, $i30, $r36);
        r37 = $r34;
        r38 = virtualinvoke r37.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: char[] mantissa()>();
        $i31 = virtualinvoke r37.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: int scale()>();
        if $i31 >= i25 goto label16;

        $i32 = virtualinvoke r37.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: int scale()>();
        $i33 = i25 - $i32;
        goto label17;

     label16:
        $i33 = 0;

     label17:
        i34 = $i33;
        $i35 = virtualinvoke r37.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: int scale()>();
        if $i35 != 0 goto label19;

        $r39 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z5 = virtualinvoke r4.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r39);
        if $z5 != 0 goto label18;

        if i34 <= 0 goto label19;

     label18:
        $r40 = virtualinvoke r37.<java.util.Formatter$FormatSpecifier$BigDecimalLayout: char[] mantissa()>();
        r38 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] addDot(char[])>($r40);

     label19:
        r41 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char[] trailingZeros(char[],int)>(r38, i34);
        $i36 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $i37 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: int adjustWidth(int,java.util.Formatter$Flags,boolean)>($i36, r4, z0);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r1, r41, r4, $i37, r3);
        goto label27;

     label20:
        if c0 != 103 goto label26;

        i38 = i1;
        if i1 != -1 goto label21;

        i38 = 6;
        goto label22;

     label21:
        if i1 != 0 goto label22;

        i38 = 1;

     label22:
        r43 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(1L, 4);
        $i39 = neg i38;
        r44 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(1L, $i39);
        $r45 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;
        $z6 = virtualinvoke r2.<java.math.BigDecimal: boolean equals(java.lang.Object)>($r45);
        if $z6 != 0 goto label23;

        $i40 = virtualinvoke r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r43);
        if $i40 == -1 goto label24;

        $i41 = virtualinvoke r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r44);
        if $i41 != -1 goto label24;

     label23:
        $i42 = virtualinvoke r2.<java.math.BigDecimal: int scale()>();
        $i43 = neg $i42;
        $r46 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();
        $r47 = virtualinvoke $r46.<java.math.BigInteger: java.lang.String toString()>();
        $i44 = virtualinvoke $r47.<java.lang.String: int length()>();
        $i45 = $i44 - 1;
        i46 = $i43 + $i45;
        $i47 = i38 - i46;
        i48 = $i47 - 1;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>(r1, r2, r3, r4, 102, i48, z0);
        goto label25;

     label24:
        $i49 = i38 - 1;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>(r1, r2, r3, r4, 101, $i49, z0);

     label25:
        goto label27;

     label26:
        if c0 != 97 goto label27;

        $z7 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z7 != 0 goto label27;

        $r48 = new java.lang.AssertionError;
        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();
        throw $r48;

     label27:
        return;
    }

    private int adjustWidth(int, java.util.Formatter$Flags, boolean)
    {
        java.util.Formatter$FormatSpecifier r0;
        int i0, i1;
        java.util.Formatter$Flags r1, $r2;
        boolean z0, $z1;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Formatter$Flags;
        z0 := @parameter2: boolean;
        i1 = i0;
        if i1 == -1 goto label0;

        if z0 == 0 goto label0;

        $r2 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $z1 = virtualinvoke r1.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r2);
        if $z1 == 0 goto label0;

        i1 = i1 + -1;

     label0:
        return i1;
    }

    private char[] addDot(char[])
    {
        java.util.Formatter$FormatSpecifier r0;
        char[] r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: char[];
        r2 = r1;
        $i0 = lengthof r1;
        $i1 = $i0 + 1;
        r3 = newarray (char)[$i1];
        $i2 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, $i2);
        $i3 = lengthof r3;
        $i4 = $i3 - 1;
        r3[$i4] = 46;
        return r3;
    }

    private char[] trailingZeros(char[], int)
    {
        java.util.Formatter$FormatSpecifier r0;
        char[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        r2 = r1;
        if i0 <= 0 goto label1;

        $i2 = lengthof r1;
        $i3 = $i2 + i0;
        r2 = newarray (char)[$i3];
        $i4 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i4);
        i1 = lengthof r1;

     label0:
        $i5 = lengthof r2;
        if i1 >= $i5 goto label1;

        r2[i1] = 48;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r2;
    }

    private void print(java.util.Calendar, char, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Calendar r1;
        char c0;
        java.util.Locale r2;
        java.lang.StringBuilder $r3, r4;
        java.lang.String r5, $r7;
        java.util.Formatter$Flags $r8, $r9;
        boolean $z0;
        java.util.Formatter $r10;
        java.lang.Appendable $r11;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.util.Calendar;
        c0 := @parameter1: char;
        r2 := @parameter2: java.util.Locale;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        r4 = $r3;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r4, r1, c0, r2);
        $r7 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();
        r5 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.String justify(java.lang.String)>($r7);
        $r8 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags f>;
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z0 = virtualinvoke $r8.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r9);
        if $z0 == 0 goto label0;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String toUpperCase()>();

     label0:
        $r10 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r11 = staticinvoke <java.util.Formatter: java.lang.Appendable access$000(java.util.Formatter)>($r10);
        interfaceinvoke $r11.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r5);
        return;
    }

    private java.lang.Appendable print(java.lang.StringBuilder, java.util.Calendar, char, java.util.Locale) throws java.io.IOException
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder r1, $r8, $r10, $r13, $r16, $r19, $r21, $r28, $r34, $r37, $r39, $r41, $r44, $r68, $r72, $r75, $r78, $r91, r92, $r94;
        java.util.Calendar r2;
        char c0, $c24, c44, c45, c46, c47, c48;
        java.util.Locale r3, $r25, $r30, $r46, $r49, r50, $r58, r59, $r96;
        boolean $z0, $z1, z2, $z3, $z4;
        int i1, i2, $i3, $i4, i6, $i8, i9, i11, $i14, $i15, $i18, i19, $i21, $i22, i23, i25, $i26, $i27, $i28, $i30, i32, i33, i34, i37, i39, $i41, i42;
        java.util.Formatter$Flags r4, r5, r6, $r9, r12, r15, r18, r33, r36, r67, $r70, r71, r74, r77;
        java.lang.AssertionError $r7, $r120;
        long $l5, $l7, $l10, $l12, l13, $l16, l17, $l20, $l29, $l36, $l38, $l40, $l43;
        java.lang.String[] $r23, r24, $r52, $r55, $r61, $r64;
        java.text.DateFormatSymbols r26, r51, r60;
        java.lang.String r27, $r31, $r47, $r53, $r56, $r62, $r65, $r95, $r97;
        java.util.TimeZone r43;
        byte $b31, b35;
        java.lang.Appendable $r80, $r85, $r87, $r89, $r99, $r101, $r103, $r105, $r107, $r110, $r112, $r115, $r117;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.StringBuilder;
        r2 := @parameter1: java.util.Calendar;
        c0 := @parameter2: char;
        r3 := @parameter3: java.util.Locale;
        $z0 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i3 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        if $i3 == -1 goto label0;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label0:
        if r1 != null goto label1;

        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        r1 = $r8;

     label1:
        tableswitch(c0)
        {
            case 65: goto label32;
            case 66: goto label36;
            case 67: goto label40;
            case 68: goto label55;
            case 69: goto label57;
            case 70: goto label56;
            case 71: goto label57;
            case 72: goto label2;
            case 73: goto label2;
            case 74: goto label57;
            case 75: goto label57;
            case 76: goto label13;
            case 77: goto label11;
            case 78: goto label12;
            case 79: goto label57;
            case 80: goto label57;
            case 81: goto label14;
            case 82: goto label50;
            case 83: goto label20;
            case 84: goto label50;
            case 85: goto label57;
            case 86: goto label57;
            case 87: goto label57;
            case 88: goto label57;
            case 89: goto label40;
            case 90: goto label27;
            case 91: goto label57;
            case 92: goto label57;
            case 93: goto label57;
            case 94: goto label57;
            case 95: goto label57;
            case 96: goto label57;
            case 97: goto label32;
            case 98: goto label36;
            case 99: goto label54;
            case 100: goto label45;
            case 101: goto label45;
            case 102: goto label57;
            case 103: goto label57;
            case 104: goto label36;
            case 105: goto label57;
            case 106: goto label48;
            case 107: goto label2;
            case 108: goto label2;
            case 109: goto label49;
            case 110: goto label57;
            case 111: goto label57;
            case 112: goto label15;
            case 113: goto label57;
            case 114: goto label51;
            case 115: goto label19;
            case 116: goto label57;
            case 117: goto label57;
            case 118: goto label57;
            case 119: goto label57;
            case 120: goto label57;
            case 121: goto label40;
            case 122: goto label21;
            default: goto label57;
        };

     label2:
        i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);
        if c0 == 73 goto label3;

        if c0 != 108 goto label7;

     label3:
        if i1 == 0 goto label4;

        if i1 != 12 goto label5;

     label4:
        $i4 = 12;
        goto label6;

     label5:
        $i4 = i1 % 12;

     label6:
        i1 = $i4;

     label7:
        if c0 == 72 goto label8;

        if c0 != 73 goto label9;

     label8:
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        goto label10;

     label9:
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags NONE>;

     label10:
        r4 = $r9;
        $l5 = (long) i1;
        $r10 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l5, r4, 2, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r10);
        goto label58;

     label11:
        i6 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);
        r12 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l7 = (long) i6;
        $r13 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l7, r12, 2, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r13);
        goto label58;

     label12:
        $i8 = virtualinvoke r2.<java.util.Calendar: int get(int)>(14);
        i9 = $i8 * 1000000;
        r15 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l10 = (long) i9;
        $r16 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l10, r15, 9, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r16);
        goto label58;

     label13:
        i11 = virtualinvoke r2.<java.util.Calendar: int get(int)>(14);
        r18 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l12 = (long) i11;
        $r19 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l12, r18, 3, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r19);
        goto label58;

     label14:
        l13 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>();
        r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags NONE>;
        $i14 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $r21 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, l13, r5, $i14, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r21);
        goto label58;

     label15:
        $r23 = newarray (java.lang.String)[2];
        $r23[0] = "AM";
        $r23[1] = "PM";
        r24 = $r23;
        if r3 == null goto label16;

        $r25 = <java.util.Locale: java.util.Locale US>;
        if r3 == $r25 goto label16;

        r26 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>(r3);
        r24 = virtualinvoke r26.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();

     label16:
        $i15 = virtualinvoke r2.<java.util.Calendar: int get(int)>(9);
        r27 = r24[$i15];
        $r28 = r1;
        if r3 == null goto label17;

        $r30 = r3;
        goto label18;

     label17:
        $r30 = <java.util.Locale: java.util.Locale US>;

     label18:
        $r31 = virtualinvoke r27.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r30);
        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);
        goto label58;

     label19:
        $l16 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>();
        l17 = $l16 / 1000L;
        r33 = <java.util.Formatter$Flags: java.util.Formatter$Flags NONE>;
        $i18 = r0.<java.util.Formatter$FormatSpecifier: int width>;
        $r34 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, l17, r33, $i18, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r34);
        goto label58;

     label20:
        i19 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);
        r36 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l20 = (long) i19;
        $r37 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l20, r36, 2, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r37);
        goto label58;

     label21:
        $i21 = virtualinvoke r2.<java.util.Calendar: int get(int)>(15);
        $i22 = virtualinvoke r2.<java.util.Calendar: int get(int)>(16);
        i23 = $i21 + $i22;
        if i23 >= 0 goto label22;

        $z1 = 1;
        goto label23;

     label22:
        $z1 = 0;

     label23:
        z2 = $z1;
        $r39 = r1;
        if z2 == 0 goto label24;

        $c24 = 45;
        goto label25;

     label24:
        $c24 = 43;

     label25:
        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c24);
        if z2 == 0 goto label26;

        i23 = neg i23;

     label26:
        i25 = i23 / 60000;
        $i26 = i25 / 60;
        $i27 = $i26 * 100;
        $i28 = i25 % 60;
        i2 = $i27 + $i28;
        r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l29 = (long) i2;
        $r41 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l29, r6, 4, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r41);
        goto label58;

     label27:
        r43 = virtualinvoke r2.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
        $r44 = r1;
        $i30 = virtualinvoke r2.<java.util.Calendar: int get(int)>(16);
        if $i30 == 0 goto label28;

        $z3 = 1;
        goto label29;

     label28:
        $z3 = 0;

     label29:
        $b31 = 0;
        if r3 != null goto label30;

        $r46 = <java.util.Locale: java.util.Locale US>;
        goto label31;

     label30:
        $r46 = r3;

     label31:
        $r47 = virtualinvoke r43.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>($z3, $b31, $r46);
        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);
        goto label58;

     label32:
        i32 = virtualinvoke r2.<java.util.Calendar: int get(int)>(7);
        if r3 != null goto label33;

        $r49 = <java.util.Locale: java.util.Locale US>;
        goto label34;

     label33:
        $r49 = r3;

     label34:
        r50 = $r49;
        r51 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>(r50);
        if c0 != 65 goto label35;

        $r52 = virtualinvoke r51.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();
        $r53 = $r52[i32];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);
        goto label58;

     label35:
        $r55 = virtualinvoke r51.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();
        $r56 = $r55[i32];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);
        goto label58;

     label36:
        i33 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);
        if r3 != null goto label37;

        $r58 = <java.util.Locale: java.util.Locale US>;
        goto label38;

     label37:
        $r58 = r3;

     label38:
        r59 = $r58;
        r60 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>(r59);
        if c0 != 66 goto label39;

        $r61 = virtualinvoke r60.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();
        $r62 = $r61[i33];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);
        goto label58;

     label39:
        $r64 = virtualinvoke r60.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();
        $r65 = $r64[i33];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);
        goto label58;

     label40:
        i34 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);
        b35 = 2;
        lookupswitch(c0)
        {
            case 67: goto label41;
            case 89: goto label43;
            case 121: goto label42;
            default: goto label44;
        };

     label41:
        i34 = i34 / 100;
        goto label44;

     label42:
        i34 = i34 % 100;
        goto label44;

     label43:
        b35 = 4;

     label44:
        r67 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l36 = (long) i34;
        $r68 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l36, r67, b35, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r68);
        goto label58;

     label45:
        i37 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);
        if c0 != 100 goto label46;

        $r70 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        goto label47;

     label46:
        $r70 = <java.util.Formatter$Flags: java.util.Formatter$Flags NONE>;

     label47:
        r71 = $r70;
        $l38 = (long) i37;
        $r72 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l38, r71, 2, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r72);
        goto label58;

     label48:
        i39 = virtualinvoke r2.<java.util.Calendar: int get(int)>(6);
        r74 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l40 = (long) i39;
        $r75 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l40, r74, 3, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r75);
        goto label58;

     label49:
        $i41 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);
        i42 = $i41 + 1;
        r77 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $l43 = (long) i42;
        $r78 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,long,java.util.Formatter$Flags,int,java.util.Locale)>(null, $l43, r77, 2, r3);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r78);
        goto label58;

     label50:
        c44 = 58;
        $r80 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 72, r3);
        interfaceinvoke $r80.<java.lang.Appendable: java.lang.Appendable append(char)>(c44);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 77, r3);
        if c0 != 84 goto label58;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c44);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 83, r3);
        goto label58;

     label51:
        c45 = 58;
        $r85 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 73, r3);
        interfaceinvoke $r85.<java.lang.Appendable: java.lang.Appendable append(char)>(c45);
        $r87 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 77, r3);
        interfaceinvoke $r87.<java.lang.Appendable: java.lang.Appendable append(char)>(c45);
        $r89 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 83, r3);
        interfaceinvoke $r89.<java.lang.Appendable: java.lang.Appendable append(char)>(32);
        $r91 = new java.lang.StringBuilder;
        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();
        r92 = $r91;
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r92, r2, 112, r3);
        $r94 = r1;
        $r95 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.String toString()>();
        if r3 == null goto label52;

        $r96 = r3;
        goto label53;

     label52:
        $r96 = <java.util.Locale: java.util.Locale US>;

     label53:
        $r97 = virtualinvoke $r95.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r96);
        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);
        goto label58;

     label54:
        c46 = 32;
        $r99 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 97, r3);
        interfaceinvoke $r99.<java.lang.Appendable: java.lang.Appendable append(char)>(c46);
        $r101 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 98, r3);
        interfaceinvoke $r101.<java.lang.Appendable: java.lang.Appendable append(char)>(c46);
        $r103 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 100, r3);
        interfaceinvoke $r103.<java.lang.Appendable: java.lang.Appendable append(char)>(c46);
        $r105 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 84, r3);
        interfaceinvoke $r105.<java.lang.Appendable: java.lang.Appendable append(char)>(c46);
        $r107 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 90, r3);
        interfaceinvoke $r107.<java.lang.Appendable: java.lang.Appendable append(char)>(c46);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 89, r3);
        goto label58;

     label55:
        c47 = 47;
        $r110 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 109, r3);
        interfaceinvoke $r110.<java.lang.Appendable: java.lang.Appendable append(char)>(c47);
        $r112 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 100, r3);
        interfaceinvoke $r112.<java.lang.Appendable: java.lang.Appendable append(char)>(c47);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 121, r3);
        goto label58;

     label56:
        c48 = 45;
        $r115 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 89, r3);
        interfaceinvoke $r115.<java.lang.Appendable: java.lang.Appendable append(char)>(c48);
        $r117 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 109, r3);
        interfaceinvoke $r117.<java.lang.Appendable: java.lang.Appendable append(char)>(c48);
        specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>(r1, r2, 100, r3);
        goto label58;

     label57:
        $z4 = <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled>;
        if $z4 != 0 goto label58;

        $r120 = new java.lang.AssertionError;
        specialinvoke $r120.<java.lang.AssertionError: void <init>()>();
        throw $r120;

     label58:
        return r1;
    }

    private void failMismatch(java.util.Formatter$Flags, char)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Formatter$Flags r1;
        char c0;
        java.lang.String r2;
        java.util.FormatFlagsConversionMismatchException $r3;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.util.Formatter$Flags;
        c0 := @parameter1: char;
        r2 = virtualinvoke r1.<java.util.Formatter$Flags: java.lang.String toString()>();
        $r3 = new java.util.FormatFlagsConversionMismatchException;
        specialinvoke $r3.<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>(r2, c0);
        throw $r3;
    }

    private void failConversion(char, java.lang.Object)
    {
        java.util.Formatter$FormatSpecifier r0;
        char c0;
        java.lang.Object r1;
        java.util.IllegalFormatConversionException $r2;
        java.lang.Class $r3;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        c0 := @parameter0: char;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.util.IllegalFormatConversionException;
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        specialinvoke $r2.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>(c0, $r3);
        throw $r2;
    }

    private char getZero(java.util.Locale)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.util.Locale r1, $r4;
        java.text.DecimalFormatSymbols r2;
        java.util.Formatter $r3, $r5;
        boolean $z0;
        char $c0, $c1;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.util.Locale;
        if r1 == null goto label0;

        $r3 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $r4 = virtualinvoke $r3.<java.util.Formatter: java.util.Locale locale()>();
        $z0 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r4);
        if $z0 != 0 goto label0;

        r2 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(r1);
        $c0 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getZeroDigit()>();
        return $c0;

     label0:
        $r5 = r0.<java.util.Formatter$FormatSpecifier: java.util.Formatter this$0>;
        $c1 = staticinvoke <java.util.Formatter: char access$300(java.util.Formatter)>($r5);
        return $c1;
    }

    private java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder, long, java.util.Formatter$Flags, int, java.util.Locale)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder r1, $r6;
        long l0;
        java.util.Formatter$Flags r2;
        int i1;
        java.util.Locale r3;
        char[] r4;
        java.lang.String $r5;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.StringBuilder;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.Formatter$Flags;
        i1 := @parameter3: int;
        r3 := @parameter4: java.util.Locale;
        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(l0, 10);
        r4 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();
        $r6 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder,char[],java.util.Formatter$Flags,int,java.util.Locale)>(r1, r4, r2, i1, r3);
        return $r6;
    }

    private java.lang.StringBuilder localizedMagnitude(java.lang.StringBuilder, char[], java.util.Formatter$Flags, int, java.util.Locale)
    {
        java.util.Formatter$FormatSpecifier r0;
        java.lang.StringBuilder r1, $r6;
        char[] r2;
        java.util.Formatter$Flags r3, $r9, $r16;
        int i0, i1, i4, i6, i7, i8, i10, $i12, $i13, $i15, $i16, $i17, i18, i19, $i20;
        java.util.Locale r4, $r7, $r10;
        char c2, c3, c5, $c9, c11, $c14;
        java.text.DecimalFormat r5;
        boolean $z0, $z1, $z2, $z3;
        java.text.DecimalFormatSymbols r8, r11;
        java.text.NumberFormat $r12;

        r0 := @this: java.util.Formatter$FormatSpecifier;
        r1 := @parameter0: java.lang.StringBuilder;
        r2 := @parameter1: char[];
        r3 := @parameter2: java.util.Formatter$Flags;
        i0 := @parameter3: int;
        r4 := @parameter4: java.util.Locale;
        if r1 != null goto label0;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        r1 = $r6;

     label0:
        i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();
        c2 = specialinvoke r0.<java.util.Formatter$FormatSpecifier: char getZero(java.util.Locale)>(r4);
        c3 = 0;
        i4 = -1;
        c5 = 0;
        i6 = lengthof r2;
        i7 = i6;
        i8 = 0;

     label1:
        if i8 >= i6 goto label3;

        $c9 = r2[i8];
        if $c9 != 46 goto label2;

        i7 = i8;
        goto label3;

     label2:
        i8 = i8 + 1;
        goto label1;

     label3:
        if i7 >= i6 goto label6;

        if r4 == null goto label4;

        $r7 = <java.util.Locale: java.util.Locale US>;
        $z0 = virtualinvoke r4.<java.util.Locale: boolean equals(java.lang.Object)>($r7);
        if $z0 == 0 goto label5;

     label4:
        c5 = 46;
        goto label6;

     label5:
        r8 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(r4);
        c5 = virtualinvoke r8.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

     label6:
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $z1 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r9);
        if $z1 == 0 goto label9;

        if r4 == null goto label7;

        $r10 = <java.util.Locale: java.util.Locale US>;
        $z2 = virtualinvoke r4.<java.util.Locale: boolean equals(java.lang.Object)>($r10);
        if $z2 == 0 goto label8;

     label7:
        c3 = 44;
        i4 = 3;
        goto label9;

     label8:
        r11 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(r4);
        c3 = virtualinvoke r11.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();
        $r12 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>(r4);
        r5 = (java.text.DecimalFormat) $r12;
        i4 = virtualinvoke r5.<java.text.DecimalFormat: int getGroupingSize()>();

     label9:
        i10 = 0;

     label10:
        if i10 >= i6 goto label13;

        if i10 != i7 goto label11;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);
        c3 = 0;
        goto label12;

     label11:
        c11 = r2[i10];
        $i12 = c11 - 48;
        $i13 = $i12 + c2;
        $c14 = (char) $i13;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);
        if c3 == 0 goto label12;

        $i15 = i7 - 1;
        if i10 == $i15 goto label12;

        $i16 = i7 - i10;
        $i17 = $i16 % i4;
        if $i17 != 1 goto label12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label12:
        i10 = i10 + 1;
        goto label10;

     label13:
        i18 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();
        if i0 == -1 goto label15;

        $r16 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z3 = virtualinvoke r3.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r16);
        if $z3 == 0 goto label15;

        i19 = 0;

     label14:
        $i20 = i0 - i18;
        if i19 >= $i20 goto label15;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i1, c2);
        i19 = i19 + 1;
        goto label14;

     label15:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/Formatter";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.Formatter$FormatSpecifier: boolean $assertionsDisabled> = $z1;
        return;
    }
}
