public class java.lang.ThreadGroup extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler
{
    private final java.lang.ThreadGroup parent;
    java.lang.String name;
    int maxPriority;
    boolean destroyed;
    boolean daemon;
    boolean vmAllowSuspension;
    int nUnstartedThreads;
    int nthreads;
    java.lang.Thread[] threads;
    int ngroups;
    java.lang.ThreadGroup[] groups;

    private void <init>()
    {
        java.lang.ThreadGroup r0;

        r0 := @this: java.lang.ThreadGroup;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.ThreadGroup: int nUnstartedThreads> = 0;
        r0.<java.lang.ThreadGroup: java.lang.String name> = "system";
        r0.<java.lang.ThreadGroup: int maxPriority> = 10;
        r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent> = null;
        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.ThreadGroup r0, $r3;
        java.lang.String r1;
        java.lang.Thread $r2;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
        specialinvoke r0.<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>($r3, r1);
        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.String)
    {
        java.lang.ThreadGroup r0, r1;
        java.lang.String r2;
        java.lang.Void $r3;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.ThreadGroup;
        r2 := @parameter1: java.lang.String;
        $r3 = staticinvoke <java.lang.ThreadGroup: java.lang.Void checkParentAccess(java.lang.ThreadGroup)>(r1);
        specialinvoke r0.<java.lang.ThreadGroup: void <init>(java.lang.Void,java.lang.ThreadGroup,java.lang.String)>($r3, r1, r2);
        return;
    }

    private void <init>(java.lang.Void, java.lang.ThreadGroup, java.lang.String)
    {
        java.lang.ThreadGroup r0, r2;
        java.lang.Void r1;
        java.lang.String r3;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Void;
        r2 := @parameter1: java.lang.ThreadGroup;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.ThreadGroup: int nUnstartedThreads> = 0;
        r0.<java.lang.ThreadGroup: java.lang.String name> = r3;
        $i0 = r2.<java.lang.ThreadGroup: int maxPriority>;
        r0.<java.lang.ThreadGroup: int maxPriority> = $i0;
        $z0 = r2.<java.lang.ThreadGroup: boolean daemon>;
        r0.<java.lang.ThreadGroup: boolean daemon> = $z0;
        $z1 = r2.<java.lang.ThreadGroup: boolean vmAllowSuspension>;
        r0.<java.lang.ThreadGroup: boolean vmAllowSuspension> = $z1;
        r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent> = r2;
        specialinvoke r2.<java.lang.ThreadGroup: void add(java.lang.ThreadGroup)>(r0);
        return;
    }

    private static java.lang.Void checkParentAccess(java.lang.ThreadGroup)
    {
        java.lang.ThreadGroup r0;

        r0 := @parameter0: java.lang.ThreadGroup;
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        return null;
    }

    public final java.lang.String getName()
    {
        java.lang.ThreadGroup r0;
        java.lang.String $r1;

        r0 := @this: java.lang.ThreadGroup;
        $r1 = r0.<java.lang.ThreadGroup: java.lang.String name>;
        return $r1;
    }

    public final java.lang.ThreadGroup getParent()
    {
        java.lang.ThreadGroup r0, $r1, $r2, $r3;

        r0 := @this: java.lang.ThreadGroup;
        $r1 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        if $r1 == null goto label0;

        $r2 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        virtualinvoke $r2.<java.lang.ThreadGroup: void checkAccess()>();

     label0:
        $r3 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        return $r3;
    }

    public final int getMaxPriority()
    {
        java.lang.ThreadGroup r0;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;
        $i0 = r0.<java.lang.ThreadGroup: int maxPriority>;
        return $i0;
    }

    public final boolean isDaemon()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;

        r0 := @this: java.lang.ThreadGroup;
        $z0 = r0.<java.lang.ThreadGroup: boolean daemon>;
        return $z0;
    }

    public synchronized boolean isDestroyed()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;

        r0 := @this: java.lang.ThreadGroup;
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        return $z0;
    }

    public final void setDaemon(boolean)
    {
        java.lang.ThreadGroup r0;
        boolean z0;

        r0 := @this: java.lang.ThreadGroup;
        z0 := @parameter0: boolean;
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        r0.<java.lang.ThreadGroup: boolean daemon> = z0;
        return;
    }

    public final void setMaxPriority(int)
    {
        java.lang.ThreadGroup r0, r2, $r6, $r7, $r12;
        int i0, i1, $i2, $i3, i4;
        java.lang.ThreadGroup[] r3, $r8, $r9;
        java.lang.Throwable r4, $r11;
        java.lang.Object[] $r10;

        r0 := @this: java.lang.ThreadGroup;
        i0 := @parameter0: int;
        r2 = r0;
        entermonitor r0;

     label0:
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        if i0 < 1 goto label1;

        if i0 <= 10 goto label3;

     label1:
        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        if $r6 == null goto label4;

        $r7 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        $i2 = $r7.<java.lang.ThreadGroup: int maxPriority>;
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i2);
        goto label5;

     label4:
        $i3 = i0;

     label5:
        r0.<java.lang.ThreadGroup: int maxPriority> = $i3;
        i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r8 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r8 == null goto label6;

        $r9 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r9, i1);
        r3 = (java.lang.ThreadGroup[]) $r10;
        goto label7;

     label6:
        r3 = null;

     label7:
        exitmonitor r2;

     label8:
        goto label12;

     label9:
        $r11 := @caughtexception;

     label10:
        r4 = $r11;
        exitmonitor r2;

     label11:
        throw r4;

     label12:
        i4 = 0;

     label13:
        if i4 >= i1 goto label14;

        $r12 = r3[i4];
        virtualinvoke $r12.<java.lang.ThreadGroup: void setMaxPriority(int)>(i0);
        i4 = i4 + 1;
        goto label13;

     label14:
        return;

        catch java.lang.Throwable from label0 to label2 with label9;
        catch java.lang.Throwable from label3 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public final boolean parentOf(java.lang.ThreadGroup)
    {
        java.lang.ThreadGroup r0, r1;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.ThreadGroup;

     label0:
        if r1 == null goto label2;

        if r1 != r0 goto label1;

        return 1;

     label1:
        r1 = r1.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        goto label0;

     label2:
        return 0;
    }

    public final void checkAccess()
    {
        java.lang.ThreadGroup r0;
        java.lang.SecurityManager r1;

        r0 := @this: java.lang.ThreadGroup;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        virtualinvoke r1.<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>(r0);

     label0:
        return;
    }

    public int activeCount()
    {
        java.lang.ThreadGroup r0, r2, $r9;
        int i0, i1, i3, $i4;
        java.lang.ThreadGroup[] r3, $r5, $r6;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        byte $b2;
        java.lang.Object[] $r7;

        r0 := @this: java.lang.ThreadGroup;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 == 0 goto label2;

        $b2 = 0;
        exitmonitor r2;

     label1:
        return $b2;

     label2:
        i0 = r0.<java.lang.ThreadGroup: int nthreads>;
        i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r5 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r5 == null goto label3;

        $r6 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r6, i1);
        r3 = (java.lang.ThreadGroup[]) $r7;
        goto label4;

     label3:
        r3 = null;

     label4:
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r8 := @caughtexception;

     label7:
        r4 = $r8;
        exitmonitor r2;

     label8:
        throw r4;

     label9:
        i3 = 0;

     label10:
        if i3 >= i1 goto label11;

        $r9 = r3[i3];
        $i4 = virtualinvoke $r9.<java.lang.ThreadGroup: int activeCount()>();
        i0 = i0 + $i4;
        i3 = i3 + 1;
        goto label10;

     label11:
        return i0;

        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int enumerate(java.lang.Thread[])
    {
        java.lang.ThreadGroup r0;
        java.lang.Thread[] r1;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread[];
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        $i0 = specialinvoke r0.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],int,boolean)>(r1, 0, 1);
        return $i0;
    }

    public int enumerate(java.lang.Thread[], boolean)
    {
        java.lang.ThreadGroup r0;
        java.lang.Thread[] r1;
        boolean z0;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread[];
        z0 := @parameter1: boolean;
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        $i0 = specialinvoke r0.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],int,boolean)>(r1, 0, z0);
        return $i0;
    }

    private int enumerate(java.lang.Thread[], int, boolean)
    {
        java.lang.ThreadGroup r0, r3, $r14;
        java.lang.Thread[] r1, $r6, $r8;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, i9;
        boolean z0, $z1, $z2;
        java.lang.ThreadGroup[] r2, $r10, $r11;
        java.lang.Throwable r4, $r13;
        byte $b4;
        java.lang.Thread $r7, $r9;
        java.lang.Object[] $r12;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread[];
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        i1 = 0;
        r2 = null;
        r3 = r0;
        entermonitor r0;

     label0:
        $z1 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z1 == 0 goto label2;

        $b4 = 0;
        exitmonitor r3;

     label1:
        return $b4;

     label2:
        i2 = r0.<java.lang.ThreadGroup: int nthreads>;
        $i5 = lengthof r1;
        $i6 = $i5 - i0;
        if i2 <= $i6 goto label3;

        $i7 = lengthof r1;
        i2 = $i7 - i0;

     label3:
        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        $r6 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r7 = $r6[i3];
        $z2 = virtualinvoke $r7.<java.lang.Thread: boolean isAlive()>();
        if $z2 == 0 goto label5;

        $i8 = i0;
        i0 = i0 + 1;
        $r8 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r9 = $r8[i3];
        r1[$i8] = $r9;

     label5:
        i3 = i3 + 1;
        goto label4;

     label6:
        if z0 == 0 goto label8;

        i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r10 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r10 == null goto label7;

        $r11 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r12 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r11, i1);
        r2 = (java.lang.ThreadGroup[]) $r12;
        goto label8;

     label7:
        r2 = null;

     label8:
        exitmonitor r3;

     label9:
        goto label13;

     label10:
        $r13 := @caughtexception;

     label11:
        r4 = $r13;
        exitmonitor r3;

     label12:
        throw r4;

     label13:
        if z0 == 0 goto label15;

        i9 = 0;

     label14:
        if i9 >= i1 goto label15;

        $r14 = r2[i9];
        i0 = specialinvoke $r14.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],int,boolean)>(r1, i0, 1);
        i9 = i9 + 1;
        goto label14;

     label15:
        return i0;

        catch java.lang.Throwable from label0 to label1 with label10;
        catch java.lang.Throwable from label2 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public int activeGroupCount()
    {
        java.lang.ThreadGroup r0, r2, $r9;
        int i0, i2, i3, $i4;
        java.lang.ThreadGroup[] r3, $r5, $r6;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        byte $b1;
        java.lang.Object[] $r7;

        r0 := @this: java.lang.ThreadGroup;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 == 0 goto label2;

        $b1 = 0;
        exitmonitor r2;

     label1:
        return $b1;

     label2:
        i0 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r5 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r5 == null goto label3;

        $r6 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r6, i0);
        r3 = (java.lang.ThreadGroup[]) $r7;
        goto label4;

     label3:
        r3 = null;

     label4:
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r8 := @caughtexception;

     label7:
        r4 = $r8;
        exitmonitor r2;

     label8:
        throw r4;

     label9:
        i2 = i0;
        i3 = 0;

     label10:
        if i3 >= i0 goto label11;

        $r9 = r3[i3];
        $i4 = virtualinvoke $r9.<java.lang.ThreadGroup: int activeGroupCount()>();
        i2 = i2 + $i4;
        i3 = i3 + 1;
        goto label10;

     label11:
        return i2;

        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int enumerate(java.lang.ThreadGroup[])
    {
        java.lang.ThreadGroup r0;
        java.lang.ThreadGroup[] r1;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.ThreadGroup[];
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        $i0 = specialinvoke r0.<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],int,boolean)>(r1, 0, 1);
        return $i0;
    }

    public int enumerate(java.lang.ThreadGroup[], boolean)
    {
        java.lang.ThreadGroup r0;
        java.lang.ThreadGroup[] r1;
        boolean z0;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.ThreadGroup[];
        z0 := @parameter1: boolean;
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        $i0 = specialinvoke r0.<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],int,boolean)>(r1, 0, z0);
        return $i0;
    }

    private int enumerate(java.lang.ThreadGroup[], int, boolean)
    {
        java.lang.ThreadGroup r0, r3, $r11;
        java.lang.ThreadGroup[] r1, r2, $r6, $r7, $r8;
        int i0, i1, i2, $i4, $i5, $i6, i7;
        boolean z0, $z1;
        java.lang.Throwable r4, $r10;
        byte $b3;
        java.lang.Object[] $r9;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.ThreadGroup[];
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        i1 = 0;
        r2 = null;
        r3 = r0;
        entermonitor r0;

     label0:
        $z1 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z1 == 0 goto label2;

        $b3 = 0;
        exitmonitor r3;

     label1:
        return $b3;

     label2:
        i2 = r0.<java.lang.ThreadGroup: int ngroups>;
        $i4 = lengthof r1;
        $i5 = $i4 - i0;
        if i2 <= $i5 goto label3;

        $i6 = lengthof r1;
        i2 = $i6 - i0;

     label3:
        if i2 <= 0 goto label4;

        $r6 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, i0, i2);
        i0 = i0 + i2;

     label4:
        if z0 == 0 goto label6;

        i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r7 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r7 == null goto label5;

        $r8 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, i1);
        r2 = (java.lang.ThreadGroup[]) $r9;
        goto label6;

     label5:
        r2 = null;

     label6:
        exitmonitor r3;

     label7:
        goto label11;

     label8:
        $r10 := @caughtexception;

     label9:
        r4 = $r10;
        exitmonitor r3;

     label10:
        throw r4;

     label11:
        if z0 == 0 goto label13;

        i7 = 0;

     label12:
        if i7 >= i1 goto label13;

        $r11 = r2[i7];
        i0 = specialinvoke $r11.<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],int,boolean)>(r1, i0, 1);
        i7 = i7 + 1;
        goto label12;

     label13:
        return i0;

        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public final void stop()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @this: java.lang.ThreadGroup;
        $z0 = specialinvoke r0.<java.lang.ThreadGroup: boolean stopOrSuspend(boolean)>(0);
        if $z0 == 0 goto label0;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r1.<java.lang.Thread: void stop()>();

     label0:
        return;
    }

    public final void interrupt()
    {
        java.lang.ThreadGroup r0, r2, $r11;
        int i0, i1, $i2, i3;
        java.lang.ThreadGroup[] r3, $r7, $r8;
        java.lang.Throwable r4, $r10;
        java.lang.Thread[] $r5;
        java.lang.Thread $r6;
        java.lang.Object[] $r9;

        r0 := @this: java.lang.ThreadGroup;
        r2 = r0;
        entermonitor r0;

     label0:
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        i0 = 0;

     label1:
        $i2 = r0.<java.lang.ThreadGroup: int nthreads>;
        if i0 >= $i2 goto label2;

        $r5 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r6 = $r5[i0];
        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();
        i0 = i0 + 1;
        goto label1;

     label2:
        i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r7 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r7 == null goto label3;

        $r8 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, i1);
        r3 = (java.lang.ThreadGroup[]) $r9;
        goto label4;

     label3:
        r3 = null;

     label4:
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r10 := @caughtexception;

     label7:
        r4 = $r10;
        exitmonitor r2;

     label8:
        throw r4;

     label9:
        i3 = 0;

     label10:
        if i3 >= i1 goto label11;

        $r11 = r3[i3];
        virtualinvoke $r11.<java.lang.ThreadGroup: void interrupt()>();
        i3 = i3 + 1;
        goto label10;

     label11:
        return;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final void suspend()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @this: java.lang.ThreadGroup;
        $z0 = specialinvoke r0.<java.lang.ThreadGroup: boolean stopOrSuspend(boolean)>(1);
        if $z0 == 0 goto label0;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r1.<java.lang.Thread: void suspend()>();

     label0:
        return;
    }

    private boolean stopOrSuspend(boolean)
    {
        java.lang.ThreadGroup r0, r3, $r16;
        boolean z0, z1, $z2, $z3;
        java.lang.Thread r1, $r7, $r9, $r11;
        java.lang.ThreadGroup[] r2, $r12, $r13;
        int i0, i1, $i2, i3;
        java.lang.Throwable r4, $r15;
        java.lang.Thread[] $r6, $r8, $r10;
        java.lang.Object[] $r14;

        r0 := @this: java.lang.ThreadGroup;
        z0 := @parameter0: boolean;
        z1 = 0;
        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r2 = null;
        r3 = r0;
        entermonitor r0;

     label0:
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        i0 = 0;

     label1:
        $i2 = r0.<java.lang.ThreadGroup: int nthreads>;
        if i0 >= $i2 goto label5;

        $r6 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r7 = $r6[i0];
        if $r7 != r1 goto label2;

        z1 = 1;
        goto label4;

     label2:
        if z0 == 0 goto label3;

        $r8 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r9 = $r8[i0];
        virtualinvoke $r9.<java.lang.Thread: void suspend()>();
        goto label4;

     label3:
        $r10 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r11 = $r10[i0];
        virtualinvoke $r11.<java.lang.Thread: void stop()>();

     label4:
        i0 = i0 + 1;
        goto label1;

     label5:
        i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r12 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r12 == null goto label6;

        $r13 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r14 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r13, i1);
        r2 = (java.lang.ThreadGroup[]) $r14;

     label6:
        exitmonitor r3;

     label7:
        goto label11;

     label8:
        $r15 := @caughtexception;

     label9:
        r4 = $r15;
        exitmonitor r3;

     label10:
        throw r4;

     label11:
        i3 = 0;

     label12:
        if i3 >= i1 goto label16;

        $r16 = r2[i3];
        $z2 = specialinvoke $r16.<java.lang.ThreadGroup: boolean stopOrSuspend(boolean)>(z0);
        if $z2 != 0 goto label13;

        if z1 == 0 goto label14;

     label13:
        $z3 = 1;
        goto label15;

     label14:
        $z3 = 0;

     label15:
        z1 = $z3;
        i3 = i3 + 1;
        goto label12;

     label16:
        return z1;

        catch java.lang.Throwable from label0 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public final void resume()
    {
        java.lang.ThreadGroup r0, r2, $r11;
        int i0, i1, $i2, i3;
        java.lang.ThreadGroup[] r3, $r7, $r8;
        java.lang.Throwable r4, $r10;
        java.lang.Thread[] $r5;
        java.lang.Thread $r6;
        java.lang.Object[] $r9;

        r0 := @this: java.lang.ThreadGroup;
        r2 = r0;
        entermonitor r0;

     label0:
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        i0 = 0;

     label1:
        $i2 = r0.<java.lang.ThreadGroup: int nthreads>;
        if i0 >= $i2 goto label2;

        $r5 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r6 = $r5[i0];
        virtualinvoke $r6.<java.lang.Thread: void resume()>();
        i0 = i0 + 1;
        goto label1;

     label2:
        i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r7 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r7 == null goto label3;

        $r8 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, i1);
        r3 = (java.lang.ThreadGroup[]) $r9;
        goto label4;

     label3:
        r3 = null;

     label4:
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r10 := @caughtexception;

     label7:
        r4 = $r10;
        exitmonitor r2;

     label8:
        throw r4;

     label9:
        i3 = 0;

     label10:
        if i3 >= i1 goto label11;

        $r11 = r3[i3];
        virtualinvoke $r11.<java.lang.ThreadGroup: void resume()>();
        i3 = i3 + 1;
        goto label10;

     label11:
        return;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final void destroy()
    {
        java.lang.ThreadGroup r0, r2, $r9, $r11, $r12, $r13;
        int i0, $i1, i2;
        java.lang.ThreadGroup[] r3, $r6, $r7;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        java.lang.IllegalThreadStateException $r5;
        java.lang.Object[] $r8;

        r0 := @this: java.lang.ThreadGroup;
        r2 = r0;
        entermonitor r0;

     label0:
        virtualinvoke r0.<java.lang.ThreadGroup: void checkAccess()>();
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 != 0 goto label1;

        $i1 = r0.<java.lang.ThreadGroup: int nthreads>;
        if $i1 <= 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalThreadStateException;
        specialinvoke $r5.<java.lang.IllegalThreadStateException: void <init>()>();
        throw $r5;

     label2:
        i0 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r6 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r6 == null goto label3;

        $r7 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r7, i0);
        r3 = (java.lang.ThreadGroup[]) $r8;
        goto label4;

     label3:
        r3 = null;

     label4:
        $r9 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        if $r9 == null goto label5;

        r0.<java.lang.ThreadGroup: boolean destroyed> = 1;
        r0.<java.lang.ThreadGroup: int ngroups> = 0;
        r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups> = null;
        r0.<java.lang.ThreadGroup: int nthreads> = 0;
        r0.<java.lang.ThreadGroup: java.lang.Thread[] threads> = null;

     label5:
        exitmonitor r2;

     label6:
        goto label10;

     label7:
        $r10 := @caughtexception;

     label8:
        r4 = $r10;
        exitmonitor r2;

     label9:
        throw r4;

     label10:
        i2 = 0;

     label11:
        if i2 >= i0 goto label12;

        $r11 = r3[i2];
        virtualinvoke $r11.<java.lang.ThreadGroup: void destroy()>();
        i2 = i2 + 1;
        goto label11;

     label12:
        $r12 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        if $r12 == null goto label13;

        $r13 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        specialinvoke $r13.<java.lang.ThreadGroup: void remove(java.lang.ThreadGroup)>(r0);

     label13:
        return;

        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private final void add(java.lang.ThreadGroup)
    {
        java.lang.ThreadGroup r0, r1, r3;
        java.lang.Throwable r4, $r14;
        boolean $z0;
        java.lang.IllegalThreadStateException $r5;
        java.lang.ThreadGroup[] $r6, $r7, $r8, $r9, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r10;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.ThreadGroup;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalThreadStateException;
        specialinvoke $r5.<java.lang.IllegalThreadStateException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r6 != null goto label2;

        $r7 = newarray (java.lang.ThreadGroup)[4];
        r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups> = $r7;
        goto label3;

     label2:
        $i0 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r8 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $i1 = lengthof $r8;
        if $i0 != $i1 goto label3;

        $r9 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $i2 = r0.<java.lang.ThreadGroup: int ngroups>;
        $i3 = $i2 * 2;
        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r9, $i3);
        $r11 = (java.lang.ThreadGroup[]) $r10;
        r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups> = $r11;

     label3:
        $r12 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $i4 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r12[$i4] = r1;
        $i5 = r0.<java.lang.ThreadGroup: int ngroups>;
        $i6 = $i5 + 1;
        r0.<java.lang.ThreadGroup: int ngroups> = $i6;
        exitmonitor r3;

     label4:
        goto label8;

     label5:
        $r14 := @caughtexception;

     label6:
        r4 = $r14;
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void remove(java.lang.ThreadGroup)
    {
        java.lang.ThreadGroup r0, r1, r3, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Throwable r4, $r11;
        boolean $z0, $z1;
        java.lang.ThreadGroup[] $r5, $r8, $r9, $r10;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.ThreadGroup;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 == 0 goto label2;

        exitmonitor r3;

     label1:
        return;

     label2:
        i0 = 0;

     label3:
        $i1 = r0.<java.lang.ThreadGroup: int ngroups>;
        if i0 >= $i1 goto label5;

        $r5 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r6 = $r5[i0];
        if $r6 != r1 goto label4;

        $i2 = r0.<java.lang.ThreadGroup: int ngroups>;
        $i3 = $i2 - 1;
        r0.<java.lang.ThreadGroup: int ngroups> = $i3;
        $r8 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $i4 = i0 + 1;
        $r9 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $i5 = r0.<java.lang.ThreadGroup: int ngroups>;
        $i6 = $i5 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i4, $r9, i0, $i6);
        $r10 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $i7 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r10[$i7] = null;
        goto label5;

     label4:
        i0 = i0 + 1;
        goto label3;

     label5:
        $i8 = r0.<java.lang.ThreadGroup: int nthreads>;
        if $i8 != 0 goto label6;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label6:
        $z1 = r0.<java.lang.ThreadGroup: boolean daemon>;
        if $z1 == 0 goto label7;

        $i9 = r0.<java.lang.ThreadGroup: int nthreads>;
        if $i9 != 0 goto label7;

        $i10 = r0.<java.lang.ThreadGroup: int nUnstartedThreads>;
        if $i10 != 0 goto label7;

        $i11 = r0.<java.lang.ThreadGroup: int ngroups>;
        if $i11 != 0 goto label7;

        virtualinvoke r0.<java.lang.ThreadGroup: void destroy()>();

     label7:
        exitmonitor r3;

     label8:
        goto label12;

     label9:
        $r11 := @caughtexception;

     label10:
        r4 = $r11;
        exitmonitor r3;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label0 to label1 with label9;
        catch java.lang.Throwable from label2 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    void addUnstarted()
    {
        java.lang.ThreadGroup r0, r2;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        java.lang.IllegalThreadStateException $r4;
        int $i0, $i1;

        r0 := @this: java.lang.ThreadGroup;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalThreadStateException;
        specialinvoke $r4.<java.lang.IllegalThreadStateException: void <init>()>();
        throw $r4;

     label1:
        $i0 = r0.<java.lang.ThreadGroup: int nUnstartedThreads>;
        $i1 = $i0 + 1;
        r0.<java.lang.ThreadGroup: int nUnstartedThreads> = $i1;
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        r3 = $r6;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void add(java.lang.Thread)
    {
        java.lang.ThreadGroup r0, r3;
        java.lang.Thread r1;
        java.lang.Throwable r4, $r15;
        boolean $z0;
        java.lang.IllegalThreadStateException $r5;
        java.lang.Thread[] $r6, $r7, $r8, $r9, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object[] $r10;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalThreadStateException;
        specialinvoke $r5.<java.lang.IllegalThreadStateException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        if $r6 != null goto label2;

        $r7 = newarray (java.lang.Thread)[4];
        r0.<java.lang.ThreadGroup: java.lang.Thread[] threads> = $r7;
        goto label3;

     label2:
        $i0 = r0.<java.lang.ThreadGroup: int nthreads>;
        $r8 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $i1 = lengthof $r8;
        if $i0 != $i1 goto label3;

        $r9 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $i2 = r0.<java.lang.ThreadGroup: int nthreads>;
        $i3 = $i2 * 2;
        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r9, $i3);
        $r11 = (java.lang.Thread[]) $r10;
        r0.<java.lang.ThreadGroup: java.lang.Thread[] threads> = $r11;

     label3:
        $r12 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $i4 = r0.<java.lang.ThreadGroup: int nthreads>;
        $r12[$i4] = r1;
        $i5 = r0.<java.lang.ThreadGroup: int nthreads>;
        $i6 = $i5 + 1;
        r0.<java.lang.ThreadGroup: int nthreads> = $i6;
        $i7 = r0.<java.lang.ThreadGroup: int nUnstartedThreads>;
        $i8 = $i7 - 1;
        r0.<java.lang.ThreadGroup: int nUnstartedThreads> = $i8;
        exitmonitor r3;

     label4:
        goto label8;

     label5:
        $r15 := @caughtexception;

     label6:
        r4 = $r15;
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void threadStartFailed(java.lang.Thread)
    {
        java.lang.ThreadGroup r0, r3;
        java.lang.Thread r1;
        java.lang.Throwable r4, $r6;
        int $i0, $i1;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread;
        r3 = r0;
        entermonitor r0;

     label0:
        specialinvoke r0.<java.lang.ThreadGroup: void remove(java.lang.Thread)>(r1);
        $i0 = r0.<java.lang.ThreadGroup: int nUnstartedThreads>;
        $i1 = $i0 + 1;
        r0.<java.lang.ThreadGroup: int nUnstartedThreads> = $i1;
        exitmonitor r3;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r4 = $r6;
        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    void threadTerminated(java.lang.Thread)
    {
        java.lang.ThreadGroup r0, r3;
        java.lang.Thread r1;
        java.lang.Throwable r4, $r5;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread;
        r3 = r0;
        entermonitor r0;

     label0:
        specialinvoke r0.<java.lang.ThreadGroup: void remove(java.lang.Thread)>(r1);
        $i0 = r0.<java.lang.ThreadGroup: int nthreads>;
        if $i0 != 0 goto label1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label1:
        $z0 = r0.<java.lang.ThreadGroup: boolean daemon>;
        if $z0 == 0 goto label2;

        $i1 = r0.<java.lang.ThreadGroup: int nthreads>;
        if $i1 != 0 goto label2;

        $i2 = r0.<java.lang.ThreadGroup: int nUnstartedThreads>;
        if $i2 != 0 goto label2;

        $i3 = r0.<java.lang.ThreadGroup: int ngroups>;
        if $i3 != 0 goto label2;

        virtualinvoke r0.<java.lang.ThreadGroup: void destroy()>();

     label2:
        exitmonitor r3;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r4 = $r5;
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void remove(java.lang.Thread)
    {
        java.lang.ThreadGroup r0, r3;
        java.lang.Thread r1, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Throwable r5, $r11;
        boolean $z0;
        java.lang.Thread[] $r6, $r8, $r9, $r10;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.ThreadGroup: boolean destroyed>;
        if $z0 == 0 goto label2;

        exitmonitor r3;

     label1:
        return;

     label2:
        i0 = 0;

     label3:
        $i1 = r0.<java.lang.ThreadGroup: int nthreads>;
        if i0 >= $i1 goto label5;

        $r6 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r7 = $r6[i0];
        if $r7 != r1 goto label4;

        $r8 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $i2 = i0 + 1;
        $r9 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $i3 = r0.<java.lang.ThreadGroup: int nthreads>;
        $i4 = $i3 - 1;
        r0.<java.lang.ThreadGroup: int nthreads> = $i4;
        $i5 = $i4 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i2, $r9, i0, $i5);
        $r10 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $i6 = r0.<java.lang.ThreadGroup: int nthreads>;
        $r10[$i6] = null;
        goto label5;

     label4:
        i0 = i0 + 1;
        goto label3;

     label5:
        exitmonitor r3;

     label6:
        goto label10;

     label7:
        $r11 := @caughtexception;

     label8:
        r5 = $r11;
        exitmonitor r3;

     label9:
        throw r5;

     label10:
        return;

        catch java.lang.Throwable from label0 to label1 with label7;
        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void list()
    {
        java.lang.ThreadGroup r0;
        java.io.PrintStream $r1;

        r0 := @this: java.lang.ThreadGroup;
        $r1 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke r0.<java.lang.ThreadGroup: void list(java.io.PrintStream,int)>($r1, 0);
        return;
    }

    void list(java.io.PrintStream, int)
    {
        java.lang.ThreadGroup r0, r3, $r12;
        java.io.PrintStream r1;
        int i0, i1, i2, i3, i4, i5, $i6, i7;
        java.lang.ThreadGroup[] r4, $r8, $r9;
        java.lang.Throwable r5, $r11;
        java.lang.Thread[] $r6;
        java.lang.Thread $r7;
        java.lang.Object[] $r10;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.io.PrintStream;
        i0 := @parameter1: int;
        r3 = r0;
        entermonitor r0;

     label0:
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>(" ");
        i1 = i1 + 1;
        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.Object)>(r0);
        i4 = i0 + 4;
        i5 = 0;

     label3:
        $i6 = r0.<java.lang.ThreadGroup: int nthreads>;
        if i5 >= $i6 goto label6;

        i2 = 0;

     label4:
        if i2 >= i4 goto label5;

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>(" ");
        i2 = i2 + 1;
        goto label4;

     label5:
        $r6 = r0.<java.lang.ThreadGroup: java.lang.Thread[] threads>;
        $r7 = $r6[i5];
        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.Object)>($r7);
        i5 = i5 + 1;
        goto label3;

     label6:
        i3 = r0.<java.lang.ThreadGroup: int ngroups>;
        $r8 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        if $r8 == null goto label7;

        $r9 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup[] groups>;
        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r9, i3);
        r4 = (java.lang.ThreadGroup[]) $r10;
        goto label8;

     label7:
        r4 = null;

     label8:
        exitmonitor r3;

     label9:
        goto label13;

     label10:
        $r11 := @caughtexception;

     label11:
        r5 = $r11;
        exitmonitor r3;

     label12:
        throw r5;

     label13:
        i7 = 0;

     label14:
        if i7 >= i3 goto label15;

        $r12 = r4[i7];
        virtualinvoke $r12.<java.lang.ThreadGroup: void list(java.io.PrintStream,int)>(r1, i4);
        i7 = i7 + 1;
        goto label14;

     label15:
        return;

        catch java.lang.Throwable from label0 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        java.lang.ThreadGroup r0, $r4, $r5;
        java.lang.Thread r1;
        java.lang.Throwable r2;
        java.lang.Thread$UncaughtExceptionHandler r3;
        boolean $z0;
        java.io.PrintStream $r6, $r13;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.String $r9, $r12;

        r0 := @this: java.lang.ThreadGroup;
        r1 := @parameter0: java.lang.Thread;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        if $r4 == null goto label0;

        $r5 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;
        virtualinvoke $r5.<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r1, r2);
        goto label2;

     label0:
        r3 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>();
        if r3 == null goto label1;

        interfaceinvoke r3.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r1, r2);
        goto label2;

     label1:
        $z0 = r2 instanceof java.lang.ThreadDeath;
        if $z0 != 0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream err>;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in thread \"");
        $r9 = virtualinvoke r1.<java.lang.Thread: java.lang.String getName()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>($r12);
        $r13 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r13);

     label2:
        return;
    }

    public boolean allowThreadSuspension(boolean)
    {
        java.lang.ThreadGroup r0;
        boolean z0;

        r0 := @this: java.lang.ThreadGroup;
        z0 := @parameter0: boolean;
        r0.<java.lang.ThreadGroup: boolean vmAllowSuspension> = z0;
        if z0 != 0 goto label0;

        staticinvoke <sun.misc.VM: void unsuspendSomeThreads()>();

     label0:
        return 1;
    }

    public java.lang.String toString()
    {
        java.lang.ThreadGroup r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r11;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[name=");
        $r6 = virtualinvoke r0.<java.lang.ThreadGroup: java.lang.String getName()>();
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",maxpri=");
        $i0 = r0.<java.lang.ThreadGroup: int maxPriority>;
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r11;
    }
}
