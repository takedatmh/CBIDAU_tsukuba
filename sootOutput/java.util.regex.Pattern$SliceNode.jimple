class java.util.regex.Pattern$SliceNode extends java.util.regex.Pattern$Node
{
    int[] buffer;

    void <init>(int[])
    {
        java.util.regex.Pattern$SliceNode r0;
        int[] r1;

        r0 := @this: java.util.regex.Pattern$SliceNode;
        r1 := @parameter0: int[];
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$SliceNode: int[] buffer> = r1;
        return;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$SliceNode r0;
        java.util.regex.Pattern$TreeInfo r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r3, $r5;
        java.util.regex.Pattern$Node $r6;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$SliceNode;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $r3 = r0.<java.util.regex.Pattern$SliceNode: int[] buffer>;
        $i1 = lengthof $r3;
        $i2 = $i0 + $i1;
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = $i2;
        $i3 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        $r5 = r0.<java.util.regex.Pattern$SliceNode: int[] buffer>;
        $i4 = lengthof $r5;
        $i5 = $i3 + $i4;
        r1.<java.util.regex.Pattern$TreeInfo: int maxLength> = $i5;
        $r6 = r0.<java.util.regex.Pattern$SliceNode: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;
    }
}
