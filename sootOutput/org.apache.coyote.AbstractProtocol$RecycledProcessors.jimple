public class org.apache.coyote.AbstractProtocol$RecycledProcessors extends java.util.concurrent.ConcurrentLinkedQueue
{
    private static final long serialVersionUID;
    private transient org.apache.coyote.AbstractProtocol$AbstractConnectionHandler handler;
    protected java.util.concurrent.atomic.AtomicInteger size;

    public void <init>(org.apache.coyote.AbstractProtocol$AbstractConnectionHandler)
    {
        org.apache.coyote.AbstractProtocol$RecycledProcessors r0;
        org.apache.coyote.AbstractProtocol$AbstractConnectionHandler r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: org.apache.coyote.AbstractProtocol$RecycledProcessors;
        r1 := @parameter0: org.apache.coyote.AbstractProtocol$AbstractConnectionHandler;
        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();
        $r2 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
        r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: java.util.concurrent.atomic.AtomicInteger size> = $r2;
        r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: org.apache.coyote.AbstractProtocol$AbstractConnectionHandler handler> = r1;
        return;
    }

    public boolean offer(org.apache.coyote.Processor)
    {
        org.apache.coyote.AbstractProtocol$RecycledProcessors r0;
        org.apache.coyote.Processor r1;
        int i0, $i1;
        boolean z0, z1, $z2;
        org.apache.coyote.AbstractProtocol$AbstractConnectionHandler $r2, $r6;
        org.apache.coyote.AbstractProtocol $r3;
        java.util.concurrent.atomic.AtomicInteger $r4, $r5;

        r0 := @this: org.apache.coyote.AbstractProtocol$RecycledProcessors;
        r1 := @parameter0: org.apache.coyote.Processor;
        $r2 = r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: org.apache.coyote.AbstractProtocol$AbstractConnectionHandler handler>;
        $r3 = virtualinvoke $r2.<org.apache.coyote.AbstractProtocol$AbstractConnectionHandler: org.apache.coyote.AbstractProtocol getProtocol()>();
        i0 = virtualinvoke $r3.<org.apache.coyote.AbstractProtocol: int getProcessorCache()>();
        if i0 != -1 goto label0;

        $z2 = 1;
        goto label2;

     label0:
        $r4 = r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: java.util.concurrent.atomic.AtomicInteger size>;
        $i1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        if $i1 >= i0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;
        z1 = 0;
        if z0 == 0 goto label3;

        z1 = specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>(r1);
        if z1 == 0 goto label3;

        $r5 = r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: java.util.concurrent.atomic.AtomicInteger size>;
        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label3:
        if z1 != 0 goto label4;

        $r6 = r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: org.apache.coyote.AbstractProtocol$AbstractConnectionHandler handler>;
        virtualinvoke $r6.<org.apache.coyote.AbstractProtocol$AbstractConnectionHandler: void unregister(org.apache.coyote.Processor)>(r1);

     label4:
        return z1;
    }

    public org.apache.coyote.Processor poll()
    {
        org.apache.coyote.AbstractProtocol$RecycledProcessors r0;
        org.apache.coyote.Processor r1;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        r0 := @this: org.apache.coyote.AbstractProtocol$RecycledProcessors;
        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();
        r1 = (org.apache.coyote.Processor) $r2;
        if r1 == null goto label0;

        $r3 = r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: java.util.concurrent.atomic.AtomicInteger size>;
        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label0:
        return r1;
    }

    public void clear()
    {
        org.apache.coyote.AbstractProtocol$RecycledProcessors r0;
        org.apache.coyote.Processor r1;
        org.apache.coyote.AbstractProtocol$AbstractConnectionHandler $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        r0 := @this: org.apache.coyote.AbstractProtocol$RecycledProcessors;
        r1 = virtualinvoke r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: org.apache.coyote.Processor poll()>();
        goto label1;

     label0:
        $r2 = r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: org.apache.coyote.AbstractProtocol$AbstractConnectionHandler handler>;
        virtualinvoke $r2.<org.apache.coyote.AbstractProtocol$AbstractConnectionHandler: void unregister(org.apache.coyote.Processor)>(r1);
        r1 = virtualinvoke r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: org.apache.coyote.Processor poll()>();

     label1:
        if r1 != null goto label0;

        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();
        $r3 = r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: java.util.concurrent.atomic.AtomicInteger size>;
        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);
        return;
    }

    public volatile java.lang.Object poll()
    {
        org.apache.coyote.AbstractProtocol$RecycledProcessors r0;
        org.apache.coyote.Processor $r1;

        r0 := @this: org.apache.coyote.AbstractProtocol$RecycledProcessors;
        $r1 = virtualinvoke r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: org.apache.coyote.Processor poll()>();
        return $r1;
    }

    public volatile boolean offer(java.lang.Object)
    {
        org.apache.coyote.AbstractProtocol$RecycledProcessors r0;
        java.lang.Object r1;
        org.apache.coyote.Processor $r2;
        boolean $z0;

        r0 := @this: org.apache.coyote.AbstractProtocol$RecycledProcessors;
        r1 := @parameter0: java.lang.Object;
        $r2 = (org.apache.coyote.Processor) r1;
        $z0 = virtualinvoke r0.<org.apache.coyote.AbstractProtocol$RecycledProcessors: boolean offer(org.apache.coyote.Processor)>($r2);
        return $z0;
    }
}
