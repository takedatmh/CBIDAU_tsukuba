final class sun.nio.ch.EPollPort extends sun.nio.ch.Port
{
    private static final int MAX_EPOLL_EVENTS;
    private static final int ENOENT;
    private final int epfd;
    private boolean closed;
    private final int[] sp;
    private final java.util.concurrent.atomic.AtomicInteger wakeupCount;
    private final long address;
    private final java.util.concurrent.ArrayBlockingQueue queue;
    private final sun.nio.ch.EPollPort$Event NEED_TO_POLL;
    private final sun.nio.ch.EPollPort$Event EXECUTE_TASK_OR_SHUTDOWN;

    void <init>(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool) throws java.io.IOException
    {
        sun.nio.ch.EPollPort r0;
        java.nio.channels.spi.AsynchronousChannelProvider r1;
        sun.nio.ch.ThreadPool r2;
        int[] r3;
        java.io.IOException r4, $r8;
        java.util.concurrent.atomic.AtomicInteger $r5;
        sun.nio.ch.EPollPort$Event $r6, $r7, $r11;
        int $i0, $i1, $i2, $i4;
        long $l5;
        java.util.concurrent.ArrayBlockingQueue $r9, $r10;

        r0 := @this: sun.nio.ch.EPollPort;
        r1 := @parameter0: java.nio.channels.spi.AsynchronousChannelProvider;
        r2 := @parameter1: sun.nio.ch.ThreadPool;
        specialinvoke r0.<sun.nio.ch.Port: void <init>(java.nio.channels.spi.AsynchronousChannelProvider,sun.nio.ch.ThreadPool)>(r1, r2);
        $r5 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
        r0.<sun.nio.ch.EPollPort: java.util.concurrent.atomic.AtomicInteger wakeupCount> = $r5;
        $r6 = new sun.nio.ch.EPollPort$Event;
        specialinvoke $r6.<sun.nio.ch.EPollPort$Event: void <init>(sun.nio.ch.Port$PollableChannel,int)>(null, 0);
        r0.<sun.nio.ch.EPollPort: sun.nio.ch.EPollPort$Event NEED_TO_POLL> = $r6;
        $r7 = new sun.nio.ch.EPollPort$Event;
        specialinvoke $r7.<sun.nio.ch.EPollPort$Event: void <init>(sun.nio.ch.Port$PollableChannel,int)>(null, 0);
        r0.<sun.nio.ch.EPollPort: sun.nio.ch.EPollPort$Event EXECUTE_TASK_OR_SHUTDOWN> = $r7;
        $i0 = staticinvoke <sun.nio.ch.EPoll: int epollCreate()>();
        r0.<sun.nio.ch.EPollPort: int epfd> = $i0;
        r3 = newarray (int)[2];

     label0:
        staticinvoke <sun.nio.ch.EPollPort: void socketpair(int[])>(r3);
        $i1 = r0.<sun.nio.ch.EPollPort: int epfd>;
        $i2 = r3[0];
        staticinvoke <sun.nio.ch.EPoll: int epollCtl(int,int,int,int)>($i1, 1, $i2, 1);

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r4 = $r8;
        $i4 = r0.<sun.nio.ch.EPollPort: int epfd>;
        staticinvoke <sun.nio.ch.EPollPort: void close0(int)>($i4);
        throw r4;

     label3:
        r0.<sun.nio.ch.EPollPort: int[] sp> = r3;
        $l5 = staticinvoke <sun.nio.ch.EPoll: long allocatePollArray(int)>(512);
        r0.<sun.nio.ch.EPollPort: long address> = $l5;
        $r9 = new java.util.concurrent.ArrayBlockingQueue;
        specialinvoke $r9.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(512);
        r0.<sun.nio.ch.EPollPort: java.util.concurrent.ArrayBlockingQueue queue> = $r9;
        $r10 = r0.<sun.nio.ch.EPollPort: java.util.concurrent.ArrayBlockingQueue queue>;
        $r11 = r0.<sun.nio.ch.EPollPort: sun.nio.ch.EPollPort$Event NEED_TO_POLL>;
        virtualinvoke $r10.<java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object)>($r11);
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    sun.nio.ch.EPollPort start()
    {
        sun.nio.ch.EPollPort r0;
        sun.nio.ch.EPollPort$EventHandlerTask $r1;

        r0 := @this: sun.nio.ch.EPollPort;
        $r1 = new sun.nio.ch.EPollPort$EventHandlerTask;
        specialinvoke $r1.<sun.nio.ch.EPollPort$EventHandlerTask: void <init>(sun.nio.ch.EPollPort,sun.nio.ch.EPollPort$1)>(r0, null);
        virtualinvoke r0.<sun.nio.ch.EPollPort: void startThreads(java.lang.Runnable)>($r1);
        return r0;
    }

    private void implClose()
    {
        sun.nio.ch.EPollPort r0, r2;
        java.lang.Throwable r3, $r4;
        boolean $z0;
        long $l0;
        int[] $r5, $r6;
        int $i1, $i2, $i3;

        r0 := @this: sun.nio.ch.EPollPort;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<sun.nio.ch.EPollPort: boolean closed>;
        if $z0 == 0 goto label2;

        exitmonitor r2;

     label1:
        return;

     label2:
        r0.<sun.nio.ch.EPollPort: boolean closed> = 1;
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        r3 = $r4;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $l0 = r0.<sun.nio.ch.EPollPort: long address>;
        staticinvoke <sun.nio.ch.EPoll: void freePollArray(long)>($l0);
        $r5 = r0.<sun.nio.ch.EPollPort: int[] sp>;
        $i1 = $r5[0];
        staticinvoke <sun.nio.ch.EPollPort: void close0(int)>($i1);
        $r6 = r0.<sun.nio.ch.EPollPort: int[] sp>;
        $i2 = $r6[1];
        staticinvoke <sun.nio.ch.EPollPort: void close0(int)>($i2);
        $i3 = r0.<sun.nio.ch.EPollPort: int epfd>;
        staticinvoke <sun.nio.ch.EPollPort: void close0(int)>($i3);
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void wakeup()
    {
        sun.nio.ch.EPollPort r0;
        java.io.IOException r1, $r4;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0, $i1;
        int[] $r3;
        java.lang.AssertionError $r5;

        r0 := @this: sun.nio.ch.EPollPort;
        $r2 = r0.<sun.nio.ch.EPollPort: java.util.concurrent.atomic.AtomicInteger wakeupCount>;
        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        if $i0 != 1 goto label3;

     label0:
        $r3 = r0.<sun.nio.ch.EPollPort: int[] sp>;
        $i1 = $r3[1];
        staticinvoke <sun.nio.ch.EPollPort: void interrupt(int)>($i1);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);
        throw $r5;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    void executeOnHandlerTask(java.lang.Runnable)
    {
        sun.nio.ch.EPollPort r0, r3;
        java.lang.Runnable r1;
        java.lang.Throwable r4, $r6;
        boolean $z0;
        java.util.concurrent.RejectedExecutionException $r5;

        r0 := @this: sun.nio.ch.EPollPort;
        r1 := @parameter0: java.lang.Runnable;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<sun.nio.ch.EPollPort: boolean closed>;
        if $z0 == 0 goto label1;

        $r5 = new java.util.concurrent.RejectedExecutionException;
        specialinvoke $r5.<java.util.concurrent.RejectedExecutionException: void <init>()>();
        throw $r5;

     label1:
        virtualinvoke r0.<sun.nio.ch.EPollPort: void offerTask(java.lang.Runnable)>(r1);
        specialinvoke r0.<sun.nio.ch.EPollPort: void wakeup()>();
        exitmonitor r3;

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        r4 = $r6;
        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void shutdownHandlerTasks()
    {
        sun.nio.ch.EPollPort r0;
        int i0, $i1;

        r0 := @this: sun.nio.ch.EPollPort;
        i0 = virtualinvoke r0.<sun.nio.ch.EPollPort: int threadCount()>();
        if i0 != 0 goto label0;

        specialinvoke r0.<sun.nio.ch.EPollPort: void implClose()>();
        goto label1;

     label0:
        $i1 = i0;
        i0 = i0 + -1;
        if $i1 <= 0 goto label1;

        specialinvoke r0.<sun.nio.ch.EPollPort: void wakeup()>();
        goto label0;

     label1:
        return;
    }

    void startPoll(int, int)
    {
        sun.nio.ch.EPollPort r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.AssertionError $r1;

        r0 := @this: sun.nio.ch.EPollPort;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i3 = r0.<sun.nio.ch.EPollPort: int epfd>;
        $i4 = i1 | 1073741824;
        i2 = staticinvoke <sun.nio.ch.EPoll: int epollCtl(int,int,int,int)>($i3, 3, i0, $i4);
        if i2 != 2 goto label0;

        $i5 = r0.<sun.nio.ch.EPollPort: int epfd>;
        $i6 = i1 | 1073741824;
        i2 = staticinvoke <sun.nio.ch.EPoll: int epollCtl(int,int,int,int)>($i5, 1, i0, $i6);

     label0:
        if i2 == 0 goto label1;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label1:
        return;
    }

    private static native void socketpair(int[]) throws java.io.IOException;

    private static native void interrupt(int) throws java.io.IOException;

    private static native void drain1(int) throws java.io.IOException;

    private static native void close0(int);

    static int access$100(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;
        int $i0;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        $i0 = r0.<sun.nio.ch.EPollPort: int epfd>;
        return $i0;
    }

    static long access$200(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;
        long $l0;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        $l0 = r0.<sun.nio.ch.EPollPort: long address>;
        return $l0;
    }

    static int[] access$300(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;
        int[] $r1;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        $r1 = r0.<sun.nio.ch.EPollPort: int[] sp>;
        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$400(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        $r1 = r0.<sun.nio.ch.EPollPort: java.util.concurrent.atomic.AtomicInteger wakeupCount>;
        return $r1;
    }

    static void access$500(int) throws java.io.IOException
    {
        int i0;

        i0 := @parameter0: int;
        staticinvoke <sun.nio.ch.EPollPort: void drain1(int)>(i0);
        return;
    }

    static sun.nio.ch.EPollPort$Event access$600(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;
        sun.nio.ch.EPollPort$Event $r1;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        $r1 = r0.<sun.nio.ch.EPollPort: sun.nio.ch.EPollPort$Event EXECUTE_TASK_OR_SHUTDOWN>;
        return $r1;
    }

    static java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;
        java.util.concurrent.ArrayBlockingQueue $r1;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        $r1 = r0.<sun.nio.ch.EPollPort: java.util.concurrent.ArrayBlockingQueue queue>;
        return $r1;
    }

    static sun.nio.ch.EPollPort$Event access$800(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;
        sun.nio.ch.EPollPort$Event $r1;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        $r1 = r0.<sun.nio.ch.EPollPort: sun.nio.ch.EPollPort$Event NEED_TO_POLL>;
        return $r1;
    }

    static void access$900(sun.nio.ch.EPollPort)
    {
        sun.nio.ch.EPollPort r0;

        r0 := @parameter0: sun.nio.ch.EPollPort;
        specialinvoke r0.<sun.nio.ch.EPollPort: void implClose()>();
        return;
    }

    static void <clinit>()
    {
        staticinvoke <sun.nio.ch.Util: void load()>();
        return;
    }
}
