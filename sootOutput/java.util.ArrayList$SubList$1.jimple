class java.util.ArrayList$SubList$1 extends java.lang.Object implements java.util.ListIterator
{
    int cursor;
    int lastRet;
    int expectedModCount;
    final int val$index;
    final int val$offset;
    final java.util.ArrayList$SubList this$1;

    void <init>(java.util.ArrayList$SubList, int, int)
    {
        java.util.ArrayList$SubList$1 r0;
        java.util.ArrayList$SubList r1, $r2;
        int i0, i1, $i2, $i3;
        java.util.ArrayList $r3;

        r0 := @this: java.util.ArrayList$SubList$1;
        r1 := @parameter0: java.util.ArrayList$SubList;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1> = r1;
        r0.<java.util.ArrayList$SubList$1: int val$index> = i0;
        r0.<java.util.ArrayList$SubList$1: int val$offset> = i1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i2 = r0.<java.util.ArrayList$SubList$1: int val$index>;
        r0.<java.util.ArrayList$SubList$1: int cursor> = $i2;
        r0.<java.util.ArrayList$SubList$1: int lastRet> = -1;
        $r2 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $r3 = $r2.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i3 = $r3.<java.util.ArrayList: int modCount>;
        r0.<java.util.ArrayList$SubList$1: int expectedModCount> = $i3;
        return;
    }

    public boolean hasNext()
    {
        java.util.ArrayList$SubList$1 r0;
        int $i0, $i1;
        java.util.ArrayList$SubList $r1;
        boolean $z0;

        r0 := @this: java.util.ArrayList$SubList$1;
        $i0 = r0.<java.util.ArrayList$SubList$1: int cursor>;
        $r1 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $i1 = $r1.<java.util.ArrayList$SubList: int size>;
        if $i0 == $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.ArrayList$SubList$1 r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object[] r1;
        java.util.ArrayList$SubList $r2, $r4;
        java.util.NoSuchElementException $r3;
        java.util.ArrayList $r5;
        java.util.ConcurrentModificationException $r6;
        java.lang.Object $r7;

        r0 := @this: java.util.ArrayList$SubList$1;
        virtualinvoke r0.<java.util.ArrayList$SubList$1: void checkForComodification()>();
        i0 = r0.<java.util.ArrayList$SubList$1: int cursor>;
        $r2 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $i2 = $r2.<java.util.ArrayList$SubList: int size>;
        if i0 < $i2 goto label0;

        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $r5 = $r4.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        r1 = staticinvoke <java.util.ArrayList: java.lang.Object[] access$200(java.util.ArrayList)>($r5);
        $i3 = r0.<java.util.ArrayList$SubList$1: int val$offset>;
        $i4 = $i3 + i0;
        $i5 = lengthof r1;
        if $i4 < $i5 goto label1;

        $r6 = new java.util.ConcurrentModificationException;
        specialinvoke $r6.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r6;

     label1:
        $i6 = i0 + 1;
        r0.<java.util.ArrayList$SubList$1: int cursor> = $i6;
        $i7 = r0.<java.util.ArrayList$SubList$1: int val$offset>;
        r0.<java.util.ArrayList$SubList$1: int lastRet> = i0;
        $i8 = $i7 + i0;
        $r7 = r1[$i8];
        return $r7;
    }

    public boolean hasPrevious()
    {
        java.util.ArrayList$SubList$1 r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.ArrayList$SubList$1;
        $i0 = r0.<java.util.ArrayList$SubList$1: int cursor>;
        if $i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object previous()
    {
        java.util.ArrayList$SubList$1 r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] r1;
        java.util.NoSuchElementException $r2;
        java.util.ArrayList$SubList $r3;
        java.util.ArrayList $r4;
        java.util.ConcurrentModificationException $r5;
        java.lang.Object $r6;

        r0 := @this: java.util.ArrayList$SubList$1;
        virtualinvoke r0.<java.util.ArrayList$SubList$1: void checkForComodification()>();
        $i2 = r0.<java.util.ArrayList$SubList$1: int cursor>;
        i0 = $i2 - 1;
        if i0 >= 0 goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $r4 = $r3.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        r1 = staticinvoke <java.util.ArrayList: java.lang.Object[] access$200(java.util.ArrayList)>($r4);
        $i3 = r0.<java.util.ArrayList$SubList$1: int val$offset>;
        $i4 = $i3 + i0;
        $i5 = lengthof r1;
        if $i4 < $i5 goto label1;

        $r5 = new java.util.ConcurrentModificationException;
        specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r5;

     label1:
        r0.<java.util.ArrayList$SubList$1: int cursor> = i0;
        $i6 = r0.<java.util.ArrayList$SubList$1: int val$offset>;
        r0.<java.util.ArrayList$SubList$1: int lastRet> = i0;
        $i7 = $i6 + i0;
        $r6 = r1[$i7];
        return $r6;
    }

    public int nextIndex()
    {
        java.util.ArrayList$SubList$1 r0;
        int $i0;

        r0 := @this: java.util.ArrayList$SubList$1;
        $i0 = r0.<java.util.ArrayList$SubList$1: int cursor>;
        return $i0;
    }

    public int previousIndex()
    {
        java.util.ArrayList$SubList$1 r0;
        int $i0, $i1;

        r0 := @this: java.util.ArrayList$SubList$1;
        $i0 = r0.<java.util.ArrayList$SubList$1: int cursor>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public void remove()
    {
        java.util.ArrayList$SubList$1 r0;
        java.lang.IndexOutOfBoundsException r1, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r2;
        java.util.ArrayList$SubList $r3, $r5;
        java.util.ArrayList $r6;
        java.util.ConcurrentModificationException $r8;

        r0 := @this: java.util.ArrayList$SubList$1;
        $i0 = r0.<java.util.ArrayList$SubList$1: int lastRet>;
        if $i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();
        throw $r2;

     label0:
        virtualinvoke r0.<java.util.ArrayList$SubList$1: void checkForComodification()>();

     label1:
        $r3 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $i1 = r0.<java.util.ArrayList$SubList$1: int lastRet>;
        virtualinvoke $r3.<java.util.ArrayList$SubList: java.lang.Object remove(int)>($i1);
        $i2 = r0.<java.util.ArrayList$SubList$1: int lastRet>;
        r0.<java.util.ArrayList$SubList$1: int cursor> = $i2;
        r0.<java.util.ArrayList$SubList$1: int lastRet> = -1;
        $r5 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $r6 = $r5.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i3 = $r6.<java.util.ArrayList: int modCount>;
        r0.<java.util.ArrayList$SubList$1: int expectedModCount> = $i3;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;
        r1 = $r7;
        $r8 = new java.util.ConcurrentModificationException;
        specialinvoke $r8.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r8;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void set(java.lang.Object)
    {
        java.util.ArrayList$SubList$1 r0;
        java.lang.Object r1;
        java.lang.IndexOutOfBoundsException r2, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r3;
        java.util.ArrayList$SubList $r4;
        java.util.ArrayList $r5;
        java.util.ConcurrentModificationException $r8;

        r0 := @this: java.util.ArrayList$SubList$1;
        r1 := @parameter0: java.lang.Object;
        $i0 = r0.<java.util.ArrayList$SubList$1: int lastRet>;
        if $i0 >= 0 goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();
        throw $r3;

     label0:
        virtualinvoke r0.<java.util.ArrayList$SubList$1: void checkForComodification()>();

     label1:
        $r4 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $r5 = $r4.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i1 = r0.<java.util.ArrayList$SubList$1: int val$offset>;
        $i2 = r0.<java.util.ArrayList$SubList$1: int lastRet>;
        $i3 = $i1 + $i2;
        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i3, r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;
        r2 = $r7;
        $r8 = new java.util.ConcurrentModificationException;
        specialinvoke $r8.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r8;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void add(java.lang.Object)
    {
        java.util.ArrayList$SubList$1 r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.util.ArrayList$SubList $r2, $r3;
        java.util.ArrayList $r4;
        java.lang.IndexOutOfBoundsException $r5, r6;
        java.util.ConcurrentModificationException $r7;

        r0 := @this: java.util.ArrayList$SubList$1;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.ArrayList$SubList$1: void checkForComodification()>();

     label0:
        i0 = r0.<java.util.ArrayList$SubList$1: int cursor>;
        $r2 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        virtualinvoke $r2.<java.util.ArrayList$SubList: void add(int,java.lang.Object)>(i0, r1);
        $i1 = i0 + 1;
        r0.<java.util.ArrayList$SubList$1: int cursor> = $i1;
        r0.<java.util.ArrayList$SubList$1: int lastRet> = -1;
        $r3 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $r4 = $r3.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i2 = $r4.<java.util.ArrayList: int modCount>;
        r0.<java.util.ArrayList$SubList$1: int expectedModCount> = $i2;

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.util.ConcurrentModificationException;
        specialinvoke $r7.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r7;

     label3:
        return;

        catch java.lang.IndexOutOfBoundsException from label0 to label1 with label2;
    }

    final void checkForComodification()
    {
        java.util.ArrayList$SubList$1 r0;
        int $i0, $i1;
        java.util.ArrayList$SubList $r1;
        java.util.ArrayList $r2;
        java.util.ConcurrentModificationException $r3;

        r0 := @this: java.util.ArrayList$SubList$1;
        $i0 = r0.<java.util.ArrayList$SubList$1: int expectedModCount>;
        $r1 = r0.<java.util.ArrayList$SubList$1: java.util.ArrayList$SubList this$1>;
        $r2 = $r1.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i1 = $r2.<java.util.ArrayList: int modCount>;
        if $i0 == $i1 goto label0;

        $r3 = new java.util.ConcurrentModificationException;
        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r3;

     label0:
        return;
    }
}
