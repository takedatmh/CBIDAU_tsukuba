public class sun.util.calendar.LocalGregorianCalendar extends sun.util.calendar.BaseCalendar
{
    private java.lang.String name;
    private sun.util.calendar.Era[] eras;

    static sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)
    {
        java.lang.String r0, r1, r2, r4, r6, r7, r8, r9, r10, $r15, $r18, $r32, r33, $r37, $r39, $r40, $r41, $r42, $r47;
        null_type n0;
        java.util.StringTokenizer r3, r5, $r36, $r38;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        long l0;
        int i1, $i2, $i3, $i4, $i5;
        sun.security.action.GetPropertyAction $r11;
        java.lang.Object $r12, $r22;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r19, $r20, $r28, $r29, $r30, $r31, $r44, $r45, $r46;
        sun.util.calendar.LocalGregorianCalendar$1 $r21;
        java.util.Properties r23;
        java.security.PrivilegedActionException $r24, r25;
        java.lang.RuntimeException $r26, $r43;
        java.lang.Exception $r27;
        java.util.ArrayList $r34, r35;
        sun.util.calendar.Era $r48, r49;
        sun.util.calendar.Era[] r50;
        sun.util.calendar.LocalGregorianCalendar $r52;

        r0 := @parameter0: java.lang.String;
        n0 = null;

     label0:
        $r11 = new sun.security.action.GetPropertyAction;
        specialinvoke $r11.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.home");
        $r12 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r11);
        r1 = (java.lang.String) $r12;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r15 = <java.io.File: java.lang.String separator>;
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");
        $r18 = <java.io.File: java.lang.String separator>;
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("calendars.properties");
        r2 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        $r21 = new sun.util.calendar.LocalGregorianCalendar$1;
        specialinvoke $r21.<sun.util.calendar.LocalGregorianCalendar$1: void <init>(java.lang.String)>(r2);
        $r22 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r21);
        r23 = (java.util.Properties) $r22;

     label1:
        goto label3;

     label2:
        $r24 := @caughtexception;
        r25 = $r24;
        $r26 = new java.lang.RuntimeException;
        $r27 = virtualinvoke r25.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r27);
        throw $r26;

     label3:
        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("calendar.");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".eras");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();
        r33 = virtualinvoke r23.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r32);
        if r33 != null goto label4;

        return null;

     label4:
        $r34 = new java.util.ArrayList;
        specialinvoke $r34.<java.util.ArrayList: void <init>()>();
        r35 = $r34;
        $r36 = new java.util.StringTokenizer;
        specialinvoke $r36.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r33, ";");
        r3 = $r36;

     label5:
        $z1 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z1 == 0 goto label14;

        $r37 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r4 = virtualinvoke $r37.<java.lang.String: java.lang.String trim()>();
        $r38 = new java.util.StringTokenizer;
        specialinvoke $r38.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, ",");
        r5 = $r38;
        r6 = null;
        z0 = 1;
        l0 = 0L;
        r7 = null;

     label6:
        $z2 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z2 == 0 goto label13;

        r8 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();
        i1 = virtualinvoke r8.<java.lang.String: int indexOf(int)>(61);
        if i1 != -1 goto label7;

        return null;

     label7:
        r9 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, i1);
        $i2 = i1 + 1;
        r10 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i2);
        $r39 = "name";
        $z3 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r9);
        if $z3 == 0 goto label8;

        r6 = r10;
        goto label12;

     label8:
        $r40 = "since";
        $z4 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>(r9);
        if $z4 == 0 goto label10;

        $z5 = virtualinvoke r10.<java.lang.String: boolean endsWith(java.lang.String)>("u");
        if $z5 == 0 goto label9;

        z0 = 0;
        $i3 = virtualinvoke r10.<java.lang.String: int length()>();
        $i4 = $i3 - 1;
        $r41 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);
        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r41);
        goto label12;

     label9:
        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r10);
        goto label12;

     label10:
        $r42 = "abbr";
        $z6 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r9);
        if $z6 == 0 goto label11;

        r7 = r10;
        goto label12;

     label11:
        $r43 = new java.lang.RuntimeException;
        $r44 = new java.lang.StringBuilder;
        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key word: ");
        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);
        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r43.<java.lang.RuntimeException: void <init>(java.lang.String)>($r47);
        throw $r43;

     label12:
        goto label6;

     label13:
        $r48 = new sun.util.calendar.Era;
        specialinvoke $r48.<sun.util.calendar.Era: void <init>(java.lang.String,java.lang.String,long,boolean)>(r6, r7, l0, z0);
        r49 = $r48;
        interfaceinvoke r35.<java.util.List: boolean add(java.lang.Object)>(r49);
        goto label5;

     label14:
        $i5 = interfaceinvoke r35.<java.util.List: int size()>();
        r50 = newarray (sun.util.calendar.Era)[$i5];
        interfaceinvoke r35.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r50);
        $r52 = new sun.util.calendar.LocalGregorianCalendar;
        specialinvoke $r52.<sun.util.calendar.LocalGregorianCalendar: void <init>(java.lang.String,sun.util.calendar.Era[])>(r0, r50);
        return $r52;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    private void <init>(java.lang.String, sun.util.calendar.Era[])
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        java.lang.String r1;
        sun.util.calendar.Era[] r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.util.calendar.Era[];
        specialinvoke r0.<sun.util.calendar.BaseCalendar: void <init>()>();
        r0.<sun.util.calendar.LocalGregorianCalendar: java.lang.String name> = r1;
        r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era[] eras> = r2;
        virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: void setEras(sun.util.calendar.Era[])>(r2);
        return;
    }

    public java.lang.String getName()
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        java.lang.String $r1;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        $r1 = r0.<sun.util.calendar.LocalGregorianCalendar: java.lang.String name>;
        return $r1;
    }

    public sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate()
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        long $l0;
        sun.util.calendar.LocalGregorianCalendar$Date $r1, $r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r1 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate()>();
        $r2 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>($l0, $r1);
        return $r2;
    }

    public sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        long l0;
        sun.util.calendar.LocalGregorianCalendar$Date $r1, $r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate()>();
        $r2 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, $r1);
        return $r2;
    }

    public sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long, java.util.TimeZone)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        long l0;
        java.util.TimeZone r1;
        sun.util.calendar.LocalGregorianCalendar$Date $r2, $r3;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.TimeZone;
        $r2 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate(java.util.TimeZone)>(r1);
        $r3 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, $r2);
        return $r3;
    }

    public sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long, sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        long l0;
        sun.util.calendar.CalendarDate r1, $r3;
        sun.util.calendar.LocalGregorianCalendar$Date r2, $r4;
        int $i1;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: sun.util.calendar.CalendarDate;
        $r3 = specialinvoke r0.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, r1);
        r2 = (sun.util.calendar.LocalGregorianCalendar$Date) $r3;
        $i1 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getZoneOffset()>();
        $r4 = specialinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date adjustYear(sun.util.calendar.LocalGregorianCalendar$Date,long,int)>(r2, l0, $i1);
        return $r4;
    }

    private sun.util.calendar.LocalGregorianCalendar$Date adjustYear(sun.util.calendar.LocalGregorianCalendar$Date, long, int)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.LocalGregorianCalendar$Date r1;
        long l0, l3, $l6;
        int i1, i2, i4, $i5, $i8, $i9, $i10, $i11;
        sun.util.calendar.Era r2;
        sun.util.calendar.Era[] $r3, $r4;
        boolean $z0;
        byte $b7;
        sun.util.calendar.CalendarDate $r5;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.LocalGregorianCalendar$Date;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        $r3 = r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era[] eras>;
        $i5 = lengthof $r3;
        i2 = $i5 - 1;

     label0:
        if i2 < 0 goto label3;

        $r4 = r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era[] eras>;
        r2 = $r4[i2];
        l3 = virtualinvoke r2.<sun.util.calendar.Era: long getSince(java.util.TimeZone)>(null);
        $z0 = virtualinvoke r2.<sun.util.calendar.Era: boolean isLocalTime()>();
        if $z0 == 0 goto label1;

        $l6 = (long) i1;
        l3 = l3 - $l6;

     label1:
        $b7 = l0 cmp l3;
        if $b7 < 0 goto label2;

        virtualinvoke r1.<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalEra(sun.util.calendar.Era)>(r2);
        $i8 = virtualinvoke r1.<sun.util.calendar.LocalGregorianCalendar$Date: int getNormalizedYear()>();
        $r5 = virtualinvoke r2.<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>();
        $i9 = virtualinvoke $r5.<sun.util.calendar.CalendarDate: int getYear()>();
        $i10 = $i8 - $i9;
        i4 = $i10 + 1;
        virtualinvoke r1.<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalYear(int)>(i4);
        goto label3;

     label2:
        i2 = i2 + -1;
        goto label0;

     label3:
        if i2 >= 0 goto label4;

        virtualinvoke r1.<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalEra(sun.util.calendar.Era)>(null);
        $i11 = virtualinvoke r1.<sun.util.calendar.LocalGregorianCalendar$Date: int getNormalizedYear()>();
        virtualinvoke r1.<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalYear(int)>($i11);

     label4:
        virtualinvoke r1.<sun.util.calendar.LocalGregorianCalendar$Date: void setNormalized(boolean)>(1);
        return r1;
    }

    public sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate()
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.LocalGregorianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        $r1 = new sun.util.calendar.LocalGregorianCalendar$Date;
        specialinvoke $r1.<sun.util.calendar.LocalGregorianCalendar$Date: void <init>()>();
        return $r1;
    }

    public sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate(java.util.TimeZone)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        java.util.TimeZone r1;
        sun.util.calendar.LocalGregorianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: java.util.TimeZone;
        $r2 = new sun.util.calendar.LocalGregorianCalendar$Date;
        specialinvoke $r2.<sun.util.calendar.LocalGregorianCalendar$Date: void <init>(java.util.TimeZone)>(r1);
        return $r2;
    }

    public boolean validate(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.CalendarDate r1, $r4;
        sun.util.calendar.LocalGregorianCalendar$Date r2;
        sun.util.calendar.Era r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        r2 = (sun.util.calendar.LocalGregorianCalendar$Date) r1;
        r3 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.Era getEra()>();
        if r3 == null goto label1;

        $z0 = specialinvoke r0.<sun.util.calendar.LocalGregorianCalendar: boolean validateEra(sun.util.calendar.Era)>(r3);
        if $z0 != 0 goto label0;

        return 0;

     label0:
        $r4 = virtualinvoke r3.<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>();
        $i0 = virtualinvoke $r4.<sun.util.calendar.CalendarDate: int getYear()>();
        $i1 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getYear()>();
        $i2 = $i0 + $i1;
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setNormalizedYear(int)>($i2);
        goto label2;

     label1:
        $i3 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getYear()>();
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setNormalizedYear(int)>($i3);

     label2:
        $z1 = specialinvoke r0.<sun.util.calendar.BaseCalendar: boolean validate(sun.util.calendar.CalendarDate)>(r2);
        return $z1;
    }

    private boolean validateEra(sun.util.calendar.Era)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.Era r1, $r4;
        int i0, $i1;
        sun.util.calendar.Era[] $r2, $r3;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.Era;
        i0 = 0;

     label0:
        $r2 = r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era[] eras>;
        $i1 = lengthof $r2;
        if i0 >= $i1 goto label2;

        $r3 = r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era[] eras>;
        $r4 = $r3[i0];
        if r1 != $r4 goto label1;

        return 1;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return 0;
    }

    public boolean normalize(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.CalendarDate r1, r4, $r8;
        sun.util.calendar.LocalGregorianCalendar$Date r2;
        boolean z0, $z1, $z3;
        long l0, l8, l9, l12;
        int i1, i2, i3, i4, i5, i6, i7, $i10, $i14, $i15, $i16, i17;
        sun.util.calendar.Era r3;
        sun.util.calendar.Era[] $r5, $r6;
        byte $b11, $b13;
        java.util.TimeZone $r7;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $z1 = virtualinvoke r1.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z1 == 0 goto label0;

        return 1;

     label0:
        virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: void normalizeYear(sun.util.calendar.CalendarDate)>(r1);
        r2 = (sun.util.calendar.LocalGregorianCalendar$Date) r1;
        specialinvoke r0.<sun.util.calendar.BaseCalendar: boolean normalize(sun.util.calendar.CalendarDate)>(r2);
        z0 = 0;
        l0 = 0L;
        i1 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getNormalizedYear()>();
        r3 = null;
        $r5 = r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era[] eras>;
        $i10 = lengthof $r5;
        i2 = $i10 - 1;

     label1:
        if i2 < 0 goto label10;

        $r6 = r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.Era[] eras>;
        r3 = $r6[i2];
        $z3 = virtualinvoke r3.<sun.util.calendar.Era: boolean isLocalTime()>();
        if $z3 == 0 goto label7;

        r4 = virtualinvoke r3.<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>();
        i3 = virtualinvoke r4.<sun.util.calendar.CalendarDate: int getYear()>();
        if i1 <= i3 goto label2;

        goto label10;

     label2:
        if i1 != i3 goto label6;

        i4 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getMonth()>();
        i5 = virtualinvoke r4.<sun.util.calendar.CalendarDate: int getMonth()>();
        if i4 <= i5 goto label3;

        goto label10;

     label3:
        if i4 != i5 goto label6;

        i6 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getDayOfMonth()>();
        i7 = virtualinvoke r4.<sun.util.calendar.CalendarDate: int getDayOfMonth()>();
        if i6 <= i7 goto label4;

        goto label10;

     label4:
        if i6 != i7 goto label6;

        l8 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: long getTimeOfDay()>();
        l9 = virtualinvoke r4.<sun.util.calendar.CalendarDate: long getTimeOfDay()>();
        $b11 = l8 cmp l9;
        if $b11 < 0 goto label5;

        goto label10;

     label5:
        i2 = i2 + -1;
        goto label10;

     label6:
        goto label9;

     label7:
        if z0 != 0 goto label8;

        l0 = specialinvoke r0.<sun.util.calendar.BaseCalendar: long getTime(sun.util.calendar.CalendarDate)>(r1);
        z0 = 1;

     label8:
        $r7 = virtualinvoke r1.<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>();
        l12 = virtualinvoke r3.<sun.util.calendar.Era: long getSince(java.util.TimeZone)>($r7);
        $b13 = l0 cmp l12;
        if $b13 < 0 goto label9;

        goto label10;

     label9:
        i2 = i2 + -1;
        goto label1;

     label10:
        if i2 < 0 goto label11;

        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalEra(sun.util.calendar.Era)>(r3);
        $i14 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getNormalizedYear()>();
        $r8 = virtualinvoke r3.<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>();
        $i15 = virtualinvoke $r8.<sun.util.calendar.CalendarDate: int getYear()>();
        $i16 = $i14 - $i15;
        i17 = $i16 + 1;
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalYear(int)>(i17);
        goto label12;

     label11:
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.LocalGregorianCalendar$Date setEra(sun.util.calendar.Era)>(null);
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setLocalYear(int)>(i1);
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setNormalizedYear(int)>(i1);

     label12:
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setNormalized(boolean)>(1);
        return 1;
    }

    void normalizeMonth(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.CalendarDate r1;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: void normalizeYear(sun.util.calendar.CalendarDate)>(r1);
        specialinvoke r0.<sun.util.calendar.BaseCalendar: void normalizeMonth(sun.util.calendar.CalendarDate)>(r1);
        return;
    }

    void normalizeYear(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.CalendarDate r1, $r4;
        sun.util.calendar.LocalGregorianCalendar$Date r2;
        sun.util.calendar.Era r3;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        r2 = (sun.util.calendar.LocalGregorianCalendar$Date) r1;
        r3 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: sun.util.calendar.Era getEra()>();
        if r3 == null goto label0;

        $z0 = specialinvoke r0.<sun.util.calendar.LocalGregorianCalendar: boolean validateEra(sun.util.calendar.Era)>(r3);
        if $z0 != 0 goto label1;

     label0:
        $i0 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getYear()>();
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setNormalizedYear(int)>($i0);
        goto label2;

     label1:
        $r4 = virtualinvoke r3.<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>();
        $i1 = virtualinvoke $r4.<sun.util.calendar.CalendarDate: int getYear()>();
        $i2 = virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: int getYear()>();
        $i3 = $i1 + $i2;
        $i4 = $i3 - 1;
        virtualinvoke r2.<sun.util.calendar.LocalGregorianCalendar$Date: void setNormalizedYear(int)>($i4);

     label2:
        return;
    }

    public boolean isLeapYear(int)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        int i0;
        boolean $z0;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        i0 := @parameter0: int;
        $z0 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isGregorianLeapYear(int)>(i0);
        return $z0;
    }

    public boolean isLeapYear(sun.util.calendar.Era, int)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.Era r1;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;
        sun.util.calendar.CalendarDate $r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.Era;
        i0 := @parameter1: int;
        if r1 != null goto label0;

        $z0 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: boolean isLeapYear(int)>(i0);
        return $z0;

     label0:
        $r2 = virtualinvoke r1.<sun.util.calendar.Era: sun.util.calendar.CalendarDate getSinceDate()>();
        $i2 = virtualinvoke $r2.<sun.util.calendar.CalendarDate: int getYear()>();
        $i3 = $i2 + i0;
        i1 = $i3 - 1;
        $z1 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: boolean isLeapYear(int)>(i1);
        return $z1;
    }

    public void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate, long)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0, $l1, $l2;
        sun.util.calendar.LocalGregorianCalendar$Date r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 := @parameter1: long;
        r2 = (sun.util.calendar.LocalGregorianCalendar$Date) r1;
        specialinvoke r0.<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r2, l0);
        $l1 = l0 - 719163L;
        $l2 = $l1 * 86400000L;
        specialinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date adjustYear(sun.util.calendar.LocalGregorianCalendar$Date,long,int)>(r2, $l2, 0);
        return;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate(long, sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        long l0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.LocalGregorianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: sun.util.calendar.CalendarDate;
        $r2 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, r1);
        return $r2;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate(long, java.util.TimeZone)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        long l0;
        java.util.TimeZone r1;
        sun.util.calendar.LocalGregorianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.TimeZone;
        $r2 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long,java.util.TimeZone)>(l0, r1);
        return $r2;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate(long)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        long l0;
        sun.util.calendar.LocalGregorianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate(long)>(l0);
        return $r1;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate()
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.LocalGregorianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        $r1 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date getCalendarDate()>();
        return $r1;
    }

    public volatile sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        java.util.TimeZone r1;
        sun.util.calendar.LocalGregorianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        r1 := @parameter0: java.util.TimeZone;
        $r2 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate(java.util.TimeZone)>(r1);
        return $r2;
    }

    public volatile sun.util.calendar.CalendarDate newCalendarDate()
    {
        sun.util.calendar.LocalGregorianCalendar r0;
        sun.util.calendar.LocalGregorianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.LocalGregorianCalendar;
        $r1 = virtualinvoke r0.<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate()>();
        return $r1;
    }
}
