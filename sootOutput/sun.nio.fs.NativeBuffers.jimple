class sun.nio.fs.NativeBuffers extends java.lang.Object
{
    private static final sun.misc.Unsafe unsafe;
    private static final int TEMP_BUF_POOL_SIZE;
    private static java.lang.ThreadLocal threadLocal;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        sun.nio.fs.NativeBuffers r0;

        r0 := @this: sun.nio.fs.NativeBuffers;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static sun.nio.fs.NativeBuffer allocNativeBuffer(int)
    {
        int i0;
        sun.nio.fs.NativeBuffer $r0;

        i0 := @parameter0: int;
        if i0 >= 2048 goto label0;

        i0 = 2048;

     label0:
        $r0 = new sun.nio.fs.NativeBuffer;
        specialinvoke $r0.<sun.nio.fs.NativeBuffer: void <init>(int)>(i0);
        return $r0;
    }

    static sun.nio.fs.NativeBuffer getNativeBufferFromCache(int)
    {
        int i0, i1, $i2;
        java.lang.ThreadLocal $r0;
        sun.nio.fs.NativeBuffer[] r1;
        sun.nio.fs.NativeBuffer r2;
        java.lang.Object $r3;

        i0 := @parameter0: int;
        $r0 = <sun.nio.fs.NativeBuffers: java.lang.ThreadLocal threadLocal>;
        $r3 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        r1 = (sun.nio.fs.NativeBuffer[]) $r3;
        if r1 == null goto label2;

        i1 = 0;

     label0:
        if i1 >= 3 goto label2;

        r2 = r1[i1];
        if r2 == null goto label1;

        $i2 = virtualinvoke r2.<sun.nio.fs.NativeBuffer: int size()>();
        if $i2 < i0 goto label1;

        r1[i1] = null;
        return r2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return null;
    }

    static sun.nio.fs.NativeBuffer getNativeBuffer(int)
    {
        int i0;
        sun.nio.fs.NativeBuffer r0, $r1;

        i0 := @parameter0: int;
        r0 = staticinvoke <sun.nio.fs.NativeBuffers: sun.nio.fs.NativeBuffer getNativeBufferFromCache(int)>(i0);
        if r0 == null goto label0;

        virtualinvoke r0.<sun.nio.fs.NativeBuffer: void setOwner(java.lang.Object)>(null);
        return r0;

     label0:
        $r1 = staticinvoke <sun.nio.fs.NativeBuffers: sun.nio.fs.NativeBuffer allocNativeBuffer(int)>(i0);
        return $r1;
    }

    static void releaseNativeBuffer(sun.nio.fs.NativeBuffer)
    {
        sun.nio.fs.NativeBuffer r0, r3, $r7;
        java.lang.ThreadLocal $r1, $r6;
        sun.nio.fs.NativeBuffer[] r2, r5;
        int i0, i1, $i2, $i3;
        java.lang.Object $r4;
        sun.misc.Cleaner $r8, $r9;

        r0 := @parameter0: sun.nio.fs.NativeBuffer;
        $r1 = <sun.nio.fs.NativeBuffers: java.lang.ThreadLocal threadLocal>;
        $r4 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();
        r2 = (sun.nio.fs.NativeBuffer[]) $r4;
        if r2 != null goto label0;

        r5 = newarray (sun.nio.fs.NativeBuffer)[3];
        r5[0] = r0;
        $r6 = <sun.nio.fs.NativeBuffers: java.lang.ThreadLocal threadLocal>;
        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>(r5);
        return;

     label0:
        i0 = 0;

     label1:
        if i0 >= 3 goto label3;

        $r7 = r2[i0];
        if $r7 != null goto label2;

        r2[i0] = r0;
        return;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        i1 = 0;

     label4:
        if i1 >= 3 goto label6;

        r3 = r2[i1];
        $i2 = virtualinvoke r3.<sun.nio.fs.NativeBuffer: int size()>();
        $i3 = virtualinvoke r0.<sun.nio.fs.NativeBuffer: int size()>();
        if $i2 >= $i3 goto label5;

        $r8 = virtualinvoke r3.<sun.nio.fs.NativeBuffer: sun.misc.Cleaner cleaner()>();
        virtualinvoke $r8.<sun.misc.Cleaner: void clean()>();
        r2[i1] = r0;
        return;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        $r9 = virtualinvoke r0.<sun.nio.fs.NativeBuffer: sun.misc.Cleaner cleaner()>();
        virtualinvoke $r9.<sun.misc.Cleaner: void clean()>();
        return;
    }

    static void copyCStringToNativeBuffer(byte[], sun.nio.fs.NativeBuffer)
    {
        byte[] r0;
        sun.nio.fs.NativeBuffer r1;
        int $i0, $i3, $i4;
        long l1, l2, $l5, $l6, $l8, $l9, $l10;
        boolean $z0;
        byte $b7;
        java.lang.AssertionError $r2;
        sun.misc.Unsafe $r3, $r4;

        r0 := @parameter0: byte[];
        r1 := @parameter1: sun.nio.fs.NativeBuffer;
        $i0 = <sun.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET>;
        l1 = (long) $i0;
        $i3 = lengthof r0;
        l2 = (long) $i3;
        $z0 = <sun.nio.fs.NativeBuffers: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i4 = virtualinvoke r1.<sun.nio.fs.NativeBuffer: int size()>();
        $l5 = (long) $i4;
        $l6 = l2 + 1L;
        $b7 = $l5 cmp $l6;
        if $b7 >= 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = <sun.nio.fs.NativeBuffers: sun.misc.Unsafe unsafe>;
        $l8 = virtualinvoke r1.<sun.nio.fs.NativeBuffer: long address()>();
        virtualinvoke $r3.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(r0, l1, null, $l8, l2);
        $r4 = <sun.nio.fs.NativeBuffers: sun.misc.Unsafe unsafe>;
        $l9 = virtualinvoke r1.<sun.nio.fs.NativeBuffer: long address()>();
        $l10 = $l9 + l2;
        virtualinvoke $r4.<sun.misc.Unsafe: void putByte(long,byte)>($l10, 0);
        return;
    }

    static sun.nio.fs.NativeBuffer asNativeBuffer(byte[])
    {
        byte[] r0;
        sun.nio.fs.NativeBuffer r1;
        int $i0, $i1;

        r0 := @parameter0: byte[];
        $i0 = lengthof r0;
        $i1 = $i0 + 1;
        r1 = staticinvoke <sun.nio.fs.NativeBuffers: sun.nio.fs.NativeBuffer getNativeBuffer(int)>($i1);
        staticinvoke <sun.nio.fs.NativeBuffers: void copyCStringToNativeBuffer(byte[],sun.nio.fs.NativeBuffer)>(r0, r1);
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.misc.Unsafe $r1;
        java.lang.ThreadLocal $r2;

        $r0 = class "sun/nio/fs/NativeBuffers";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.fs.NativeBuffers: boolean $assertionsDisabled> = $z1;
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <sun.nio.fs.NativeBuffers: sun.misc.Unsafe unsafe> = $r1;
        $r2 = new java.lang.ThreadLocal;
        specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>();
        <sun.nio.fs.NativeBuffers: java.lang.ThreadLocal threadLocal> = $r2;
        return;
    }
}
