class sun.misc.Launcher$AppClassLoader extends java.net.URLClassLoader
{
    static final boolean $assertionsDisabled;

    public static java.lang.ClassLoader getAppClassLoader(java.lang.ClassLoader) throws java.io.IOException
    {
        java.lang.ClassLoader r0, $r6;
        java.lang.String r1;
        java.io.File[] r2, $r3;
        sun.misc.Launcher$AppClassLoader$1 $r4;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");
        if r1 != null goto label0;

        $r3 = newarray (java.io.File)[0];
        goto label1;

     label0:
        $r3 = staticinvoke <sun.misc.Launcher: java.io.File[] access$200(java.lang.String)>(r1);

     label1:
        r2 = $r3;
        $r4 = new sun.misc.Launcher$AppClassLoader$1;
        specialinvoke $r4.<sun.misc.Launcher$AppClassLoader$1: void <init>(java.lang.String,java.io.File[],java.lang.ClassLoader)>(r1, r2, r0);
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        $r6 = (java.lang.ClassLoader) $r5;
        return $r6;
    }

    void <init>(java.net.URL[], java.lang.ClassLoader)
    {
        sun.misc.Launcher$AppClassLoader r0;
        java.net.URL[] r1;
        java.lang.ClassLoader r2;
        java.net.URLStreamHandlerFactory $r3;

        r0 := @this: sun.misc.Launcher$AppClassLoader;
        r1 := @parameter0: java.net.URL[];
        r2 := @parameter1: java.lang.ClassLoader;
        $r3 = staticinvoke <sun.misc.Launcher: java.net.URLStreamHandlerFactory access$100()>();
        specialinvoke r0.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.net.URLStreamHandlerFactory)>(r1, r2, $r3);
        return;
    }

    public java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        sun.misc.Launcher$AppClassLoader r0;
        java.lang.String r1, $r3;
        boolean z0;
        int i0;
        java.lang.SecurityManager r2;
        java.lang.Class $r4;

        r0 := @this: sun.misc.Launcher$AppClassLoader;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 == -1 goto label0;

        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        virtualinvoke r2.<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>($r3);

     label0:
        $r4 = specialinvoke r0.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, z0);
        return $r4;
    }

    protected java.security.PermissionCollection getPermissions(java.security.CodeSource)
    {
        sun.misc.Launcher$AppClassLoader r0;
        java.security.CodeSource r1;
        java.security.PermissionCollection r2;
        java.lang.RuntimePermission $r3;

        r0 := @this: sun.misc.Launcher$AppClassLoader;
        r1 := @parameter0: java.security.CodeSource;
        r2 = specialinvoke r0.<java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>(r1);
        $r3 = new java.lang.RuntimePermission;
        specialinvoke $r3.<java.lang.RuntimePermission: void <init>(java.lang.String)>("exitVM");
        virtualinvoke r2.<java.security.PermissionCollection: void add(java.security.Permission)>($r3);
        return r2;
    }

    private void appendToClassPathForInstrumentation(java.lang.String)
    {
        sun.misc.Launcher$AppClassLoader r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r2;
        java.io.File $r3;
        java.net.URL $r4;

        r0 := @this: sun.misc.Launcher$AppClassLoader;
        r1 := @parameter0: java.lang.String;
        $z0 = <sun.misc.Launcher$AppClassLoader: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = new java.io.File;
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);
        $r4 = staticinvoke <sun.misc.Launcher: java.net.URL getFileURL(java.io.File)>($r3);
        specialinvoke r0.<java.net.URLClassLoader: void addURL(java.net.URL)>($r4);
        return;
    }

    private static java.security.AccessControlContext getContext(java.io.File[]) throws java.net.MalformedURLException
    {
        java.io.File[] r0;
        sun.misc.PathPermissions $r1, r2;
        java.security.ProtectionDomain r3, $r5;
        java.security.AccessControlContext r4, $r9;
        java.security.CodeSource $r6;
        java.net.URL $r7;
        java.security.cert.Certificate[] $r8;
        java.security.ProtectionDomain[] $r10;

        r0 := @parameter0: java.io.File[];
        $r1 = new sun.misc.PathPermissions;
        specialinvoke $r1.<sun.misc.PathPermissions: void <init>(java.io.File[])>(r0);
        r2 = $r1;
        $r5 = new java.security.ProtectionDomain;
        $r6 = new java.security.CodeSource;
        $r7 = virtualinvoke r2.<sun.misc.PathPermissions: java.net.URL getCodeBase()>();
        $r8 = (java.security.cert.Certificate[]) null;
        specialinvoke $r6.<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>($r7, $r8);
        specialinvoke $r5.<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>($r6, r2);
        r3 = $r5;
        $r9 = new java.security.AccessControlContext;
        $r10 = newarray (java.security.ProtectionDomain)[1];
        $r10[0] = r3;
        specialinvoke $r9.<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>($r10);
        r4 = $r9;
        return r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/misc/Launcher";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.misc.Launcher$AppClassLoader: boolean $assertionsDisabled> = $z1;
        staticinvoke <java.lang.ClassLoader: boolean registerAsParallelCapable()>();
        return;
    }
}
