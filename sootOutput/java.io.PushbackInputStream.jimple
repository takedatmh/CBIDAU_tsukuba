public class java.io.PushbackInputStream extends java.io.FilterInputStream
{
    protected byte[] buf;
    protected int pos;

    private void ensureOpen() throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        java.io.InputStream $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.PushbackInputStream;
        $r1 = r0.<java.io.PushbackInputStream: java.io.InputStream in>;
        if $r1 != null goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");
        throw $r2;

     label0:
        return;
    }

    public void <init>(java.io.InputStream, int)
    {
        java.io.PushbackInputStream r0;
        java.io.InputStream r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;

        r0 := @this: java.io.PushbackInputStream;
        r1 := @parameter0: java.io.InputStream;
        i0 := @parameter1: int;
        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);
        if i0 > 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");
        throw $r2;

     label0:
        $r3 = newarray (byte)[i0];
        r0.<java.io.PushbackInputStream: byte[] buf> = $r3;
        r0.<java.io.PushbackInputStream: int pos> = i0;
        return;
    }

    public void <init>(java.io.InputStream)
    {
        java.io.PushbackInputStream r0;
        java.io.InputStream r1;

        r0 := @this: java.io.PushbackInputStream;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r1, 1);
        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        int $i0, $i1, $i2, $i3, $i6;
        byte[] $r1, $r2;
        byte $b4;
        short $s5;

        r0 := @this: java.io.PushbackInputStream;
        specialinvoke r0.<java.io.PushbackInputStream: void ensureOpen()>();
        $i1 = r0.<java.io.PushbackInputStream: int pos>;
        $r1 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i2 = lengthof $r1;
        if $i1 >= $i2 goto label0;

        $r2 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i0 = r0.<java.io.PushbackInputStream: int pos>;
        $i3 = $i0 + 1;
        r0.<java.io.PushbackInputStream: int pos> = $i3;
        $b4 = $r2[$i0];
        $s5 = $b4 & 255;
        return $s5;

     label0:
        $i6 = specialinvoke r0.<java.io.FilterInputStream: int read()>();
        return $i6;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        byte[] r1, $r4, $r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12;
        java.lang.NullPointerException $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: java.io.PushbackInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.io.PushbackInputStream: void ensureOpen()>();
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        if i1 <= $i4 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label2:
        if i1 != 0 goto label3;

        return 0;

     label3:
        $r4 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i5 = lengthof $r4;
        $i6 = r0.<java.io.PushbackInputStream: int pos>;
        i2 = $i5 - $i6;
        if i2 <= 0 goto label5;

        if i1 >= i2 goto label4;

        i2 = i1;

     label4:
        $r5 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i7 = r0.<java.io.PushbackInputStream: int pos>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i7, r1, i0, i2);
        $i8 = r0.<java.io.PushbackInputStream: int pos>;
        $i9 = $i8 + i2;
        r0.<java.io.PushbackInputStream: int pos> = $i9;
        i0 = i0 + i2;
        i1 = i1 - i2;

     label5:
        if i1 <= 0 goto label9;

        i10 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>(r1, i0, i1);
        if i10 != -1 goto label8;

        if i2 != 0 goto label6;

        $i11 = -1;
        goto label7;

     label6:
        $i11 = i2;

     label7:
        return $i11;

     label8:
        $i12 = i2 + i10;
        return $i12;

     label9:
        return i2;
    }

    public void unread(int) throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        int i0, $i1, $i2, $i3;
        java.io.IOException $r1;
        byte[] $r2;
        byte $b4;

        r0 := @this: java.io.PushbackInputStream;
        i0 := @parameter0: int;
        specialinvoke r0.<java.io.PushbackInputStream: void ensureOpen()>();
        $i1 = r0.<java.io.PushbackInputStream: int pos>;
        if $i1 != 0 goto label0;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Push back buffer is full");
        throw $r1;

     label0:
        $r2 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i2 = r0.<java.io.PushbackInputStream: int pos>;
        $i3 = $i2 - 1;
        r0.<java.io.PushbackInputStream: int pos> = $i3;
        $b4 = (byte) i0;
        $r2[$i3] = $b4;
        return;
    }

    public void unread(byte[], int, int) throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        byte[] r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.io.IOException $r2;

        r0 := @this: java.io.PushbackInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.io.PushbackInputStream: void ensureOpen()>();
        $i2 = r0.<java.io.PushbackInputStream: int pos>;
        if i1 <= $i2 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Push back buffer is full");
        throw $r2;

     label0:
        $i3 = r0.<java.io.PushbackInputStream: int pos>;
        $i4 = $i3 - i1;
        r0.<java.io.PushbackInputStream: int pos> = $i4;
        $r4 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i5 = r0.<java.io.PushbackInputStream: int pos>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, $i5, i1);
        return;
    }

    public void unread(byte[]) throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.io.PushbackInputStream;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        virtualinvoke r0.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r1, 0, $i0);
        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        byte[] $r1;

        r0 := @this: java.io.PushbackInputStream;
        specialinvoke r0.<java.io.PushbackInputStream: void ensureOpen()>();
        $r1 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i2 = lengthof $r1;
        $i3 = r0.<java.io.PushbackInputStream: int pos>;
        i0 = $i2 - $i3;
        i1 = specialinvoke r0.<java.io.FilterInputStream: int available()>();
        $i4 = 2147483647 - i1;
        if i0 <= $i4 goto label0;

        $i5 = 2147483647;
        goto label1;

     label0:
        $i5 = i0 + i1;

     label1:
        return $i5;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        long l0, l1, $l9, $l10, $l13;
        byte $b2, $b6, $b7, $b12;
        byte[] $r1;
        int $i3, $i4, $i5, $i8, $i11;

        r0 := @this: java.io.PushbackInputStream;
        l0 := @parameter0: long;
        specialinvoke r0.<java.io.PushbackInputStream: void ensureOpen()>();
        $b2 = l0 cmp 0L;
        if $b2 > 0 goto label0;

        return 0L;

     label0:
        $r1 = r0.<java.io.PushbackInputStream: byte[] buf>;
        $i3 = lengthof $r1;
        $i4 = r0.<java.io.PushbackInputStream: int pos>;
        $i5 = $i3 - $i4;
        l1 = (long) $i5;
        $b6 = l1 cmp 0L;
        if $b6 <= 0 goto label2;

        $b7 = l0 cmp l1;
        if $b7 >= 0 goto label1;

        l1 = l0;

     label1:
        $i8 = r0.<java.io.PushbackInputStream: int pos>;
        $l9 = (long) $i8;
        $l10 = $l9 + l1;
        $i11 = (int) $l10;
        r0.<java.io.PushbackInputStream: int pos> = $i11;
        l0 = l0 - l1;

     label2:
        $b12 = l0 cmp 0L;
        if $b12 <= 0 goto label3;

        $l13 = specialinvoke r0.<java.io.FilterInputStream: long skip(long)>(l0);
        l1 = l1 + $l13;

     label3:
        return l1;
    }

    public boolean markSupported()
    {
        java.io.PushbackInputStream r0;

        r0 := @this: java.io.PushbackInputStream;
        return 0;
    }

    public synchronized void mark(int)
    {
        java.io.PushbackInputStream r0;
        int i0;

        r0 := @this: java.io.PushbackInputStream;
        i0 := @parameter0: int;
        return;
    }

    public synchronized void reset() throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        java.io.IOException $r1;

        r0 := @this: java.io.PushbackInputStream;
        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");
        throw $r1;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.io.PushbackInputStream r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: java.io.PushbackInputStream;
        $r1 = r0.<java.io.PushbackInputStream: java.io.InputStream in>;
        if $r1 != null goto label0;

        return;

     label0:
        $r2 = r0.<java.io.PushbackInputStream: java.io.InputStream in>;
        virtualinvoke $r2.<java.io.InputStream: void close()>();
        r0.<java.io.PushbackInputStream: java.io.InputStream in> = null;
        r0.<java.io.PushbackInputStream: byte[] buf> = null;
        return;
    }
}
