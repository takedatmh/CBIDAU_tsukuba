final class sun.nio.ch.Util$2 extends java.lang.Object implements java.util.Set
{
    final java.util.Set val$s;

    void <init>(java.util.Set)
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set r1;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.util.Set;
        r0.<sun.nio.ch.Util$2: java.util.Set val$s> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public int size()
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: sun.nio.ch.Util$2;
        $r1 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$2;
        $r1 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        sun.nio.ch.Util$2 r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        return $z0;
    }

    public java.lang.Object[] toArray()
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set $r1;
        java.lang.Object[] $r2;

        r0 := @this: sun.nio.ch.Util$2;
        $r1 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>();
        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        sun.nio.ch.Util$2 r0;
        java.lang.Object[] r1, $r3;
        java.util.Set $r2;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.lang.Object[];
        $r2 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r1);
        return $r3;
    }

    public java.lang.String toString()
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set $r1;
        java.lang.String $r2;

        r0 := @this: sun.nio.ch.Util$2;
        $r1 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }

    public java.util.Iterator iterator()
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        r0 := @this: sun.nio.ch.Util$2;
        $r1 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();
        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        sun.nio.ch.Util$2 r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean equals(java.lang.Object)>(r1);
        return $z0;
    }

    public int hashCode()
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: sun.nio.ch.Util$2;
        $r1 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $i0 = interfaceinvoke $r1.<java.util.Set: int hashCode()>();
        return $i0;
    }

    public void clear()
    {
        sun.nio.ch.Util$2 r0;
        java.util.Set $r1;

        r0 := @this: sun.nio.ch.Util$2;
        $r1 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        interfaceinvoke $r1.<java.util.Set: void clear()>();
        return;
    }

    public boolean remove(java.lang.Object)
    {
        sun.nio.ch.Util$2 r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        sun.nio.ch.Util$2 r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.util.Collection;
        $r2 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        sun.nio.ch.Util$2 r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.util.Collection;
        $r2 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean removeAll(java.util.Collection)>(r1);
        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        sun.nio.ch.Util$2 r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.util.Collection;
        $r2 = r0.<sun.nio.ch.Util$2: java.util.Set val$s>;
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1);
        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        sun.nio.ch.Util$2 r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        sun.nio.ch.Util$2 r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: sun.nio.ch.Util$2;
        r1 := @parameter0: java.util.Collection;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }
}
