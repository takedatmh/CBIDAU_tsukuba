public class java.text.NumberFormat$Field extends java.text.Format$Field
{
    private static final long serialVersionUID;
    private static final java.util.Map instanceMap;
    public static final java.text.NumberFormat$Field INTEGER;
    public static final java.text.NumberFormat$Field FRACTION;
    public static final java.text.NumberFormat$Field EXPONENT;
    public static final java.text.NumberFormat$Field DECIMAL_SEPARATOR;
    public static final java.text.NumberFormat$Field SIGN;
    public static final java.text.NumberFormat$Field GROUPING_SEPARATOR;
    public static final java.text.NumberFormat$Field EXPONENT_SYMBOL;
    public static final java.text.NumberFormat$Field PERCENT;
    public static final java.text.NumberFormat$Field PERMILLE;
    public static final java.text.NumberFormat$Field CURRENCY;
    public static final java.text.NumberFormat$Field EXPONENT_SIGN;

    protected void <init>(java.lang.String)
    {
        java.text.NumberFormat$Field r0;
        java.lang.String r1;
        java.lang.Class $r2;
        java.util.Map $r3;

        r0 := @this: java.text.NumberFormat$Field;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.text.Format$Field: void <init>(java.lang.String)>(r1);
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if $r2 != class "java/text/NumberFormat$Field" goto label0;

        $r3 = <java.text.NumberFormat$Field: java.util.Map instanceMap>;
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

     label0:
        return;
    }

    protected java.lang.Object readResolve() throws java.io.InvalidObjectException
    {
        java.text.NumberFormat$Field r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.io.InvalidObjectException $r3, $r6;
        java.util.Map $r4;
        java.lang.String $r5;

        r0 := @this: java.text.NumberFormat$Field;
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if $r2 == class "java/text/NumberFormat$Field" goto label0;

        $r3 = new java.io.InvalidObjectException;
        specialinvoke $r3.<java.io.InvalidObjectException: void <init>(java.lang.String)>("subclass didn\'t correctly implement readResolve");
        throw $r3;

     label0:
        $r4 = <java.text.NumberFormat$Field: java.util.Map instanceMap>;
        $r5 = virtualinvoke r0.<java.text.NumberFormat$Field: java.lang.String getName()>();
        r1 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);
        if r1 == null goto label1;

        return r1;

     label1:
        $r6 = new java.io.InvalidObjectException;
        specialinvoke $r6.<java.io.InvalidObjectException: void <init>(java.lang.String)>("unknown attribute name");
        throw $r6;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.text.NumberFormat$Field $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(11);
        <java.text.NumberFormat$Field: java.util.Map instanceMap> = $r0;
        $r1 = new java.text.NumberFormat$Field;
        specialinvoke $r1.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("integer");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field INTEGER> = $r1;
        $r2 = new java.text.NumberFormat$Field;
        specialinvoke $r2.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("fraction");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field FRACTION> = $r2;
        $r3 = new java.text.NumberFormat$Field;
        specialinvoke $r3.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("exponent");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field EXPONENT> = $r3;
        $r4 = new java.text.NumberFormat$Field;
        specialinvoke $r4.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("decimal separator");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field DECIMAL_SEPARATOR> = $r4;
        $r5 = new java.text.NumberFormat$Field;
        specialinvoke $r5.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("sign");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field SIGN> = $r5;
        $r6 = new java.text.NumberFormat$Field;
        specialinvoke $r6.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("grouping separator");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field GROUPING_SEPARATOR> = $r6;
        $r7 = new java.text.NumberFormat$Field;
        specialinvoke $r7.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("exponent symbol");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field EXPONENT_SYMBOL> = $r7;
        $r8 = new java.text.NumberFormat$Field;
        specialinvoke $r8.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("percent");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field PERCENT> = $r8;
        $r9 = new java.text.NumberFormat$Field;
        specialinvoke $r9.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("per mille");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field PERMILLE> = $r9;
        $r10 = new java.text.NumberFormat$Field;
        specialinvoke $r10.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("currency");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field CURRENCY> = $r10;
        $r11 = new java.text.NumberFormat$Field;
        specialinvoke $r11.<java.text.NumberFormat$Field: void <init>(java.lang.String)>("exponent sign");
        <java.text.NumberFormat$Field: java.text.NumberFormat$Field EXPONENT_SIGN> = $r11;
        return;
    }
}
