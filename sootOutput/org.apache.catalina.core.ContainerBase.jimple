public abstract class org.apache.catalina.core.ContainerBase extends org.apache.catalina.util.LifecycleMBeanBase implements org.apache.catalina.Container
{
    private static final org.apache.juli.logging.Log log;
    protected java.util.HashMap children;
    protected int backgroundProcessorDelay;
    protected java.util.List listeners;
    protected org.apache.catalina.Loader loader;
    private final java.util.concurrent.locks.ReadWriteLock loaderLock;
    protected org.apache.juli.logging.Log logger;
    protected java.lang.String logName;
    protected org.apache.catalina.Manager manager;
    private final java.util.concurrent.locks.ReadWriteLock managerLock;
    protected org.apache.catalina.Cluster cluster;
    private final java.util.concurrent.locks.ReadWriteLock clusterLock;
    protected java.lang.String name;
    protected org.apache.catalina.Container parent;
    protected java.lang.ClassLoader parentClassLoader;
    protected org.apache.catalina.Pipeline pipeline;
    private volatile org.apache.catalina.Realm realm;
    private final java.util.concurrent.locks.ReadWriteLock realmLock;
    protected javax.naming.directory.DirContext resources;
    private final java.util.concurrent.locks.ReadWriteLock resourcesLock;
    protected static final org.apache.tomcat.util.res.StringManager sm;
    protected boolean startChildren;
    protected java.beans.PropertyChangeSupport support;
    private java.lang.Thread thread;
    private volatile boolean threadDone;
    protected volatile org.apache.catalina.AccessLog accessLog;
    private volatile boolean accessLogScanComplete;
    private int startStopThreads;
    protected java.util.concurrent.ThreadPoolExecutor startStopExecutor;

    static void <clinit>()
    {
        org.apache.juli.logging.Log $r0;
        org.apache.tomcat.util.res.StringManager $r1;

        $r0 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/catalina/core/ContainerBase");
        <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log> = $r0;
        $r1 = staticinvoke <org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>("org.apache.catalina.core");
        <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm> = $r1;
        return;
    }

    public void <init>()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.HashMap $r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3, $r4, $r5, $r7, $r8;
        org.apache.catalina.core.StandardPipeline $r6;
        java.beans.PropertyChangeSupport $r9;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        specialinvoke r0.<org.apache.catalina.util.LifecycleMBeanBase: void <init>()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children> = $r1;
        r0.<org.apache.catalina.core.ContainerBase: int backgroundProcessorDelay> = -1;
        $r2 = new java.util.concurrent.CopyOnWriteArrayList;
        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
        r0.<org.apache.catalina.core.ContainerBase: java.util.List listeners> = $r2;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader loader> = null;
        $r3 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock loaderLock> = $r3;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log logger> = null;
        r0.<org.apache.catalina.core.ContainerBase: java.lang.String logName> = null;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager manager> = null;
        $r4 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock managerLock> = $r4;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster cluster> = null;
        $r5 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock clusterLock> = $r5;
        r0.<org.apache.catalina.core.ContainerBase: java.lang.String name> = null;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent> = null;
        r0.<org.apache.catalina.core.ContainerBase: java.lang.ClassLoader parentClassLoader> = null;
        $r6 = new org.apache.catalina.core.StandardPipeline;
        specialinvoke $r6.<org.apache.catalina.core.StandardPipeline: void <init>(org.apache.catalina.Container)>(r0);
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline> = $r6;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm realm> = null;
        $r7 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock realmLock> = $r7;
        r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext resources> = null;
        $r8 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock resourcesLock> = $r8;
        r0.<org.apache.catalina.core.ContainerBase: boolean startChildren> = 1;
        $r9 = new java.beans.PropertyChangeSupport;
        specialinvoke $r9.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r0);
        r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support> = $r9;
        r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread> = null;
        r0.<org.apache.catalina.core.ContainerBase: boolean threadDone> = 0;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.AccessLog accessLog> = null;
        r0.<org.apache.catalina.core.ContainerBase: boolean accessLogScanComplete> = 0;
        r0.<org.apache.catalina.core.ContainerBase: int startStopThreads> = 1;
        return;
    }

    public int getStartStopThreads()
    {
        org.apache.catalina.core.ContainerBase r0;
        int $i0;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $i0 = r0.<org.apache.catalina.core.ContainerBase: int startStopThreads>;
        return $i0;
    }

    private int getStartStopThreadsInternal()
    {
        org.apache.catalina.core.ContainerBase r0;
        int i0, $i1, i2;
        java.lang.Runtime $r1;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        i0 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: int getStartStopThreads()>();
        if i0 <= 0 goto label0;

        return i0;

     label0:
        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $i1 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();
        i2 = $i1 + i0;
        if i2 >= 1 goto label1;

        i2 = 1;

     label1:
        return i2;
    }

    public void setStartStopThreads(int)
    {
        org.apache.catalina.core.ContainerBase r0;
        int i0, i1;
        java.util.concurrent.ThreadPoolExecutor r1;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        i0 := @parameter0: int;
        r0.<org.apache.catalina.core.ContainerBase: int startStopThreads> = i0;
        r1 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.ThreadPoolExecutor startStopExecutor>;
        if r1 == null goto label0;

        i1 = specialinvoke r0.<org.apache.catalina.core.ContainerBase: int getStartStopThreadsInternal()>();
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>(i1);
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(i1);

     label0:
        return;
    }

    public int getBackgroundProcessorDelay()
    {
        org.apache.catalina.core.ContainerBase r0;
        int $i0;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $i0 = r0.<org.apache.catalina.core.ContainerBase: int backgroundProcessorDelay>;
        return $i0;
    }

    public void setBackgroundProcessorDelay(int)
    {
        org.apache.catalina.core.ContainerBase r0;
        int i0;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        i0 := @parameter0: int;
        r0.<org.apache.catalina.core.ContainerBase: int backgroundProcessorDelay> = i0;
        return;
    }

    public java.lang.String getInfo()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();
        return $r2;
    }

    public org.apache.catalina.Loader getLoader()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Loader r2, $r5, r8;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.locks.ReadWriteLock $r4;
        org.apache.catalina.Container $r6, $r7;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock loaderLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r5 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader loader>;
        if $r5 == null goto label2;

        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader loader>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        if $r6 == null goto label4;

        $r7 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        r8 = interfaceinvoke $r7.<org.apache.catalina.Container: org.apache.catalina.Loader getLoader()>();

     label3:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r8;

     label4:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return null;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    protected org.apache.catalina.Loader getLoaderInternal()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Loader r2;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.locks.ReadWriteLock $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock loaderLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader loader>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    public void setLoader(org.apache.catalina.Loader)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Loader r1, r6;
        java.util.concurrent.locks.Lock r2;
        null_type n0;
        org.apache.catalina.LifecycleException r3, $r9, $r13, r14;
        java.lang.Throwable r4, $r16;
        java.util.concurrent.locks.ReadWriteLock $r5;
        org.apache.catalina.LifecycleState $r7, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.catalina.Lifecycle $r8, $r12;
        org.apache.juli.logging.Log $r10, $r15;
        java.beans.PropertyChangeSupport $r17;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Loader;
        $r5 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock loaderLock>;
        r2 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();
        n0 = null;

     label0:
        r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader loader>;
        if r6 != r1 goto label2;

     label1:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

     label2:
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader loader> = r1;
        $r7 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z0 = virtualinvoke $r7.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z0 == 0 goto label6;

        if r6 == null goto label6;

        $z1 = r6 instanceof org.apache.catalina.Lifecycle;
        if $z1 == 0 goto label6;

     label3:
        $r8 = (org.apache.catalina.Lifecycle) r6;
        interfaceinvoke $r8.<org.apache.catalina.Lifecycle: void stop()>();

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        $r10 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setLoader: stop: ", r3);

     label6:
        if r1 == null goto label7;

        interfaceinvoke r1.<org.apache.catalina.Loader: void setContainer(org.apache.catalina.Container)>(r0);

     label7:
        $r11 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z2 = virtualinvoke $r11.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z2 == 0 goto label12;

        if r1 == null goto label12;

        $z3 = r1 instanceof org.apache.catalina.Lifecycle;
        if $z3 == 0 goto label12;

     label8:
        $r12 = (org.apache.catalina.Lifecycle) r1;
        interfaceinvoke $r12.<org.apache.catalina.Lifecycle: void start()>();

     label9:
        goto label12;

     label10:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r15.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setLoader: start: ", r14);
        goto label12;

     label11:
        $r16 := @caughtexception;
        r4 = $r16;
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label12:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        $r17 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        virtualinvoke $r17.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("loader", r6, r1);
        return;

        catch org.apache.catalina.LifecycleException from label3 to label4 with label5;
        catch org.apache.catalina.LifecycleException from label8 to label9 with label10;
        catch java.lang.Throwable from label0 to label1 with label11;
        catch java.lang.Throwable from label2 to label11 with label11;
    }

    public org.apache.juli.logging.Log getLogger()
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.juli.logging.Log $r1, $r2, $r4, $r5;
        java.lang.String $r3;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = r0.<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log logger>;
        if $r1 == null goto label0;

        $r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log logger>;
        return $r2;

     label0:
        $r3 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: java.lang.String logName()>();
        $r4 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.String)>($r3);
        r0.<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log logger> = $r4;
        $r5 = r0.<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log logger>;
        return $r5;
    }

    public org.apache.catalina.Manager getManager()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Manager r2, $r5, r8;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.locks.ReadWriteLock $r4;
        org.apache.catalina.Container $r6, $r7;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock managerLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r5 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager manager>;
        if $r5 == null goto label2;

        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager manager>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        if $r6 == null goto label4;

        $r7 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        r8 = interfaceinvoke $r7.<org.apache.catalina.Container: org.apache.catalina.Manager getManager()>();

     label3:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r8;

     label4:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return null;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    protected org.apache.catalina.Manager getManagerInternal()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Manager r2;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.locks.ReadWriteLock $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock managerLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager manager>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    public void setManager(org.apache.catalina.Manager)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Manager r1, r6;
        java.util.concurrent.locks.Lock r2;
        null_type n0;
        org.apache.catalina.LifecycleException r3, $r9, $r13, r14;
        java.lang.Throwable r4, $r16;
        java.util.concurrent.locks.ReadWriteLock $r5;
        boolean $z0, $z1, $z2;
        org.apache.catalina.Lifecycle $r7, $r8, $r12;
        org.apache.juli.logging.Log $r10, $r15;
        org.apache.catalina.LifecycleState $r11;
        java.beans.PropertyChangeSupport $r17;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Manager;
        $r5 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock managerLock>;
        r2 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();
        n0 = null;

     label0:
        r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager manager>;
        if r6 != r1 goto label2;

     label1:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

     label2:
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager manager> = r1;
        $z0 = r6 instanceof org.apache.catalina.Lifecycle;
        if $z0 == 0 goto label6;

     label3:
        $r7 = (org.apache.catalina.Lifecycle) r6;
        interfaceinvoke $r7.<org.apache.catalina.Lifecycle: void stop()>();
        $r8 = (org.apache.catalina.Lifecycle) r6;
        interfaceinvoke $r8.<org.apache.catalina.Lifecycle: void destroy()>();

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        $r10 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setManager: stop-destroy: ", r3);

     label6:
        if r1 == null goto label7;

        interfaceinvoke r1.<org.apache.catalina.Manager: void setContainer(org.apache.catalina.Container)>(r0);

     label7:
        $r11 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z1 = virtualinvoke $r11.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z1 == 0 goto label12;

        $z2 = r1 instanceof org.apache.catalina.Lifecycle;
        if $z2 == 0 goto label12;

     label8:
        $r12 = (org.apache.catalina.Lifecycle) r1;
        interfaceinvoke $r12.<org.apache.catalina.Lifecycle: void start()>();

     label9:
        goto label12;

     label10:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r15.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setManager: start: ", r14);
        goto label12;

     label11:
        $r16 := @caughtexception;
        r4 = $r16;
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label12:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        $r17 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        virtualinvoke $r17.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("manager", r6, r1);
        return;

        catch org.apache.catalina.LifecycleException from label3 to label4 with label5;
        catch org.apache.catalina.LifecycleException from label8 to label9 with label10;
        catch java.lang.Throwable from label0 to label1 with label11;
        catch java.lang.Throwable from label2 to label11 with label11;
    }

    public java.lang.Object getMappingObject()
    {
        org.apache.catalina.core.ContainerBase r0;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        return r0;
    }

    public org.apache.catalina.Cluster getCluster()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Cluster r2, $r5, r8;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.locks.ReadWriteLock $r4;
        org.apache.catalina.Container $r6, $r7;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock clusterLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r5 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster cluster>;
        if $r5 == null goto label2;

        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster cluster>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        if $r6 == null goto label4;

        $r7 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        r8 = interfaceinvoke $r7.<org.apache.catalina.Container: org.apache.catalina.Cluster getCluster()>();

     label3:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r8;

     label4:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return null;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    protected org.apache.catalina.Cluster getClusterInternal()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Cluster r2;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.locks.ReadWriteLock $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock clusterLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster cluster>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    public void setCluster(org.apache.catalina.Cluster)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Cluster r1, r6;
        null_type n0;
        java.util.concurrent.locks.Lock r2;
        org.apache.catalina.LifecycleException r3, $r9, $r13, r14;
        java.lang.Throwable r4, $r16;
        java.util.concurrent.locks.ReadWriteLock $r5;
        org.apache.catalina.LifecycleState $r7, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.catalina.Lifecycle $r8, $r12;
        org.apache.juli.logging.Log $r10, $r15;
        java.beans.PropertyChangeSupport $r17;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Cluster;
        n0 = null;
        $r5 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock clusterLock>;
        r2 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster cluster>;
        if r6 != r1 goto label2;

     label1:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

     label2:
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster cluster> = r1;
        $r7 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z0 = virtualinvoke $r7.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z0 == 0 goto label6;

        if r6 == null goto label6;

        $z1 = r6 instanceof org.apache.catalina.Lifecycle;
        if $z1 == 0 goto label6;

     label3:
        $r8 = (org.apache.catalina.Lifecycle) r6;
        interfaceinvoke $r8.<org.apache.catalina.Lifecycle: void stop()>();

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        $r10 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setCluster: stop: ", r3);

     label6:
        if r1 == null goto label7;

        interfaceinvoke r1.<org.apache.catalina.Cluster: void setContainer(org.apache.catalina.Container)>(r0);

     label7:
        $r11 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z2 = virtualinvoke $r11.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z2 == 0 goto label12;

        if r1 == null goto label12;

        $z3 = r1 instanceof org.apache.catalina.Lifecycle;
        if $z3 == 0 goto label12;

     label8:
        $r12 = (org.apache.catalina.Lifecycle) r1;
        interfaceinvoke $r12.<org.apache.catalina.Lifecycle: void start()>();

     label9:
        goto label12;

     label10:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r15.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setCluster: start: ", r14);
        goto label12;

     label11:
        $r16 := @caughtexception;
        r4 = $r16;
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label12:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        $r17 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        virtualinvoke $r17.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("cluster", r6, r1);
        return;

        catch org.apache.catalina.LifecycleException from label3 to label4 with label5;
        catch org.apache.catalina.LifecycleException from label8 to label9 with label10;
        catch java.lang.Throwable from label0 to label1 with label11;
        catch java.lang.Throwable from label2 to label11 with label11;
    }

    public java.lang.String getName()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = r0.<org.apache.catalina.core.ContainerBase: java.lang.String name>;
        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.String r1, r3, $r5, $r7;
        org.apache.tomcat.util.res.StringManager $r2;
        java.lang.IllegalArgumentException $r4;
        java.beans.PropertyChangeSupport $r6;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r2 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r5 = virtualinvoke $r2.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("containerBase.nullName");
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label0:
        r3 = r0.<org.apache.catalina.core.ContainerBase: java.lang.String name>;
        r0.<org.apache.catalina.core.ContainerBase: java.lang.String name> = r1;
        $r6 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        $r7 = r0.<org.apache.catalina.core.ContainerBase: java.lang.String name>;
        virtualinvoke $r6.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("name", r3, $r7);
        return;
    }

    public boolean getStartChildren()
    {
        org.apache.catalina.core.ContainerBase r0;
        boolean $z0;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $z0 = r0.<org.apache.catalina.core.ContainerBase: boolean startChildren>;
        return $z0;
    }

    public void setStartChildren(boolean)
    {
        org.apache.catalina.core.ContainerBase r0;
        boolean z0, z1, $z2;
        java.beans.PropertyChangeSupport $r1;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        z0 := @parameter0: boolean;
        z1 = r0.<org.apache.catalina.core.ContainerBase: boolean startChildren>;
        r0.<org.apache.catalina.core.ContainerBase: boolean startChildren> = z0;
        $r1 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        $z2 = r0.<org.apache.catalina.core.ContainerBase: boolean startChildren>;
        virtualinvoke $r1.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>("startChildren", z1, $z2);
        return;
    }

    public org.apache.catalina.Container getParent()
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Container $r1;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        return $r1;
    }

    public void setParent(org.apache.catalina.Container)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Container r1, r2, $r4;
        java.beans.PropertyChangeSupport $r3;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Container;
        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent> = r1;
        $r3 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("parent", r2, $r4);
        return;
    }

    public java.lang.ClassLoader getParentClassLoader()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.ClassLoader $r1, $r2, $r5, $r6;
        org.apache.catalina.Container $r3, $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = r0.<org.apache.catalina.core.ContainerBase: java.lang.ClassLoader parentClassLoader>;
        if $r1 == null goto label0;

        $r2 = r0.<org.apache.catalina.core.ContainerBase: java.lang.ClassLoader parentClassLoader>;
        return $r2;

     label0:
        $r3 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        if $r3 == null goto label1;

        $r4 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        $r5 = interfaceinvoke $r4.<org.apache.catalina.Container: java.lang.ClassLoader getParentClassLoader()>();
        return $r5;

     label1:
        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        return $r6;
    }

    public void setParentClassLoader(java.lang.ClassLoader)
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.ClassLoader r1, r2, $r4;
        java.beans.PropertyChangeSupport $r3;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: java.lang.ClassLoader;
        r2 = r0.<org.apache.catalina.core.ContainerBase: java.lang.ClassLoader parentClassLoader>;
        r0.<org.apache.catalina.core.ContainerBase: java.lang.ClassLoader parentClassLoader> = r1;
        $r3 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.lang.ClassLoader parentClassLoader>;
        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("parentClassLoader", r2, $r4);
        return;
    }

    public org.apache.catalina.Pipeline getPipeline()
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Pipeline $r1;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        return $r1;
    }

    public org.apache.catalina.Realm getRealm()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Realm r2, $r5, r8;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.locks.ReadWriteLock $r4;
        org.apache.catalina.Container $r6, $r7;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock realmLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

     label0:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();
        $r5 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm realm>;
        if $r5 == null goto label2;

        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm realm>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        if $r6 == null goto label4;

        $r7 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        r8 = interfaceinvoke $r7.<org.apache.catalina.Container: org.apache.catalina.Realm getRealm()>();

     label3:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r8;

     label4:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return null;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    protected org.apache.catalina.Realm getRealmInternal()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        org.apache.catalina.Realm r2;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.locks.ReadWriteLock $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock realmLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

     label0:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();
        r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm realm>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    public void setRealm(org.apache.catalina.Realm)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Realm r1, r3, $r17;
        java.util.concurrent.locks.Lock r2;
        org.apache.catalina.LifecycleException r4, $r9, $r13, r14;
        java.lang.Throwable r5, $r18;
        java.util.concurrent.locks.ReadWriteLock $r6;
        org.apache.catalina.LifecycleState $r7, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.catalina.Lifecycle $r8, $r12;
        org.apache.juli.logging.Log $r10, $r15;
        java.beans.PropertyChangeSupport $r16;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Realm;
        $r6 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock realmLock>;
        r2 = interfaceinvoke $r6.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

     label0:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();
        r3 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm realm>;
        if r3 != r1 goto label2;

     label1:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

     label2:
        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm realm> = r1;
        $r7 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z0 = virtualinvoke $r7.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z0 == 0 goto label6;

        if r3 == null goto label6;

        $z1 = r3 instanceof org.apache.catalina.Lifecycle;
        if $z1 == 0 goto label6;

     label3:
        $r8 = (org.apache.catalina.Lifecycle) r3;
        interfaceinvoke $r8.<org.apache.catalina.Lifecycle: void stop()>();

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;
        r4 = $r9;
        $r10 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setRealm: stop: ", r4);

     label6:
        if r1 == null goto label7;

        interfaceinvoke r1.<org.apache.catalina.Realm: void setContainer(org.apache.catalina.Container)>(r0);

     label7:
        $r11 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z2 = virtualinvoke $r11.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z2 == 0 goto label11;

        if r1 == null goto label11;

        $z3 = r1 instanceof org.apache.catalina.Lifecycle;
        if $z3 == 0 goto label11;

     label8:
        $r12 = (org.apache.catalina.Lifecycle) r1;
        interfaceinvoke $r12.<org.apache.catalina.Lifecycle: void start()>();

     label9:
        goto label11;

     label10:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r15.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.setRealm: start: ", r14);

     label11:
        $r16 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        $r17 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm realm>;
        virtualinvoke $r16.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("realm", r3, $r17);
        goto label13;

     label12:
        $r18 := @caughtexception;
        r5 = $r18;
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r5;

     label13:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

        catch org.apache.catalina.LifecycleException from label3 to label4 with label5;
        catch org.apache.catalina.LifecycleException from label8 to label9 with label10;
        catch java.lang.Throwable from label0 to label1 with label12;
        catch java.lang.Throwable from label2 to label12 with label12;
    }

    public javax.naming.directory.DirContext getResources()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        javax.naming.directory.DirContext r2, $r5, r8;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.locks.ReadWriteLock $r4;
        org.apache.catalina.Container $r6, $r7;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock resourcesLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r5 = r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext resources>;
        if $r5 == null goto label2;

        r2 = r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext resources>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r6 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        if $r6 == null goto label4;

        $r7 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        r8 = interfaceinvoke $r7.<org.apache.catalina.Container: javax.naming.directory.DirContext getResources()>();

     label3:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r8;

     label4:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return null;

     label5:
        $r9 := @caughtexception;
        r3 = $r9;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    protected javax.naming.directory.DirContext getResourcesInternal()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.locks.Lock r1;
        javax.naming.directory.DirContext r2;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.locks.ReadWriteLock $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock resourcesLock>;
        r1 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        r2 = r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext resources>;

     label1:
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        return r2;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        interfaceinvoke r1.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    public void setResources(javax.naming.directory.DirContext)
    {
        org.apache.catalina.core.ContainerBase r0;
        javax.naming.directory.DirContext r1, r6;
        java.util.concurrent.locks.Lock r2;
        null_type n0;
        java.util.Hashtable r3, $r7;
        java.lang.Throwable r4, $r15;
        java.util.concurrent.locks.ReadWriteLock $r5;
        boolean $z0;
        org.apache.catalina.Container $r8, $r9;
        java.lang.String $r10, $r12;
        org.apache.naming.resources.ProxyDirContext $r14;
        java.beans.PropertyChangeSupport $r16;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: javax.naming.directory.DirContext;
        $r5 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.locks.ReadWriteLock resourcesLock>;
        r2 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();
        n0 = null;

     label0:
        r6 = r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext resources>;
        if r6 != r1 goto label2;

     label1:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

     label2:
        if r1 == null goto label3;

        $z0 = r1 instanceof org.apache.naming.resources.ProxyDirContext;
        if $z0 == 0 goto label4;

     label3:
        r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext resources> = r1;
        goto label7;

     label4:
        $r7 = new java.util.Hashtable;
        specialinvoke $r7.<java.util.Hashtable: void <init>()>();
        r3 = $r7;
        $r8 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>();
        if $r8 == null goto label5;

        $r9 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>();
        $r10 = interfaceinvoke $r9.<org.apache.catalina.Container: java.lang.String getName()>();
        virtualinvoke r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", $r10);

     label5:
        $r12 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: java.lang.String getName()>();
        virtualinvoke r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("context", $r12);
        $r14 = new org.apache.naming.resources.ProxyDirContext;
        specialinvoke $r14.<org.apache.naming.resources.ProxyDirContext: void <init>(java.util.Hashtable,javax.naming.directory.DirContext)>(r3, r1);
        r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext resources> = $r14;
        goto label7;

     label6:
        $r15 := @caughtexception;
        r4 = $r15;
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label7:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();
        $r16 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        virtualinvoke $r16.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("resources", r6, r1);
        return;

        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label2 to label6 with label6;
    }

    public void addChild(org.apache.catalina.Container)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Container r1;
        boolean $z0;
        org.apache.catalina.core.ContainerBase$PrivilegedAddChild r2, $r3;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Container;
        $z0 = <org.apache.catalina.Globals: boolean IS_SECURITY_ENABLED>;
        if $z0 == 0 goto label0;

        $r3 = new org.apache.catalina.core.ContainerBase$PrivilegedAddChild;
        specialinvoke $r3.<org.apache.catalina.core.ContainerBase$PrivilegedAddChild: void <init>(org.apache.catalina.core.ContainerBase,org.apache.catalina.Container)>(r0, r1);
        r2 = $r3;
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(r2);
        goto label1;

     label0:
        specialinvoke r0.<org.apache.catalina.core.ContainerBase: void addChildInternal(org.apache.catalina.Container)>(r1);

     label1:
        return;
    }

    private void addChildInternal(org.apache.catalina.Container)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Container r1;
        org.apache.juli.logging.Log $r2, $r6, $r30;
        java.lang.StringBuilder $r3, $r7, $r8, $r9, $r16, $r18, $r19, $r32, $r33;
        java.util.HashMap r4, $r11, $r12, $r21;
        java.lang.Throwable r5, $r24, $r35;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r10, $r13, $r17, $r20, $r22, $r34;
        java.lang.Object $r14;
        java.lang.IllegalArgumentException $r15;
        org.apache.catalina.LifecycleState $r25, $r26, $r27;
        org.apache.catalina.LifecycleException $r28, r29;
        java.lang.IllegalStateException $r31;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Container;
        $r2 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r2.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r6 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Add child ");
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r6.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r10);

     label0:
        $r11 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        r4 = $r11;
        entermonitor $r11;

     label1:
        $r12 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $r13 = interfaceinvoke r1.<org.apache.catalina.Container: java.lang.String getName()>();
        $r14 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r13);
        if $r14 == null goto label2;

        $r15 = new java.lang.IllegalArgumentException;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("addChild:  Child name \'");
        $r17 = interfaceinvoke r1.<org.apache.catalina.Container: java.lang.String getName()>();
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not unique");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);
        throw $r15;

     label2:
        interfaceinvoke r1.<org.apache.catalina.Container: void setParent(org.apache.catalina.Container)>(r0);
        $r21 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $r22 = interfaceinvoke r1.<org.apache.catalina.Container: java.lang.String getName()>();
        virtualinvoke $r21.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, r1);
        exitmonitor r4;

     label3:
        goto label7;

     label4:
        $r24 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        throw $r24;

     label7:
        $r25 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z1 = virtualinvoke $r25.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z1 != 0 goto label8;

        $r26 = <org.apache.catalina.LifecycleState: org.apache.catalina.LifecycleState STARTING_PREP>;
        $r27 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z2 = virtualinvoke $r26.<org.apache.catalina.LifecycleState: boolean equals(java.lang.Object)>($r27);
        if $z2 == 0 goto label12;

     label8:
        $z3 = r0.<org.apache.catalina.core.ContainerBase: boolean startChildren>;
        if $z3 == 0 goto label12;

        interfaceinvoke r1.<org.apache.catalina.Container: void start()>();

     label9:
        goto label12;

     label10:
        $r28 := @caughtexception;
        r29 = $r28;
        $r30 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r30.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.addChild: start: ", r29);
        $r31 = new java.lang.IllegalStateException;
        $r32 = new java.lang.StringBuilder;
        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("ContainerBase.addChild: start: ");
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);
        throw $r31;

     label11:
        $r35 := @caughtexception;
        r5 = $r35;
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void fireContainerEvent(java.lang.String,java.lang.Object)>("addChild", r1);
        throw r5;

     label12:
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void fireContainerEvent(java.lang.String,java.lang.Object)>("addChild", r1);
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch org.apache.catalina.LifecycleException from label7 to label9 with label10;
        catch java.lang.Throwable from label7 to label11 with label11;
    }

    public void addContainerListener(org.apache.catalina.ContainerListener)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.ContainerListener r1;
        java.util.List $r2;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.ContainerListener;
        $r2 = r0.<org.apache.catalina.core.ContainerBase: java.util.List listeners>;
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);
        return;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        org.apache.catalina.core.ContainerBase r0;
        java.beans.PropertyChangeListener r1;
        java.beans.PropertyChangeSupport $r2;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: java.beans.PropertyChangeListener;
        $r2 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r1);
        return;
    }

    public org.apache.catalina.Container findChild(java.lang.String)
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.String r1;
        java.util.HashMap r2, $r3, $r4;
        java.lang.Object $r5;
        org.apache.catalina.Container $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return null;

     label0:
        $r3 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        r2 = $r3;
        entermonitor $r3;

     label1:
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        $r6 = (org.apache.catalina.Container) $r5;
        exitmonitor r2;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public org.apache.catalina.Container[] findChildren()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.HashMap r1, $r3, $r4, $r5;
        org.apache.catalina.Container[] r2, $r8;
        int $i0;
        java.util.Collection $r6;
        java.lang.Object[] $r7;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r3 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $i0 = virtualinvoke $r4.<java.util.HashMap: int size()>();
        r2 = newarray (org.apache.catalina.Container)[$i0];
        $r5 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();
        $r7 = interfaceinvoke $r6.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r2);
        $r8 = (org.apache.catalina.Container[]) $r7;
        exitmonitor r1;

     label1:
        return $r8;

     label2:
        $r9 := @caughtexception;

     label3:
        exitmonitor r1;

     label4:
        throw $r9;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public org.apache.catalina.ContainerListener[] findContainerListeners()
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.ContainerListener[] r1, $r4;
        java.util.List $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 = newarray (org.apache.catalina.ContainerListener)[0];
        $r2 = r0.<org.apache.catalina.core.ContainerBase: java.util.List listeners>;
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);
        $r4 = (org.apache.catalina.ContainerListener[]) $r3;
        return $r4;
    }

    public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.connector.Request r1;
        org.apache.catalina.connector.Response r2;
        org.apache.catalina.Pipeline $r3;
        org.apache.catalina.Valve $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.connector.Request;
        r2 := @parameter1: org.apache.catalina.connector.Response;
        $r3 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $r4 = interfaceinvoke $r3.<org.apache.catalina.Pipeline: org.apache.catalina.Valve getFirst()>();
        interfaceinvoke $r4.<org.apache.catalina.Valve: void invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)>(r1, r2);
        return;
    }

    public void removeChild(org.apache.catalina.Container)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Container r1;
        org.apache.catalina.LifecycleException r2, $r4, $r8, r9;
        org.apache.catalina.LifecycleState $r3, $r6, $r7;
        boolean $z0, $z1;
        org.apache.juli.logging.Log $r5, $r10;
        java.util.HashMap $r11, r12, $r13, $r16;
        java.lang.String $r14, $r17;
        java.lang.Object $r15;
        java.lang.Throwable $r19;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Container;
        if r1 != null goto label0;

        return;

     label0:
        $r3 = interfaceinvoke r1.<org.apache.catalina.Container: org.apache.catalina.LifecycleState getState()>();
        $z0 = virtualinvoke $r3.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z0 == 0 goto label3;

        interfaceinvoke r1.<org.apache.catalina.Container: void stop()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r5.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.removeChild: stop: ", r2);

     label3:
        $r6 = <org.apache.catalina.LifecycleState: org.apache.catalina.LifecycleState DESTROYING>;
        $r7 = interfaceinvoke r1.<org.apache.catalina.Container: org.apache.catalina.LifecycleState getState()>();
        $z1 = virtualinvoke $r6.<org.apache.catalina.LifecycleState: boolean equals(java.lang.Object)>($r7);
        if $z1 != 0 goto label6;

        interfaceinvoke r1.<org.apache.catalina.Container: void destroy()>();

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("ContainerBase.removeChild: destroy: ", r9);

     label6:
        $r11 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        r12 = $r11;
        entermonitor $r11;

     label7:
        $r13 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $r14 = interfaceinvoke r1.<org.apache.catalina.Container: java.lang.String getName()>();
        $r15 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);
        if $r15 != null goto label9;

        exitmonitor r12;

     label8:
        return;

     label9:
        $r16 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $r17 = interfaceinvoke r1.<org.apache.catalina.Container: java.lang.String getName()>();
        virtualinvoke $r16.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r17);
        exitmonitor r12;

     label10:
        goto label14;

     label11:
        $r19 := @caughtexception;

     label12:
        exitmonitor r12;

     label13:
        throw $r19;

     label14:
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void fireContainerEvent(java.lang.String,java.lang.Object)>("removeChild", r1);
        return;

        catch org.apache.catalina.LifecycleException from label0 to label1 with label2;
        catch org.apache.catalina.LifecycleException from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label11;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void removeContainerListener(org.apache.catalina.ContainerListener)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.ContainerListener r1;
        java.util.List $r2;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.ContainerListener;
        $r2 = r0.<org.apache.catalina.core.ContainerBase: java.util.List listeners>;
        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);
        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        org.apache.catalina.core.ContainerBase r0;
        java.beans.PropertyChangeListener r1;
        java.beans.PropertyChangeSupport $r2;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: java.beans.PropertyChangeListener;
        $r2 = r0.<org.apache.catalina.core.ContainerBase: java.beans.PropertyChangeSupport support>;
        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r1);
        return;
    }

    protected void initInternal() throws org.apache.catalina.LifecycleException
    {
        org.apache.catalina.core.ContainerBase r0;
        java.util.concurrent.LinkedBlockingQueue $r1, r2;
        java.util.concurrent.TimeUnit $r3;
        org.apache.catalina.core.ContainerBase$StartStopThreadFactory $r4;
        java.lang.StringBuilder $r5, $r9;
        java.util.concurrent.ThreadPoolExecutor $r6, $r11;
        int $i0, $i1;
        java.lang.String $r7, $r8, $r10;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = new java.util.concurrent.LinkedBlockingQueue;
        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();
        r2 = $r1;
        $r6 = new java.util.concurrent.ThreadPoolExecutor;
        $i0 = specialinvoke r0.<org.apache.catalina.core.ContainerBase: int getStartStopThreadsInternal()>();
        $i1 = specialinvoke r0.<org.apache.catalina.core.ContainerBase: int getStartStopThreadsInternal()>();
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
        $r4 = new org.apache.catalina.core.ContainerBase$StartStopThreadFactory;
        $r5 = new java.lang.StringBuilder;
        $r7 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: java.lang.String getName()>();
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);
        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-startStop-");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<org.apache.catalina.core.ContainerBase$StartStopThreadFactory: void <init>(java.lang.String)>($r10);
        specialinvoke $r6.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i0, $i1, 10L, $r3, r2, $r4);
        r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.ThreadPoolExecutor startStopExecutor> = $r6;
        $r11 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.ThreadPoolExecutor startStopExecutor>;
        virtualinvoke $r11.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);
        specialinvoke r0.<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>();
        return;
    }

    protected synchronized void startInternal() throws org.apache.catalina.LifecycleException
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Loader r1;
        org.apache.catalina.Manager r2;
        org.apache.catalina.Cluster r3;
        org.apache.catalina.Realm r4;
        javax.naming.directory.DirContext r5;
        org.apache.catalina.Container[] r6;
        java.util.ArrayList r7, $r18;
        int i0, $i1;
        org.apache.catalina.core.ContainerBase$StartChild $r8;
        java.util.Iterator r9;
        java.util.concurrent.Future r10, $r21;
        java.lang.Throwable r11, $r25, $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7;
        org.apache.catalina.Lifecycle $r12, $r14, $r15, $r16, $r17, $r36;
        java.util.concurrent.ThreadPoolExecutor $r19;
        org.apache.catalina.Container $r20;
        org.apache.tomcat.util.MultiThrowable r22, $r29;
        java.lang.Object $r23;
        org.apache.juli.logging.Log $r26;
        org.apache.tomcat.util.res.StringManager $r27, $r31;
        java.lang.String $r28, $r32;
        org.apache.catalina.LifecycleException $r30;
        org.apache.catalina.Pipeline $r34, $r35;
        org.apache.catalina.LifecycleState $r37;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader getLoaderInternal()>();
        if r1 == null goto label0;

        $z0 = r1 instanceof org.apache.catalina.Lifecycle;
        if $z0 == 0 goto label0;

        $r12 = (org.apache.catalina.Lifecycle) r1;
        interfaceinvoke $r12.<org.apache.catalina.Lifecycle: void start()>();

     label0:
        r0.<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log logger> = null;
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log getLogger()>();
        r2 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager getManagerInternal()>();
        if r2 == null goto label1;

        $z1 = r2 instanceof org.apache.catalina.Lifecycle;
        if $z1 == 0 goto label1;

        $r14 = (org.apache.catalina.Lifecycle) r2;
        interfaceinvoke $r14.<org.apache.catalina.Lifecycle: void start()>();

     label1:
        r3 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster getClusterInternal()>();
        if r3 == null goto label2;

        $z2 = r3 instanceof org.apache.catalina.Lifecycle;
        if $z2 == 0 goto label2;

        $r15 = (org.apache.catalina.Lifecycle) r3;
        interfaceinvoke $r15.<org.apache.catalina.Lifecycle: void start()>();

     label2:
        r4 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm getRealmInternal()>();
        if r4 == null goto label3;

        $z3 = r4 instanceof org.apache.catalina.Lifecycle;
        if $z3 == 0 goto label3;

        $r16 = (org.apache.catalina.Lifecycle) r4;
        interfaceinvoke $r16.<org.apache.catalina.Lifecycle: void start()>();

     label3:
        r5 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext getResourcesInternal()>();
        if r5 == null goto label4;

        $z4 = r5 instanceof org.apache.catalina.Lifecycle;
        if $z4 == 0 goto label4;

        $r17 = (org.apache.catalina.Lifecycle) r5;
        interfaceinvoke $r17.<org.apache.catalina.Lifecycle: void start()>();

     label4:
        r6 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container[] findChildren()>();
        $r18 = new java.util.ArrayList;
        specialinvoke $r18.<java.util.ArrayList: void <init>()>();
        r7 = $r18;
        i0 = 0;
        goto label6;

     label5:
        $r19 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.ThreadPoolExecutor startStopExecutor>;
        $r8 = new org.apache.catalina.core.ContainerBase$StartChild;
        $r20 = r6[i0];
        specialinvoke $r8.<org.apache.catalina.core.ContainerBase$StartChild: void <init>(org.apache.catalina.Container)>($r20);
        $r21 = virtualinvoke $r19.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r8);
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r21);
        i0 = i0 + 1;

     label6:
        $i1 = lengthof r6;
        if i0 < $i1 goto label5;

        r22 = null;
        r9 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();
        goto label12;

     label7:
        $r23 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
        r10 = (java.util.concurrent.Future) $r23;

     label8:
        interfaceinvoke r10.<java.util.concurrent.Future: java.lang.Object get()>();

     label9:
        goto label12;

     label10:
        $r25 := @caughtexception;
        r11 = $r25;
        $r26 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r27 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r28 = virtualinvoke $r27.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("containerBase.threadedStartFailed");
        interfaceinvoke $r26.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r28, r11);
        if r22 != null goto label11;

        $r29 = new org.apache.tomcat.util.MultiThrowable;
        specialinvoke $r29.<org.apache.tomcat.util.MultiThrowable: void <init>()>();
        r22 = $r29;

     label11:
        virtualinvoke r22.<org.apache.tomcat.util.MultiThrowable: void add(java.lang.Throwable)>(r11);

     label12:
        $z6 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
        if $z6 != 0 goto label7;

        if r22 == null goto label13;

        $r30 = new org.apache.catalina.LifecycleException;
        $r31 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r32 = virtualinvoke $r31.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("containerBase.threadedStartFailed");
        $r33 = virtualinvoke r22.<org.apache.tomcat.util.MultiThrowable: java.lang.Throwable getThrowable()>();
        specialinvoke $r30.<org.apache.catalina.LifecycleException: void <init>(java.lang.String,java.lang.Throwable)>($r32, $r33);
        throw $r30;

     label13:
        $r34 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $z7 = $r34 instanceof org.apache.catalina.Lifecycle;
        if $z7 == 0 goto label14;

        $r35 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $r36 = (org.apache.catalina.Lifecycle) $r35;
        interfaceinvoke $r36.<org.apache.catalina.Lifecycle: void start()>();

     label14:
        $r37 = <org.apache.catalina.LifecycleState: org.apache.catalina.LifecycleState STARTING>;
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void setState(org.apache.catalina.LifecycleState)>($r37);
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void threadStart()>();
        return;

        catch java.lang.Throwable from label8 to label9 with label10;
    }

    protected synchronized void stopInternal() throws org.apache.catalina.LifecycleException
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.LifecycleState $r1, $r13, $r36;
        org.apache.catalina.Container[] r2;
        java.util.ArrayList r3, $r16;
        int i0, $i1;
        org.apache.catalina.core.ContainerBase$StopChild $r4;
        java.util.Iterator r5;
        java.util.concurrent.Future r6, $r19;
        java.lang.Exception r7, $r22;
        org.apache.catalina.Manager r8;
        org.apache.catalina.Loader r9;
        org.apache.catalina.Pipeline $r10, $r11, $r14;
        boolean $z0, $z1, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.catalina.Lifecycle $r12, $r15, $r30, $r32, $r34, $r35, $r37, $r38;
        java.util.concurrent.ThreadPoolExecutor $r17;
        org.apache.catalina.Container $r18;
        java.lang.Object $r20;
        org.apache.juli.logging.Log $r23;
        org.apache.tomcat.util.res.StringManager $r24, $r27;
        java.lang.String $r25, $r28;
        org.apache.catalina.LifecycleException $r26;
        javax.naming.directory.DirContext r29;
        org.apache.catalina.Realm r31;
        org.apache.catalina.Cluster r33;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void threadStop()>();
        $r1 = <org.apache.catalina.LifecycleState: org.apache.catalina.LifecycleState STOPPING>;
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void setState(org.apache.catalina.LifecycleState)>($r1);
        $r10 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $z0 = $r10 instanceof org.apache.catalina.Lifecycle;
        if $z0 == 0 goto label0;

        $r11 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $r12 = (org.apache.catalina.Lifecycle) $r11;
        $r13 = interfaceinvoke $r12.<org.apache.catalina.Lifecycle: org.apache.catalina.LifecycleState getState()>();
        $z1 = virtualinvoke $r13.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z1 == 0 goto label0;

        $r14 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $r15 = (org.apache.catalina.Lifecycle) $r14;
        interfaceinvoke $r15.<org.apache.catalina.Lifecycle: void stop()>();

     label0:
        r2 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container[] findChildren()>();
        $r16 = new java.util.ArrayList;
        specialinvoke $r16.<java.util.ArrayList: void <init>()>();
        r3 = $r16;
        i0 = 0;
        goto label2;

     label1:
        $r17 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.ThreadPoolExecutor startStopExecutor>;
        $r4 = new org.apache.catalina.core.ContainerBase$StopChild;
        $r18 = r2[i0];
        specialinvoke $r4.<org.apache.catalina.core.ContainerBase$StopChild: void <init>(org.apache.catalina.Container)>($r18);
        $r19 = virtualinvoke $r17.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r4);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r19);
        i0 = i0 + 1;

     label2:
        $i1 = lengthof r2;
        if i0 < $i1 goto label1;

        z3 = 0;
        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();
        goto label7;

     label3:
        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.util.concurrent.Future) $r20;

     label4:
        interfaceinvoke r6.<java.util.concurrent.Future: java.lang.Object get()>();

     label5:
        goto label7;

     label6:
        $r22 := @caughtexception;
        r7 = $r22;
        $r23 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r24 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r25 = virtualinvoke $r24.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("containerBase.threadedStopFailed");
        interfaceinvoke $r23.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r25, r7);
        z3 = 1;

     label7:
        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z4 != 0 goto label3;

        if z3 == 0 goto label8;

        $r26 = new org.apache.catalina.LifecycleException;
        $r27 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r28 = virtualinvoke $r27.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("containerBase.threadedStopFailed");
        specialinvoke $r26.<org.apache.catalina.LifecycleException: void <init>(java.lang.String)>($r28);
        throw $r26;

     label8:
        r29 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: javax.naming.directory.DirContext getResourcesInternal()>();
        if r29 == null goto label9;

        $z5 = r29 instanceof org.apache.catalina.Lifecycle;
        if $z5 == 0 goto label9;

        $r30 = (org.apache.catalina.Lifecycle) r29;
        interfaceinvoke $r30.<org.apache.catalina.Lifecycle: void stop()>();

     label9:
        r31 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm getRealmInternal()>();
        if r31 == null goto label10;

        $z6 = r31 instanceof org.apache.catalina.Lifecycle;
        if $z6 == 0 goto label10;

        $r32 = (org.apache.catalina.Lifecycle) r31;
        interfaceinvoke $r32.<org.apache.catalina.Lifecycle: void stop()>();

     label10:
        r33 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster getClusterInternal()>();
        if r33 == null goto label11;

        $z7 = r33 instanceof org.apache.catalina.Lifecycle;
        if $z7 == 0 goto label11;

        $r34 = (org.apache.catalina.Lifecycle) r33;
        interfaceinvoke $r34.<org.apache.catalina.Lifecycle: void stop()>();

     label11:
        r8 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager getManagerInternal()>();
        if r8 == null goto label12;

        $z8 = r8 instanceof org.apache.catalina.Lifecycle;
        if $z8 == 0 goto label12;

        $r35 = (org.apache.catalina.Lifecycle) r8;
        $r36 = interfaceinvoke $r35.<org.apache.catalina.Lifecycle: org.apache.catalina.LifecycleState getState()>();
        $z9 = virtualinvoke $r36.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z9 == 0 goto label12;

        $r37 = (org.apache.catalina.Lifecycle) r8;
        interfaceinvoke $r37.<org.apache.catalina.Lifecycle: void stop()>();

     label12:
        r9 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader getLoaderInternal()>();
        if r9 == null goto label13;

        $z10 = r9 instanceof org.apache.catalina.Lifecycle;
        if $z10 == 0 goto label13;

        $r38 = (org.apache.catalina.Lifecycle) r9;
        interfaceinvoke $r38.<org.apache.catalina.Lifecycle: void stop()>();

     label13:
        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    protected void destroyInternal() throws org.apache.catalina.LifecycleException
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Manager r1;
        org.apache.catalina.Realm r2;
        org.apache.catalina.Cluster r3;
        org.apache.catalina.Loader r4;
        org.apache.catalina.Container[] r5, $r14;
        int i0, i1;
        org.apache.catalina.Container r6, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.catalina.Lifecycle $r7, $r8, $r9, $r10, $r13;
        org.apache.catalina.Pipeline $r11, $r12;
        java.util.concurrent.ThreadPoolExecutor $r17, $r18;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager getManagerInternal()>();
        if r1 == null goto label0;

        $z0 = r1 instanceof org.apache.catalina.Lifecycle;
        if $z0 == 0 goto label0;

        $r7 = (org.apache.catalina.Lifecycle) r1;
        interfaceinvoke $r7.<org.apache.catalina.Lifecycle: void destroy()>();

     label0:
        r2 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm getRealmInternal()>();
        if r2 == null goto label1;

        $z1 = r2 instanceof org.apache.catalina.Lifecycle;
        if $z1 == 0 goto label1;

        $r8 = (org.apache.catalina.Lifecycle) r2;
        interfaceinvoke $r8.<org.apache.catalina.Lifecycle: void destroy()>();

     label1:
        r3 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster getClusterInternal()>();
        if r3 == null goto label2;

        $z2 = r3 instanceof org.apache.catalina.Lifecycle;
        if $z2 == 0 goto label2;

        $r9 = (org.apache.catalina.Lifecycle) r3;
        interfaceinvoke $r9.<org.apache.catalina.Lifecycle: void destroy()>();

     label2:
        r4 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader getLoaderInternal()>();
        if r4 == null goto label3;

        $z3 = r4 instanceof org.apache.catalina.Lifecycle;
        if $z3 == 0 goto label3;

        $r10 = (org.apache.catalina.Lifecycle) r4;
        interfaceinvoke $r10.<org.apache.catalina.Lifecycle: void destroy()>();

     label3:
        $r11 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $z4 = $r11 instanceof org.apache.catalina.Lifecycle;
        if $z4 == 0 goto label4;

        $r12 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        $r13 = (org.apache.catalina.Lifecycle) $r12;
        interfaceinvoke $r13.<org.apache.catalina.Lifecycle: void destroy()>();

     label4:
        $r14 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container[] findChildren()>();
        r5 = $r14;
        i0 = lengthof $r14;
        i1 = 0;
        goto label6;

     label5:
        r6 = r5[i1];
        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void removeChild(org.apache.catalina.Container)>(r6);
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label5;

        $r15 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        if $r15 == null goto label7;

        $r16 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container parent>;
        interfaceinvoke $r16.<org.apache.catalina.Container: void removeChild(org.apache.catalina.Container)>(r0);

     label7:
        $r17 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.ThreadPoolExecutor startStopExecutor>;
        if $r17 == null goto label8;

        $r18 = r0.<org.apache.catalina.core.ContainerBase: java.util.concurrent.ThreadPoolExecutor startStopExecutor>;
        virtualinvoke $r18.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

     label8:
        specialinvoke r0.<org.apache.catalina.util.LifecycleMBeanBase: void destroyInternal()>();
        return;
    }

    public void logAccess(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long, boolean)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.connector.Request r1;
        org.apache.catalina.connector.Response r2;
        long l0;
        boolean z0, z1, $z2;
        org.apache.catalina.AccessLog $r3, $r4;
        org.apache.catalina.Container $r5, $r6;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.connector.Request;
        r2 := @parameter1: org.apache.catalina.connector.Response;
        l0 := @parameter2: long;
        z0 := @parameter3: boolean;
        z1 = 0;
        $r3 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.AccessLog getAccessLog()>();
        if $r3 == null goto label0;

        $r4 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.AccessLog getAccessLog()>();
        interfaceinvoke $r4.<org.apache.catalina.AccessLog: void log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)>(r1, r2, l0);
        z1 = 1;

     label0:
        $r5 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>();
        if $r5 == null goto label3;

        $r6 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Container getParent()>();
        if z0 == 0 goto label1;

        if z1 != 0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        interfaceinvoke $r6.<org.apache.catalina.Container: void logAccess(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long,boolean)>(r1, r2, l0, $z2);

     label3:
        return;
    }

    public org.apache.catalina.AccessLog getAccessLog()
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.core.AccessLogAdapter r1, $r8;
        org.apache.catalina.Valve[] r2, r3;
        int i0, i1;
        org.apache.catalina.Valve r4;
        boolean $z0, $z1;
        org.apache.catalina.AccessLog $r5, $r9, $r10, $r11;
        org.apache.catalina.Pipeline $r6;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $z0 = r0.<org.apache.catalina.core.ContainerBase: boolean accessLogScanComplete>;
        if $z0 == 0 goto label0;

        $r5 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.AccessLog accessLog>;
        return $r5;

     label0:
        r1 = null;
        $r6 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline getPipeline()>();
        r2 = interfaceinvoke $r6.<org.apache.catalina.Pipeline: org.apache.catalina.Valve[] getValves()>();
        r3 = r2;
        i0 = lengthof r2;
        i1 = 0;
        goto label4;

     label1:
        r4 = r3[i1];
        $z1 = r4 instanceof org.apache.catalina.AccessLog;
        if $z1 == 0 goto label3;

        if r1 != null goto label2;

        $r8 = new org.apache.catalina.core.AccessLogAdapter;
        $r9 = (org.apache.catalina.AccessLog) r4;
        specialinvoke $r8.<org.apache.catalina.core.AccessLogAdapter: void <init>(org.apache.catalina.AccessLog)>($r9);
        r1 = $r8;
        goto label3;

     label2:
        $r10 = (org.apache.catalina.AccessLog) r4;
        virtualinvoke r1.<org.apache.catalina.core.AccessLogAdapter: void add(org.apache.catalina.AccessLog)>($r10);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        if r1 == null goto label5;

        r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.AccessLog accessLog> = r1;

     label5:
        r0.<org.apache.catalina.core.ContainerBase: boolean accessLogScanComplete> = 1;
        $r11 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.AccessLog accessLog>;
        return $r11;
    }

    public synchronized void addValve(org.apache.catalina.Valve)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Valve r1;
        org.apache.catalina.Pipeline $r2;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: org.apache.catalina.Valve;
        $r2 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        interfaceinvoke $r2.<org.apache.catalina.Pipeline: void addValve(org.apache.catalina.Valve)>(r1);
        return;
    }

    public void backgroundProcess()
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Cluster r1;
        java.lang.Exception r2, r4, r5, r6, r7, $r9, $r14, $r20, $r26, $r33;
        org.apache.tomcat.util.res.StringManager $r3, $r16, $r22, $r28, $r35;
        org.apache.catalina.LifecycleState $r8;
        boolean $z0;
        org.apache.juli.logging.Log $r10, $r15, $r21, $r27, $r34;
        java.lang.Object[] $r11, $r17, $r23, $r29, $r36;
        java.lang.String $r12, $r18, $r24, $r30, $r37;
        org.apache.catalina.Loader r13;
        org.apache.catalina.Manager r19;
        org.apache.catalina.Realm r25;
        org.apache.catalina.Pipeline $r31;
        org.apache.catalina.Valve r32;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r8 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.LifecycleState getState()>();
        $z0 = virtualinvoke $r8.<org.apache.catalina.LifecycleState: boolean isAvailable()>();
        if $z0 != 0 goto label0;

        return;

     label0:
        r1 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Cluster getClusterInternal()>();
        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<org.apache.catalina.Cluster: void backgroundProcess()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;
        r2 = $r9;
        $r10 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r3 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r11 = newarray (java.lang.Object)[1];
        $r11[0] = r1;
        $r12 = virtualinvoke $r3.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("containerBase.backgroundProcess.cluster", $r11);
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r12, r2);

     label4:
        r13 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Loader getLoaderInternal()>();
        if r13 == null goto label8;

     label5:
        interfaceinvoke r13.<org.apache.catalina.Loader: void backgroundProcess()>();

     label6:
        goto label8;

     label7:
        $r14 := @caughtexception;
        r4 = $r14;
        $r15 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r16 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r17 = newarray (java.lang.Object)[1];
        $r17[0] = r13;
        $r18 = virtualinvoke $r16.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("containerBase.backgroundProcess.loader", $r17);
        interfaceinvoke $r15.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r18, r4);

     label8:
        r19 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Manager getManagerInternal()>();
        if r19 == null goto label12;

     label9:
        interfaceinvoke r19.<org.apache.catalina.Manager: void backgroundProcess()>();

     label10:
        goto label12;

     label11:
        $r20 := @caughtexception;
        r5 = $r20;
        $r21 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r22 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r23 = newarray (java.lang.Object)[1];
        $r23[0] = r19;
        $r24 = virtualinvoke $r22.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("containerBase.backgroundProcess.manager", $r23);
        interfaceinvoke $r21.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r24, r5);

     label12:
        r25 = virtualinvoke r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Realm getRealmInternal()>();
        if r25 == null goto label16;

     label13:
        interfaceinvoke r25.<org.apache.catalina.Realm: void backgroundProcess()>();

     label14:
        goto label16;

     label15:
        $r26 := @caughtexception;
        r6 = $r26;
        $r27 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r28 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r29 = newarray (java.lang.Object)[1];
        $r29[0] = r25;
        $r30 = virtualinvoke $r28.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("containerBase.backgroundProcess.realm", $r29);
        interfaceinvoke $r27.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r30, r6);

     label16:
        $r31 = r0.<org.apache.catalina.core.ContainerBase: org.apache.catalina.Pipeline pipeline>;
        r32 = interfaceinvoke $r31.<org.apache.catalina.Pipeline: org.apache.catalina.Valve getFirst()>();
        goto label21;

     label17:
        interfaceinvoke r32.<org.apache.catalina.Valve: void backgroundProcess()>();

     label18:
        goto label20;

     label19:
        $r33 := @caughtexception;
        r7 = $r33;
        $r34 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        $r35 = <org.apache.catalina.core.ContainerBase: org.apache.tomcat.util.res.StringManager sm>;
        $r36 = newarray (java.lang.Object)[1];
        $r36[0] = r32;
        $r37 = virtualinvoke $r35.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("containerBase.backgroundProcess.valve", $r36);
        interfaceinvoke $r34.<org.apache.juli.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r37, r7);

     label20:
        r32 = interfaceinvoke r32.<org.apache.catalina.Valve: org.apache.catalina.Valve getNext()>();

     label21:
        if r32 != null goto label17;

        virtualinvoke r0.<org.apache.catalina.core.ContainerBase: void fireLifecycleEvent(java.lang.String,java.lang.Object)>("periodic", null);
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
        catch java.lang.Exception from label9 to label10 with label11;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label17 to label18 with label19;
    }

    public void fireContainerEvent(java.lang.String, java.lang.Object)
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.String r1;
        java.lang.Object r2, $r9;
        org.apache.catalina.ContainerEvent r3, $r7;
        java.util.Iterator r4;
        org.apache.catalina.ContainerListener r5;
        java.util.List $r6, $r8;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $r6 = r0.<org.apache.catalina.core.ContainerBase: java.util.List listeners>;
        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();
        if $i0 >= 1 goto label0;

        return;

     label0:
        $r7 = new org.apache.catalina.ContainerEvent;
        specialinvoke $r7.<org.apache.catalina.ContainerEvent: void <init>(org.apache.catalina.Container,java.lang.String,java.lang.Object)>(r0, r1, r2);
        r3 = $r7;
        $r8 = r0.<org.apache.catalina.core.ContainerBase: java.util.List listeners>;
        r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
        goto label2;

     label1:
        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (org.apache.catalina.ContainerListener) $r9;
        interfaceinvoke r5.<org.apache.catalina.ContainerListener: void containerEvent(org.apache.catalina.ContainerEvent)>(r3);

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label1;

        return;
    }

    protected java.lang.String logName()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.String r1, r3, $r4, $r5, $r13, $r17, $r18, $r21, $r22;
        org.apache.catalina.Container r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r19, $r20;
        java.lang.Class $r16;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.lang.String logName>;
        if $r4 == null goto label0;

        $r5 = r0.<org.apache.catalina.core.ContainerBase: java.lang.String logName>;
        return $r5;

     label0:
        r1 = null;
        r2 = r0;
        goto label7;

     label1:
        r3 = interfaceinvoke r2.<org.apache.catalina.Container: java.lang.String getName()>();
        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label3;

     label2:
        r3 = "/";
        goto label4;

     label3:
        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("##");
        if $z1 == 0 goto label4;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("/");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        if r1 == null goto label5;

        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(".");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label6;

     label5:
        $r13 = "";

     label6:
        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        r2 = interfaceinvoke r2.<org.apache.catalina.Container: org.apache.catalina.Container getParent()>();

     label7:
        if r2 != null goto label1;

        $r15 = new java.lang.StringBuilder;
        $r16 = class "org/apache/catalina/core/ContainerBase";
        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();
        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);
        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);
        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<org.apache.catalina.core.ContainerBase: java.lang.String logName> = $r21;
        $r22 = r0.<org.apache.catalina.core.ContainerBase: java.lang.String logName>;
        return $r22;
    }

    protected java.lang.String getDomainInternal()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = staticinvoke <org.apache.catalina.mbeans.MBeanUtils: java.lang.String getDomain(org.apache.catalina.Container)>(r0);
        return $r1;
    }

    public javax.management.ObjectName[] getChildren()
    {
        org.apache.catalina.core.ContainerBase r0, $r8;
        java.util.ArrayList $r1, r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.HashMap $r5, $r6;
        int $i0, $i1;
        java.util.Collection $r7;
        boolean $z0, $z2;
        javax.management.ObjectName $r9;
        javax.management.ObjectName[] $r10, $r12;
        java.lang.Object[] $r11;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r1 = new java.util.ArrayList;
        $r5 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $i0 = virtualinvoke $r5.<java.util.HashMap: int size()>();
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);
        r2 = $r1;
        $r6 = r0.<org.apache.catalina.core.ContainerBase: java.util.HashMap children>;
        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();
        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();
        goto label1;

     label0:
        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $z0 = r4 instanceof org.apache.catalina.core.ContainerBase;
        if $z0 == 0 goto label1;

        $r8 = (org.apache.catalina.core.ContainerBase) r4;
        $r9 = virtualinvoke $r8.<org.apache.catalina.core.ContainerBase: javax.management.ObjectName getObjectName()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z2 != 0 goto label0;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();
        $r10 = newarray (javax.management.ObjectName)[$i1];
        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);
        $r12 = (javax.management.ObjectName[]) $r11;
        return $r12;
    }

    protected void threadStart()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.String r1, $r5;
        org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor $r2;
        java.lang.Thread $r3, $r8, $r9, $r10;
        int $i0;
        java.lang.StringBuilder $r4, $r6, $r7;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r3 = r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread>;
        if $r3 == null goto label0;

        return;

     label0:
        $i0 = r0.<org.apache.catalina.core.ContainerBase: int backgroundProcessorDelay>;
        if $i0 > 0 goto label1;

        return;

     label1:
        r0.<org.apache.catalina.core.ContainerBase: boolean threadDone> = 0;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("ContainerBackgroundProcessor[");
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r8 = new java.lang.Thread;
        $r2 = new org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor;
        specialinvoke $r2.<org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor: void <init>(org.apache.catalina.core.ContainerBase)>(r0);
        specialinvoke $r8.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r2, r1);
        r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread> = $r8;
        $r9 = r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread>;
        virtualinvoke $r9.<java.lang.Thread: void setDaemon(boolean)>(1);
        $r10 = r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread>;
        virtualinvoke $r10.<java.lang.Thread: void start()>();
        return;
    }

    protected void threadStop()
    {
        org.apache.catalina.core.ContainerBase r0;
        java.lang.InterruptedException r1, $r5;
        java.lang.Thread $r2, $r3, $r4;

        r0 := @this: org.apache.catalina.core.ContainerBase;
        $r2 = r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread>;
        if $r2 != null goto label0;

        return;

     label0:
        r0.<org.apache.catalina.core.ContainerBase: boolean threadDone> = 1;
        $r3 = r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread>;
        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label1:
        $r4 = r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread>;
        virtualinvoke $r4.<java.lang.Thread: void join()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;
        r1 = $r5;

     label4:
        r0.<org.apache.catalina.core.ContainerBase: java.lang.Thread thread> = null;
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    static void access$0(org.apache.catalina.core.ContainerBase, org.apache.catalina.Container)
    {
        org.apache.catalina.core.ContainerBase r0;
        org.apache.catalina.Container r1;

        r0 := @parameter0: org.apache.catalina.core.ContainerBase;
        r1 := @parameter1: org.apache.catalina.Container;
        specialinvoke r0.<org.apache.catalina.core.ContainerBase: void addChildInternal(org.apache.catalina.Container)>(r1);
        return;
    }

    static boolean access$1(org.apache.catalina.core.ContainerBase)
    {
        org.apache.catalina.core.ContainerBase r0;
        boolean $z0;

        r0 := @parameter0: org.apache.catalina.core.ContainerBase;
        $z0 = r0.<org.apache.catalina.core.ContainerBase: boolean threadDone>;
        return $z0;
    }

    static org.apache.juli.logging.Log access$2()
    {
        org.apache.juli.logging.Log $r0;

        $r0 = <org.apache.catalina.core.ContainerBase: org.apache.juli.logging.Log log>;
        return $r0;
    }
}
