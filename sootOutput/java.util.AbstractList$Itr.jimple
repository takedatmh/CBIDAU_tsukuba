class java.util.AbstractList$Itr extends java.lang.Object implements java.util.Iterator
{
    int cursor;
    int lastRet;
    int expectedModCount;
    final java.util.AbstractList this$0;

    private void <init>(java.util.AbstractList)
    {
        java.util.AbstractList$Itr r0;
        java.util.AbstractList r1, $r2;
        int $i0;

        r0 := @this: java.util.AbstractList$Itr;
        r1 := @parameter0: java.util.AbstractList;
        r0.<java.util.AbstractList$Itr: java.util.AbstractList this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.AbstractList$Itr: int cursor> = 0;
        r0.<java.util.AbstractList$Itr: int lastRet> = -1;
        $r2 = r0.<java.util.AbstractList$Itr: java.util.AbstractList this$0>;
        $i0 = $r2.<java.util.AbstractList: int modCount>;
        r0.<java.util.AbstractList$Itr: int expectedModCount> = $i0;
        return;
    }

    public boolean hasNext()
    {
        java.util.AbstractList$Itr r0;
        int $i0, $i1;
        java.util.AbstractList $r1;
        boolean $z0;

        r0 := @this: java.util.AbstractList$Itr;
        $i0 = r0.<java.util.AbstractList$Itr: int cursor>;
        $r1 = r0.<java.util.AbstractList$Itr: java.util.AbstractList this$0>;
        $i1 = virtualinvoke $r1.<java.util.AbstractList: int size()>();
        if $i0 == $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.AbstractList$Itr r0;
        int i0, $i1;
        java.lang.Object r1;
        java.util.AbstractList $r2;
        java.lang.IndexOutOfBoundsException $r4, r5;
        java.util.NoSuchElementException $r6;

        r0 := @this: java.util.AbstractList$Itr;
        virtualinvoke r0.<java.util.AbstractList$Itr: void checkForComodification()>();

     label0:
        i0 = r0.<java.util.AbstractList$Itr: int cursor>;
        $r2 = r0.<java.util.AbstractList$Itr: java.util.AbstractList this$0>;
        r1 = virtualinvoke $r2.<java.util.AbstractList: java.lang.Object get(int)>(i0);
        r0.<java.util.AbstractList$Itr: int lastRet> = i0;
        $i1 = i0 + 1;
        r0.<java.util.AbstractList$Itr: int cursor> = $i1;

     label1:
        return r1;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        virtualinvoke r0.<java.util.AbstractList$Itr: void checkForComodification()>();
        $r6 = new java.util.NoSuchElementException;
        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();
        throw $r6;

        catch java.lang.IndexOutOfBoundsException from label0 to label1 with label2;
    }

    public void remove()
    {
        java.util.AbstractList$Itr r0;
        java.lang.IndexOutOfBoundsException r1, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalStateException $r2;
        java.util.AbstractList $r3, $r6;
        java.util.ConcurrentModificationException $r8;

        r0 := @this: java.util.AbstractList$Itr;
        $i0 = r0.<java.util.AbstractList$Itr: int lastRet>;
        if $i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();
        throw $r2;

     label0:
        virtualinvoke r0.<java.util.AbstractList$Itr: void checkForComodification()>();

     label1:
        $r3 = r0.<java.util.AbstractList$Itr: java.util.AbstractList this$0>;
        $i1 = r0.<java.util.AbstractList$Itr: int lastRet>;
        virtualinvoke $r3.<java.util.AbstractList: java.lang.Object remove(int)>($i1);
        $i2 = r0.<java.util.AbstractList$Itr: int lastRet>;
        $i3 = r0.<java.util.AbstractList$Itr: int cursor>;
        if $i2 >= $i3 goto label2;

        $i4 = r0.<java.util.AbstractList$Itr: int cursor>;
        $i5 = $i4 - 1;
        r0.<java.util.AbstractList$Itr: int cursor> = $i5;

     label2:
        r0.<java.util.AbstractList$Itr: int lastRet> = -1;
        $r6 = r0.<java.util.AbstractList$Itr: java.util.AbstractList this$0>;
        $i6 = $r6.<java.util.AbstractList: int modCount>;
        r0.<java.util.AbstractList$Itr: int expectedModCount> = $i6;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        r1 = $r7;
        $r8 = new java.util.ConcurrentModificationException;
        specialinvoke $r8.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r8;

     label5:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label3 with label4;
    }

    final void checkForComodification()
    {
        java.util.AbstractList$Itr r0;
        java.util.AbstractList $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: java.util.AbstractList$Itr;
        $r1 = r0.<java.util.AbstractList$Itr: java.util.AbstractList this$0>;
        $i0 = $r1.<java.util.AbstractList: int modCount>;
        $i1 = r0.<java.util.AbstractList$Itr: int expectedModCount>;
        if $i0 == $i1 goto label0;

        $r2 = new java.util.ConcurrentModificationException;
        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r2;

     label0:
        return;
    }

    void <init>(java.util.AbstractList, java.util.AbstractList$1)
    {
        java.util.AbstractList$Itr r0;
        java.util.AbstractList r1;
        java.util.AbstractList$1 r2;

        r0 := @this: java.util.AbstractList$Itr;
        r1 := @parameter0: java.util.AbstractList;
        r2 := @parameter1: java.util.AbstractList$1;
        specialinvoke r0.<java.util.AbstractList$Itr: void <init>(java.util.AbstractList)>(r1);
        return;
    }
}
