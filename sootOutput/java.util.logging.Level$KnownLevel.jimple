final class java.util.logging.Level$KnownLevel extends java.lang.Object
{
    private static java.util.Map nameToLevels;
    private static java.util.Map intToLevels;
    final java.util.logging.Level levelObject;
    final java.util.logging.Level mirroredLevel;

    void <init>(java.util.logging.Level)
    {
        java.util.logging.Level$KnownLevel r0;
        java.util.logging.Level r1, $r3;
        java.lang.Class $r2;
        java.lang.String $r4, $r5;
        int $i0;

        r0 := @this: java.util.logging.Level$KnownLevel;
        r1 := @parameter0: java.util.logging.Level;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.logging.Level$KnownLevel: java.util.logging.Level levelObject> = r1;
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r2 != class "java/util/logging/Level" goto label0;

        r0.<java.util.logging.Level$KnownLevel: java.util.logging.Level mirroredLevel> = r1;
        goto label1;

     label0:
        $r3 = new java.util.logging.Level;
        $r4 = staticinvoke <java.util.logging.Level: java.lang.String access$000(java.util.logging.Level)>(r1);
        $i0 = staticinvoke <java.util.logging.Level: int access$100(java.util.logging.Level)>(r1);
        $r5 = staticinvoke <java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>(r1);
        specialinvoke $r3.<java.util.logging.Level: void <init>(java.lang.String,int,java.lang.String)>($r4, $i0, $r5);
        r0.<java.util.logging.Level$KnownLevel: java.util.logging.Level mirroredLevel> = $r3;

     label1:
        return;
    }

    static synchronized void add(java.util.logging.Level)
    {
        java.util.logging.Level r0;
        java.util.logging.Level$KnownLevel $r1, r2;
        java.util.List r3, r14;
        java.util.Map $r4, $r8, $r11, $r16;
        java.lang.String $r5, $r9;
        java.lang.Object $r6, $r13;
        java.util.ArrayList $r7, $r15;
        int $i0, $i1;
        java.lang.Integer $r12, $r17;

        r0 := @parameter0: java.util.logging.Level;
        $r1 = new java.util.logging.Level$KnownLevel;
        specialinvoke $r1.<java.util.logging.Level$KnownLevel: void <init>(java.util.logging.Level)>(r0);
        r2 = $r1;
        $r4 = <java.util.logging.Level$KnownLevel: java.util.Map nameToLevels>;
        $r5 = staticinvoke <java.util.logging.Level: java.lang.String access$000(java.util.logging.Level)>(r0);
        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);
        r3 = (java.util.List) $r6;
        if r3 != null goto label0;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>()>();
        r3 = $r7;
        $r8 = <java.util.logging.Level$KnownLevel: java.util.Map nameToLevels>;
        $r9 = staticinvoke <java.util.logging.Level: java.lang.String access$000(java.util.logging.Level)>(r0);
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r3);

     label0:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2);
        $r11 = <java.util.logging.Level$KnownLevel: java.util.Map intToLevels>;
        $i0 = staticinvoke <java.util.logging.Level: int access$100(java.util.logging.Level)>(r0);
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);
        r14 = (java.util.List) $r13;
        if r14 != null goto label1;

        $r15 = new java.util.ArrayList;
        specialinvoke $r15.<java.util.ArrayList: void <init>()>();
        r14 = $r15;
        $r16 = <java.util.logging.Level$KnownLevel: java.util.Map intToLevels>;
        $i1 = staticinvoke <java.util.logging.Level: int access$100(java.util.logging.Level)>(r0);
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r14);

     label1:
        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r2);
        return;
    }

    static synchronized java.util.logging.Level$KnownLevel findByName(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        java.util.List r2;
        java.lang.Object $r3, $r4;
        java.util.logging.Level$KnownLevel $r5;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.util.logging.Level$KnownLevel: java.util.Map nameToLevels>;
        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (java.util.List) $r3;
        if r2 == null goto label0;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);
        $r5 = (java.util.logging.Level$KnownLevel) $r4;
        return $r5;

     label0:
        return null;
    }

    static synchronized java.util.logging.Level$KnownLevel findByValue(int)
    {
        int i0;
        java.util.Map $r0;
        java.util.List r1;
        java.lang.Integer $r2;
        java.lang.Object $r3, $r4;
        java.util.logging.Level$KnownLevel $r5;

        i0 := @parameter0: int;
        $r0 = <java.util.logging.Level$KnownLevel: java.util.Map intToLevels>;
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        $r3 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);
        r1 = (java.util.List) $r3;
        if r1 == null goto label0;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);
        $r5 = (java.util.logging.Level$KnownLevel) $r4;
        return $r5;

     label0:
        return null;
    }

    static synchronized java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)
    {
        java.lang.String r0, r6;
        java.util.Map $r1;
        java.util.Iterator r2, r4;
        java.util.List r3;
        java.util.logging.Level$KnownLevel r5;
        java.util.Collection $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r9;
        java.util.logging.Level $r10;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.util.logging.Level$KnownLevel: java.util.Map nameToLevels>;
        $r7 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();
        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.List) $r8;
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.logging.Level$KnownLevel) $r9;
        $r10 = r5.<java.util.logging.Level$KnownLevel: java.util.logging.Level levelObject>;
        r6 = virtualinvoke $r10.<java.util.logging.Level: java.lang.String getLocalizedLevelName()>();
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r6);
        if $z2 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        goto label0;

     label4:
        return null;
    }

    static synchronized java.util.logging.Level$KnownLevel findByLocalizedName(java.lang.String)
    {
        java.lang.String r0, r6;
        java.util.Map $r1;
        java.util.Iterator r2, r4;
        java.util.List r3;
        java.util.logging.Level$KnownLevel r5;
        java.util.Collection $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r9;
        java.util.logging.Level $r10;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.util.logging.Level$KnownLevel: java.util.Map nameToLevels>;
        $r7 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();
        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.List) $r8;
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.logging.Level$KnownLevel) $r9;
        $r10 = r5.<java.util.logging.Level$KnownLevel: java.util.logging.Level levelObject>;
        r6 = virtualinvoke $r10.<java.util.logging.Level: java.lang.String getLocalizedName()>();
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r6);
        if $z2 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        goto label0;

     label4:
        return null;
    }

    static synchronized java.util.logging.Level$KnownLevel matches(java.util.logging.Level)
    {
        java.util.logging.Level r0, r5;
        java.util.Map $r1;
        java.util.List r2;
        java.util.Iterator r3;
        java.util.logging.Level$KnownLevel r4;
        java.lang.String $r6, $r9, $r10, $r11, $r12, $r13;
        java.lang.Object $r7, $r8;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @parameter0: java.util.logging.Level;
        $r1 = <java.util.logging.Level$KnownLevel: java.util.Map nameToLevels>;
        $r6 = staticinvoke <java.util.logging.Level: java.lang.String access$000(java.util.logging.Level)>(r0);
        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);
        r2 = (java.util.List) $r7;
        if r2 == null goto label3;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.logging.Level$KnownLevel) $r8;
        r5 = r4.<java.util.logging.Level$KnownLevel: java.util.logging.Level mirroredLevel>;
        $i0 = staticinvoke <java.util.logging.Level: int access$100(java.util.logging.Level)>(r0);
        $i1 = staticinvoke <java.util.logging.Level: int access$100(java.util.logging.Level)>(r5);
        if $i0 != $i1 goto label2;

        $r9 = staticinvoke <java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>(r0);
        $r10 = staticinvoke <java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>(r5);
        if $r9 == $r10 goto label1;

        $r11 = staticinvoke <java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>(r0);
        if $r11 == null goto label2;

        $r12 = staticinvoke <java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>(r0);
        $r13 = staticinvoke <java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>(r5);
        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);
        if $z1 == 0 goto label2;

     label1:
        return r4;

     label2:
        goto label0;

     label3:
        return null;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        <java.util.logging.Level$KnownLevel: java.util.Map nameToLevels> = $r0;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        <java.util.logging.Level$KnownLevel: java.util.Map intToLevels> = $r1;
        return;
    }
}
