abstract class java.util.LinkedHashMap$LinkedHashIterator extends java.lang.Object implements java.util.Iterator
{
    java.util.LinkedHashMap$Entry nextEntry;
    java.util.LinkedHashMap$Entry lastReturned;
    int expectedModCount;
    final java.util.LinkedHashMap this$0;

    private void <init>(java.util.LinkedHashMap)
    {
        java.util.LinkedHashMap$LinkedHashIterator r0;
        java.util.LinkedHashMap r1, $r2, $r5;
        java.util.LinkedHashMap$Entry $r3, $r4;
        int $i0;

        r0 := @this: java.util.LinkedHashMap$LinkedHashIterator;
        r1 := @parameter0: java.util.LinkedHashMap;
        r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $r3 = staticinvoke <java.util.LinkedHashMap: java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)>($r2);
        $r4 = $r3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry> = $r4;
        r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry lastReturned> = null;
        $r5 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $i0 = $r5.<java.util.LinkedHashMap: int modCount>;
        r0.<java.util.LinkedHashMap$LinkedHashIterator: int expectedModCount> = $i0;
        return;
    }

    public boolean hasNext()
    {
        java.util.LinkedHashMap$LinkedHashIterator r0;
        java.util.LinkedHashMap$Entry $r1, $r3;
        java.util.LinkedHashMap $r2;
        boolean $z0;

        r0 := @this: java.util.LinkedHashMap$LinkedHashIterator;
        $r1 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry>;
        $r2 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $r3 = staticinvoke <java.util.LinkedHashMap: java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)>($r2);
        if $r1 == $r3 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public void remove()
    {
        java.util.LinkedHashMap$LinkedHashIterator r0;
        java.util.LinkedHashMap$Entry $r1, $r6;
        java.lang.IllegalStateException $r2;
        java.util.LinkedHashMap $r3, $r5, $r9;
        int $i0, $i1, $i2;
        java.util.ConcurrentModificationException $r4;
        java.lang.Object $r7;

        r0 := @this: java.util.LinkedHashMap$LinkedHashIterator;
        $r1 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry lastReturned>;
        if $r1 != null goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $i0 = $r3.<java.util.LinkedHashMap: int modCount>;
        $i1 = r0.<java.util.LinkedHashMap$LinkedHashIterator: int expectedModCount>;
        if $i0 == $i1 goto label1;

        $r4 = new java.util.ConcurrentModificationException;
        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $r6 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry lastReturned>;
        $r7 = $r6.<java.util.LinkedHashMap$Entry: java.lang.Object key>;
        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r7);
        r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry lastReturned> = null;
        $r9 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $i2 = $r9.<java.util.LinkedHashMap: int modCount>;
        r0.<java.util.LinkedHashMap$LinkedHashIterator: int expectedModCount> = $i2;
        return;
    }

    java.util.LinkedHashMap$Entry nextEntry()
    {
        java.util.LinkedHashMap$LinkedHashIterator r0;
        java.util.LinkedHashMap$Entry $r1, r2, $r5, $r7, $r9;
        java.util.LinkedHashMap $r3, $r6;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r4;
        java.util.NoSuchElementException $r8;

        r0 := @this: java.util.LinkedHashMap$LinkedHashIterator;
        $r3 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $i0 = $r3.<java.util.LinkedHashMap: int modCount>;
        $i1 = r0.<java.util.LinkedHashMap$LinkedHashIterator: int expectedModCount>;
        if $i0 == $i1 goto label0;

        $r4 = new java.util.ConcurrentModificationException;
        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r4;

     label0:
        $r5 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry>;
        $r6 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap this$0>;
        $r7 = staticinvoke <java.util.LinkedHashMap: java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)>($r6);
        if $r5 != $r7 goto label1;

        $r8 = new java.util.NoSuchElementException;
        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();
        throw $r8;

     label1:
        $r1 = r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry>;
        r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry lastReturned> = $r1;
        r2 = $r1;
        $r9 = r2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        r0.<java.util.LinkedHashMap$LinkedHashIterator: java.util.LinkedHashMap$Entry nextEntry> = $r9;
        return r2;
    }

    void <init>(java.util.LinkedHashMap, java.util.LinkedHashMap$1)
    {
        java.util.LinkedHashMap$LinkedHashIterator r0;
        java.util.LinkedHashMap r1;
        java.util.LinkedHashMap$1 r2;

        r0 := @this: java.util.LinkedHashMap$LinkedHashIterator;
        r1 := @parameter0: java.util.LinkedHashMap;
        r2 := @parameter1: java.util.LinkedHashMap$1;
        specialinvoke r0.<java.util.LinkedHashMap$LinkedHashIterator: void <init>(java.util.LinkedHashMap)>(r1);
        return;
    }
}
