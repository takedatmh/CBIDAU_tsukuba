final class javax.crypto.JceSecurity extends java.lang.Object
{
    static final java.security.SecureRandom RANDOM;
    private static javax.crypto.CryptoPermissions defaultPolicy;
    private static javax.crypto.CryptoPermissions exemptPolicy;
    private static final java.util.Map verificationResults;
    private static final java.util.Map verifyingProviders;
    private static boolean isRestricted;
    private static final java.lang.Object PROVIDER_VERIFIED;
    private static final java.net.URL NULL_URL;
    private static final java.util.Map codeBaseCacheRef;

    private void <init>()
    {
        javax.crypto.JceSecurity r0;

        r0 := @this: javax.crypto.JceSecurity;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static sun.security.jca.GetInstance$Instance getInstance(java.lang.String, java.lang.Class, java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r2, r3, r6;
        java.lang.Class r1;
        java.security.Provider$Service r4;
        java.lang.Exception r5;
        java.security.Provider $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.security.NoSuchProviderException $r11, $r13;
        java.lang.Throwable $r12;
        sun.security.jca.GetInstance$Instance $r14;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        r4 = staticinvoke <sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.lang.String)>(r0, r2, r3);
        $r7 = virtualinvoke r4.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r5 = staticinvoke <javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)>($r7);
        if r5 == null goto label0;

        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JCE cannot authenticate the provider ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = new java.security.NoSuchProviderException;
        specialinvoke $r11.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r6);
        $r12 = virtualinvoke $r11.<java.security.NoSuchProviderException: java.lang.Throwable initCause(java.lang.Throwable)>(r5);
        $r13 = (java.security.NoSuchProviderException) $r12;
        throw $r13;

     label0:
        $r14 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>(r4, r1);
        return $r14;
    }

    static sun.security.jca.GetInstance$Instance getInstance(java.lang.String, java.lang.Class, java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, r2, r6, $r9;
        java.lang.Class r1;
        java.security.Provider r3;
        java.security.Provider$Service r4;
        java.lang.Exception r5;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.SecurityException $r11;
        sun.security.jca.GetInstance$Instance $r12;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.security.Provider;
        r4 = staticinvoke <sun.security.jca.GetInstance: java.security.Provider$Service getService(java.lang.String,java.lang.String,java.security.Provider)>(r0, r2, r3);
        r5 = staticinvoke <javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)>(r3);
        if r5 == null goto label0;

        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JCE cannot authenticate the provider ");
        $r9 = virtualinvoke r3.<java.security.Provider: java.lang.String getName()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = new java.lang.SecurityException;
        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>(r6, r5);
        throw $r11;

     label0:
        $r12 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>(r4, r1);
        return $r12;
    }

    static sun.security.jca.GetInstance$Instance getInstance(java.lang.String, java.lang.Class, java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, r2, $r18;
        java.lang.Class r1;
        java.util.List r3;
        java.security.NoSuchAlgorithmException r4, $r12, r13, $r14;
        java.util.Iterator r5;
        java.security.Provider$Service r6;
        sun.security.jca.GetInstance$Instance r7;
        java.lang.StringBuilder $r8, $r15, $r16, $r17;
        boolean $z0, $z1;
        java.lang.Object $r9;
        java.security.Provider $r10;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.String;
        r3 = staticinvoke <sun.security.jca.GetInstance: java.util.List getServices(java.lang.String,java.lang.String)>(r0, r2);
        r4 = null;
        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.security.Provider$Service) $r9;
        $r10 = virtualinvoke r6.<java.security.Provider$Service: java.security.Provider getProvider()>();
        $z1 = staticinvoke <javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)>($r10);
        if $z1 != 0 goto label1;

        goto label0;

     label1:
        r7 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>(r6, r1);

     label2:
        return r7;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        r4 = r13;
        goto label0;

     label4:
        $r14 = new java.security.NoSuchAlgorithmException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Algorithm ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not available");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r14.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>($r18, r4);
        throw $r14;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    static javax.crypto.CryptoPermissions verifyExemptJar(java.net.URL) throws java.lang.Exception
    {
        java.net.URL r0;
        javax.crypto.JarVerifier $r1, r2;
        javax.crypto.CryptoPermissions $r3;

        r0 := @parameter0: java.net.URL;
        $r1 = new javax.crypto.JarVerifier;
        specialinvoke $r1.<javax.crypto.JarVerifier: void <init>(java.net.URL,boolean)>(r0, 1);
        r2 = $r1;
        virtualinvoke r2.<javax.crypto.JarVerifier: void verify()>();
        $r3 = virtualinvoke r2.<javax.crypto.JarVerifier: javax.crypto.CryptoPermissions getPermissions()>();
        return $r3;
    }

    static void verifyProviderJar(java.net.URL) throws java.lang.Exception
    {
        java.net.URL r0;
        javax.crypto.JarVerifier $r1, r2;

        r0 := @parameter0: java.net.URL;
        $r1 = new javax.crypto.JarVerifier;
        specialinvoke $r1.<javax.crypto.JarVerifier: void <init>(java.net.URL,boolean)>(r0, 0);
        r2 = $r1;
        virtualinvoke r2.<javax.crypto.JarVerifier: void verify()>();
        return;
    }

    static synchronized java.lang.Exception getVerificationResult(java.security.Provider)
    {
        java.security.Provider r0;
        java.util.Map $r1, $r7, $r10, $r14, $r17, $r21, $r24, $r27;
        java.lang.Object r2, $r5, $r8, $r15;
        java.net.URL r3;
        null_type n0;
        java.lang.Throwable r4, $r26;
        java.lang.Exception $r6, $r19, r20, r23;
        java.security.NoSuchProviderException $r9;
        java.lang.Boolean $r11;
        java.lang.Class $r13;

        r0 := @parameter0: java.security.Provider;
        $r1 = <javax.crypto.JceSecurity: java.util.Map verificationResults>;
        r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        $r5 = <javax.crypto.JceSecurity: java.lang.Object PROVIDER_VERIFIED>;
        if r2 != $r5 goto label0;

        return null;

     label0:
        if r2 == null goto label1;

        $r6 = (java.lang.Exception) r2;
        return $r6;

     label1:
        $r7 = <javax.crypto.JceSecurity: java.util.Map verifyingProviders>;
        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        if $r8 == null goto label2;

        $r9 = new java.security.NoSuchProviderException;
        specialinvoke $r9.<java.security.NoSuchProviderException: void <init>(java.lang.String)>("Recursion during verification");
        return $r9;

     label2:
        $r10 = <javax.crypto.JceSecurity: java.util.Map verifyingProviders>;
        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r11);
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r3 = staticinvoke <javax.crypto.JceSecurity: java.net.URL getCodeBase(java.lang.Class)>($r13);
        staticinvoke <javax.crypto.JceSecurity: void verifyProviderJar(java.net.URL)>(r3);
        $r14 = <javax.crypto.JceSecurity: java.util.Map verificationResults>;
        $r15 = <javax.crypto.JceSecurity: java.lang.Object PROVIDER_VERIFIED>;
        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r15);
        n0 = null;

     label3:
        $r17 = <javax.crypto.JceSecurity: java.util.Map verifyingProviders>;
        interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);
        return n0;

     label4:
        $r19 := @caughtexception;

     label5:
        r20 = $r19;
        $r21 = <javax.crypto.JceSecurity: java.util.Map verificationResults>;
        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r20);
        r23 = r20;

     label6:
        $r24 = <javax.crypto.JceSecurity: java.util.Map verifyingProviders>;
        interfaceinvoke $r24.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);
        return r23;

     label7:
        $r26 := @caughtexception;

     label8:
        r4 = $r26;

     label9:
        $r27 = <javax.crypto.JceSecurity: java.util.Map verifyingProviders>;
        interfaceinvoke $r27.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);
        throw r4;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    static boolean canUseProvider(java.security.Provider)
    {
        java.security.Provider r0;
        java.lang.Exception $r1;
        boolean $z0;

        r0 := @parameter0: java.security.Provider;
        $r1 = staticinvoke <javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)>(r0);
        if $r1 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static java.net.URL getCodeBase(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1, r2, $r5, $r9;
        java.net.URL r3, $r11, $r12;
        java.lang.Throwable r4, $r13;
        java.lang.Object $r6, $r8;
        javax.crypto.JceSecurity$2 $r7;

        r0 := @parameter0: java.lang.Class;
        $r1 = <javax.crypto.JceSecurity: java.util.Map codeBaseCacheRef>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r5 = <javax.crypto.JceSecurity: java.util.Map codeBaseCacheRef>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (java.net.URL) $r6;
        if r3 != null goto label1;

        $r7 = new javax.crypto.JceSecurity$2;
        specialinvoke $r7.<javax.crypto.JceSecurity$2: void <init>(java.lang.Class)>(r0);
        $r8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r7);
        r3 = (java.net.URL) $r8;
        $r9 = <javax.crypto.JceSecurity: java.util.Map codeBaseCacheRef>;
        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);

     label1:
        $r11 = <javax.crypto.JceSecurity: java.net.URL NULL_URL>;
        if r3 != $r11 goto label2;

        $r12 = null;
        goto label3;

     label2:
        $r12 = r3;

     label3:
        exitmonitor r2;

     label4:
        return $r12;

     label5:
        $r13 := @caughtexception;

     label6:
        r4 = $r13;
        exitmonitor r2;

     label7:
        throw r4;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static void setupJurisdictionPolicies() throws java.lang.Exception
    {
        java.lang.String r0, r1, r2;
        java.io.File r3, r4, $r17, $r18;
        java.net.URL r5;
        javax.crypto.CryptoPermissions r6, r7, r8, r9, $r20, $r21, $r22, $r23, $r25, $r26, $r27;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.SecurityException $r19, $r24;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
        r1 = <java.io.File: java.lang.String separator>;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("security");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        r2 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        $r17 = new java.io.File;
        specialinvoke $r17.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, "US_export_policy.jar");
        r3 = $r17;
        $r18 = new java.io.File;
        specialinvoke $r18.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, "local_policy.jar");
        r4 = $r18;
        r5 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>("javax/crypto/Cipher.class");
        if r5 == null goto label0;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();
        if $z0 == 0 goto label0;

        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();
        if $z1 != 0 goto label1;

     label0:
        $r19 = new java.lang.SecurityException;
        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("Cannot locate policy or framework files!");
        throw $r19;

     label1:
        $r20 = new javax.crypto.CryptoPermissions;
        specialinvoke $r20.<javax.crypto.CryptoPermissions: void <init>()>();
        r6 = $r20;
        $r21 = new javax.crypto.CryptoPermissions;
        specialinvoke $r21.<javax.crypto.CryptoPermissions: void <init>()>();
        r7 = $r21;
        staticinvoke <javax.crypto.JceSecurity: void loadPolicies(java.io.File,javax.crypto.CryptoPermissions,javax.crypto.CryptoPermissions)>(r3, r6, r7);
        $r22 = new javax.crypto.CryptoPermissions;
        specialinvoke $r22.<javax.crypto.CryptoPermissions: void <init>()>();
        r8 = $r22;
        $r23 = new javax.crypto.CryptoPermissions;
        specialinvoke $r23.<javax.crypto.CryptoPermissions: void <init>()>();
        r9 = $r23;
        staticinvoke <javax.crypto.JceSecurity: void loadPolicies(java.io.File,javax.crypto.CryptoPermissions,javax.crypto.CryptoPermissions)>(r4, r8, r9);
        $z2 = virtualinvoke r6.<javax.crypto.CryptoPermissions: boolean isEmpty()>();
        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r8.<javax.crypto.CryptoPermissions: boolean isEmpty()>();
        if $z3 == 0 goto label3;

     label2:
        $r24 = new java.lang.SecurityException;
        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>("Missing mandatory jurisdiction policy files");
        throw $r24;

     label3:
        $r25 = virtualinvoke r6.<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)>(r8);
        <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions defaultPolicy> = $r25;
        $z4 = virtualinvoke r7.<javax.crypto.CryptoPermissions: boolean isEmpty()>();
        if $z4 == 0 goto label6;

        $z5 = virtualinvoke r9.<javax.crypto.CryptoPermissions: boolean isEmpty()>();
        if $z5 == 0 goto label4;

        $r26 = null;
        goto label5;

     label4:
        $r26 = r9;

     label5:
        <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions exemptPolicy> = $r26;
        goto label7;

     label6:
        $r27 = virtualinvoke r7.<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)>(r9);
        <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions exemptPolicy> = $r27;

     label7:
        return;
    }

    private static void loadPolicies(java.io.File, javax.crypto.CryptoPermissions, javax.crypto.CryptoPermissions) throws java.lang.Exception
    {
        java.io.File r0;
        javax.crypto.CryptoPermissions r1, r2;
        java.util.jar.JarFile $r3, r4;
        java.util.Enumeration r5;
        java.util.jar.JarEntry r6;
        java.io.InputStream r7;
        java.lang.Throwable r8, $r12;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9;
        java.lang.String $r10, $r11;
        java.security.cert.Certificate[] $r13;
        null_type n0;

        r0 := @parameter0: java.io.File;
        r1 := @parameter1: javax.crypto.CryptoPermissions;
        r2 := @parameter2: javax.crypto.CryptoPermissions;
        $r3 = new java.util.jar.JarFile;
        specialinvoke $r3.<java.util.jar.JarFile: void <init>(java.io.File)>(r0);
        r4 = $r3;
        r5 = virtualinvoke r4.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label0:
        $z0 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label10;

        $r9 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();
        r6 = (java.util.jar.JarEntry) $r9;
        r7 = null;

     label1:
        $r10 = virtualinvoke r6.<java.util.jar.JarEntry: java.lang.String getName()>();
        $z1 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>("default_");
        if $z1 == 0 goto label2;

        r7 = virtualinvoke r4.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r6);
        virtualinvoke r1.<javax.crypto.CryptoPermissions: void load(java.io.InputStream)>(r7);
        goto label4;

     label2:
        $r11 = virtualinvoke r6.<java.util.jar.JarEntry: java.lang.String getName()>();
        $z2 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("exempt_");
        if $z2 == 0 goto label3;

        r7 = virtualinvoke r4.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r6);
        virtualinvoke r2.<javax.crypto.CryptoPermissions: void load(java.io.InputStream)>(r7);
        goto label4;

     label3:
        if r7 == null goto label0;

        virtualinvoke r7.<java.io.InputStream: void close()>();
        goto label0;

     label4:
        if r7 == null goto label9;

        virtualinvoke r7.<java.io.InputStream: void close()>();
        goto label9;

     label5:
        $r12 := @caughtexception;

     label6:
        r8 = $r12;

     label7:
        if r7 == null goto label8;

        virtualinvoke r7.<java.io.InputStream: void close()>();

     label8:
        throw r8;

     label9:
        $r13 = virtualinvoke r6.<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()>();
        staticinvoke <javax.crypto.JarVerifier: void verifyPolicySigned(java.security.cert.Certificate[])>($r13);
        goto label0;

     label10:
        virtualinvoke r4.<java.util.jar.JarFile: void close()>();
        n0 = null;
        return;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    static javax.crypto.CryptoPermissions getDefaultPolicy()
    {
        javax.crypto.CryptoPermissions $r0;

        $r0 = <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions defaultPolicy>;
        return $r0;
    }

    static javax.crypto.CryptoPermissions getExemptPolicy()
    {
        javax.crypto.CryptoPermissions $r0;

        $r0 = <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions exemptPolicy>;
        return $r0;
    }

    static boolean isRestricted()
    {
        boolean $z0;

        $z0 = <javax.crypto.JceSecurity: boolean isRestricted>;
        return $z0;
    }

    static void access$000() throws java.lang.Exception
    {
        staticinvoke <javax.crypto.JceSecurity: void setupJurisdictionPolicies()>();
        return;
    }

    static java.net.URL access$100()
    {
        java.net.URL $r0;

        $r0 = <javax.crypto.JceSecurity: java.net.URL NULL_URL>;
        return $r0;
    }

    static void <clinit>()
    {
        java.security.SecureRandom $r0;
        java.lang.Exception r1, $r9, $r14, r15;
        java.lang.SecurityException r2, $r10;
        java.util.IdentityHashMap $r3, $r4;
        javax.crypto.JceSecurity$1 $r5;
        javax.crypto.CryptoPermissions $r7;
        javax.crypto.CryptoAllPermission $r8;
        boolean $z0, $z1;
        java.lang.Boolean $r12;
        java.net.URL $r13;
        java.lang.RuntimeException $r16;
        java.util.WeakHashMap $r17;

        $r0 = new java.security.SecureRandom;
        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();
        <javax.crypto.JceSecurity: java.security.SecureRandom RANDOM> = $r0;
        <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions defaultPolicy> = null;
        <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions exemptPolicy> = null;
        $r3 = new java.util.IdentityHashMap;
        specialinvoke $r3.<java.util.IdentityHashMap: void <init>()>();
        <javax.crypto.JceSecurity: java.util.Map verificationResults> = $r3;
        $r4 = new java.util.IdentityHashMap;
        specialinvoke $r4.<java.util.IdentityHashMap: void <init>()>();
        <javax.crypto.JceSecurity: java.util.Map verifyingProviders> = $r4;
        <javax.crypto.JceSecurity: boolean isRestricted> = 1;

     label0:
        $r5 = new javax.crypto.JceSecurity$1;
        specialinvoke $r5.<javax.crypto.JceSecurity$1: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r5);
        $r7 = <javax.crypto.JceSecurity: javax.crypto.CryptoPermissions defaultPolicy>;
        $r8 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        $z0 = virtualinvoke $r7.<javax.crypto.CryptoPermissions: boolean implies(java.security.Permission)>($r8);
        if $z0 == 0 goto label1;

        $z1 = 0;
        goto label2;

     label1:
        $z1 = 1;

     label2:
        <javax.crypto.JceSecurity: boolean isRestricted> = $z1;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;
        r1 = $r9;
        $r10 = new java.lang.SecurityException;
        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Can not initialize cryptographic mechanism");
        r2 = $r10;
        virtualinvoke r2.<java.lang.SecurityException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);
        throw r2;

     label5:
        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        <javax.crypto.JceSecurity: java.lang.Object PROVIDER_VERIFIED> = $r12;

     label6:
        $r13 = new java.net.URL;
        specialinvoke $r13.<java.net.URL: void <init>(java.lang.String)>("http://null.sun.com/");
        <javax.crypto.JceSecurity: java.net.URL NULL_URL> = $r13;

     label7:
        goto label9;

     label8:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.lang.RuntimeException;
        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r15);
        throw $r16;

     label9:
        $r17 = new java.util.WeakHashMap;
        specialinvoke $r17.<java.util.WeakHashMap: void <init>()>();
        <javax.crypto.JceSecurity: java.util.Map codeBaseCacheRef> = $r17;
        return;

        catch java.lang.Exception from label0 to label3 with label4;
        catch java.lang.Exception from label6 to label7 with label8;
    }
}
