public final class java.lang.reflect.Constructor extends java.lang.reflect.AccessibleObject implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
{
    private java.lang.Class clazz;
    private int slot;
    private java.lang.Class[] parameterTypes;
    private java.lang.Class[] exceptionTypes;
    private int modifiers;
    private transient java.lang.String signature;
    private transient sun.reflect.generics.repository.ConstructorRepository genericInfo;
    private byte[] annotations;
    private byte[] parameterAnnotations;
    private volatile sun.reflect.ConstructorAccessor constructorAccessor;
    private java.lang.reflect.Constructor root;
    private transient java.util.Map declaredAnnotations;

    private sun.reflect.generics.factory.GenericsFactory getFactory()
    {
        java.lang.reflect.Constructor r0;
        sun.reflect.generics.scope.ConstructorScope $r1;
        sun.reflect.generics.factory.CoreReflectionFactory $r2;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = staticinvoke <sun.reflect.generics.scope.ConstructorScope: sun.reflect.generics.scope.ConstructorScope make(java.lang.reflect.Constructor)>(r0);
        $r2 = staticinvoke <sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration,sun.reflect.generics.scope.Scope)>(r0, $r1);
        return $r2;
    }

    private sun.reflect.generics.repository.ConstructorRepository getGenericInfo()
    {
        java.lang.reflect.Constructor r0;
        sun.reflect.generics.repository.ConstructorRepository $r1, $r4, $r5;
        java.lang.String $r2;
        sun.reflect.generics.factory.GenericsFactory $r3;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository genericInfo>;
        if $r1 != null goto label0;

        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String getSignature()>();
        $r3 = specialinvoke r0.<java.lang.reflect.Constructor: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r4 = staticinvoke <sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.repository.ConstructorRepository make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>($r2, $r3);
        r0.<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository genericInfo> = $r4;

     label0:
        $r5 = r0.<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository genericInfo>;
        return $r5;
    }

    void <init>(java.lang.Class, java.lang.Class[], java.lang.Class[], int, int, java.lang.String, byte[], byte[])
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1;
        java.lang.Class[] r2, r3;
        int i0, i1;
        java.lang.String r4;
        byte[] r5, r6;

        r0 := @this: java.lang.reflect.Constructor;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Class[];
        r3 := @parameter2: java.lang.Class[];
        i0 := @parameter3: int;
        i1 := @parameter4: int;
        r4 := @parameter5: java.lang.String;
        r5 := @parameter6: byte[];
        r6 := @parameter7: byte[];
        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();
        r0.<java.lang.reflect.Constructor: java.lang.Class clazz> = r1;
        r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes> = r2;
        r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes> = r3;
        r0.<java.lang.reflect.Constructor: int modifiers> = i0;
        r0.<java.lang.reflect.Constructor: int slot> = i1;
        r0.<java.lang.reflect.Constructor: java.lang.String signature> = r4;
        r0.<java.lang.reflect.Constructor: byte[] annotations> = r5;
        r0.<java.lang.reflect.Constructor: byte[] parameterAnnotations> = r6;
        return;
    }

    java.lang.reflect.Constructor copy()
    {
        java.lang.reflect.Constructor r0, $r1, r2;
        java.lang.Class $r3;
        java.lang.Class[] $r4, $r5;
        int $i0, $i1;
        java.lang.String $r6;
        byte[] $r7, $r8;
        sun.reflect.ConstructorAccessor $r9;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = new java.lang.reflect.Constructor;
        $r3 = r0.<java.lang.reflect.Constructor: java.lang.Class clazz>;
        $r4 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;
        $r5 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;
        $i0 = r0.<java.lang.reflect.Constructor: int modifiers>;
        $i1 = r0.<java.lang.reflect.Constructor: int slot>;
        $r6 = r0.<java.lang.reflect.Constructor: java.lang.String signature>;
        $r7 = r0.<java.lang.reflect.Constructor: byte[] annotations>;
        $r8 = r0.<java.lang.reflect.Constructor: byte[] parameterAnnotations>;
        specialinvoke $r1.<java.lang.reflect.Constructor: void <init>(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])>($r3, $r4, $r5, $i0, $i1, $r6, $r7, $r8);
        r2 = $r1;
        r2.<java.lang.reflect.Constructor: java.lang.reflect.Constructor root> = r0;
        $r9 = r0.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor constructorAccessor>;
        r2.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor constructorAccessor> = $r9;
        return r2;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class clazz>;
        return $r1;
    }

    public java.lang.String getName()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();
        return $r2;
    }

    public int getModifiers()
    {
        java.lang.reflect.Constructor r0;
        int $i0;

        r0 := @this: java.lang.reflect.Constructor;
        $i0 = r0.<java.lang.reflect.Constructor: int modifiers>;
        return $i0;
    }

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.reflect.Constructor r0;
        java.lang.String $r1;
        sun.reflect.generics.repository.ConstructorRepository $r2;
        java.lang.reflect.TypeVariable[] $r3, $r4, $r5, $r6;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String getSignature()>();
        if $r1 == null goto label0;

        $r2 = specialinvoke r0.<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.TypeVariable[] getTypeParameters()>();
        $r4 = (java.lang.reflect.TypeVariable[]) $r3;
        return $r4;

     label0:
        $r5 = newarray (java.lang.reflect.TypeVariable)[0];
        $r6 = (java.lang.reflect.TypeVariable[]) $r5;
        return $r6;
    }

    public java.lang.Class[] getParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.lang.Class[]) $r2;
        $r4 = (java.lang.Class[]) $r3;
        return $r4;
    }

    public java.lang.reflect.Type[] getGenericParameterTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.String $r1;
        sun.reflect.generics.repository.ConstructorRepository $r2;
        java.lang.reflect.Type[] $r3;
        java.lang.Class[] $r4;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String getSignature()>();
        if $r1 == null goto label0;

        $r2 = specialinvoke r0.<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] getParameterTypes()>();
        return $r3;

     label0:
        $r4 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
        return $r4;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.lang.Class[]) $r2;
        $r4 = (java.lang.Class[]) $r3;
        return $r4;
    }

    public java.lang.reflect.Type[] getGenericExceptionTypes()
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.Type[] r1, $r4;
        java.lang.String $r2;
        sun.reflect.generics.repository.ConstructorRepository $r3;
        int $i0;
        java.lang.Class[] $r5;

        r0 := @this: java.lang.reflect.Constructor;
        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.String getSignature()>();
        if $r2 == null goto label0;

        $r3 = specialinvoke r0.<java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()>();
        $r4 = virtualinvoke $r3.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] getExceptionTypes()>();
        r1 = $r4;
        $i0 = lengthof $r4;
        if $i0 <= 0 goto label0;

        return r1;

     label0:
        $r5 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>();
        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Constructor r0, r2;
        java.lang.Object r1;
        java.lang.Class[] r3, r4;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Class $r5, $r6, $r7, $r8;

        r0 := @this: java.lang.reflect.Constructor;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label3;

        $z0 = r1 instanceof java.lang.reflect.Constructor;
        if $z0 == 0 goto label3;

        r2 = (java.lang.reflect.Constructor) r1;
        $r5 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r6 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        if $r5 != $r6 goto label3;

        r3 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;
        r4 = r2.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;
        $i1 = lengthof r3;
        $i2 = lengthof r4;
        if $i1 != $i2 goto label3;

        i0 = 0;

     label0:
        $i3 = lengthof r3;
        if i0 >= $i3 goto label2;

        $r7 = r3[i0];
        $r8 = r4[i0];
        if $r7 == $r8 goto label1;

        return 0;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();
        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();
        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.StringBuffer $r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Class[] r3, r19;
        java.lang.StringBuilder $r4, $r6, $r7, $r28, $r29, $r30, $r31;
        java.lang.String $r5, $r8, $r11, $r15, $r22, $r25, $r32;
        java.lang.Class $r10, $r14, $r21;
        java.lang.Exception $r26, r27;

        r0 := @this: java.lang.reflect.Constructor;

     label0:
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        $i3 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();
        $i4 = staticinvoke <java.lang.reflect.Modifier: int constructorModifiers()>();
        i0 = $i3 & $i4;
        if i0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

     label1:
        $r10 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r11 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r10);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        r3 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;
        i1 = 0;

     label2:
        $i5 = lengthof r3;
        if i1 >= $i5 goto label4;

        $r14 = r3[i1];
        $r15 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r14);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);
        $i6 = lengthof r3;
        $i7 = $i6 - 1;
        if i1 >= $i7 goto label3;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        r19 = r0.<java.lang.reflect.Constructor: java.lang.Class[] exceptionTypes>;
        $i8 = lengthof r19;
        if $i8 <= 0 goto label7;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" throws ");
        i2 = 0;

     label5:
        $i9 = lengthof r19;
        if i2 >= $i9 goto label7;

        $r21 = r19[i2];
        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);
        $i10 = lengthof r19;
        $i11 = $i10 - 1;
        if i2 >= $i11 goto label6;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label6:
        i2 = i2 + 1;
        goto label5;

     label7:
        $r25 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label8:
        return $r25;

     label9:
        $r26 := @caughtexception;
        r27 = $r26;
        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r32;

        catch java.lang.Exception from label0 to label8 with label9;
    }

    public java.lang.String toGenericString()
    {
        java.lang.reflect.Constructor r0;
        java.lang.StringBuilder $r1, r2, $r6, $r8, $r9, $r44, $r45, $r46, $r47;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i16;
        java.lang.reflect.TypeVariable[] r3, r4;
        boolean z0, $z1, $z2, $z3;
        java.lang.reflect.TypeVariable r5;
        java.lang.String $r7, $r10, $r14, $r18, $r25, r27, $r37, $r41, $r48;
        java.lang.Class $r17, $r24, $r36;
        java.lang.reflect.Type[] r21, r31;
        java.lang.reflect.Type $r22, $r23, $r26, $r34, $r35, $r38;
        java.lang.Exception $r42, r43;

        r0 := @this: java.lang.reflect.Constructor;

     label0:
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        $i3 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();
        $i4 = staticinvoke <java.lang.reflect.Modifier: int constructorModifiers()>();
        i0 = $i3 & $i4;
        if i0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label1:
        r3 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>();
        $i5 = lengthof r3;
        if $i5 <= 0 goto label5;

        z0 = 1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");
        r4 = r3;
        i1 = lengthof r4;
        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r5 = r4[i2];
        if z0 != 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        $r14 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        z0 = 0;
        i2 = i2 + 1;
        goto label2;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> ");

     label5:
        $r17 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r18 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r17);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
        r21 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();
        i6 = 0;

     label6:
        $i7 = lengthof r21;
        if i6 >= $i7 goto label11;

        $r22 = r21[i6];
        $z1 = $r22 instanceof java.lang.Class;
        if $z1 == 0 goto label7;

        $r23 = r21[i6];
        $r24 = (java.lang.Class) $r23;
        $r25 = staticinvoke <java.lang.reflect.Field: java.lang.String getTypeName(java.lang.Class)>($r24);
        goto label8;

     label7:
        $r26 = r21[i6];
        $r25 = virtualinvoke $r26.<java.lang.Object: java.lang.String toString()>();

     label8:
        r27 = $r25;
        $z2 = virtualinvoke r0.<java.lang.reflect.Constructor: boolean isVarArgs()>();
        if $z2 == 0 goto label9;

        $i8 = lengthof r21;
        $i9 = $i8 - 1;
        if i6 != $i9 goto label9;

        r27 = virtualinvoke r27.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\\[\\]$", "...");

     label9:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);
        $i10 = lengthof r21;
        $i11 = $i10 - 1;
        if i6 >= $i11 goto label10;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label10:
        i6 = i6 + 1;
        goto label6;

     label11:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        r31 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>();
        $i12 = lengthof r31;
        if $i12 <= 0 goto label16;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" throws ");
        i13 = 0;

     label12:
        $i14 = lengthof r31;
        if i13 >= $i14 goto label16;

        $r34 = r31[i13];
        $z3 = $r34 instanceof java.lang.Class;
        if $z3 == 0 goto label13;

        $r35 = r31[i13];
        $r36 = (java.lang.Class) $r35;
        $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>();
        goto label14;

     label13:
        $r38 = r31[i13];
        $r37 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>();

     label14:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);
        $i15 = lengthof r31;
        $i16 = $i15 - 1;
        if i13 >= $i16 goto label15;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label15:
        i13 = i13 + 1;
        goto label12;

     label16:
        $r41 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        return $r41;

     label18:
        $r42 := @caughtexception;
        r43 = $r42;
        $r44 = new java.lang.StringBuilder;
        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");
        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);
        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r48;

        catch java.lang.Exception from label0 to label17 with label18;
    }

    public transient java.lang.Object newInstance(java.lang.Object[]) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object[] r1;
        java.lang.Class r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r6;
        sun.reflect.ConstructorAccessor r7;
        java.lang.Object $r8;

        r0 := @this: java.lang.reflect.Constructor;
        r1 := @parameter0: java.lang.Object[];
        $z0 = r0.<java.lang.reflect.Constructor: boolean override>;
        if $z0 != 0 goto label0;

        $r3 = r0.<java.lang.reflect.Constructor: java.lang.Class clazz>;
        $i0 = r0.<java.lang.reflect.Constructor: int modifiers>;
        $z1 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>($r3, $i0);
        if $z1 != 0 goto label0;

        r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = r0.<java.lang.reflect.Constructor: java.lang.Class clazz>;
        $i1 = r0.<java.lang.reflect.Constructor: int modifiers>;
        virtualinvoke r0.<java.lang.reflect.Constructor: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r2, $r4, null, $i1);

     label0:
        $r5 = r0.<java.lang.reflect.Constructor: java.lang.Class clazz>;
        $i2 = virtualinvoke $r5.<java.lang.Class: int getModifiers()>();
        $i3 = $i2 & 16384;
        if $i3 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot reflectively create enum objects");
        throw $r6;

     label1:
        r7 = r0.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor constructorAccessor>;
        if r7 != null goto label2;

        r7 = specialinvoke r0.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor acquireConstructorAccessor()>();

     label2:
        $r8 = interfaceinvoke r7.<sun.reflect.ConstructorAccessor: java.lang.Object newInstance(java.lang.Object[])>(r1);
        return $r8;
    }

    public boolean isVarArgs()
    {
        java.lang.reflect.Constructor r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.reflect.Constructor;
        $i0 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();
        $i1 = $i0 & 128;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isSynthetic()
    {
        java.lang.reflect.Constructor r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Constructor;
        $i0 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isSynthetic(int)>($i0);
        return $z0;
    }

    private sun.reflect.ConstructorAccessor acquireConstructorAccessor()
    {
        java.lang.reflect.Constructor r0, $r2, $r3;
        sun.reflect.ConstructorAccessor r1;
        sun.reflect.ReflectionFactory $r4;

        r0 := @this: java.lang.reflect.Constructor;
        r1 = null;
        $r2 = r0.<java.lang.reflect.Constructor: java.lang.reflect.Constructor root>;
        if $r2 == null goto label0;

        $r3 = r0.<java.lang.reflect.Constructor: java.lang.reflect.Constructor root>;
        r1 = virtualinvoke $r3.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor getConstructorAccessor()>();

     label0:
        if r1 == null goto label1;

        r0.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor constructorAccessor> = r1;
        goto label2;

     label1:
        $r4 = <java.lang.reflect.Constructor: sun.reflect.ReflectionFactory reflectionFactory>;
        r1 = virtualinvoke $r4.<sun.reflect.ReflectionFactory: sun.reflect.ConstructorAccessor newConstructorAccessor(java.lang.reflect.Constructor)>(r0);
        virtualinvoke r0.<java.lang.reflect.Constructor: void setConstructorAccessor(sun.reflect.ConstructorAccessor)>(r1);

     label2:
        return r1;
    }

    sun.reflect.ConstructorAccessor getConstructorAccessor()
    {
        java.lang.reflect.Constructor r0;
        sun.reflect.ConstructorAccessor $r1;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor constructorAccessor>;
        return $r1;
    }

    void setConstructorAccessor(sun.reflect.ConstructorAccessor)
    {
        java.lang.reflect.Constructor r0, $r2, $r3;
        sun.reflect.ConstructorAccessor r1;

        r0 := @this: java.lang.reflect.Constructor;
        r1 := @parameter0: sun.reflect.ConstructorAccessor;
        r0.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor constructorAccessor> = r1;
        $r2 = r0.<java.lang.reflect.Constructor: java.lang.reflect.Constructor root>;
        if $r2 == null goto label0;

        $r3 = r0.<java.lang.reflect.Constructor: java.lang.reflect.Constructor root>;
        virtualinvoke $r3.<java.lang.reflect.Constructor: void setConstructorAccessor(sun.reflect.ConstructorAccessor)>(r1);

     label0:
        return;
    }

    int getSlot()
    {
        java.lang.reflect.Constructor r0;
        int $i0;

        r0 := @this: java.lang.reflect.Constructor;
        $i0 = r0.<java.lang.reflect.Constructor: int slot>;
        return $i0;
    }

    java.lang.String getSignature()
    {
        java.lang.reflect.Constructor r0;
        java.lang.String $r1;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: java.lang.String signature>;
        return $r1;
    }

    byte[] getRawAnnotations()
    {
        java.lang.reflect.Constructor r0;
        byte[] $r1;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: byte[] annotations>;
        return $r1;
    }

    byte[] getRawParameterAnnotations()
    {
        java.lang.reflect.Constructor r0;
        byte[] $r1;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = r0.<java.lang.reflect.Constructor: byte[] parameterAnnotations>;
        return $r1;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class r1;
        java.lang.NullPointerException $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.annotation.Annotation $r5;

        r0 := @this: java.lang.reflect.Constructor;
        r1 := @parameter0: java.lang.Class;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = specialinvoke r0.<java.lang.reflect.Constructor: java.util.Map declaredAnnotations()>();
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r5 = (java.lang.annotation.Annotation) $r4;
        return $r5;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.Constructor r0;
        java.util.Map $r1;
        java.lang.annotation.Annotation[] $r2;

        r0 := @this: java.lang.reflect.Constructor;
        $r1 = specialinvoke r0.<java.lang.reflect.Constructor: java.util.Map declaredAnnotations()>();
        $r2 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] toArray(java.util.Map)>($r1);
        return $r2;
    }

    private synchronized java.util.Map declaredAnnotations()
    {
        java.lang.reflect.Constructor r0;
        sun.misc.JavaLangAccess $r1;
        java.util.Map $r2, $r7, $r8;
        byte[] $r3;
        java.lang.Class $r4, $r6;
        sun.reflect.ConstantPool $r5;

        r0 := @this: java.lang.reflect.Constructor;
        $r2 = r0.<java.lang.reflect.Constructor: java.util.Map declaredAnnotations>;
        if $r2 != null goto label0;

        $r3 = r0.<java.lang.reflect.Constructor: byte[] annotations>;
        $r1 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        $r4 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r5 = interfaceinvoke $r1.<sun.misc.JavaLangAccess: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>($r4);
        $r6 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r7 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.util.Map parseAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>($r3, $r5, $r6);
        r0.<java.lang.reflect.Constructor: java.util.Map declaredAnnotations> = $r7;

     label0:
        $r8 = r0.<java.lang.reflect.Constructor: java.util.Map declaredAnnotations>;
        return $r8;
    }

    public java.lang.annotation.Annotation[][] getParameterAnnotations()
    {
        java.lang.reflect.Constructor r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.annotation.Annotation[][] r1, $r5;
        java.lang.Class r2, $r8, $r10;
        java.lang.Class[] $r3;
        byte[] $r4, $r6;
        sun.misc.JavaLangAccess $r7;
        sun.reflect.ConstantPool $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.annotation.AnnotationFormatError $r11;

        r0 := @this: java.lang.reflect.Constructor;
        $r3 = r0.<java.lang.reflect.Constructor: java.lang.Class[] parameterTypes>;
        i0 = lengthof $r3;
        $r4 = r0.<java.lang.reflect.Constructor: byte[] parameterAnnotations>;
        if $r4 != null goto label0;

        $r5 = newmultiarray (java.lang.annotation.Annotation)[i0][0];
        return $r5;

     label0:
        $r6 = r0.<java.lang.reflect.Constructor: byte[] parameterAnnotations>;
        $r7 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        $r8 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r9 = interfaceinvoke $r7.<sun.misc.JavaLangAccess: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>($r8);
        $r10 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        r1 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>($r6, $r9, $r10);
        $i1 = lengthof r1;
        if $i1 == i0 goto label3;

        r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $z0 = virtualinvoke r2.<java.lang.Class: boolean isEnum()>();
        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isAnonymousClass()>();
        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r2.<java.lang.Class: boolean isLocalClass()>();
        if $z2 == 0 goto label1;

        goto label3;

     label1:
        $z3 = virtualinvoke r2.<java.lang.Class: boolean isMemberClass()>();
        if $z3 == 0 goto label2;

        $z4 = virtualinvoke r2.<java.lang.Class: boolean isMemberClass()>();
        if $z4 == 0 goto label3;

        $i2 = virtualinvoke r2.<java.lang.Class: int getModifiers()>();
        $i3 = $i2 & 8;
        if $i3 != 0 goto label3;

        $i4 = lengthof r1;
        $i5 = $i4 + 1;
        if $i5 == i0 goto label3;

     label2:
        $r11 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r11.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>("Parameter annotations don\'t match number of parameters");
        throw $r11;

     label3:
        return r1;
    }
}
