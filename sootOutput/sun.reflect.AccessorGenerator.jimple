class sun.reflect.AccessorGenerator extends java.lang.Object implements sun.reflect.ClassFileConstants
{
    static final sun.misc.Unsafe unsafe;
    protected static final short S0;
    protected static final short S1;
    protected static final short S2;
    protected static final short S3;
    protected static final short S4;
    protected static final short S5;
    protected static final short S6;
    protected sun.reflect.ClassFileAssembler asm;
    protected int modifiers;
    protected short thisClass;
    protected short superClass;
    protected short targetClass;
    protected short throwableClass;
    protected short classCastClass;
    protected short nullPointerClass;
    protected short illegalArgumentClass;
    protected short invocationTargetClass;
    protected short initIdx;
    protected short initNameAndTypeIdx;
    protected short initStringNameAndTypeIdx;
    protected short nullPointerCtorIdx;
    protected short illegalArgumentCtorIdx;
    protected short illegalArgumentStringCtorIdx;
    protected short invocationTargetCtorIdx;
    protected short superCtorIdx;
    protected short objectClass;
    protected short toStringIdx;
    protected short codeIdx;
    protected short exceptionsIdx;
    protected short booleanIdx;
    protected short booleanCtorIdx;
    protected short booleanUnboxIdx;
    protected short byteIdx;
    protected short byteCtorIdx;
    protected short byteUnboxIdx;
    protected short characterIdx;
    protected short characterCtorIdx;
    protected short characterUnboxIdx;
    protected short doubleIdx;
    protected short doubleCtorIdx;
    protected short doubleUnboxIdx;
    protected short floatIdx;
    protected short floatCtorIdx;
    protected short floatUnboxIdx;
    protected short integerIdx;
    protected short integerCtorIdx;
    protected short integerUnboxIdx;
    protected short longIdx;
    protected short longCtorIdx;
    protected short longUnboxIdx;
    protected short shortIdx;
    protected short shortCtorIdx;
    protected short shortUnboxIdx;
    protected final short NUM_COMMON_CPOOL_ENTRIES;
    protected final short NUM_BOXING_CPOOL_ENTRIES;
    protected static final java.lang.Class[] primitiveTypes;
    private sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer;

    void <init>()
    {
        sun.reflect.AccessorGenerator r0;

        r0 := @this: sun.reflect.AccessorGenerator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.AccessorGenerator: short NUM_COMMON_CPOOL_ENTRIES> = 30;
        r0.<sun.reflect.AccessorGenerator: short NUM_BOXING_CPOOL_ENTRIES> = 72;
        return;
    }

    protected void emitCommonConstantPoolEntries()
    {
        sun.reflect.AccessorGenerator r0;
        sun.reflect.ClassFileAssembler $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s22, $s23, $s24, $s25, $s26, $s27, $s28, $s29, $s30, $s31, $s32, $s33, $s34, $s35, $s36, $s37, $s38, $s39, $s40, $s41, $s42, $s43;

        r0 := @this: sun.reflect.AccessorGenerator;
        $r1 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r1.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Throwable");
        $r2 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r3 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s0 = virtualinvoke $r3.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r2.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s0);
        $r4 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s1 = virtualinvoke $r4.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short throwableClass> = $s1;
        $r5 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r5.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/ClassCastException");
        $r6 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r7 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s2 = virtualinvoke $r7.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r6.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s2);
        $r8 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s3 = virtualinvoke $r8.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short classCastClass> = $s3;
        $r9 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r9.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/NullPointerException");
        $r10 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r11 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s4 = virtualinvoke $r11.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r10.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s4);
        $r12 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s5 = virtualinvoke $r12.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short nullPointerClass> = $s5;
        $r13 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r13.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/IllegalArgumentException");
        $r14 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r15 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s6 = virtualinvoke $r15.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r14.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s6);
        $r16 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s7 = virtualinvoke $r16.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short illegalArgumentClass> = $s7;
        $r17 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r17.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/reflect/InvocationTargetException");
        $r18 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r19 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s8 = virtualinvoke $r19.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r18.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s8);
        $r20 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s9 = virtualinvoke $r20.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short invocationTargetClass> = $s9;
        $r21 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r21.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("<init>");
        $r22 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s10 = virtualinvoke $r22.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short initIdx> = $s10;
        $r23 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r23.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()V");
        $r24 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s11 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r25 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s12 = virtualinvoke $r25.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r24.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s11, $s12);
        $r26 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s13 = virtualinvoke $r26.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short initNameAndTypeIdx> = $s13;
        $r27 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s14 = r0.<sun.reflect.AccessorGenerator: short nullPointerClass>;
        $s15 = r0.<sun.reflect.AccessorGenerator: short initNameAndTypeIdx>;
        virtualinvoke $r27.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s14, $s15);
        $r28 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s16 = virtualinvoke $r28.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short nullPointerCtorIdx> = $s16;
        $r29 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s17 = r0.<sun.reflect.AccessorGenerator: short illegalArgumentClass>;
        $s18 = r0.<sun.reflect.AccessorGenerator: short initNameAndTypeIdx>;
        virtualinvoke $r29.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s17, $s18);
        $r30 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s19 = virtualinvoke $r30.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short illegalArgumentCtorIdx> = $s19;
        $r31 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r31.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(Ljava/lang/String;)V");
        $r32 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s20 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r33 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s21 = virtualinvoke $r33.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r32.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s20, $s21);
        $r34 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s22 = virtualinvoke $r34.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short initStringNameAndTypeIdx> = $s22;
        $r35 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s23 = r0.<sun.reflect.AccessorGenerator: short illegalArgumentClass>;
        $s24 = r0.<sun.reflect.AccessorGenerator: short initStringNameAndTypeIdx>;
        virtualinvoke $r35.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s23, $s24);
        $r36 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s25 = virtualinvoke $r36.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short illegalArgumentStringCtorIdx> = $s25;
        $r37 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r37.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(Ljava/lang/Throwable;)V");
        $r38 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s26 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r39 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s27 = virtualinvoke $r39.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r38.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s26, $s27);
        $r40 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s28 = r0.<sun.reflect.AccessorGenerator: short invocationTargetClass>;
        $r41 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s29 = virtualinvoke $r41.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r40.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s28, $s29);
        $r42 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s30 = virtualinvoke $r42.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short invocationTargetCtorIdx> = $s30;
        $r43 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s31 = r0.<sun.reflect.AccessorGenerator: short superClass>;
        $s32 = r0.<sun.reflect.AccessorGenerator: short initNameAndTypeIdx>;
        virtualinvoke $r43.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s31, $s32);
        $r44 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s33 = virtualinvoke $r44.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short superCtorIdx> = $s33;
        $r45 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r45.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Object");
        $r46 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r47 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s34 = virtualinvoke $r47.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r46.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s34);
        $r48 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s35 = virtualinvoke $r48.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short objectClass> = $s35;
        $r49 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r49.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("toString");
        $r50 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r50.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()Ljava/lang/String;");
        $r51 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r52 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s36 = virtualinvoke $r52.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s37 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s36, 1);
        $r53 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s38 = virtualinvoke $r53.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r51.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s37, $s38);
        $r54 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s39 = r0.<sun.reflect.AccessorGenerator: short objectClass>;
        $r55 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s40 = virtualinvoke $r55.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r54.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s39, $s40);
        $r56 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s41 = virtualinvoke $r56.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short toStringIdx> = $s41;
        $r57 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r57.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("Code");
        $r58 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s42 = virtualinvoke $r58.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short codeIdx> = $s42;
        $r59 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r59.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("Exceptions");
        $r60 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s43 = virtualinvoke $r60.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short exceptionsIdx> = $s43;
        return;
    }

    protected void emitBoxingContantPoolEntries()
    {
        sun.reflect.AccessorGenerator r0;
        sun.reflect.ClassFileAssembler $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r142, $r143, $r144, $r145, $r146, $r147, $r148, $r149, $r150, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r158, $r159, $r160;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s22, $s23, $s24, $s25, $s26, $s27, $s28, $s29, $s30, $s31, $s32, $s33, $s34, $s35, $s36, $s37, $s38, $s39, $s40, $s41, $s42, $s43, $s44, $s45, $s46, $s47, $s48, $s49, $s50, $s51, $s52, $s53, $s54, $s55, $s56, $s57, $s58, $s59, $s60, $s61, $s62, $s63, $s64, $s65, $s66, $s67, $s68, $s69, $s70, $s71, $s72, $s73, $s74, $s75, $s76, $s77, $s78, $s79, $s80, $s81, $s82, $s83, $s84, $s85, $s86, $s87, $s88, $s89, $s90, $s91, $s92, $s93, $s94, $s95, $s96, $s97, $s98, $s99, $s100, $s101, $s102, $s103, $s104, $s105, $s106, $s107, $s108, $s109, $s110, $s111, $s112, $s113, $s114, $s115, $s116, $s117, $s118, $s119;

        r0 := @this: sun.reflect.AccessorGenerator;
        $r1 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r1.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Boolean");
        $r2 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r3 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s0 = virtualinvoke $r3.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r2.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s0);
        $r4 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s1 = virtualinvoke $r4.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short booleanIdx> = $s1;
        $r5 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r5.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(Z)V");
        $r6 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s2 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r7 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s3 = virtualinvoke $r7.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r6.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s2, $s3);
        $r8 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r9 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s4 = virtualinvoke $r9.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s5 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s4, 2);
        $r10 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s6 = virtualinvoke $r10.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r8.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s5, $s6);
        $r11 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s7 = virtualinvoke $r11.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short booleanCtorIdx> = $s7;
        $r12 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r12.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("booleanValue");
        $r13 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r13.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()Z");
        $r14 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r15 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s8 = virtualinvoke $r15.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s9 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s8, 1);
        $r16 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s10 = virtualinvoke $r16.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r14.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s9, $s10);
        $r17 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r18 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s11 = virtualinvoke $r18.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s12 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s11, 6);
        $r19 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s13 = virtualinvoke $r19.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r17.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s12, $s13);
        $r20 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s14 = virtualinvoke $r20.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short booleanUnboxIdx> = $s14;
        $r21 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r21.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Byte");
        $r22 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r23 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s15 = virtualinvoke $r23.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r22.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s15);
        $r24 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s16 = virtualinvoke $r24.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short byteIdx> = $s16;
        $r25 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r25.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(B)V");
        $r26 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s17 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r27 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s18 = virtualinvoke $r27.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r26.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s17, $s18);
        $r28 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r29 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s19 = virtualinvoke $r29.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s20 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s19, 2);
        $r30 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s21 = virtualinvoke $r30.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r28.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s20, $s21);
        $r31 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s22 = virtualinvoke $r31.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short byteCtorIdx> = $s22;
        $r32 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r32.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("byteValue");
        $r33 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r33.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()B");
        $r34 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r35 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s23 = virtualinvoke $r35.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s24 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s23, 1);
        $r36 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s25 = virtualinvoke $r36.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r34.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s24, $s25);
        $r37 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r38 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s26 = virtualinvoke $r38.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s27 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s26, 6);
        $r39 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s28 = virtualinvoke $r39.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r37.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s27, $s28);
        $r40 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s29 = virtualinvoke $r40.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short byteUnboxIdx> = $s29;
        $r41 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r41.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Character");
        $r42 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r43 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s30 = virtualinvoke $r43.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r42.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s30);
        $r44 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s31 = virtualinvoke $r44.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short characterIdx> = $s31;
        $r45 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r45.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(C)V");
        $r46 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s32 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r47 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s33 = virtualinvoke $r47.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r46.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s32, $s33);
        $r48 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r49 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s34 = virtualinvoke $r49.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s35 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s34, 2);
        $r50 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s36 = virtualinvoke $r50.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r48.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s35, $s36);
        $r51 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s37 = virtualinvoke $r51.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short characterCtorIdx> = $s37;
        $r52 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r52.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("charValue");
        $r53 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r53.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()C");
        $r54 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r55 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s38 = virtualinvoke $r55.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s39 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s38, 1);
        $r56 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s40 = virtualinvoke $r56.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r54.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s39, $s40);
        $r57 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r58 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s41 = virtualinvoke $r58.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s42 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s41, 6);
        $r59 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s43 = virtualinvoke $r59.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r57.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s42, $s43);
        $r60 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s44 = virtualinvoke $r60.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short characterUnboxIdx> = $s44;
        $r61 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r61.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Double");
        $r62 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r63 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s45 = virtualinvoke $r63.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r62.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s45);
        $r64 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s46 = virtualinvoke $r64.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short doubleIdx> = $s46;
        $r65 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r65.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(D)V");
        $r66 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s47 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r67 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s48 = virtualinvoke $r67.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r66.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s47, $s48);
        $r68 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r69 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s49 = virtualinvoke $r69.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s50 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s49, 2);
        $r70 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s51 = virtualinvoke $r70.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r68.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s50, $s51);
        $r71 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s52 = virtualinvoke $r71.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short doubleCtorIdx> = $s52;
        $r72 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r72.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("doubleValue");
        $r73 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r73.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()D");
        $r74 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r75 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s53 = virtualinvoke $r75.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s54 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s53, 1);
        $r76 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s55 = virtualinvoke $r76.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r74.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s54, $s55);
        $r77 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r78 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s56 = virtualinvoke $r78.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s57 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s56, 6);
        $r79 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s58 = virtualinvoke $r79.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r77.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s57, $s58);
        $r80 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s59 = virtualinvoke $r80.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short doubleUnboxIdx> = $s59;
        $r81 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r81.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Float");
        $r82 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r83 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s60 = virtualinvoke $r83.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r82.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s60);
        $r84 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s61 = virtualinvoke $r84.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short floatIdx> = $s61;
        $r85 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r85.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(F)V");
        $r86 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s62 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r87 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s63 = virtualinvoke $r87.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r86.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s62, $s63);
        $r88 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r89 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s64 = virtualinvoke $r89.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s65 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s64, 2);
        $r90 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s66 = virtualinvoke $r90.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r88.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s65, $s66);
        $r91 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s67 = virtualinvoke $r91.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short floatCtorIdx> = $s67;
        $r92 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r92.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("floatValue");
        $r93 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r93.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()F");
        $r94 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r95 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s68 = virtualinvoke $r95.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s69 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s68, 1);
        $r96 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s70 = virtualinvoke $r96.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r94.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s69, $s70);
        $r97 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r98 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s71 = virtualinvoke $r98.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s72 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s71, 6);
        $r99 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s73 = virtualinvoke $r99.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r97.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s72, $s73);
        $r100 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s74 = virtualinvoke $r100.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short floatUnboxIdx> = $s74;
        $r101 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r101.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Integer");
        $r102 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r103 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s75 = virtualinvoke $r103.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r102.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s75);
        $r104 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s76 = virtualinvoke $r104.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short integerIdx> = $s76;
        $r105 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r105.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(I)V");
        $r106 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s77 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r107 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s78 = virtualinvoke $r107.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r106.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s77, $s78);
        $r108 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r109 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s79 = virtualinvoke $r109.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s80 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s79, 2);
        $r110 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s81 = virtualinvoke $r110.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r108.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s80, $s81);
        $r111 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s82 = virtualinvoke $r111.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short integerCtorIdx> = $s82;
        $r112 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r112.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("intValue");
        $r113 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r113.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()I");
        $r114 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r115 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s83 = virtualinvoke $r115.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s84 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s83, 1);
        $r116 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s85 = virtualinvoke $r116.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r114.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s84, $s85);
        $r117 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r118 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s86 = virtualinvoke $r118.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s87 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s86, 6);
        $r119 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s88 = virtualinvoke $r119.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r117.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s87, $s88);
        $r120 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s89 = virtualinvoke $r120.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short integerUnboxIdx> = $s89;
        $r121 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r121.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Long");
        $r122 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r123 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s90 = virtualinvoke $r123.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r122.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s90);
        $r124 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s91 = virtualinvoke $r124.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short longIdx> = $s91;
        $r125 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r125.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(J)V");
        $r126 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s92 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r127 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s93 = virtualinvoke $r127.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r126.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s92, $s93);
        $r128 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r129 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s94 = virtualinvoke $r129.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s95 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s94, 2);
        $r130 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s96 = virtualinvoke $r130.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r128.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s95, $s96);
        $r131 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s97 = virtualinvoke $r131.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short longCtorIdx> = $s97;
        $r132 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r132.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("longValue");
        $r133 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r133.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()J");
        $r134 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r135 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s98 = virtualinvoke $r135.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s99 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s98, 1);
        $r136 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s100 = virtualinvoke $r136.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r134.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s99, $s100);
        $r137 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r138 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s101 = virtualinvoke $r138.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s102 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s101, 6);
        $r139 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s103 = virtualinvoke $r139.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r137.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s102, $s103);
        $r140 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s104 = virtualinvoke $r140.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short longUnboxIdx> = $s104;
        $r141 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r141.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("java/lang/Short");
        $r142 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r143 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s105 = virtualinvoke $r143.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r142.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s105);
        $r144 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s106 = virtualinvoke $r144.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short shortIdx> = $s106;
        $r145 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r145.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(S)V");
        $r146 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s107 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $r147 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s108 = virtualinvoke $r147.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r146.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s107, $s108);
        $r148 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r149 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s109 = virtualinvoke $r149.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s110 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s109, 2);
        $r150 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s111 = virtualinvoke $r150.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r148.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s110, $s111);
        $r151 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s112 = virtualinvoke $r151.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short shortCtorIdx> = $s112;
        $r152 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r152.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("shortValue");
        $r153 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r153.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("()S");
        $r154 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r155 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s113 = virtualinvoke $r155.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s114 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s113, 1);
        $r156 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s115 = virtualinvoke $r156.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r154.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s114, $s115);
        $r157 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r158 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s116 = virtualinvoke $r158.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s117 = staticinvoke <sun.reflect.AccessorGenerator: short sub(short,short)>($s116, 6);
        $r159 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s118 = virtualinvoke $r159.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r157.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s117, $s118);
        $r160 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s119 = virtualinvoke $r160.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.AccessorGenerator: short shortUnboxIdx> = $s119;
        return;
    }

    protected static short add(short, short)
    {
        short s0, s1, $s3;
        int $i2;

        s0 := @parameter0: short;
        s1 := @parameter1: short;
        $i2 = s0 + s1;
        $s3 = (short) $i2;
        return $s3;
    }

    protected static short sub(short, short)
    {
        short s0, s1, $s3;
        int $i2;

        s0 := @parameter0: short;
        s1 := @parameter1: short;
        $i2 = s0 - s1;
        $s3 = (short) $i2;
        return $s3;
    }

    protected boolean isStatic()
    {
        sun.reflect.AccessorGenerator r0;
        int $i0;
        boolean $z0;

        r0 := @this: sun.reflect.AccessorGenerator;
        $i0 = r0.<sun.reflect.AccessorGenerator: int modifiers>;
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);
        return $z0;
    }

    protected static java.lang.String getClassName(java.lang.Class, boolean)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r13;
        boolean z0, $z1, $z2;
        java.lang.InternalError $r10;
        java.lang.StringBuilder $r11, $r12, $r15, $r17, $r18, $r20, $r21;
        java.lang.String $r14, $r16, $r19, $r22, $r23, $r24, $r25;

        r0 := @parameter0: java.lang.Class;
        z0 := @parameter1: boolean;
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();
        if $z1 == 0 goto label9;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r0 != $r1 goto label0;

        return "Z";

     label0:
        $r2 = <java.lang.Byte: java.lang.Class TYPE>;
        if r0 != $r2 goto label1;

        return "B";

     label1:
        $r3 = <java.lang.Character: java.lang.Class TYPE>;
        if r0 != $r3 goto label2;

        return "C";

     label2:
        $r4 = <java.lang.Double: java.lang.Class TYPE>;
        if r0 != $r4 goto label3;

        return "D";

     label3:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;
        if r0 != $r5 goto label4;

        return "F";

     label4:
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;
        if r0 != $r6 goto label5;

        return "I";

     label5:
        $r7 = <java.lang.Long: java.lang.Class TYPE>;
        if r0 != $r7 goto label6;

        return "J";

     label6:
        $r8 = <java.lang.Short: java.lang.Class TYPE>;
        if r0 != $r8 goto label7;

        return "S";

     label7:
        $r9 = <java.lang.Void: java.lang.Class TYPE>;
        if r0 != $r9 goto label8;

        return "V";

     label8:
        $r10 = new java.lang.InternalError;
        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>("Should have found primitive type");
        throw $r10;

     label9:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();
        if $z2 == 0 goto label10;

        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();
        $r14 = staticinvoke <sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($r13, 1);
        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r16;

     label10:
        if z0 == 0 goto label11;

        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");
        $r19 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        $r23 = staticinvoke <sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>($r22);
        return $r23;

     label11:
        $r24 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r25 = staticinvoke <sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>($r24);
        return $r25;
    }

    private static java.lang.String internalize(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);
        return $r1;
    }

    protected void emitConstructor()
    {
        sun.reflect.AccessorGenerator r0;
        sun.reflect.ClassFileAssembler $r1, r2;
        short $s0, $s1, $s2;

        r0 := @this: sun.reflect.AccessorGenerator;
        $r1 = new sun.reflect.ClassFileAssembler;
        specialinvoke $r1.<sun.reflect.ClassFileAssembler: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<sun.reflect.ClassFileAssembler: void setMaxLocals(int)>(1);
        virtualinvoke r2.<sun.reflect.ClassFileAssembler: void opc_aload_0()>();
        $s0 = r0.<sun.reflect.AccessorGenerator: short superCtorIdx>;
        virtualinvoke r2.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s0, 0, 0);
        virtualinvoke r2.<sun.reflect.ClassFileAssembler: void opc_return()>();
        $s1 = r0.<sun.reflect.AccessorGenerator: short initIdx>;
        $s2 = virtualinvoke r2.<sun.reflect.ClassFileAssembler: short getMaxLocals()>();
        virtualinvoke r0.<sun.reflect.AccessorGenerator: void emitMethod(short,int,sun.reflect.ClassFileAssembler,sun.reflect.ClassFileAssembler,short[])>($s1, $s2, r2, null, null);
        return;
    }

    protected void emitMethod(short, int, sun.reflect.ClassFileAssembler, sun.reflect.ClassFileAssembler, short[])
    {
        sun.reflect.AccessorGenerator r0;
        short s0, s2, s3, $s9, $s10, $s11, $s12, $s14, $s15, $s16, $s21, $s23;
        int i1, i4, i5, $i6, $i7, i8, $i13, $i17, $i18, $i19, $i20, $i22;
        sun.reflect.ClassFileAssembler r1, r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        short[] r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: sun.reflect.AccessorGenerator;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        r1 := @parameter2: sun.reflect.ClassFileAssembler;
        r2 := @parameter3: sun.reflect.ClassFileAssembler;
        r3 := @parameter4: short[];
        s2 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getLength()>();
        s3 = 0;
        if r2 == null goto label0;

        s3 = virtualinvoke r2.<sun.reflect.ClassFileAssembler: short getLength()>();
        $i6 = s3 % 8;
        if $i6 == 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal exception table");
        throw $r4;

     label0:
        $i7 = 12 + s2;
        i4 = $i7 + s3;
        i8 = s3 / 8;
        $r5 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r5.<sun.reflect.ClassFileAssembler: void emitShort(short)>(1);
        $r6 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r6.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $r7 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s9 = staticinvoke <sun.reflect.AccessorGenerator: short add(short,short)>(s0, 1);
        virtualinvoke $r7.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s9);
        if r3 != null goto label1;

        $r8 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r8.<sun.reflect.ClassFileAssembler: void emitShort(short)>(1);
        goto label2;

     label1:
        $r9 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r9.<sun.reflect.ClassFileAssembler: void emitShort(short)>(2);

     label2:
        $r10 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s10 = r0.<sun.reflect.AccessorGenerator: short codeIdx>;
        virtualinvoke $r10.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s10);
        $r11 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r11.<sun.reflect.ClassFileAssembler: void emitInt(int)>(i4);
        $r12 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s11 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getMaxStack()>();
        virtualinvoke $r12.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s11);
        $r13 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s12 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getMaxLocals()>();
        $i13 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $s12);
        $s14 = (short) $i13;
        virtualinvoke $r13.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s14);
        $r14 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r14.<sun.reflect.ClassFileAssembler: void emitInt(int)>(s2);
        $r15 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r15.<sun.reflect.ClassFileAssembler: void append(sun.reflect.ClassFileAssembler)>(r1);
        $r16 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s15 = (short) i8;
        virtualinvoke $r16.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s15);
        if r2 == null goto label3;

        $r17 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r17.<sun.reflect.ClassFileAssembler: void append(sun.reflect.ClassFileAssembler)>(r2);

     label3:
        $r18 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r18.<sun.reflect.ClassFileAssembler: void emitShort(short)>(0);
        if r3 == null goto label5;

        $r19 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s16 = r0.<sun.reflect.AccessorGenerator: short exceptionsIdx>;
        virtualinvoke $r19.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s16);
        $r20 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $i17 = lengthof r3;
        $i18 = 2 * $i17;
        $i19 = 2 + $i18;
        virtualinvoke $r20.<sun.reflect.ClassFileAssembler: void emitInt(int)>($i19);
        $r21 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $i20 = lengthof r3;
        $s21 = (short) $i20;
        virtualinvoke $r21.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s21);
        i5 = 0;

     label4:
        $i22 = lengthof r3;
        if i5 >= $i22 goto label5;

        $r22 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s23 = r3[i5];
        virtualinvoke $r22.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s23);
        i5 = i5 + 1;
        goto label4;

     label5:
        return;
    }

    protected short indexForPrimitiveType(java.lang.Class)
    {
        sun.reflect.AccessorGenerator r0;
        java.lang.Class r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7;
        java.lang.InternalError $r10;

        r0 := @this: sun.reflect.AccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r1 != $r2 goto label0;

        $s0 = r0.<sun.reflect.AccessorGenerator: short booleanIdx>;
        return $s0;

     label0:
        $r3 = <java.lang.Byte: java.lang.Class TYPE>;
        if r1 != $r3 goto label1;

        $s1 = r0.<sun.reflect.AccessorGenerator: short byteIdx>;
        return $s1;

     label1:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;
        if r1 != $r4 goto label2;

        $s2 = r0.<sun.reflect.AccessorGenerator: short characterIdx>;
        return $s2;

     label2:
        $r5 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r5 goto label3;

        $s3 = r0.<sun.reflect.AccessorGenerator: short doubleIdx>;
        return $s3;

     label3:
        $r6 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 != $r6 goto label4;

        $s4 = r0.<sun.reflect.AccessorGenerator: short floatIdx>;
        return $s4;

     label4:
        $r7 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 != $r7 goto label5;

        $s5 = r0.<sun.reflect.AccessorGenerator: short integerIdx>;
        return $s5;

     label5:
        $r8 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 != $r8 goto label6;

        $s6 = r0.<sun.reflect.AccessorGenerator: short longIdx>;
        return $s6;

     label6:
        $r9 = <java.lang.Short: java.lang.Class TYPE>;
        if r1 != $r9 goto label7;

        $s7 = r0.<sun.reflect.AccessorGenerator: short shortIdx>;
        return $s7;

     label7:
        $r10 = new java.lang.InternalError;
        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>("Should have found primitive type");
        throw $r10;
    }

    protected short ctorIndexForPrimitiveType(java.lang.Class)
    {
        sun.reflect.AccessorGenerator r0;
        java.lang.Class r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7;
        java.lang.InternalError $r10;

        r0 := @this: sun.reflect.AccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r1 != $r2 goto label0;

        $s0 = r0.<sun.reflect.AccessorGenerator: short booleanCtorIdx>;
        return $s0;

     label0:
        $r3 = <java.lang.Byte: java.lang.Class TYPE>;
        if r1 != $r3 goto label1;

        $s1 = r0.<sun.reflect.AccessorGenerator: short byteCtorIdx>;
        return $s1;

     label1:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;
        if r1 != $r4 goto label2;

        $s2 = r0.<sun.reflect.AccessorGenerator: short characterCtorIdx>;
        return $s2;

     label2:
        $r5 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r5 goto label3;

        $s3 = r0.<sun.reflect.AccessorGenerator: short doubleCtorIdx>;
        return $s3;

     label3:
        $r6 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 != $r6 goto label4;

        $s4 = r0.<sun.reflect.AccessorGenerator: short floatCtorIdx>;
        return $s4;

     label4:
        $r7 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 != $r7 goto label5;

        $s5 = r0.<sun.reflect.AccessorGenerator: short integerCtorIdx>;
        return $s5;

     label5:
        $r8 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 != $r8 goto label6;

        $s6 = r0.<sun.reflect.AccessorGenerator: short longCtorIdx>;
        return $s6;

     label6:
        $r9 = <java.lang.Short: java.lang.Class TYPE>;
        if r1 != $r9 goto label7;

        $s7 = r0.<sun.reflect.AccessorGenerator: short shortCtorIdx>;
        return $s7;

     label7:
        $r10 = new java.lang.InternalError;
        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>("Should have found primitive type");
        throw $r10;
    }

    protected static boolean canWidenTo(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();
        if $z0 != 0 goto label0;

        return 0;

     label0:
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r0 != $r2 goto label1;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r1 != $r3 goto label14;

        return 1;

     label1:
        $r4 = <java.lang.Byte: java.lang.Class TYPE>;
        if r0 != $r4 goto label3;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;
        if r1 == $r5 goto label2;

        $r6 = <java.lang.Short: java.lang.Class TYPE>;
        if r1 == $r6 goto label2;

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 == $r7 goto label2;

        $r8 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 == $r8 goto label2;

        $r9 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 == $r9 goto label2;

        $r10 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r10 goto label14;

     label2:
        return 1;

     label3:
        $r11 = <java.lang.Short: java.lang.Class TYPE>;
        if r0 != $r11 goto label5;

        $r12 = <java.lang.Short: java.lang.Class TYPE>;
        if r1 == $r12 goto label4;

        $r13 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 == $r13 goto label4;

        $r14 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 == $r14 goto label4;

        $r15 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 == $r15 goto label4;

        $r16 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r16 goto label14;

     label4:
        return 1;

     label5:
        $r17 = <java.lang.Character: java.lang.Class TYPE>;
        if r0 != $r17 goto label7;

        $r18 = <java.lang.Character: java.lang.Class TYPE>;
        if r1 == $r18 goto label6;

        $r19 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 == $r19 goto label6;

        $r20 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 == $r20 goto label6;

        $r21 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 == $r21 goto label6;

        $r22 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r22 goto label14;

     label6:
        return 1;

     label7:
        $r23 = <java.lang.Integer: java.lang.Class TYPE>;
        if r0 != $r23 goto label9;

        $r24 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 == $r24 goto label8;

        $r25 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 == $r25 goto label8;

        $r26 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 == $r26 goto label8;

        $r27 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r27 goto label14;

     label8:
        return 1;

     label9:
        $r28 = <java.lang.Long: java.lang.Class TYPE>;
        if r0 != $r28 goto label11;

        $r29 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 == $r29 goto label10;

        $r30 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 == $r30 goto label10;

        $r31 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r31 goto label14;

     label10:
        return 1;

     label11:
        $r32 = <java.lang.Float: java.lang.Class TYPE>;
        if r0 != $r32 goto label13;

        $r33 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 == $r33 goto label12;

        $r34 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r34 goto label14;

     label12:
        return 1;

     label13:
        $r35 = <java.lang.Double: java.lang.Class TYPE>;
        if r0 != $r35 goto label14;

        $r36 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r36 goto label14;

        return 1;

     label14:
        return 0;
    }

    protected static void emitWideningBytecodeForPrimitiveConversion(sun.reflect.ClassFileAssembler, java.lang.Class, java.lang.Class)
    {
        sun.reflect.ClassFileAssembler r0;
        java.lang.Class r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @parameter0: sun.reflect.ClassFileAssembler;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.Class;
        $r3 = <java.lang.Byte: java.lang.Class TYPE>;
        if r1 == $r3 goto label0;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;
        if r1 == $r4 goto label0;

        $r5 = <java.lang.Character: java.lang.Class TYPE>;
        if r1 == $r5 goto label0;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 != $r6 goto label3;

     label0:
        $r7 = <java.lang.Long: java.lang.Class TYPE>;
        if r2 != $r7 goto label1;

        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void opc_i2l()>();
        goto label6;

     label1:
        $r8 = <java.lang.Float: java.lang.Class TYPE>;
        if r2 != $r8 goto label2;

        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void opc_i2f()>();
        goto label6;

     label2:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;
        if r2 != $r9 goto label6;

        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void opc_i2d()>();
        goto label6;

     label3:
        $r10 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 != $r10 goto label5;

        $r11 = <java.lang.Float: java.lang.Class TYPE>;
        if r2 != $r11 goto label4;

        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void opc_l2f()>();
        goto label6;

     label4:
        $r12 = <java.lang.Double: java.lang.Class TYPE>;
        if r2 != $r12 goto label6;

        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void opc_l2d()>();
        goto label6;

     label5:
        $r13 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 != $r13 goto label6;

        $r14 = <java.lang.Double: java.lang.Class TYPE>;
        if r2 != $r14 goto label6;

        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void opc_f2d()>();

     label6:
        return;
    }

    protected short unboxingMethodForPrimitiveType(java.lang.Class)
    {
        sun.reflect.AccessorGenerator r0;
        java.lang.Class r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.StringBuilder $r3, $r12, $r14;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7;
        java.lang.InternalError $r11;
        java.lang.String $r13, $r15;

        r0 := @this: sun.reflect.AccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r1 != $r2 goto label0;

        $s0 = r0.<sun.reflect.AccessorGenerator: short booleanUnboxIdx>;
        return $s0;

     label0:
        $r4 = <java.lang.Byte: java.lang.Class TYPE>;
        if r1 != $r4 goto label1;

        $s1 = r0.<sun.reflect.AccessorGenerator: short byteUnboxIdx>;
        return $s1;

     label1:
        $r5 = <java.lang.Character: java.lang.Class TYPE>;
        if r1 != $r5 goto label2;

        $s2 = r0.<sun.reflect.AccessorGenerator: short characterUnboxIdx>;
        return $s2;

     label2:
        $r6 = <java.lang.Short: java.lang.Class TYPE>;
        if r1 != $r6 goto label3;

        $s3 = r0.<sun.reflect.AccessorGenerator: short shortUnboxIdx>;
        return $s3;

     label3:
        $r7 = <java.lang.Integer: java.lang.Class TYPE>;
        if r1 != $r7 goto label4;

        $s4 = r0.<sun.reflect.AccessorGenerator: short integerUnboxIdx>;
        return $s4;

     label4:
        $r8 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 != $r8 goto label5;

        $s5 = r0.<sun.reflect.AccessorGenerator: short longUnboxIdx>;
        return $s5;

     label5:
        $r9 = <java.lang.Float: java.lang.Class TYPE>;
        if r1 != $r9 goto label6;

        $s6 = r0.<sun.reflect.AccessorGenerator: short floatUnboxIdx>;
        return $s6;

     label6:
        $r10 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r10 goto label7;

        $s7 = r0.<sun.reflect.AccessorGenerator: short doubleUnboxIdx>;
        return $s7;

     label7:
        $r11 = new java.lang.InternalError;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal primitive type ");
        $r13 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.lang.InternalError: void <init>(java.lang.String)>($r15);
        throw $r11;
    }

    protected static boolean isPrimitive(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();
        if $z0 == 0 goto label0;

        $r1 = <java.lang.Void: java.lang.Class TYPE>;
        if r0 == $r1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    protected int typeSizeInStackSlots(java.lang.Class)
    {
        sun.reflect.AccessorGenerator r0;
        java.lang.Class r1, $r2, $r3, $r4;

        r0 := @this: sun.reflect.AccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        $r2 = <java.lang.Void: java.lang.Class TYPE>;
        if r1 != $r2 goto label0;

        return 0;

     label0:
        $r3 = <java.lang.Long: java.lang.Class TYPE>;
        if r1 == $r3 goto label1;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;
        if r1 != $r4 goto label2;

     label1:
        return 2;

     label2:
        return 1;
    }

    protected sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer()
    {
        sun.reflect.AccessorGenerator r0;
        sun.reflect.ClassFileAssembler $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        short $s0, $s1;

        r0 := @this: sun.reflect.AccessorGenerator;
        $r2 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer>;
        if $r2 != null goto label0;

        $r1 = new sun.reflect.ClassFileAssembler;
        specialinvoke $r1.<sun.reflect.ClassFileAssembler: void <init>()>();
        r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer> = $r1;
        $r3 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer>;
        $s0 = r0.<sun.reflect.AccessorGenerator: short illegalArgumentClass>;
        virtualinvoke $r3.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s0);
        $r4 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer>;
        virtualinvoke $r4.<sun.reflect.ClassFileAssembler: void opc_dup()>();
        $r5 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer>;
        $s1 = r0.<sun.reflect.AccessorGenerator: short illegalArgumentCtorIdx>;
        virtualinvoke $r5.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s1, 0, 0);
        $r6 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer>;
        virtualinvoke $r6.<sun.reflect.ClassFileAssembler: void opc_athrow()>();

     label0:
        $r7 = r0.<sun.reflect.AccessorGenerator: sun.reflect.ClassFileAssembler illegalArgumentCodeBuffer>;
        return $r7;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;
        java.lang.Class $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Class[] $r2;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <sun.reflect.AccessorGenerator: sun.misc.Unsafe unsafe> = $r0;
        $r2 = newarray (java.lang.Class)[8];
        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;
        $r2[0] = $r1;
        $r3 = <java.lang.Byte: java.lang.Class TYPE>;
        $r2[1] = $r3;
        $r4 = <java.lang.Character: java.lang.Class TYPE>;
        $r2[2] = $r4;
        $r5 = <java.lang.Short: java.lang.Class TYPE>;
        $r2[3] = $r5;
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;
        $r2[4] = $r6;
        $r7 = <java.lang.Long: java.lang.Class TYPE>;
        $r2[5] = $r7;
        $r8 = <java.lang.Float: java.lang.Class TYPE>;
        $r2[6] = $r8;
        $r9 = <java.lang.Double: java.lang.Class TYPE>;
        $r2[7] = $r9;
        <sun.reflect.AccessorGenerator: java.lang.Class[] primitiveTypes> = $r2;
        return;
    }
}
