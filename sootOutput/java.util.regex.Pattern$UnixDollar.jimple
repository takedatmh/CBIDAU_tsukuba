final class java.util.regex.Pattern$UnixDollar extends java.util.regex.Pattern$Node
{
    boolean multiline;

    void <init>(boolean)
    {
        java.util.regex.Pattern$UnixDollar r0;
        boolean z0;

        r0 := @this: java.util.regex.Pattern$UnixDollar;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$UnixDollar: boolean multiline> = z0;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$UnixDollar r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i3, $i4;
        java.lang.CharSequence r2;
        char c2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.regex.Pattern$Node $r3, $r4;

        r0 := @this: java.util.regex.Pattern$UnixDollar;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $z0 = r1.<java.util.regex.Matcher: boolean anchoringBounds>;
        if $z0 == 0 goto label0;

        $i3 = r1.<java.util.regex.Matcher: int 'to'>;
        goto label1;

     label0:
        $i3 = virtualinvoke r1.<java.util.regex.Matcher: int getTextLength()>();

     label1:
        i1 = $i3;
        if i0 >= i1 goto label4;

        c2 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i0);
        if c2 != 10 goto label3;

        $z1 = r0.<java.util.regex.Pattern$UnixDollar: boolean multiline>;
        if $z1 != 0 goto label2;

        $i4 = i1 - 1;
        if i0 == $i4 goto label2;

        return 0;

     label2:
        $z2 = r0.<java.util.regex.Pattern$UnixDollar: boolean multiline>;
        if $z2 == 0 goto label4;

        $r3 = r0.<java.util.regex.Pattern$UnixDollar: java.util.regex.Pattern$Node next>;
        $z3 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z3;

     label3:
        return 0;

     label4:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        r1.<java.util.regex.Matcher: boolean requireEnd> = 1;
        $r4 = r0.<java.util.regex.Pattern$UnixDollar: java.util.regex.Pattern$Node next>;
        $z4 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z4;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$UnixDollar r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Node $r2;
        boolean $z1;

        r0 := @this: java.util.regex.Pattern$UnixDollar;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $r2 = r0.<java.util.regex.Pattern$UnixDollar: java.util.regex.Pattern$Node next>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        $z1 = r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic>;
        return $z1;
    }
}
