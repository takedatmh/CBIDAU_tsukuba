public class java.util.concurrent.FutureTask extends java.lang.Object implements java.util.concurrent.RunnableFuture
{
    private volatile int state;
    private static final int NEW;
    private static final int COMPLETING;
    private static final int NORMAL;
    private static final int EXCEPTIONAL;
    private static final int CANCELLED;
    private static final int INTERRUPTING;
    private static final int INTERRUPTED;
    private java.util.concurrent.Callable callable;
    private java.lang.Object outcome;
    private volatile java.lang.Thread runner;
    private volatile java.util.concurrent.FutureTask$WaitNode waiters;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long stateOffset;
    private static final long runnerOffset;
    private static final long waitersOffset;

    private java.lang.Object report(int) throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask r0;
        int i0;
        java.lang.Object r1;
        java.util.concurrent.CancellationException $r2;
        java.util.concurrent.ExecutionException $r3;
        java.lang.Throwable $r4;

        r0 := @this: java.util.concurrent.FutureTask;
        i0 := @parameter0: int;
        r1 = r0.<java.util.concurrent.FutureTask: java.lang.Object outcome>;
        if i0 != 2 goto label0;

        return r1;

     label0:
        if i0 < 4 goto label1;

        $r2 = new java.util.concurrent.CancellationException;
        specialinvoke $r2.<java.util.concurrent.CancellationException: void <init>()>();
        throw $r2;

     label1:
        $r3 = new java.util.concurrent.ExecutionException;
        $r4 = (java.lang.Throwable) r1;
        specialinvoke $r3.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r4);
        throw $r3;
    }

    public void <init>(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask r0;
        java.util.concurrent.Callable r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.FutureTask;
        r1 := @parameter0: java.util.concurrent.Callable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = r1;
        r0.<java.util.concurrent.FutureTask: int state> = 0;
        return;
    }

    public void <init>(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.FutureTask r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.Callable $r3;

        r0 := @this: java.util.concurrent.FutureTask;
        r1 := @parameter0: java.lang.Runnable;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>(r1, r2);
        r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = $r3;
        r0.<java.util.concurrent.FutureTask: int state> = 0;
        return;
    }

    public boolean isCancelled()
    {
        java.util.concurrent.FutureTask r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;
        $i0 = r0.<java.util.concurrent.FutureTask: int state>;
        if $i0 < 4 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isDone()
    {
        java.util.concurrent.FutureTask r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;
        $i0 = r0.<java.util.concurrent.FutureTask: int state>;
        if $i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean cancel(boolean)
    {
        java.util.concurrent.FutureTask r0;
        boolean z0, $z1, $z2;
        long $l0, $l2, $l3;
        java.lang.Thread r1;
        int $i1;
        sun.misc.Unsafe $r2, $r3, $r4;

        r0 := @this: java.util.concurrent.FutureTask;
        z0 := @parameter0: boolean;
        $i1 = r0.<java.util.concurrent.FutureTask: int state>;
        if $i1 == 0 goto label0;

        return 0;

     label0:
        if z0 == 0 goto label3;

        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.FutureTask: long stateOffset>;
        $z1 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l0, 0, 5);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<java.util.concurrent.FutureTask: java.lang.Thread runner>;
        if r1 == null goto label2;

        virtualinvoke r1.<java.lang.Thread: void interrupt()>();

     label2:
        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l2 = <java.util.concurrent.FutureTask: long stateOffset>;
        virtualinvoke $r3.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l2, 6);
        goto label4;

     label3:
        $r4 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l3 = <java.util.concurrent.FutureTask: long stateOffset>;
        $z2 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l3, 0, 4);
        if $z2 != 0 goto label4;

        return 0;

     label4:
        specialinvoke r0.<java.util.concurrent.FutureTask: void finishCompletion()>();
        return 1;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.FutureTask;
        i0 = r0.<java.util.concurrent.FutureTask: int state>;
        if i0 > 1 goto label0;

        i0 = specialinvoke r0.<java.util.concurrent.FutureTask: int awaitDone(boolean,long)>(0, 0L);

     label0:
        $r1 = specialinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object report(int)>(i0);
        return $r1;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.FutureTask r0;
        long l0, $l2;
        java.util.concurrent.TimeUnit r1;
        int i1, $i3;
        java.lang.NullPointerException $r2;
        java.util.concurrent.TimeoutException $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.FutureTask;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        i1 = r0.<java.util.concurrent.FutureTask: int state>;
        if i1 > 1 goto label1;

        $l2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        $i3 = specialinvoke r0.<java.util.concurrent.FutureTask: int awaitDone(boolean,long)>(1, $l2);
        i1 = $i3;
        if $i3 > 1 goto label1;

        $r3 = new java.util.concurrent.TimeoutException;
        specialinvoke $r3.<java.util.concurrent.TimeoutException: void <init>()>();
        throw $r3;

     label1:
        $r4 = specialinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object report(int)>(i1);
        return $r4;
    }

    protected void done()
    {
        java.util.concurrent.FutureTask r0;

        r0 := @this: java.util.concurrent.FutureTask;
        return;
    }

    protected void set(java.lang.Object)
    {
        java.util.concurrent.FutureTask r0;
        java.lang.Object r1;
        sun.misc.Unsafe $r2, $r3;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;
        r1 := @parameter0: java.lang.Object;
        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.FutureTask: long stateOffset>;
        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l0, 0, 1);
        if $z0 == 0 goto label0;

        r0.<java.util.concurrent.FutureTask: java.lang.Object outcome> = r1;
        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l1 = <java.util.concurrent.FutureTask: long stateOffset>;
        virtualinvoke $r3.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l1, 2);
        specialinvoke r0.<java.util.concurrent.FutureTask: void finishCompletion()>();

     label0:
        return;
    }

    protected void setException(java.lang.Throwable)
    {
        java.util.concurrent.FutureTask r0;
        java.lang.Throwable r1;
        sun.misc.Unsafe $r2, $r3;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;
        r1 := @parameter0: java.lang.Throwable;
        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.FutureTask: long stateOffset>;
        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l0, 0, 1);
        if $z0 == 0 goto label0;

        r0.<java.util.concurrent.FutureTask: java.lang.Object outcome> = r1;
        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l1 = <java.util.concurrent.FutureTask: long stateOffset>;
        virtualinvoke $r3.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l1, 3);
        specialinvoke r0.<java.util.concurrent.FutureTask: void finishCompletion()>();

     label0:
        return;
    }

    public void run()
    {
        java.util.concurrent.FutureTask r0;
        long $l0;
        java.lang.Thread $r1;
        java.util.concurrent.Callable r2;
        java.lang.Object r3;
        boolean z0, $z1;
        java.lang.Throwable r4, r5, $r7, $r8;
        int i1, $i2, $i3, i4;
        sun.misc.Unsafe $r6;

        r0 := @this: java.util.concurrent.FutureTask;
        $i2 = r0.<java.util.concurrent.FutureTask: int state>;
        if $i2 != 0 goto label0;

        $r6 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.FutureTask: long runnerOffset>;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $z1 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, null, $r1);
        if $z1 != 0 goto label1;

     label0:
        return;

     label1:
        r2 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable>;
        if r2 == null goto label6;

        $i3 = r0.<java.util.concurrent.FutureTask: int state>;
        if $i3 != 0 goto label6;

     label2:
        r3 = interfaceinvoke r2.<java.util.concurrent.Callable: java.lang.Object call()>();
        z0 = 1;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        r4 = $r7;
        r3 = null;
        z0 = 0;
        virtualinvoke r0.<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>(r4);

     label5:
        if z0 == 0 goto label6;

        virtualinvoke r0.<java.util.concurrent.FutureTask: void set(java.lang.Object)>(r3);

     label6:
        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;
        i4 = r0.<java.util.concurrent.FutureTask: int state>;
        if i4 < 5 goto label7;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i4);

     label7:
        goto label12;

     label8:
        $r8 := @caughtexception;

     label9:
        r5 = $r8;

     label10:
        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;
        i1 = r0.<java.util.concurrent.FutureTask: int state>;
        if i1 < 5 goto label11;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i1);

     label11:
        throw r5;

     label12:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    protected boolean runAndReset()
    {
        java.util.concurrent.FutureTask r0;
        long $l0;
        java.lang.Thread $r1;
        boolean z0, $z1, $z2;
        int i1, $i2, i3, i4;
        java.util.concurrent.Callable r2;
        java.lang.Throwable r3, r4, $r7, $r8;
        sun.misc.Unsafe $r5;

        r0 := @this: java.util.concurrent.FutureTask;
        $i2 = r0.<java.util.concurrent.FutureTask: int state>;
        if $i2 != 0 goto label0;

        $r5 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.FutureTask: long runnerOffset>;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $z1 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, null, $r1);
        if $z1 != 0 goto label1;

     label0:
        return 0;

     label1:
        z0 = 0;
        i1 = r0.<java.util.concurrent.FutureTask: int state>;

     label2:
        r2 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable>;
        if r2 == null goto label6;

        if i1 != 0 goto label6;

     label3:
        interfaceinvoke r2.<java.util.concurrent.Callable: java.lang.Object call()>();
        z0 = 1;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;
        r3 = $r7;
        virtualinvoke r0.<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>(r3);

     label6:
        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;
        i3 = r0.<java.util.concurrent.FutureTask: int state>;
        if i3 < 5 goto label11;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i3);
        goto label11;

     label7:
        $r8 := @caughtexception;

     label8:
        r4 = $r8;

     label9:
        r0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;
        i4 = r0.<java.util.concurrent.FutureTask: int state>;
        if i4 < 5 goto label10;

        specialinvoke r0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(i4);

     label10:
        throw r4;

     label11:
        if z0 == 0 goto label12;

        if i3 != 0 goto label12;

        $z2 = 1;
        goto label13;

     label12:
        $z2 = 0;

     label13:
        return $z2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void handlePossibleCancellationInterrupt(int)
    {
        java.util.concurrent.FutureTask r0;
        int i0, $i1;

        r0 := @this: java.util.concurrent.FutureTask;
        i0 := @parameter0: int;
        if i0 != 5 goto label1;

     label0:
        $i1 = r0.<java.util.concurrent.FutureTask: int state>;
        if $i1 != 5 goto label1;

        staticinvoke <java.lang.Thread: void yield()>();
        goto label0;

     label1:
        return;
    }

    private void finishCompletion()
    {
        java.util.concurrent.FutureTask r0;
        java.util.concurrent.FutureTask$WaitNode r1, r3, $r4;
        long $l0;
        java.lang.Thread r2;
        sun.misc.Unsafe $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;

     label0:
        $r4 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;
        r1 = $r4;
        if $r4 == null goto label4;

        $r5 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.FutureTask: long waitersOffset>;
        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, null);
        if $z0 == 0 goto label0;

     label1:
        r2 = r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;
        if r2 == null goto label2;

        r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;
        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(r2);

     label2:
        r3 = r1.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next>;
        if r3 != null goto label3;

        goto label4;

     label3:
        r1.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = null;
        r1 = r3;
        goto label1;

     label4:
        virtualinvoke r0.<java.util.concurrent.FutureTask: void done()>();
        r0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = null;
        return;
    }

    private int awaitDone(boolean, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.FutureTask r0;
        boolean z0, z1, $z2;
        long l0, l1, $l3, $l4, $l5, $l6, l7;
        java.util.concurrent.FutureTask$WaitNode r1, $r2, $r4;
        int i2, $i9;
        java.lang.InterruptedException $r3;
        sun.misc.Unsafe $r5;
        byte $b8;

        r0 := @this: java.util.concurrent.FutureTask;
        z0 := @parameter0: boolean;
        l0 := @parameter1: long;
        if z0 == 0 goto label0;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();
        $l4 = $l3 + l0;
        goto label1;

     label0:
        $l4 = 0L;

     label1:
        l1 = $l4;
        r1 = null;
        z1 = 0;

     label2:
        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z2 == 0 goto label3;

        specialinvoke r0.<java.util.concurrent.FutureTask: void removeWaiter(java.util.concurrent.FutureTask$WaitNode)>(r1);
        $r3 = new java.lang.InterruptedException;
        specialinvoke $r3.<java.lang.InterruptedException: void <init>()>();
        throw $r3;

     label3:
        i2 = r0.<java.util.concurrent.FutureTask: int state>;
        if i2 <= 1 goto label5;

        if r1 == null goto label4;

        r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

     label4:
        return i2;

     label5:
        if i2 != 1 goto label6;

        staticinvoke <java.lang.Thread: void yield()>();
        goto label11;

     label6:
        if r1 != null goto label7;

        $r4 = new java.util.concurrent.FutureTask$WaitNode;
        specialinvoke $r4.<java.util.concurrent.FutureTask$WaitNode: void <init>()>();
        r1 = $r4;
        goto label11;

     label7:
        if z1 != 0 goto label8;

        $r5 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l5 = <java.util.concurrent.FutureTask: long waitersOffset>;
        $r2 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;
        r1.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = $r2;
        z1 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l5, $r2, r1);
        goto label11;

     label8:
        if z0 == 0 goto label10;

        $l6 = staticinvoke <java.lang.System: long nanoTime()>();
        l7 = l1 - $l6;
        $b8 = l7 cmp 0L;
        if $b8 > 0 goto label9;

        specialinvoke r0.<java.util.concurrent.FutureTask: void removeWaiter(java.util.concurrent.FutureTask$WaitNode)>(r1);
        $i9 = r0.<java.util.concurrent.FutureTask: int state>;
        return $i9;

     label9:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l7);
        goto label11;

     label10:
        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

     label11:
        goto label2;
    }

    private void removeWaiter(java.util.concurrent.FutureTask$WaitNode)
    {
        java.util.concurrent.FutureTask r0;
        java.util.concurrent.FutureTask$WaitNode r1, r2, r3, r4;
        long $l0;
        java.lang.Thread $r5, $r6;
        sun.misc.Unsafe $r7;
        boolean $z0;

        r0 := @this: java.util.concurrent.FutureTask;
        r1 := @parameter0: java.util.concurrent.FutureTask$WaitNode;
        if r1 == null goto label6;

        r1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

     label0:
        r2 = null;
        r3 = r0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;

     label1:
        if r3 == null goto label5;

        r4 = r3.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next>;
        $r5 = r3.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;
        if $r5 == null goto label2;

        r2 = r3;
        goto label4;

     label2:
        if r2 == null goto label3;

        r2.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = r4;
        $r6 = r2.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;
        if $r6 != null goto label4;

        goto label0;

     label3:
        $r7 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.FutureTask: long waitersOffset>;
        $z0 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r3, r4);
        if $z0 != 0 goto label4;

        goto label0;

     label4:
        r3 = r4;
        goto label1;

     label5:
        goto label6;

     label6:
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r2, $r4, $r6;
        java.lang.Class r1;
        java.lang.reflect.Field $r3, $r5, $r7;
        long $l0, $l1, $l2;
        java.lang.Exception $r8, r9;
        java.lang.Error $r10;

     label0:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE> = $r0;
        r1 = class "java/util/concurrent/FutureTask";
        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("state");
        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);
        <java.util.concurrent.FutureTask: long stateOffset> = $l0;
        $r4 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("runner");
        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);
        <java.util.concurrent.FutureTask: long runnerOffset> = $l1;
        $r6 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;
        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waiters");
        $l2 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);
        <java.util.concurrent.FutureTask: long waitersOffset> = $l2;

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.lang.Error;
        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>(r9);
        throw $r10;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
