public class java.text.DecimalFormatSymbols extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private char zeroDigit;
    private char groupingSeparator;
    private char decimalSeparator;
    private char perMill;
    private char percent;
    private char digit;
    private char patternSeparator;
    private java.lang.String infinity;
    private java.lang.String NaN;
    private char minusSign;
    private java.lang.String currencySymbol;
    private java.lang.String intlCurrencySymbol;
    private char monetarySeparator;
    private char exponential;
    private java.lang.String exponentialSeparator;
    private java.util.Locale locale;
    private transient java.util.Currency currency;
    static final long serialVersionUID;
    private static final int currentSerialVersion;
    private int serialVersionOnStream;
    private static final java.util.concurrent.ConcurrentHashMap cachedLocaleData;

    public void <init>()
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Locale$Category $r1;
        java.util.Locale $r2;

        r0 := @this: java.text.DecimalFormatSymbols;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.DecimalFormatSymbols: int serialVersionOnStream> = 3;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        specialinvoke r0.<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>($r2);
        return;
    }

    public void <init>(java.util.Locale)
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Locale r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.util.Locale;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.DecimalFormatSymbols: int serialVersionOnStream> = 3;
        specialinvoke r0.<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>(r1);
        return;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale[] $r1;

        r0 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/DecimalFormatSymbolsProvider");
        $r1 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Locale[] getAvailableLocales()>();
        return $r1;
    }

    public static final java.text.DecimalFormatSymbols getInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DecimalFormatSymbols $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>($r1);
        return $r2;
    }

    public static final java.text.DecimalFormatSymbols getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        sun.util.LocaleServiceProviderPool r1;
        java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter $r2;
        java.text.DecimalFormatSymbols r3, $r6;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.Locale;
        r1 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/DecimalFormatSymbolsProvider");
        $z0 = virtualinvoke r1.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label0;

        $r2 = staticinvoke <java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter: java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter access$000()>();
        $r4 = newarray (java.lang.Object)[0];
        $r5 = virtualinvoke r1.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>($r2, r0, $r4);
        r3 = (java.text.DecimalFormatSymbols) $r5;
        if r3 == null goto label0;

        return r3;

     label0:
        $r6 = new java.text.DecimalFormatSymbols;
        specialinvoke $r6.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(r0);
        return $r6;
    }

    public char getZeroDigit()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char zeroDigit>;
        return $c0;
    }

    public void setZeroDigit(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char zeroDigit> = c0;
        return;
    }

    public char getGroupingSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char groupingSeparator>;
        return $c0;
    }

    public void setGroupingSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char groupingSeparator> = c0;
        return;
    }

    public char getDecimalSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;
        return $c0;
    }

    public void setDecimalSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char decimalSeparator> = c0;
        return;
    }

    public char getPerMill()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char perMill>;
        return $c0;
    }

    public void setPerMill(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char perMill> = c0;
        return;
    }

    public char getPercent()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char percent>;
        return $c0;
    }

    public void setPercent(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char percent> = c0;
        return;
    }

    public char getDigit()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char digit>;
        return $c0;
    }

    public void setDigit(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char digit> = c0;
        return;
    }

    public char getPatternSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char patternSeparator>;
        return $c0;
    }

    public void setPatternSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char patternSeparator> = c0;
        return;
    }

    public java.lang.String getInfinity()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String infinity>;
        return $r1;
    }

    public void setInfinity(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.lang.String;
        r0.<java.text.DecimalFormatSymbols: java.lang.String infinity> = r1;
        return;
    }

    public java.lang.String getNaN()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String NaN>;
        return $r1;
    }

    public void setNaN(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.lang.String;
        r0.<java.text.DecimalFormatSymbols: java.lang.String NaN> = r1;
        return;
    }

    public char getMinusSign()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char minusSign>;
        return $c0;
    }

    public void setMinusSign(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char minusSign> = c0;
        return;
    }

    public java.lang.String getCurrencySymbol()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;
        return $r1;
    }

    public void setCurrencySymbol(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.lang.String;
        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = r1;
        return;
    }

    public java.lang.String getInternationalCurrencySymbol()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        return $r1;
    }

    public void setInternationalCurrencySymbol(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1, $r5;
        java.lang.IllegalArgumentException r2, $r6;
        java.util.Currency $r3, $r4;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.lang.String;
        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = r1;
        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = null;
        if r1 == null goto label3;

     label0:
        $r3 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>(r1);
        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r3;
        $r4 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;
        $r5 = virtualinvoke $r4.<java.util.Currency: java.lang.String getSymbol()>();
        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r5;

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;

     label3:
        return;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
    }

    public java.util.Currency getCurrency()
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Currency $r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        $r1 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;
        return $r1;
    }

    public void setCurrency(java.util.Currency)
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Currency r1;
        java.lang.NullPointerException $r2;
        java.lang.String $r3, $r5;
        java.util.Locale $r4;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.util.Currency;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = r1;
        $r3 = virtualinvoke r1.<java.util.Currency: java.lang.String getCurrencyCode()>();
        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = $r3;
        $r4 = r0.<java.text.DecimalFormatSymbols: java.util.Locale locale>;
        $r5 = virtualinvoke r1.<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>($r4);
        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r5;
        return;
    }

    public char getMonetaryDecimalSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char monetarySeparator>;
        return $c0;
    }

    public void setMonetaryDecimalSeparator(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char monetarySeparator> = c0;
        return;
    }

    char getExponentialSymbol()
    {
        java.text.DecimalFormatSymbols r0;
        char $c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        $c0 = r0.<java.text.DecimalFormatSymbols: char exponential>;
        return $c0;
    }

    public java.lang.String getExponentSeparator()
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DecimalFormatSymbols;
        $r1 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentialSeparator>;
        return $r1;
    }

    void setExponentialSymbol(char)
    {
        java.text.DecimalFormatSymbols r0;
        char c0;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 := @parameter0: char;
        r0.<java.text.DecimalFormatSymbols: char exponential> = c0;
        return;
    }

    public void setExponentSeparator(java.lang.String)
    {
        java.text.DecimalFormatSymbols r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.text.DecimalFormatSymbols: java.lang.String exponentialSeparator> = r1;
        return;
    }

    public java.lang.Object clone()
    {
        java.text.DecimalFormatSymbols r0, $r3;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r2;
        java.lang.InternalError $r5;

        r0 := @this: java.text.DecimalFormatSymbols;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.text.DecimalFormatSymbols) $r2;

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.InternalError;
        specialinvoke $r5.<java.lang.InternalError: void <init>()>();
        throw $r5;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.DecimalFormatSymbols r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10, $c11, $c12, $c13, $c14, $c15, $c16, $c17;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Currency $r13, $r14;
        java.util.Locale $r17, $r18;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        if r0 != r1 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 == $r4 goto label2;

        return 0;

     label2:
        r2 = (java.text.DecimalFormatSymbols) r1;
        $c0 = r0.<java.text.DecimalFormatSymbols: char zeroDigit>;
        $c1 = r2.<java.text.DecimalFormatSymbols: char zeroDigit>;
        if $c0 != $c1 goto label3;

        $c2 = r0.<java.text.DecimalFormatSymbols: char groupingSeparator>;
        $c3 = r2.<java.text.DecimalFormatSymbols: char groupingSeparator>;
        if $c2 != $c3 goto label3;

        $c4 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;
        $c5 = r2.<java.text.DecimalFormatSymbols: char decimalSeparator>;
        if $c4 != $c5 goto label3;

        $c6 = r0.<java.text.DecimalFormatSymbols: char percent>;
        $c7 = r2.<java.text.DecimalFormatSymbols: char percent>;
        if $c6 != $c7 goto label3;

        $c8 = r0.<java.text.DecimalFormatSymbols: char perMill>;
        $c9 = r2.<java.text.DecimalFormatSymbols: char perMill>;
        if $c8 != $c9 goto label3;

        $c10 = r0.<java.text.DecimalFormatSymbols: char digit>;
        $c11 = r2.<java.text.DecimalFormatSymbols: char digit>;
        if $c10 != $c11 goto label3;

        $c12 = r0.<java.text.DecimalFormatSymbols: char minusSign>;
        $c13 = r2.<java.text.DecimalFormatSymbols: char minusSign>;
        if $c12 != $c13 goto label3;

        $c14 = r0.<java.text.DecimalFormatSymbols: char patternSeparator>;
        $c15 = r2.<java.text.DecimalFormatSymbols: char patternSeparator>;
        if $c14 != $c15 goto label3;

        $r5 = r0.<java.text.DecimalFormatSymbols: java.lang.String infinity>;
        $r6 = r2.<java.text.DecimalFormatSymbols: java.lang.String infinity>;
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z0 == 0 goto label3;

        $r7 = r0.<java.text.DecimalFormatSymbols: java.lang.String NaN>;
        $r8 = r2.<java.text.DecimalFormatSymbols: java.lang.String NaN>;
        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);
        if $z1 == 0 goto label3;

        $r9 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;
        $r10 = r2.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;
        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);
        if $z2 == 0 goto label3;

        $r11 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        $r12 = r2.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);
        if $z3 == 0 goto label3;

        $r13 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;
        $r14 = r2.<java.text.DecimalFormatSymbols: java.util.Currency currency>;
        if $r13 != $r14 goto label3;

        $c16 = r0.<java.text.DecimalFormatSymbols: char monetarySeparator>;
        $c17 = r2.<java.text.DecimalFormatSymbols: char monetarySeparator>;
        if $c16 != $c17 goto label3;

        $r15 = r0.<java.text.DecimalFormatSymbols: java.lang.String exponentialSeparator>;
        $r16 = r2.<java.text.DecimalFormatSymbols: java.lang.String exponentialSeparator>;
        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);
        if $z4 == 0 goto label3;

        $r17 = r0.<java.text.DecimalFormatSymbols: java.util.Locale locale>;
        $r18 = r2.<java.text.DecimalFormatSymbols: java.util.Locale locale>;
        $z5 = virtualinvoke $r17.<java.util.Locale: boolean equals(java.lang.Object)>($r18);
        if $z5 == 0 goto label3;

        $z6 = 1;
        goto label4;

     label3:
        $z6 = 0;

     label4:
        return $z6;
    }

    public int hashCode()
    {
        java.text.DecimalFormatSymbols r0;
        char c0, $c2, $c5;
        int $i1, i3, $i4, i6;

        r0 := @this: java.text.DecimalFormatSymbols;
        c0 = r0.<java.text.DecimalFormatSymbols: char zeroDigit>;
        $i1 = c0 * 37;
        $c2 = r0.<java.text.DecimalFormatSymbols: char groupingSeparator>;
        i3 = $i1 + $c2;
        $i4 = i3 * 37;
        $c5 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;
        i6 = $i4 + $c5;
        return i6;
    }

    private void initialize(java.util.Locale)
    {
        java.text.DecimalFormatSymbols r0;
        java.util.Locale r1, r3, $r8;
        boolean z0, $z1, $z2;
        java.lang.Object[] r2;
        java.lang.String r4, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r32, $r35, $r37, $r39, $r40, $r41, $r42;
        java.util.ResourceBundle r5;
        java.util.concurrent.ConcurrentHashMap $r6, $r46;
        java.lang.Object $r7, $r10, $r33, $r34, $r36;
        java.lang.String[] $r9, $r11, r12;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9;
        java.util.Currency $r27, $r30, $r31, $r38, $r43;
        java.lang.IllegalArgumentException $r28, r29, $r44, r45;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.util.Locale;
        r0.<java.text.DecimalFormatSymbols: java.util.Locale locale> = r1;
        z0 = 0;
        $r6 = <java.text.DecimalFormatSymbols: java.util.concurrent.ConcurrentHashMap cachedLocaleData>;
        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.Object[]) $r7;
        if r2 != null goto label1;

        r3 = r1;
        r4 = virtualinvoke r1.<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>("nu");
        if r4 == null goto label0;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("thai");
        if $z1 == 0 goto label0;

        $r8 = new java.util.Locale;
        specialinvoke $r8.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("th", "TH", "TH");
        r3 = $r8;

     label0:
        r2 = newarray (java.lang.Object)[3];
        r5 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>(r3);
        $r9 = virtualinvoke r5.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("NumberElements");
        r2[0] = $r9;
        z0 = 1;

     label1:
        $r10 = r2[0];
        $r11 = (java.lang.String[]) $r10;
        r12 = (java.lang.String[]) $r11;
        $r13 = r12[0];
        $c0 = virtualinvoke $r13.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char decimalSeparator> = $c0;
        $r14 = r12[1];
        $c1 = virtualinvoke $r14.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char groupingSeparator> = $c1;
        $r15 = r12[2];
        $c2 = virtualinvoke $r15.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char patternSeparator> = $c2;
        $r16 = r12[3];
        $c3 = virtualinvoke $r16.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char percent> = $c3;
        $r17 = r12[4];
        $c4 = virtualinvoke $r17.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char zeroDigit> = $c4;
        $r18 = r12[5];
        $c5 = virtualinvoke $r18.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char digit> = $c5;
        $r19 = r12[6];
        $c6 = virtualinvoke $r19.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char minusSign> = $c6;
        $r20 = r12[7];
        $c7 = virtualinvoke $r20.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char exponential> = $c7;
        $r21 = r12[7];
        r0.<java.text.DecimalFormatSymbols: java.lang.String exponentialSeparator> = $r21;
        $r22 = r12[8];
        $c8 = virtualinvoke $r22.<java.lang.String: char charAt(int)>(0);
        r0.<java.text.DecimalFormatSymbols: char perMill> = $c8;
        $r23 = r12[9];
        r0.<java.text.DecimalFormatSymbols: java.lang.String infinity> = $r23;
        $r24 = r12[10];
        r0.<java.text.DecimalFormatSymbols: java.lang.String NaN> = $r24;
        $r25 = "";
        $r26 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();
        $z2 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);
        if $z2 != 0 goto label5;

     label2:
        $r27 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.util.Locale)>(r1);
        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r27;

     label3:
        goto label5;

     label4:
        $r28 := @caughtexception;
        r29 = $r28;

     label5:
        $r30 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;
        if $r30 == null goto label7;

        $r31 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;
        $r32 = virtualinvoke $r31.<java.util.Currency: java.lang.String getCurrencyCode()>();
        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = $r32;
        $r33 = r2[1];
        if $r33 == null goto label6;

        $r34 = r2[1];
        $r35 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        if $r34 != $r35 goto label6;

        $r36 = r2[2];
        $r37 = (java.lang.String) $r36;
        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r37;
        goto label12;

     label6:
        $r38 = r0.<java.text.DecimalFormatSymbols: java.util.Currency currency>;
        $r39 = virtualinvoke $r38.<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>(r1);
        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = $r39;
        $r40 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        r2[1] = $r40;
        $r41 = r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol>;
        r2[2] = $r41;
        z0 = 1;
        goto label12;

     label7:
        r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol> = "XXX";

     label8:
        $r42 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        $r43 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r42);
        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r43;

     label9:
        goto label11;

     label10:
        $r44 := @caughtexception;
        r45 = $r44;

     label11:
        r0.<java.text.DecimalFormatSymbols: java.lang.String currencySymbol> = "\u00a4";

     label12:
        $c9 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;
        r0.<java.text.DecimalFormatSymbols: char monetarySeparator> = $c9;
        if z0 == 0 goto label13;

        $r46 = <java.text.DecimalFormatSymbols: java.util.concurrent.ConcurrentHashMap cachedLocaleData>;
        virtualinvoke $r46.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

     label13:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.lang.IllegalArgumentException from label8 to label9 with label10;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.DecimalFormatSymbols r0;
        java.io.ObjectInputStream r1;
        java.lang.IllegalArgumentException r2, $r8;
        int $i0, $i2, $i3;
        char $c1, $c4;
        java.util.Locale $r3;
        java.lang.String $r4, $r5, $r6;
        java.util.Currency $r7;

        r0 := @this: java.text.DecimalFormatSymbols;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $i0 = r0.<java.text.DecimalFormatSymbols: int serialVersionOnStream>;
        if $i0 >= 1 goto label0;

        $c1 = r0.<java.text.DecimalFormatSymbols: char decimalSeparator>;
        r0.<java.text.DecimalFormatSymbols: char monetarySeparator> = $c1;
        r0.<java.text.DecimalFormatSymbols: char exponential> = 69;

     label0:
        $i2 = r0.<java.text.DecimalFormatSymbols: int serialVersionOnStream>;
        if $i2 >= 2 goto label1;

        $r3 = <java.util.Locale: java.util.Locale ROOT>;
        r0.<java.text.DecimalFormatSymbols: java.util.Locale locale> = $r3;

     label1:
        $i3 = r0.<java.text.DecimalFormatSymbols: int serialVersionOnStream>;
        if $i3 >= 3 goto label2;

        $c4 = r0.<java.text.DecimalFormatSymbols: char exponential>;
        $r4 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c4);
        r0.<java.text.DecimalFormatSymbols: java.lang.String exponentialSeparator> = $r4;

     label2:
        r0.<java.text.DecimalFormatSymbols: int serialVersionOnStream> = 3;
        $r5 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        if $r5 == null goto label6;

     label3:
        $r6 = r0.<java.text.DecimalFormatSymbols: java.lang.String intlCurrencySymbol>;
        $r7 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.lang.String)>($r6);
        r0.<java.text.DecimalFormatSymbols: java.util.Currency currency> = $r7;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;
        r2 = $r8;

     label6:
        return;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(3);
        <java.text.DecimalFormatSymbols: java.util.concurrent.ConcurrentHashMap cachedLocaleData> = $r0;
        return;
    }
}
