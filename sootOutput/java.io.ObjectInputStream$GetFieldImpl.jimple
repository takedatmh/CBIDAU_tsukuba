class java.io.ObjectInputStream$GetFieldImpl extends java.io.ObjectInputStream$GetField
{
    private final java.io.ObjectStreamClass desc;
    private final byte[] primVals;
    private final java.lang.Object[] objVals;
    private final int[] objHandles;
    final java.io.ObjectInputStream this$0;

    void <init>(java.io.ObjectInputStream, java.io.ObjectStreamClass)
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectStreamClass r2;
        int $i0, $i1, $i2;
        byte[] $r3;
        java.lang.Object[] $r4, $r5;
        int[] $r6;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 := @parameter1: java.io.ObjectStreamClass;
        r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0> = r1;
        specialinvoke r0.<java.io.ObjectInputStream$GetField: void <init>()>();
        r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectStreamClass desc> = r2;
        $i0 = virtualinvoke r2.<java.io.ObjectStreamClass: int getPrimDataSize()>();
        $r3 = newarray (byte)[$i0];
        r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals> = $r3;
        $i1 = virtualinvoke r2.<java.io.ObjectStreamClass: int getNumObjFields()>();
        $r4 = newarray (java.lang.Object)[$i1];
        r0.<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object[] objVals> = $r4;
        $r5 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object[] objVals>;
        $i2 = lengthof $r5;
        $r6 = newarray (int)[$i2];
        r0.<java.io.ObjectInputStream$GetFieldImpl: int[] objHandles> = $r6;
        return;
    }

    public java.io.ObjectStreamClass getObjectStreamClass()
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.io.ObjectStreamClass $r1;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        $r1 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectStreamClass desc>;
        return $r1;
    }

    public boolean defaulted(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        $i0 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, null);
        if $i0 >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean get(java.lang.String, boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.Class $r2;
        int i0;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;
        i0 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i0 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $z1 = staticinvoke <java.io.Bits: boolean getBoolean(byte[],int)>($r3, i0);
        goto label1;

     label0:
        $z1 = z0;

     label1:
        return $z1;
    }

    public byte get(java.lang.String, byte) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        byte b0, $b2;
        java.lang.Class $r2;
        int i1;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        b0 := @parameter1: byte;
        $r2 = <java.lang.Byte: java.lang.Class TYPE>;
        i1 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i1 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $b2 = $r3[i1];
        goto label1;

     label0:
        $b2 = b0;

     label1:
        return $b2;
    }

    public char get(java.lang.String, char) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        char c0, $c2;
        java.lang.Class $r2;
        int i1;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        c0 := @parameter1: char;
        $r2 = <java.lang.Character: java.lang.Class TYPE>;
        i1 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i1 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $c2 = staticinvoke <java.io.Bits: char getChar(byte[],int)>($r3, i1);
        goto label1;

     label0:
        $c2 = c0;

     label1:
        return $c2;
    }

    public short get(java.lang.String, short) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        short s0, $s2;
        java.lang.Class $r2;
        int i1;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        s0 := @parameter1: short;
        $r2 = <java.lang.Short: java.lang.Class TYPE>;
        i1 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i1 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $s2 = staticinvoke <java.io.Bits: short getShort(byte[],int)>($r3, i1);
        goto label1;

     label0:
        $s2 = s0;

     label1:
        return $s2;
    }

    public int get(java.lang.String, int) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        int i0, i1, $i2;
        java.lang.Class $r2;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = <java.lang.Integer: java.lang.Class TYPE>;
        i1 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i1 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $i2 = staticinvoke <java.io.Bits: int getInt(byte[],int)>($r3, i1);
        goto label1;

     label0:
        $i2 = i0;

     label1:
        return $i2;
    }

    public float get(java.lang.String, float) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        float f0, $f1;
        java.lang.Class $r2;
        int i0;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        f0 := @parameter1: float;
        $r2 = <java.lang.Float: java.lang.Class TYPE>;
        i0 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i0 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $f1 = staticinvoke <java.io.Bits: float getFloat(byte[],int)>($r3, i0);
        goto label1;

     label0:
        $f1 = f0;

     label1:
        return $f1;
    }

    public long get(java.lang.String, long) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        long l0, $l2;
        java.lang.Class $r2;
        int i1;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        l0 := @parameter1: long;
        $r2 = <java.lang.Long: java.lang.Class TYPE>;
        i1 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i1 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $l2 = staticinvoke <java.io.Bits: long getLong(byte[],int)>($r3, i1);
        goto label1;

     label0:
        $l2 = l0;

     label1:
        return $l2;
    }

    public double get(java.lang.String, double) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        double d0, $d1;
        java.lang.Class $r2;
        int i0;
        byte[] $r3;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        d0 := @parameter1: double;
        $r2 = <java.lang.Double: java.lang.Class TYPE>;
        i0 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, $r2);
        if i0 < 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $d1 = staticinvoke <java.io.Bits: double getDouble(byte[],int)>($r3, i0);
        goto label1;

     label0:
        $d1 = d0;

     label1:
        return $d1;
    }

    public java.lang.Object get(java.lang.String, java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1;
        java.lang.Object r2, $r11;
        int i0, i1, $i2;
        int[] $r3;
        java.io.ObjectInputStream $r4, $r6, $r7;
        java.io.ObjectInputStream$HandleTable $r5, $r8;
        java.lang.ClassNotFoundException $r9;
        java.lang.Object[] $r10;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        i0 = specialinvoke r0.<java.io.ObjectInputStream$GetFieldImpl: int getFieldOffset(java.lang.String,java.lang.Class)>(r1, class "java/lang/Object");
        if i0 < 0 goto label2;

        $r3 = r0.<java.io.ObjectInputStream$GetFieldImpl: int[] objHandles>;
        i1 = $r3[i0];
        $r4 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        $r5 = staticinvoke <java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable access$100(java.io.ObjectInputStream)>($r4);
        $r6 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        $i2 = staticinvoke <java.io.ObjectInputStream: int access$000(java.io.ObjectInputStream)>($r6);
        virtualinvoke $r5.<java.io.ObjectInputStream$HandleTable: void markDependency(int,int)>($i2, i1);
        $r7 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        $r8 = staticinvoke <java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable access$100(java.io.ObjectInputStream)>($r7);
        $r9 = virtualinvoke $r8.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>(i1);
        if $r9 != null goto label0;

        $r10 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object[] objVals>;
        $r11 = $r10[i0];
        goto label1;

     label0:
        $r11 = null;

     label1:
        return $r11;

     label2:
        return r2;
    }

    void readFields() throws java.io.IOException
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.io.ObjectStreamField[] r1;
        java.io.ObjectInputStream $r2, $r6, $r11, $r15, $r16;
        java.io.ObjectInputStream$BlockDataInputStream $r3;
        byte[] $r4, $r5;
        java.io.ObjectStreamClass $r7;
        java.lang.Object[] $r8, $r9, $r10;
        java.io.ObjectStreamField $r12;
        boolean $z0;
        java.lang.Object $r13;
        int[] $r14;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        $r2 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        $r3 = staticinvoke <java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream access$200(java.io.ObjectInputStream)>($r2);
        $r4 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $r5 = r0.<java.io.ObjectInputStream$GetFieldImpl: byte[] primVals>;
        $i3 = lengthof $r5;
        virtualinvoke $r3.<java.io.ObjectInputStream$BlockDataInputStream: void readFully(byte[],int,int,boolean)>($r4, 0, $i3, 0);
        $r6 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        i0 = staticinvoke <java.io.ObjectInputStream: int access$000(java.io.ObjectInputStream)>($r6);
        $r7 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectStreamClass desc>;
        r1 = virtualinvoke $r7.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields(boolean)>(0);
        $i4 = lengthof r1;
        $r8 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object[] objVals>;
        $i5 = lengthof $r8;
        i1 = $i4 - $i5;
        i2 = 0;

     label0:
        $r9 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object[] objVals>;
        $i6 = lengthof $r9;
        if i2 >= $i6 goto label1;

        $r10 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.lang.Object[] objVals>;
        $r11 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        $i7 = i1 + i2;
        $r12 = r1[$i7];
        $z0 = virtualinvoke $r12.<java.io.ObjectStreamField: boolean isUnshared()>();
        $r13 = staticinvoke <java.io.ObjectInputStream: java.lang.Object access$300(java.io.ObjectInputStream,boolean)>($r11, $z0);
        $r10[i2] = $r13;
        $r14 = r0.<java.io.ObjectInputStream$GetFieldImpl: int[] objHandles>;
        $r15 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        $i8 = staticinvoke <java.io.ObjectInputStream: int access$000(java.io.ObjectInputStream)>($r15);
        $r14[i2] = $i8;
        i2 = i2 + 1;
        goto label0;

     label1:
        $r16 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectInputStream this$0>;
        staticinvoke <java.io.ObjectInputStream: int access$002(java.io.ObjectInputStream,int)>($r16, i0);
        return;
    }

    private int getFieldOffset(java.lang.String, java.lang.Class)
    {
        java.io.ObjectInputStream$GetFieldImpl r0;
        java.lang.String r1, $r14;
        java.lang.Class r2;
        java.io.ObjectStreamField r3, $r7;
        java.io.ObjectStreamClass $r4, $r5, $r6;
        int $i0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;

        r0 := @this: java.io.ObjectInputStream$GetFieldImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Class;
        $r4 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectStreamClass desc>;
        r3 = virtualinvoke $r4.<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String,java.lang.Class)>(r1, r2);
        if r3 == null goto label0;

        $i0 = virtualinvoke r3.<java.io.ObjectStreamField: int getOffset()>();
        return $i0;

     label0:
        $r5 = r0.<java.io.ObjectInputStream$GetFieldImpl: java.io.ObjectStreamClass desc>;
        $r6 = virtualinvoke $r5.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getLocalDesc()>();
        $r7 = virtualinvoke $r6.<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String,java.lang.Class)>(r1, r2);
        if $r7 == null goto label1;

        return -1;

     label1:
        $r8 = new java.lang.IllegalArgumentException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no such field ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with type ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);
        throw $r8;
    }
}
