class java.util.regex.Pattern$CIBackRef extends java.util.regex.Pattern$Node
{
    int groupIndex;
    boolean doUnicodeCase;

    void <init>(int, boolean)
    {
        java.util.regex.Pattern$CIBackRef r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: java.util.regex.Pattern$CIBackRef;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        $i1 = i0 + i0;
        r0.<java.util.regex.Pattern$CIBackRef: int groupIndex> = $i1;
        r0.<java.util.regex.Pattern$CIBackRef: boolean doUnicodeCase> = z0;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$CIBackRef r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.CharSequence r2;
        int[] $r3, $r4;
        boolean $z0, $z1;
        java.util.regex.Pattern$Node $r5;

        r0 := @this: java.util.regex.Pattern$CIBackRef;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r1.<java.util.regex.Matcher: int[] groups>;
        $i10 = r0.<java.util.regex.Pattern$CIBackRef: int groupIndex>;
        i1 = $r3[$i10];
        $r4 = r1.<java.util.regex.Matcher: int[] groups>;
        $i11 = r0.<java.util.regex.Pattern$CIBackRef: int groupIndex>;
        $i12 = $i11 + 1;
        i2 = $r4[$i12];
        i3 = i2 - i1;
        if i1 >= 0 goto label0;

        return 0;

     label0:
        $i13 = i0 + i3;
        $i14 = r1.<java.util.regex.Matcher: int 'to'>;
        if $i13 <= $i14 goto label1;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label1:
        i4 = i0;
        i5 = 0;

     label2:
        if i5 >= i3 goto label6;

        i6 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r2, i4);
        i7 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r2, i1);
        if i6 == i7 goto label5;

        $z0 = r0.<java.util.regex.Pattern$CIBackRef: boolean doUnicodeCase>;
        if $z0 == 0 goto label4;

        i8 = staticinvoke <java.lang.Character: int toUpperCase(int)>(i6);
        i9 = staticinvoke <java.lang.Character: int toUpperCase(int)>(i7);
        if i8 == i9 goto label3;

        $i15 = staticinvoke <java.lang.Character: int toLowerCase(int)>(i8);
        $i16 = staticinvoke <java.lang.Character: int toLowerCase(int)>(i9);
        if $i15 == $i16 goto label3;

        return 0;

     label3:
        goto label5;

     label4:
        $i17 = staticinvoke <java.util.regex.ASCII: int toLower(int)>(i6);
        $i18 = staticinvoke <java.util.regex.ASCII: int toLower(int)>(i7);
        if $i17 == $i18 goto label5;

        return 0;

     label5:
        $i19 = staticinvoke <java.lang.Character: int charCount(int)>(i6);
        i4 = i4 + $i19;
        $i20 = staticinvoke <java.lang.Character: int charCount(int)>(i7);
        i1 = i1 + $i20;
        i5 = i5 + 1;
        goto label2;

     label6:
        $r5 = r0.<java.util.regex.Pattern$CIBackRef: java.util.regex.Pattern$Node next>;
        $i21 = i0 + i3;
        $z1 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i21, r2);
        return $z1;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$CIBackRef r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Node $r2;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$CIBackRef;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        $r2 = r0.<java.util.regex.Pattern$CIBackRef: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;
    }
}
