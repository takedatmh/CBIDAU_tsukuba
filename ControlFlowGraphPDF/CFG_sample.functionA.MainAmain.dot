digraph "Control_Flow_Graph" {
    "R_r0 := @parameter0: java.lang.String[]_[]"
    "C_$r1 = new sample.functionA.MethodsA_[r0]"
    "R_r0 := @parameter0: java.lang.String[]_[]"->"C_$r1 = new sample.functionA.MethodsA_[r0]";
    "R_specialinvoke $r1.<sample.functionA.MethodsA: void <init>()>()_[r0, $r1]"
    "C_$r1 = new sample.functionA.MethodsA_[r0]"->"R_specialinvoke $r1.<sample.functionA.MethodsA: void <init>()>()_[r0, $r1]";
    "U_r2 = $r1_[r0, $r1]"
    "R_specialinvoke $r1.<sample.functionA.MethodsA: void <init>()>()_[r0, $r1]"->"U_r2 = $r1_[r0, $r1]";
    "R_virtualinvoke r2.<sample.functionA.MethodsA: int method01(int,int)>(1, 20)_[r0, $r1, r2]"
    "U_r2 = $r1_[r0, $r1]"->"R_virtualinvoke r2.<sample.functionA.MethodsA: int method01(int,int)>(1, 20)_[r0, $r1, r2]";
    "R_$r4 := @caughtexception_[r0, $r1, r2]"
    "U_r2 = $r1_[r0, $r1]"->"R_$r4 := @caughtexception_[r0, $r1, r2]";
    "R_goto [?= return]_[r0, $r1, r2]"
    "R_virtualinvoke r2.<sample.functionA.MethodsA: int method01(int,int)>(1, 20)_[r0, $r1, r2]"->"R_goto [?= return]_[r0, $r1, r2]";
    "R_virtualinvoke r2.<sample.functionA.MethodsA: int method01(int,int)>(1, 20)_[r0, $r1, r2]"->"R_$r4 := @caughtexception_[r0, $r1, r2]";
    "R_return_[r0, $r1, r2]"
    "R_goto [?= return]_[r0, $r1, r2]"->"R_return_[r0, $r1, r2]";
    "U_r3 = $r4_[r0, $r1, r2, $r4]"
    "R_$r4 := @caughtexception_[r0, $r1, r2]"->"U_r3 = $r4_[r0, $r1, r2, $r4]";
    "R_virtualinvoke r3.<java.lang.Exception: void printStackTrace()>()_[r0, $r1, r2, $r4, r3]"
    "U_r3 = $r4_[r0, $r1, r2, $r4]"->"R_virtualinvoke r3.<java.lang.Exception: void printStackTrace()>()_[r0, $r1, r2, $r4, r3]";
    "R_virtualinvoke r3.<java.lang.Exception: void printStackTrace()>()_[r0, $r1, r2, $r4, r3]"->"R_return_[r0, $r1, r2]";
}
