digraph "Call_Graph" {
    "<simple.client.Client: void main(java.lang.String[])>"
    "<java.lang.Object: void <clinit>()>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.System: void <clinit>()>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"
    "<java.util.logging.Logger: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: void <clinit>()>";
    "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.SimpleFormatter: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.SimpleFormatter: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.Handler: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Handler: void <clinit>()>";
    "<java.util.logging.FileHandler: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.FileHandler: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"
    "<java.util.ArrayList: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.ArrayList: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.Level: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"
    "<java.io.File: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.File: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(char)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: java.lang.String valueOf(char)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: java.lang.String valueOf(char)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String delete()>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String create()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String read()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String update(java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String delete()>";
    "<java.io.PrintStream: void println(java.lang.String)>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<java.net.ProxySelector: void <clinit>()>"
    "<simple.client.Client: void <init>()>"
    "<java.net.ProxySelector: void <clinit>()>"->"<simple.client.Client: void <init>()>";
    "<sun.misc.Launcher: void <init>()>"
    "<sun.misc.Launcher: void <init>()>"->"<simple.client.Client: void <init>()>";
    "<sun.security.jca.Providers: java.security.Provider getSunProvider()>"
    "<sun.security.jca.Providers: java.security.Provider getSunProvider()>"->"<simple.client.Client: void <init>()>";
    "<sun.security.jca.Providers: java.security.Provider getSunProvider()>"->"<simple.client.Client: void <init>()>";
    "<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>"
    "<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.util.SecurityConstants$AWT: sun.security.util.PermissionFactory permissionFactory()>"
    "<sun.security.util.SecurityConstants$AWT: sun.security.util.PermissionFactory permissionFactory()>"->"<simple.client.Client: void <init>()>";
    "<sun.nio.ch.ThreadPool: java.util.concurrent.ThreadFactory getDefaultThreadPoolThreadFactory()>"
    "<sun.nio.ch.ThreadPool: java.util.concurrent.ThreadFactory getDefaultThreadPoolThreadFactory()>"->"<simple.client.Client: void <init>()>";
    "<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>"
    "<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<java.net.InetAddress: java.net.InetAddressImpl loadImpl(java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<java.lang.Object: void <init>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.util.logging.FileHandler: void <init>(java.lang.String)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.FileHandler: void <init>(java.lang.String)>";
    "<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>";
    "<java.util.logging.LogManager$RootLogger: void addHandler(java.util.logging.Handler)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.LogManager$RootLogger: void addHandler(java.util.logging.Handler)>";
    "<java.util.logging.SimpleFormatter: void <init>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.SimpleFormatter: void <init>()>";
    "<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>";
    "<java.lang.Throwable: void printStackTrace()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<java.util.ArrayList: void <init>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.io.File: void <init>(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<java.io.FileReader: void <init>(java.io.File)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.FileReader: void <init>(java.io.File)>";
    "<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.AbstractList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<java.lang.StringBuilder: void <init>(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.io.InputStreamReader: int read()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.InputStreamReader: int read()>";
    "<java.io.InputStreamReader: void close()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.InputStreamReader: void close()>";
    "<java.lang.Throwable: java.lang.String toString()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.SubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.SubList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>";
    "<java.util.ArrayList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.ArrayList: java.lang.Object remove(int)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>";
    "<java.util.Collections$CheckedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$CheckedList: java.lang.Object remove(int)>";
    "<java.util.Vector: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Vector: java.lang.Object remove(int)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>";
    "<java.util.LinkedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.LinkedList: java.lang.Object remove(int)>";
    "<java.util.AbstractList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.AbstractList: java.lang.Object remove(int)>";
    "<java.util.ArrayList$SubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.ArrayList$SubList: java.lang.Object remove(int)>";
    "<java.util.SubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.SubList: java.lang.Object remove(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>";
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.client.Client: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.util.logging.LogManager$1: java.lang.Object run()>"
    "<java.util.logging.LogManager$1: java.lang.Object run()>"->"<simple.client.Client: void <init>()>";
    "<java.util.logging.LogManager$1: java.lang.Object run()>"->"<simple.client.Client: void <init>()>";
    "<java.lang.Class: java.lang.Object newInstance()>"
    "<java.lang.Class: java.lang.Object newInstance()>"->"<simple.client.Client: void <init>()>";
    "<java.lang.Class: java.lang.Object newInstance()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>"
    "<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>"
    "<sun.security.x509.X509Key: java.security.PublicKey buildX509Key(sun.security.x509.AlgorithmId,sun.security.util.BitArray)>"->"<simple.client.Client: void <init>()>";
    "<java.lang.reflect.Proxy: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>"
    "<java.lang.reflect.Proxy: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>"->"<simple.client.Client: void <init>()>";
    "<java.lang.reflect.Proxy: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"
    "<java.util.ServiceLoader$LazyIterator: java.lang.Object next()>"->"<simple.client.Client: void <init>()>";
    "<sun.misc.Service$LazyIterator: java.lang.Object next()>"
    "<sun.misc.Service$LazyIterator: java.lang.Object next()>"->"<simple.client.Client: void <init>()>";
    "<java.net.DefaultDatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl(boolean)>"
    "<java.net.DefaultDatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl(boolean)>"->"<simple.client.Client: void <init>()>";
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"->"<simple.client.Client: void <init>()>";
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"->"<simple.client.Client: void <init>()>";
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>"
    "<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>"->"<simple.client.Client: void <init>()>";
    "<java.security.Policy: java.security.Policy getPolicyNoCheck()>"
    "<java.security.Policy: java.security.Policy getPolicyNoCheck()>"->"<simple.client.Client: void <init>()>";
    "<java.lang.SystemClassLoaderAction: java.lang.ClassLoader run()>"
    "<java.lang.SystemClassLoaderAction: java.lang.ClassLoader run()>"->"<simple.client.Client: void <init>()>";
    "<java.lang.SystemClassLoaderAction: java.lang.ClassLoader run()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>"
    "<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>"->"<simple.client.Client: void <init>()>";
    "<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>"
    "<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>"->"<simple.client.Client: void <init>()>";
    "<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.misc.Launcher$Factory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>"
    "<sun.misc.Launcher$Factory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder: java.nio.channels.spi.AsynchronousChannelProvider loadProviderFromProperty()>"
    "<java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder: java.nio.channels.spi.AsynchronousChannelProvider loadProviderFromProperty()>"->"<simple.client.Client: void <init>()>";
    "<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>"
    "<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>"->"<simple.client.Client: void <init>()>";
    "<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>"
    "<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>"->"<simple.client.Client: void <init>()>";
    "<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>"
    "<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>"->"<simple.client.Client: void <init>()>";
    "<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.nio.charset.Charset$ExtendedProviderHolder$1: java.nio.charset.spi.CharsetProvider run()>"
    "<java.nio.charset.Charset$ExtendedProviderHolder$1: java.nio.charset.spi.CharsetProvider run()>"->"<simple.client.Client: void <init>()>";
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"->"<simple.client.Client: void <init>()>";
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"->"<simple.client.Client: void <init>()>";
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.nio.cs.FastCharsetProvider: java.nio.charset.Charset lookup(java.lang.String)>"
    "<sun.nio.cs.FastCharsetProvider: java.nio.charset.Charset lookup(java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>"
    "<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<com.sun.naming.internal.ResourceManager: java.lang.Object getFactory(java.lang.String,java.util.Hashtable,javax.naming.Context,java.lang.String,java.lang.String)>"
    "<com.sun.naming.internal.ResourceManager: java.lang.Object getFactory(java.lang.String,java.util.Hashtable,javax.naming.Context,java.lang.String,java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>"
    "<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>"->"<simple.client.Client: void <init>()>";
    "<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>"
    "<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.util.logging.LogManager$4: java.lang.Object run()>"
    "<java.util.logging.LogManager$4: java.lang.Object run()>"->"<simple.client.Client: void <init>()>";
    "<java.security.Policy$2: java.security.Policy run()>"
    "<java.security.Policy$2: java.security.Policy run()>"->"<simple.client.Client: void <init>()>";
    "<java.util.logging.LogManager: void readConfiguration()>"
    "<java.util.logging.LogManager: void readConfiguration()>"->"<simple.client.Client: void <init>()>";
    "<java.util.logging.LogManager: void readConfiguration()>"->"<simple.client.Client: void <init>()>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.client.Client: void <init>()>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.client.Client: void <init>()>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.client.Client: void <init>()>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.client.Client: void <init>()>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.client.Client: void <init>()>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.client.Client: void <init>()>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.nio.fs.DefaultFileSystemProvider$1: java.nio.file.spi.FileSystemProvider run()>"
    "<sun.nio.fs.DefaultFileSystemProvider$1: java.nio.file.spi.FileSystemProvider run()>"->"<simple.client.Client: void <init>()>";
    "<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>"
    "<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>"->"<simple.client.Client: void <init>()>";
    "<java.nio.channels.spi.SelectorProvider: boolean loadProviderFromProperty()>"
    "<java.nio.channels.spi.SelectorProvider: boolean loadProviderFromProperty()>"->"<simple.client.Client: void <init>()>";
    "<sun.reflect.MethodAccessorGenerator$1: sun.reflect.MagicAccessorImpl run()>"
    "<sun.reflect.MethodAccessorGenerator$1: sun.reflect.MagicAccessorImpl run()>"->"<simple.client.Client: void <init>()>";
    "<sun.security.jca.ProviderConfig$2: java.security.Provider run()>"
    "<sun.security.jca.ProviderConfig$2: java.security.Provider run()>"->"<simple.client.Client: void <init>()>";
    "<sun.security.jca.ProviderConfig$2: java.security.Provider run()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.jca.ProviderConfig$2: java.security.Provider run()>"->"<simple.client.Client: void <init>()>";
    "<sun.net.www.protocol.http.HttpURLConnection$6: java.io.IOException run()>"
    "<sun.net.www.protocol.http.HttpURLConnection$6: java.io.IOException run()>"->"<simple.client.Client: void <init>()>";
    "<sun.net.www.protocol.http.HttpURLConnection$6: java.io.IOException run()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<javax.security.auth.Policy$2: javax.security.auth.Policy run()>"
    "<javax.security.auth.Policy$2: javax.security.auth.Policy run()>"->"<simple.client.Client: void <init>()>";
    "<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>"
    "<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>"->"<simple.client.Client: void <init>()>";
    "<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>"
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>"->"<simple.client.Client: void <init>()>";
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>"
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>"->"<simple.client.Client: void <init>()>";
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.io.ObjectStreamClass: java.lang.Object newInstance()>"
    "<java.io.ObjectStreamClass: java.lang.Object newInstance()>"->"<simple.client.Client: void <init>()>";
    "<java.io.ObjectStreamClass: java.lang.Object newInstance()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>"
    "<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.client.Client: void <init>()>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
}
