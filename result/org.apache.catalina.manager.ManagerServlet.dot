digraph "Call_Graph" {
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"
    "<java.util.logging.Logger: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: void <clinit>()>";
    "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<java.lang.Object: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.SimpleFormatter: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.SimpleFormatter: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.Handler: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Handler: void <clinit>()>";
    "<java.util.logging.FileHandler: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.FileHandler: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"
    "<java.util.ArrayList: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.ArrayList: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.Level: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"
    "<java.io.File: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.File: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(char)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: java.lang.String valueOf(char)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: java.lang.String valueOf(char)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String delete()>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.lang.Object: void <clinit>()>";
    "<org.apache.catalina.core.StandardHost: void startInternal()>"
    "<org.apache.catalina.core.StandardHost: void startInternal()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.connector.Connector: void <init>(java.lang.String)>"
    "<org.apache.catalina.connector.Connector: void <init>(java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.startup.Catalina: void addClusterRuleSet(org.apache.tomcat.util.digester.Digester,java.lang.String)>"
    "<org.apache.catalina.startup.Catalina: void addClusterRuleSet(org.apache.tomcat.util.digester.Digester,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.NamingContextListener: java.lang.Object constructEnvEntry(java.lang.String,java.lang.String)>"
    "<org.apache.catalina.core.NamingContextListener: java.lang.Object constructEnvEntry(java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.NamingContextListener: java.lang.Object constructEnvEntry(java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.loader.WebappLoader: org.apache.catalina.loader.WebappClassLoaderBase createClassLoader()>"
    "<org.apache.catalina.loader.WebappLoader: org.apache.catalina.loader.WebappClassLoaderBase createClassLoader()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.StandardContext: org.apache.catalina.util.CharsetMapper getCharsetMapper()>"
    "<org.apache.catalina.core.StandardContext: org.apache.catalina.util.CharsetMapper getCharsetMapper()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.StandardContext: org.apache.catalina.Wrapper createWrapper()>"
    "<org.apache.catalina.core.StandardContext: org.apache.catalina.Wrapper createWrapper()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.StandardContext: org.apache.catalina.Wrapper createWrapper()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.StandardContext: org.apache.catalina.Wrapper createWrapper()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.tomcat.util.compat.Jre7Compat: java.util.zip.GZIPOutputStream getFlushableGZipOutputStream(java.io.OutputStream)>"
    "<org.apache.tomcat.util.compat.Jre7Compat: java.util.zip.GZIPOutputStream getFlushableGZipOutputStream(java.io.OutputStream)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.tomcat.util.compat.Jre9Compat: java.util.jar.JarFile jarFileNewInstance(java.io.File)>"
    "<org.apache.tomcat.util.compat.Jre9Compat: java.util.jar.JarFile jarFileNewInstance(java.io.File)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.DefaultInstanceManager: java.lang.Object newInstance(java.lang.Class)>"
    "<org.apache.catalina.core.DefaultInstanceManager: java.lang.Object newInstance(java.lang.Class)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.DefaultInstanceManager: java.lang.Object newInstance(java.lang.String)>"
    "<org.apache.catalina.core.DefaultInstanceManager: java.lang.Object newInstance(java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<org.apache.catalina.core.DefaultInstanceManager: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>"
    "<org.apache.catalina.core.DefaultInstanceManager: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.awt.AWTKeyStroke: java.awt.AWTKeyStroke getCachedStroke(char,int,int,boolean)>"
    "<java.awt.AWTKeyStroke: java.awt.AWTKeyStroke getCachedStroke(char,int,int,boolean)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.awt.AWTKeyStroke: void registerSubclass(java.lang.Class)>"
    "<java.awt.AWTKeyStroke: void registerSubclass(java.lang.Class)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.Object convertFromString(java.lang.String,javax.management.openmbean.OpenType)>"
    "<javax.management.openmbean.OpenMBeanAttributeInfoSupport: java.lang.Object convertFromString(java.lang.String,javax.management.openmbean.OpenType)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.lang.reflect.Proxy: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>"
    "<java.lang.reflect.Proxy: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.lang.Object: void <init>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.util.logging.FileHandler: void <init>(java.lang.String)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.FileHandler: void <init>(java.lang.String)>";
    "<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>";
    "<java.util.logging.LogManager$RootLogger: void addHandler(java.util.logging.Handler)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.LogManager$RootLogger: void addHandler(java.util.logging.Handler)>";
    "<java.util.logging.SimpleFormatter: void <init>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.SimpleFormatter: void <init>()>";
    "<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>";
    "<java.lang.Throwable: void printStackTrace()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<java.util.ArrayList: void <init>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.io.File: void <init>(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<java.io.FileReader: void <init>(java.io.File)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.FileReader: void <init>(java.io.File)>";
    "<sun.awt.util.IdentityArrayList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<sun.awt.util.IdentityArrayList: boolean add(java.lang.Object)>";
    "<sun.awt.util.IdentityLinkedList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<sun.awt.util.IdentityLinkedList: boolean add(java.lang.Object)>";
    "<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.AbstractList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<javax.management.AttributeList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<javax.management.AttributeList: boolean add(java.lang.Object)>";
    "<java.lang.StringBuilder: void <init>(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.io.InputStreamReader: int read()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.InputStreamReader: int read()>";
    "<java.io.InputStreamReader: void close()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.InputStreamReader: void close()>";
    "<java.lang.Throwable: java.lang.String toString()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<sun.awt.util.IdentityArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<sun.awt.util.IdentityArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<sun.awt.util.IdentityLinkedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<sun.awt.util.IdentityLinkedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.SubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.SubList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>";
    "<javax.management.AttributeList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<javax.management.AttributeList: java.lang.Object set(int,java.lang.Object)>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<sun.awt.util.IdentityArrayList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<sun.awt.util.IdentityArrayList: java.lang.Object remove(int)>";
    "<sun.awt.util.IdentityLinkedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<sun.awt.util.IdentityLinkedList: java.lang.Object remove(int)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>";
    "<java.util.Vector: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Vector: java.lang.Object remove(int)>";
    "<java.util.Collections$CheckedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$CheckedList: java.lang.Object remove(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>";
    "<java.util.ArrayList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.ArrayList: java.lang.Object remove(int)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>";
    "<java.util.LinkedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.LinkedList: java.lang.Object remove(int)>";
    "<java.util.ArrayList$SubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.ArrayList$SubList: java.lang.Object remove(int)>";
    "<java.util.AbstractList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.AbstractList: java.lang.Object remove(int)>";
    "<java.util.SubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.SubList: java.lang.Object remove(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>";
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.lang.Class: java.lang.Object newInstance()>"
    "<java.lang.Class: java.lang.Object newInstance()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<javax.swing.UIDefaults$ProxyLazyValue$1: java.lang.Object run()>"
    "<javax.swing.UIDefaults$ProxyLazyValue$1: java.lang.Object run()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.font.FontScaler: sun.font.FontScaler getScaler(sun.font.Font2D,int,boolean,int)>"
    "<sun.font.FontScaler: sun.font.FontScaler getScaler(sun.font.Font2D,int,boolean,int)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>"
    "<sun.net.www.protocol.http.Negotiator: sun.net.www.protocol.http.Negotiator getNegotiator(sun.net.www.protocol.http.HttpCallerInfo)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>"
    "<sun.security.x509.OtherName: sun.security.x509.GeneralNameInterface getGNI(sun.security.util.ObjectIdentifier,byte[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>"
    "<java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.spi.FileSystemProvider getDefaultProvider()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.jca.ProviderConfig$2: java.security.Provider run()>"
    "<sun.security.jca.ProviderConfig$2: java.security.Provider run()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>"
    "<sun.security.x509.CRLExtensions: void parseExtension(sun.security.x509.Extension)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>"
    "<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>"
    "<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.net.www.protocol.http.HttpURLConnection$6: java.io.IOException run()>"
    "<sun.net.www.protocol.http.HttpURLConnection$6: java.io.IOException run()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.lang.SystemClassLoaderAction: java.lang.ClassLoader run()>"
    "<java.lang.SystemClassLoaderAction: java.lang.ClassLoader run()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.Provider$Service: java.lang.Object newInstanceGeneric(java.lang.Object)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.swing.SwingLazyValue: java.lang.Object createValue(javax.swing.UIDefaults)>"
    "<sun.swing.SwingLazyValue: java.lang.Object createValue(javax.swing.UIDefaults)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable)>"
    "<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable)>"
    "<sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>"
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.net.URL,java.net.PasswordAuthentication)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<javax.security.auth.login.LoginContext: void invoke(java.lang.String)>"
    "<javax.security.auth.login.LoginContext: void invoke(java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<javax.swing.JTable$GenericEditor: boolean stopCellEditing()>"
    "<javax.swing.JTable$GenericEditor: boolean stopCellEditing()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>"
    "<sun.security.provider.PolicyFile: void addPermissions(java.security.Permissions,java.security.CodeSource,java.security.Principal[],sun.security.provider.PolicyFile$PolicyEntry)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>"
    "<sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.AuthenticationInfo create(boolean,java.lang.String,int,java.net.PasswordAuthentication)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<java.io.ObjectStreamClass: java.lang.Object newInstance()>"
    "<java.io.ObjectStreamClass: java.lang.Object newInstance()>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: java.security.Permission getInstance(java.lang.String,java.lang.String,java.lang.String)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>"
    "<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<sun.security.provider.PolicyFile: void expandSelf(sun.security.provider.PolicyFile$SelfPermission,java.util.List,java.security.Principal[],java.security.Permissions)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: com.sun.jmx.mbeanserver.MXBeanLookup lookupNotNull(java.lang.Class)>"
    "<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$MXBeanRefMapping: com.sun.jmx.mbeanserver.MXBeanLookup lookupNotNull(java.lang.Class)>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>"
    "<com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory$CompositeBuilderViaConstructor: java.lang.Object fromCompositeData(javax.management.openmbean.CompositeData,java.lang.String[],com.sun.jmx.mbeanserver.MXBeanMapping[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
}
