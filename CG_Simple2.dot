digraph "Call_Graph" {
    "<simple.client.Client: void main(java.lang.String[])>"
    "<java.lang.Object: void <clinit>()>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.System: void <clinit>()>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String create()>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String create()>";
    "<simple.logic.Logic: java.lang.String read()>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String read()>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String update(java.lang.String)>";
    "<simple.logic.Logic: java.lang.String delete()>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<simple.logic.Logic: java.lang.String delete()>";
    "<java.io.PrintStream: void println(java.lang.String)>"
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<simple.client.Client: void main(java.lang.String[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<java.util.logging.Logger: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: void <clinit>()>";
    "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.SimpleFormatter: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.SimpleFormatter: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.Handler: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Handler: void <clinit>()>";
    "<java.util.logging.FileHandler: void <clinit>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.FileHandler: void <clinit>()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.ArrayList: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.logging.Level: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.File: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.File: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(char)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: java.lang.String valueOf(char)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: java.lang.String valueOf(char)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.String: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.logging.Level: void <clinit>()>";
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Object: void <init>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.util.logging.FileHandler: void <init>(java.lang.String)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.FileHandler: void <init>(java.lang.String)>";
    "<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>";
    "<java.util.logging.LogManager$RootLogger: void addHandler(java.util.logging.Handler)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.LogManager$RootLogger: void addHandler(java.util.logging.Handler)>";
    "<java.util.logging.SimpleFormatter: void <init>()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.SimpleFormatter: void <init>()>";
    "<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>";
    "<java.lang.Throwable: void printStackTrace()>"
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<simple.logic.Logic: void <init>(int,java.lang.String,java.util.List,java.lang.String)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<java.util.ArrayList: void <init>()>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>"
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String create()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.io.File: void <init>(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<java.io.FileReader: void <init>(java.io.File)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.FileReader: void <init>(java.io.File)>";
    "<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>";
    "<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.AbstractList: boolean add(java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<java.lang.StringBuilder: void <init>(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.io.InputStreamReader: int read()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.InputStreamReader: int read()>";
    "<java.io.InputStreamReader: void close()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.io.InputStreamReader: void close()>";
    "<java.lang.Throwable: java.lang.String toString()>"
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<simple.logic.Logic: java.lang.String read()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Vector: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Vector: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.ArrayList$SubList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.SubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.SubList: java.lang.Object set(int,java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>"
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object set(int,java.lang.Object)>";
    "<simple.logic.Logic: java.lang.String update(java.lang.String)>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>";
    "<java.util.Vector: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Vector: java.lang.Object remove(int)>";
    "<java.util.Collections$CheckedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$CheckedList: java.lang.Object remove(int)>";
    "<java.util.ArrayList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.ArrayList: java.lang.Object remove(int)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>";
    "<java.util.LinkedList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.LinkedList: java.lang.Object remove(int)>";
    "<java.util.ArrayList$SubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.ArrayList$SubList: java.lang.Object remove(int)>";
    "<java.util.AbstractList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.AbstractList: java.lang.Object remove(int)>";
    "<java.util.SubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.SubList: java.lang.Object remove(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>"
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>";
    "<simple.logic.Logic: java.lang.String delete()>"->"<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>";
}
